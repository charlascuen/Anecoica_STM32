
Anecoica_STM32.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ab4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002a20  08017cb8  08017cb8  00027cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0801a6d8  0801a6d8  0002a6d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0801a6e0  0801a6e0  0002a6e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0801a6e4  0801a6e4  0002a6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         000001a8  20000000  0801a6e8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          0000aa78  200001a8  0801a890  000301a8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000ac20  0801a890  0003ac20  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  000301a8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0004d7f3  00000000  00000000  000301d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000909a  00000000  00000000  0007d9cb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002380  00000000  00000000  00086a68  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000020e0  00000000  00000000  00088de8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003a7d1  00000000  00000000  0008aec8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00028dc0  00000000  00000000  000c5699  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00117d67  00000000  00000000  000ee459  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  002061c0  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00009838  00000000  00000000  0020623c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001a8 	.word	0x200001a8
 800021c:	00000000 	.word	0x00000000
 8000220:	08017c9c 	.word	0x08017c9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001ac 	.word	0x200001ac
 800023c:	08017c9c 	.word	0x08017c9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800041e:	f1a4 0401 	sub.w	r4, r4, #1
 8000422:	d1e9      	bne.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f092 0f00 	teq	r2, #0
 80005ca:	bf14      	ite	ne
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	4770      	bxeq	lr
 80005d2:	b530      	push	{r4, r5, lr}
 80005d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e0:	e720      	b.n	8000424 <__adddf3+0x138>
 80005e2:	bf00      	nop

080005e4 <__aeabi_ul2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f04f 0500 	mov.w	r5, #0
 80005f2:	e00a      	b.n	800060a <__aeabi_l2d+0x16>

080005f4 <__aeabi_l2d>:
 80005f4:	ea50 0201 	orrs.w	r2, r0, r1
 80005f8:	bf08      	it	eq
 80005fa:	4770      	bxeq	lr
 80005fc:	b530      	push	{r4, r5, lr}
 80005fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000602:	d502      	bpl.n	800060a <__aeabi_l2d+0x16>
 8000604:	4240      	negs	r0, r0
 8000606:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800060a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800060e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000612:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000616:	f43f aedc 	beq.w	80003d2 <__adddf3+0xe6>
 800061a:	f04f 0203 	mov.w	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000632:	f1c2 0320 	rsb	r3, r2, #32
 8000636:	fa00 fc03 	lsl.w	ip, r0, r3
 800063a:	fa20 f002 	lsr.w	r0, r0, r2
 800063e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000642:	ea40 000e 	orr.w	r0, r0, lr
 8000646:	fa21 f102 	lsr.w	r1, r1, r2
 800064a:	4414      	add	r4, r2
 800064c:	e6c1      	b.n	80003d2 <__adddf3+0xe6>
 800064e:	bf00      	nop

08000650 <__aeabi_dmul>:
 8000650:	b570      	push	{r4, r5, r6, lr}
 8000652:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000656:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800065a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800065e:	bf1d      	ittte	ne
 8000660:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000664:	ea94 0f0c 	teqne	r4, ip
 8000668:	ea95 0f0c 	teqne	r5, ip
 800066c:	f000 f8de 	bleq	800082c <__aeabi_dmul+0x1dc>
 8000670:	442c      	add	r4, r5
 8000672:	ea81 0603 	eor.w	r6, r1, r3
 8000676:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800067a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800067e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000682:	bf18      	it	ne
 8000684:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000688:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800068c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000690:	d038      	beq.n	8000704 <__aeabi_dmul+0xb4>
 8000692:	fba0 ce02 	umull	ip, lr, r0, r2
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800069e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006a6:	f04f 0600 	mov.w	r6, #0
 80006aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006ae:	f09c 0f00 	teq	ip, #0
 80006b2:	bf18      	it	ne
 80006b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006c4:	d204      	bcs.n	80006d0 <__aeabi_dmul+0x80>
 80006c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ca:	416d      	adcs	r5, r5
 80006cc:	eb46 0606 	adc.w	r6, r6, r6
 80006d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e8:	bf88      	it	hi
 80006ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006ee:	d81e      	bhi.n	800072e <__aeabi_dmul+0xde>
 80006f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006f4:	bf08      	it	eq
 80006f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006fa:	f150 0000 	adcs.w	r0, r0, #0
 80006fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000708:	ea46 0101 	orr.w	r1, r6, r1
 800070c:	ea40 0002 	orr.w	r0, r0, r2
 8000710:	ea81 0103 	eor.w	r1, r1, r3
 8000714:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000718:	bfc2      	ittt	gt
 800071a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800071e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000722:	bd70      	popgt	{r4, r5, r6, pc}
 8000724:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000728:	f04f 0e00 	mov.w	lr, #0
 800072c:	3c01      	subs	r4, #1
 800072e:	f300 80ab 	bgt.w	8000888 <__aeabi_dmul+0x238>
 8000732:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000736:	bfde      	ittt	le
 8000738:	2000      	movle	r0, #0
 800073a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800073e:	bd70      	pople	{r4, r5, r6, pc}
 8000740:	f1c4 0400 	rsb	r4, r4, #0
 8000744:	3c20      	subs	r4, #32
 8000746:	da35      	bge.n	80007b4 <__aeabi_dmul+0x164>
 8000748:	340c      	adds	r4, #12
 800074a:	dc1b      	bgt.n	8000784 <__aeabi_dmul+0x134>
 800074c:	f104 0414 	add.w	r4, r4, #20
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f305 	lsl.w	r3, r0, r5
 8000758:	fa20 f004 	lsr.w	r0, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000768:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800076c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000770:	fa21 f604 	lsr.w	r6, r1, r4
 8000774:	eb42 0106 	adc.w	r1, r2, r6
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f1c4 040c 	rsb	r4, r4, #12
 8000788:	f1c4 0520 	rsb	r5, r4, #32
 800078c:	fa00 f304 	lsl.w	r3, r0, r4
 8000790:	fa20 f005 	lsr.w	r0, r0, r5
 8000794:	fa01 f204 	lsl.w	r2, r1, r4
 8000798:	ea40 0002 	orr.w	r0, r0, r2
 800079c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007a4:	f141 0100 	adc.w	r1, r1, #0
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f1c4 0520 	rsb	r5, r4, #32
 80007b8:	fa00 f205 	lsl.w	r2, r0, r5
 80007bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c0:	fa20 f304 	lsr.w	r3, r0, r4
 80007c4:	fa01 f205 	lsl.w	r2, r1, r5
 80007c8:	ea43 0302 	orr.w	r3, r3, r2
 80007cc:	fa21 f004 	lsr.w	r0, r1, r4
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	fa21 f204 	lsr.w	r2, r1, r4
 80007d8:	ea20 0002 	bic.w	r0, r0, r2
 80007dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007e4:	bf08      	it	eq
 80007e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ea:	bd70      	pop	{r4, r5, r6, pc}
 80007ec:	f094 0f00 	teq	r4, #0
 80007f0:	d10f      	bne.n	8000812 <__aeabi_dmul+0x1c2>
 80007f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007f6:	0040      	lsls	r0, r0, #1
 80007f8:	eb41 0101 	adc.w	r1, r1, r1
 80007fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000800:	bf08      	it	eq
 8000802:	3c01      	subeq	r4, #1
 8000804:	d0f7      	beq.n	80007f6 <__aeabi_dmul+0x1a6>
 8000806:	ea41 0106 	orr.w	r1, r1, r6
 800080a:	f095 0f00 	teq	r5, #0
 800080e:	bf18      	it	ne
 8000810:	4770      	bxne	lr
 8000812:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000816:	0052      	lsls	r2, r2, #1
 8000818:	eb43 0303 	adc.w	r3, r3, r3
 800081c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000820:	bf08      	it	eq
 8000822:	3d01      	subeq	r5, #1
 8000824:	d0f7      	beq.n	8000816 <__aeabi_dmul+0x1c6>
 8000826:	ea43 0306 	orr.w	r3, r3, r6
 800082a:	4770      	bx	lr
 800082c:	ea94 0f0c 	teq	r4, ip
 8000830:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000834:	bf18      	it	ne
 8000836:	ea95 0f0c 	teqne	r5, ip
 800083a:	d00c      	beq.n	8000856 <__aeabi_dmul+0x206>
 800083c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000840:	bf18      	it	ne
 8000842:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000846:	d1d1      	bne.n	80007ec <__aeabi_dmul+0x19c>
 8000848:	ea81 0103 	eor.w	r1, r1, r3
 800084c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000850:	f04f 0000 	mov.w	r0, #0
 8000854:	bd70      	pop	{r4, r5, r6, pc}
 8000856:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800085a:	bf06      	itte	eq
 800085c:	4610      	moveq	r0, r2
 800085e:	4619      	moveq	r1, r3
 8000860:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000864:	d019      	beq.n	800089a <__aeabi_dmul+0x24a>
 8000866:	ea94 0f0c 	teq	r4, ip
 800086a:	d102      	bne.n	8000872 <__aeabi_dmul+0x222>
 800086c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000870:	d113      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000872:	ea95 0f0c 	teq	r5, ip
 8000876:	d105      	bne.n	8000884 <__aeabi_dmul+0x234>
 8000878:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800087c:	bf1c      	itt	ne
 800087e:	4610      	movne	r0, r2
 8000880:	4619      	movne	r1, r3
 8000882:	d10a      	bne.n	800089a <__aeabi_dmul+0x24a>
 8000884:	ea81 0103 	eor.w	r1, r1, r3
 8000888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800088c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000890:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000894:	f04f 0000 	mov.w	r0, #0
 8000898:	bd70      	pop	{r4, r5, r6, pc}
 800089a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800089e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008a2:	bd70      	pop	{r4, r5, r6, pc}

080008a4 <__aeabi_ddiv>:
 80008a4:	b570      	push	{r4, r5, r6, lr}
 80008a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008b2:	bf1d      	ittte	ne
 80008b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b8:	ea94 0f0c 	teqne	r4, ip
 80008bc:	ea95 0f0c 	teqne	r5, ip
 80008c0:	f000 f8a7 	bleq	8000a12 <__aeabi_ddiv+0x16e>
 80008c4:	eba4 0405 	sub.w	r4, r4, r5
 80008c8:	ea81 0e03 	eor.w	lr, r1, r3
 80008cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008d4:	f000 8088 	beq.w	80009e8 <__aeabi_ddiv+0x144>
 80008d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008fc:	429d      	cmp	r5, r3
 80008fe:	bf08      	it	eq
 8000900:	4296      	cmpeq	r6, r2
 8000902:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000906:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800090a:	d202      	bcs.n	8000912 <__aeabi_ddiv+0x6e>
 800090c:	085b      	lsrs	r3, r3, #1
 800090e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000912:	1ab6      	subs	r6, r6, r2
 8000914:	eb65 0503 	sbc.w	r5, r5, r3
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000922:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 000c 	orrcs.w	r0, r0, ip
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000980:	ea55 0e06 	orrs.w	lr, r5, r6
 8000984:	d018      	beq.n	80009b8 <__aeabi_ddiv+0x114>
 8000986:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800098a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800098e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000992:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000996:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800099a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800099e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009a2:	d1c0      	bne.n	8000926 <__aeabi_ddiv+0x82>
 80009a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a8:	d10b      	bne.n	80009c2 <__aeabi_ddiv+0x11e>
 80009aa:	ea41 0100 	orr.w	r1, r1, r0
 80009ae:	f04f 0000 	mov.w	r0, #0
 80009b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009b6:	e7b6      	b.n	8000926 <__aeabi_ddiv+0x82>
 80009b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009bc:	bf04      	itt	eq
 80009be:	4301      	orreq	r1, r0
 80009c0:	2000      	moveq	r0, #0
 80009c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009c6:	bf88      	it	hi
 80009c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009cc:	f63f aeaf 	bhi.w	800072e <__aeabi_dmul+0xde>
 80009d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009d4:	bf04      	itt	eq
 80009d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009de:	f150 0000 	adcs.w	r0, r0, #0
 80009e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009f4:	bfc2      	ittt	gt
 80009f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000a00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a04:	f04f 0e00 	mov.w	lr, #0
 8000a08:	3c01      	subs	r4, #1
 8000a0a:	e690      	b.n	800072e <__aeabi_dmul+0xde>
 8000a0c:	ea45 0e06 	orr.w	lr, r5, r6
 8000a10:	e68d      	b.n	800072e <__aeabi_dmul+0xde>
 8000a12:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a16:	ea94 0f0c 	teq	r4, ip
 8000a1a:	bf08      	it	eq
 8000a1c:	ea95 0f0c 	teqeq	r5, ip
 8000a20:	f43f af3b 	beq.w	800089a <__aeabi_dmul+0x24a>
 8000a24:	ea94 0f0c 	teq	r4, ip
 8000a28:	d10a      	bne.n	8000a40 <__aeabi_ddiv+0x19c>
 8000a2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a2e:	f47f af34 	bne.w	800089a <__aeabi_dmul+0x24a>
 8000a32:	ea95 0f0c 	teq	r5, ip
 8000a36:	f47f af25 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a3a:	4610      	mov	r0, r2
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	e72c      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a40:	ea95 0f0c 	teq	r5, ip
 8000a44:	d106      	bne.n	8000a54 <__aeabi_ddiv+0x1b0>
 8000a46:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a4a:	f43f aefd 	beq.w	8000848 <__aeabi_dmul+0x1f8>
 8000a4e:	4610      	mov	r0, r2
 8000a50:	4619      	mov	r1, r3
 8000a52:	e722      	b.n	800089a <__aeabi_dmul+0x24a>
 8000a54:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a58:	bf18      	it	ne
 8000a5a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a5e:	f47f aec5 	bne.w	80007ec <__aeabi_dmul+0x19c>
 8000a62:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a66:	f47f af0d 	bne.w	8000884 <__aeabi_dmul+0x234>
 8000a6a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a6e:	f47f aeeb 	bne.w	8000848 <__aeabi_dmul+0x1f8>
 8000a72:	e712      	b.n	800089a <__aeabi_dmul+0x24a>

08000a74 <__gedf2>:
 8000a74:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a78:	e006      	b.n	8000a88 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__ledf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	e002      	b.n	8000a88 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__cmpdf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	bf18      	it	ne
 8000a9a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a9e:	d01b      	beq.n	8000ad8 <__cmpdf2+0x54>
 8000aa0:	b001      	add	sp, #4
 8000aa2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aa6:	bf0c      	ite	eq
 8000aa8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aac:	ea91 0f03 	teqne	r1, r3
 8000ab0:	bf02      	ittt	eq
 8000ab2:	ea90 0f02 	teqeq	r0, r2
 8000ab6:	2000      	moveq	r0, #0
 8000ab8:	4770      	bxeq	lr
 8000aba:	f110 0f00 	cmn.w	r0, #0
 8000abe:	ea91 0f03 	teq	r1, r3
 8000ac2:	bf58      	it	pl
 8000ac4:	4299      	cmppl	r1, r3
 8000ac6:	bf08      	it	eq
 8000ac8:	4290      	cmpeq	r0, r2
 8000aca:	bf2c      	ite	cs
 8000acc:	17d8      	asrcs	r0, r3, #31
 8000ace:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ad2:	f040 0001 	orr.w	r0, r0, #1
 8000ad6:	4770      	bx	lr
 8000ad8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d102      	bne.n	8000ae8 <__cmpdf2+0x64>
 8000ae2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ae6:	d107      	bne.n	8000af8 <__cmpdf2+0x74>
 8000ae8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af0:	d1d6      	bne.n	8000aa0 <__cmpdf2+0x1c>
 8000af2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000af6:	d0d3      	beq.n	8000aa0 <__cmpdf2+0x1c>
 8000af8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdrcmple>:
 8000b00:	4684      	mov	ip, r0
 8000b02:	4610      	mov	r0, r2
 8000b04:	4662      	mov	r2, ip
 8000b06:	468c      	mov	ip, r1
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4663      	mov	r3, ip
 8000b0c:	e000      	b.n	8000b10 <__aeabi_cdcmpeq>
 8000b0e:	bf00      	nop

08000b10 <__aeabi_cdcmpeq>:
 8000b10:	b501      	push	{r0, lr}
 8000b12:	f7ff ffb7 	bl	8000a84 <__cmpdf2>
 8000b16:	2800      	cmp	r0, #0
 8000b18:	bf48      	it	mi
 8000b1a:	f110 0f00 	cmnmi.w	r0, #0
 8000b1e:	bd01      	pop	{r0, pc}

08000b20 <__aeabi_dcmpeq>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff fff4 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b28:	bf0c      	ite	eq
 8000b2a:	2001      	moveq	r0, #1
 8000b2c:	2000      	movne	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmplt>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffea 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b3c:	bf34      	ite	cc
 8000b3e:	2001      	movcc	r0, #1
 8000b40:	2000      	movcs	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmple>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffe0 	bl	8000b10 <__aeabi_cdcmpeq>
 8000b50:	bf94      	ite	ls
 8000b52:	2001      	movls	r0, #1
 8000b54:	2000      	movhi	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpge>:
 8000b5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b60:	f7ff ffce 	bl	8000b00 <__aeabi_cdrcmple>
 8000b64:	bf94      	ite	ls
 8000b66:	2001      	movls	r0, #1
 8000b68:	2000      	movhi	r0, #0
 8000b6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6e:	bf00      	nop

08000b70 <__aeabi_dcmpgt>:
 8000b70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b74:	f7ff ffc4 	bl	8000b00 <__aeabi_cdrcmple>
 8000b78:	bf34      	ite	cc
 8000b7a:	2001      	movcc	r0, #1
 8000b7c:	2000      	movcs	r0, #0
 8000b7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b82:	bf00      	nop

08000b84 <__aeabi_dcmpun>:
 8000b84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x10>
 8000b8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b92:	d10a      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000b94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b9c:	d102      	bne.n	8000ba4 <__aeabi_dcmpun+0x20>
 8000b9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ba2:	d102      	bne.n	8000baa <__aeabi_dcmpun+0x26>
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	f04f 0001 	mov.w	r0, #1
 8000bae:	4770      	bx	lr

08000bb0 <__aeabi_d2uiz>:
 8000bb0:	004a      	lsls	r2, r1, #1
 8000bb2:	d211      	bcs.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bb4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb8:	d211      	bcs.n	8000bde <__aeabi_d2uiz+0x2e>
 8000bba:	d50d      	bpl.n	8000bd8 <__aeabi_d2uiz+0x28>
 8000bbc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bc4:	d40e      	bmi.n	8000be4 <__aeabi_d2uiz+0x34>
 8000bc6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bce:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bd2:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d102      	bne.n	8000bea <__aeabi_d2uiz+0x3a>
 8000be4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be8:	4770      	bx	lr
 8000bea:	f04f 0000 	mov.w	r0, #0
 8000bee:	4770      	bx	lr

08000bf0 <__aeabi_d2f>:
 8000bf0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bf4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf8:	bf24      	itt	cs
 8000bfa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bfe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c02:	d90d      	bls.n	8000c20 <__aeabi_d2f+0x30>
 8000c04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c18:	bf08      	it	eq
 8000c1a:	f020 0001 	biceq.w	r0, r0, #1
 8000c1e:	4770      	bx	lr
 8000c20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c24:	d121      	bne.n	8000c6a <__aeabi_d2f+0x7a>
 8000c26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c2a:	bfbc      	itt	lt
 8000c2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c30:	4770      	bxlt	lr
 8000c32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c3a:	f1c2 0218 	rsb	r2, r2, #24
 8000c3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000c42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c46:	fa20 f002 	lsr.w	r0, r0, r2
 8000c4a:	bf18      	it	ne
 8000c4c:	f040 0001 	orrne.w	r0, r0, #1
 8000c50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c5c:	ea40 000c 	orr.w	r0, r0, ip
 8000c60:	fa23 f302 	lsr.w	r3, r3, r2
 8000c64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c68:	e7cc      	b.n	8000c04 <__aeabi_d2f+0x14>
 8000c6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c6e:	d107      	bne.n	8000c80 <__aeabi_d2f+0x90>
 8000c70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c74:	bf1e      	ittt	ne
 8000c76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c7e:	4770      	bxne	lr
 8000c80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop

08000c90 <__aeabi_uldivmod>:
 8000c90:	b953      	cbnz	r3, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c92:	b94a      	cbnz	r2, 8000ca8 <__aeabi_uldivmod+0x18>
 8000c94:	2900      	cmp	r1, #0
 8000c96:	bf08      	it	eq
 8000c98:	2800      	cmpeq	r0, #0
 8000c9a:	bf1c      	itt	ne
 8000c9c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000ca0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000ca4:	f000 b97a 	b.w	8000f9c <__aeabi_idiv0>
 8000ca8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb0:	f000 f806 	bl	8000cc0 <__udivmoddi4>
 8000cb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cbc:	b004      	add	sp, #16
 8000cbe:	4770      	bx	lr

08000cc0 <__udivmoddi4>:
 8000cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cc4:	468c      	mov	ip, r1
 8000cc6:	460d      	mov	r5, r1
 8000cc8:	4604      	mov	r4, r0
 8000cca:	9e08      	ldr	r6, [sp, #32]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d151      	bne.n	8000d74 <__udivmoddi4+0xb4>
 8000cd0:	428a      	cmp	r2, r1
 8000cd2:	4617      	mov	r7, r2
 8000cd4:	d96d      	bls.n	8000db2 <__udivmoddi4+0xf2>
 8000cd6:	fab2 fe82 	clz	lr, r2
 8000cda:	f1be 0f00 	cmp.w	lr, #0
 8000cde:	d00b      	beq.n	8000cf8 <__udivmoddi4+0x38>
 8000ce0:	f1ce 0c20 	rsb	ip, lr, #32
 8000ce4:	fa01 f50e 	lsl.w	r5, r1, lr
 8000ce8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000cec:	fa02 f70e 	lsl.w	r7, r2, lr
 8000cf0:	ea4c 0c05 	orr.w	ip, ip, r5
 8000cf4:	fa00 f40e 	lsl.w	r4, r0, lr
 8000cf8:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	fbbc f8fa 	udiv	r8, ip, sl
 8000d02:	fa1f f987 	uxth.w	r9, r7
 8000d06:	fb0a cc18 	mls	ip, sl, r8, ip
 8000d0a:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8000d0e:	fb08 f309 	mul.w	r3, r8, r9
 8000d12:	42ab      	cmp	r3, r5
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x6c>
 8000d16:	19ed      	adds	r5, r5, r7
 8000d18:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
 8000d1c:	f080 8123 	bcs.w	8000f66 <__udivmoddi4+0x2a6>
 8000d20:	42ab      	cmp	r3, r5
 8000d22:	f240 8120 	bls.w	8000f66 <__udivmoddi4+0x2a6>
 8000d26:	f1a8 0802 	sub.w	r8, r8, #2
 8000d2a:	443d      	add	r5, r7
 8000d2c:	1aed      	subs	r5, r5, r3
 8000d2e:	b2a4      	uxth	r4, r4
 8000d30:	fbb5 f0fa 	udiv	r0, r5, sl
 8000d34:	fb0a 5510 	mls	r5, sl, r0, r5
 8000d38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d3c:	fb00 f909 	mul.w	r9, r0, r9
 8000d40:	45a1      	cmp	r9, r4
 8000d42:	d909      	bls.n	8000d58 <__udivmoddi4+0x98>
 8000d44:	19e4      	adds	r4, r4, r7
 8000d46:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d4a:	f080 810a 	bcs.w	8000f62 <__udivmoddi4+0x2a2>
 8000d4e:	45a1      	cmp	r9, r4
 8000d50:	f240 8107 	bls.w	8000f62 <__udivmoddi4+0x2a2>
 8000d54:	3802      	subs	r0, #2
 8000d56:	443c      	add	r4, r7
 8000d58:	eba4 0409 	sub.w	r4, r4, r9
 8000d5c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d60:	2100      	movs	r1, #0
 8000d62:	2e00      	cmp	r6, #0
 8000d64:	d061      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000d66:	fa24 f40e 	lsr.w	r4, r4, lr
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	6034      	str	r4, [r6, #0]
 8000d6e:	6073      	str	r3, [r6, #4]
 8000d70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d74:	428b      	cmp	r3, r1
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0xc8>
 8000d78:	2e00      	cmp	r6, #0
 8000d7a:	d054      	beq.n	8000e26 <__udivmoddi4+0x166>
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	e886 0021 	stmia.w	r6, {r0, r5}
 8000d82:	4608      	mov	r0, r1
 8000d84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d88:	fab3 f183 	clz	r1, r3
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	f040 808e 	bne.w	8000eae <__udivmoddi4+0x1ee>
 8000d92:	42ab      	cmp	r3, r5
 8000d94:	d302      	bcc.n	8000d9c <__udivmoddi4+0xdc>
 8000d96:	4282      	cmp	r2, r0
 8000d98:	f200 80fa 	bhi.w	8000f90 <__udivmoddi4+0x2d0>
 8000d9c:	1a84      	subs	r4, r0, r2
 8000d9e:	eb65 0503 	sbc.w	r5, r5, r3
 8000da2:	2001      	movs	r0, #1
 8000da4:	46ac      	mov	ip, r5
 8000da6:	2e00      	cmp	r6, #0
 8000da8:	d03f      	beq.n	8000e2a <__udivmoddi4+0x16a>
 8000daa:	e886 1010 	stmia.w	r6, {r4, ip}
 8000dae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db2:	b912      	cbnz	r2, 8000dba <__udivmoddi4+0xfa>
 8000db4:	2701      	movs	r7, #1
 8000db6:	fbb7 f7f2 	udiv	r7, r7, r2
 8000dba:	fab7 fe87 	clz	lr, r7
 8000dbe:	f1be 0f00 	cmp.w	lr, #0
 8000dc2:	d134      	bne.n	8000e2e <__udivmoddi4+0x16e>
 8000dc4:	1beb      	subs	r3, r5, r7
 8000dc6:	0c3a      	lsrs	r2, r7, #16
 8000dc8:	fa1f fc87 	uxth.w	ip, r7
 8000dcc:	2101      	movs	r1, #1
 8000dce:	fbb3 f8f2 	udiv	r8, r3, r2
 8000dd2:	0c25      	lsrs	r5, r4, #16
 8000dd4:	fb02 3318 	mls	r3, r2, r8, r3
 8000dd8:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000ddc:	fb0c f308 	mul.w	r3, ip, r8
 8000de0:	42ab      	cmp	r3, r5
 8000de2:	d907      	bls.n	8000df4 <__udivmoddi4+0x134>
 8000de4:	19ed      	adds	r5, r5, r7
 8000de6:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 8000dea:	d202      	bcs.n	8000df2 <__udivmoddi4+0x132>
 8000dec:	42ab      	cmp	r3, r5
 8000dee:	f200 80d1 	bhi.w	8000f94 <__udivmoddi4+0x2d4>
 8000df2:	4680      	mov	r8, r0
 8000df4:	1aed      	subs	r5, r5, r3
 8000df6:	b2a3      	uxth	r3, r4
 8000df8:	fbb5 f0f2 	udiv	r0, r5, r2
 8000dfc:	fb02 5510 	mls	r5, r2, r0, r5
 8000e00:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000e04:	fb0c fc00 	mul.w	ip, ip, r0
 8000e08:	45a4      	cmp	ip, r4
 8000e0a:	d907      	bls.n	8000e1c <__udivmoddi4+0x15c>
 8000e0c:	19e4      	adds	r4, r4, r7
 8000e0e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x15a>
 8000e14:	45a4      	cmp	ip, r4
 8000e16:	f200 80b8 	bhi.w	8000f8a <__udivmoddi4+0x2ca>
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	eba4 040c 	sub.w	r4, r4, ip
 8000e20:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e24:	e79d      	b.n	8000d62 <__udivmoddi4+0xa2>
 8000e26:	4631      	mov	r1, r6
 8000e28:	4630      	mov	r0, r6
 8000e2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2e:	f1ce 0420 	rsb	r4, lr, #32
 8000e32:	fa05 f30e 	lsl.w	r3, r5, lr
 8000e36:	fa07 f70e 	lsl.w	r7, r7, lr
 8000e3a:	fa20 f804 	lsr.w	r8, r0, r4
 8000e3e:	0c3a      	lsrs	r2, r7, #16
 8000e40:	fa25 f404 	lsr.w	r4, r5, r4
 8000e44:	ea48 0803 	orr.w	r8, r8, r3
 8000e48:	fbb4 f1f2 	udiv	r1, r4, r2
 8000e4c:	ea4f 4518 	mov.w	r5, r8, lsr #16
 8000e50:	fb02 4411 	mls	r4, r2, r1, r4
 8000e54:	fa1f fc87 	uxth.w	ip, r7
 8000e58:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000e5c:	fb01 f30c 	mul.w	r3, r1, ip
 8000e60:	42ab      	cmp	r3, r5
 8000e62:	fa00 f40e 	lsl.w	r4, r0, lr
 8000e66:	d909      	bls.n	8000e7c <__udivmoddi4+0x1bc>
 8000e68:	19ed      	adds	r5, r5, r7
 8000e6a:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
 8000e6e:	f080 808a 	bcs.w	8000f86 <__udivmoddi4+0x2c6>
 8000e72:	42ab      	cmp	r3, r5
 8000e74:	f240 8087 	bls.w	8000f86 <__udivmoddi4+0x2c6>
 8000e78:	3902      	subs	r1, #2
 8000e7a:	443d      	add	r5, r7
 8000e7c:	1aeb      	subs	r3, r5, r3
 8000e7e:	fa1f f588 	uxth.w	r5, r8
 8000e82:	fbb3 f0f2 	udiv	r0, r3, r2
 8000e86:	fb02 3310 	mls	r3, r2, r0, r3
 8000e8a:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000e8e:	fb00 f30c 	mul.w	r3, r0, ip
 8000e92:	42ab      	cmp	r3, r5
 8000e94:	d907      	bls.n	8000ea6 <__udivmoddi4+0x1e6>
 8000e96:	19ed      	adds	r5, r5, r7
 8000e98:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e9c:	d26f      	bcs.n	8000f7e <__udivmoddi4+0x2be>
 8000e9e:	42ab      	cmp	r3, r5
 8000ea0:	d96d      	bls.n	8000f7e <__udivmoddi4+0x2be>
 8000ea2:	3802      	subs	r0, #2
 8000ea4:	443d      	add	r5, r7
 8000ea6:	1aeb      	subs	r3, r5, r3
 8000ea8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eac:	e78f      	b.n	8000dce <__udivmoddi4+0x10e>
 8000eae:	f1c1 0720 	rsb	r7, r1, #32
 8000eb2:	fa22 f807 	lsr.w	r8, r2, r7
 8000eb6:	408b      	lsls	r3, r1
 8000eb8:	fa05 f401 	lsl.w	r4, r5, r1
 8000ebc:	ea48 0303 	orr.w	r3, r8, r3
 8000ec0:	fa20 fe07 	lsr.w	lr, r0, r7
 8000ec4:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000ec8:	40fd      	lsrs	r5, r7
 8000eca:	ea4e 0e04 	orr.w	lr, lr, r4
 8000ece:	fbb5 f9fc 	udiv	r9, r5, ip
 8000ed2:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000ed6:	fb0c 5519 	mls	r5, ip, r9, r5
 8000eda:	fa1f f883 	uxth.w	r8, r3
 8000ede:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000ee2:	fb09 f408 	mul.w	r4, r9, r8
 8000ee6:	42ac      	cmp	r4, r5
 8000ee8:	fa02 f201 	lsl.w	r2, r2, r1
 8000eec:	fa00 fa01 	lsl.w	sl, r0, r1
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x244>
 8000ef2:	18ed      	adds	r5, r5, r3
 8000ef4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000ef8:	d243      	bcs.n	8000f82 <__udivmoddi4+0x2c2>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d941      	bls.n	8000f82 <__udivmoddi4+0x2c2>
 8000efe:	f1a9 0902 	sub.w	r9, r9, #2
 8000f02:	441d      	add	r5, r3
 8000f04:	1b2d      	subs	r5, r5, r4
 8000f06:	fa1f fe8e 	uxth.w	lr, lr
 8000f0a:	fbb5 f0fc 	udiv	r0, r5, ip
 8000f0e:	fb0c 5510 	mls	r5, ip, r0, r5
 8000f12:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000f16:	fb00 f808 	mul.w	r8, r0, r8
 8000f1a:	45a0      	cmp	r8, r4
 8000f1c:	d907      	bls.n	8000f2e <__udivmoddi4+0x26e>
 8000f1e:	18e4      	adds	r4, r4, r3
 8000f20:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
 8000f24:	d229      	bcs.n	8000f7a <__udivmoddi4+0x2ba>
 8000f26:	45a0      	cmp	r8, r4
 8000f28:	d927      	bls.n	8000f7a <__udivmoddi4+0x2ba>
 8000f2a:	3802      	subs	r0, #2
 8000f2c:	441c      	add	r4, r3
 8000f2e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f32:	eba4 0408 	sub.w	r4, r4, r8
 8000f36:	fba0 8902 	umull	r8, r9, r0, r2
 8000f3a:	454c      	cmp	r4, r9
 8000f3c:	46c6      	mov	lr, r8
 8000f3e:	464d      	mov	r5, r9
 8000f40:	d315      	bcc.n	8000f6e <__udivmoddi4+0x2ae>
 8000f42:	d012      	beq.n	8000f6a <__udivmoddi4+0x2aa>
 8000f44:	b156      	cbz	r6, 8000f5c <__udivmoddi4+0x29c>
 8000f46:	ebba 030e 	subs.w	r3, sl, lr
 8000f4a:	eb64 0405 	sbc.w	r4, r4, r5
 8000f4e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f52:	40cb      	lsrs	r3, r1
 8000f54:	431f      	orrs	r7, r3
 8000f56:	40cc      	lsrs	r4, r1
 8000f58:	6037      	str	r7, [r6, #0]
 8000f5a:	6074      	str	r4, [r6, #4]
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f62:	4618      	mov	r0, r3
 8000f64:	e6f8      	b.n	8000d58 <__udivmoddi4+0x98>
 8000f66:	4690      	mov	r8, r2
 8000f68:	e6e0      	b.n	8000d2c <__udivmoddi4+0x6c>
 8000f6a:	45c2      	cmp	sl, r8
 8000f6c:	d2ea      	bcs.n	8000f44 <__udivmoddi4+0x284>
 8000f6e:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f72:	eb69 0503 	sbc.w	r5, r9, r3
 8000f76:	3801      	subs	r0, #1
 8000f78:	e7e4      	b.n	8000f44 <__udivmoddi4+0x284>
 8000f7a:	4628      	mov	r0, r5
 8000f7c:	e7d7      	b.n	8000f2e <__udivmoddi4+0x26e>
 8000f7e:	4640      	mov	r0, r8
 8000f80:	e791      	b.n	8000ea6 <__udivmoddi4+0x1e6>
 8000f82:	4681      	mov	r9, r0
 8000f84:	e7be      	b.n	8000f04 <__udivmoddi4+0x244>
 8000f86:	4601      	mov	r1, r0
 8000f88:	e778      	b.n	8000e7c <__udivmoddi4+0x1bc>
 8000f8a:	3802      	subs	r0, #2
 8000f8c:	443c      	add	r4, r7
 8000f8e:	e745      	b.n	8000e1c <__udivmoddi4+0x15c>
 8000f90:	4608      	mov	r0, r1
 8000f92:	e708      	b.n	8000da6 <__udivmoddi4+0xe6>
 8000f94:	f1a8 0802 	sub.w	r8, r8, #2
 8000f98:	443d      	add	r5, r7
 8000f9a:	e72b      	b.n	8000df4 <__udivmoddi4+0x134>

08000f9c <__aeabi_idiv0>:
 8000f9c:	4770      	bx	lr
 8000f9e:	bf00      	nop

08000fa0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 fcbb 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	2000      	movs	r0, #0
 8000fac:	f014 f9ba 	bl	8015324 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f014 f96a 	bl	8015288 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
	...

08000fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc0:	4b06      	ldr	r3, [pc, #24]	; (8000fdc <HAL_IncTick+0x20>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4413      	add	r3, r2
 8000fcc:	4a04      	ldr	r2, [pc, #16]	; (8000fe0 <HAL_IncTick+0x24>)
 8000fce:	6013      	str	r3, [r2, #0]
}
 8000fd0:	bf00      	nop
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	20000000 	.word	0x20000000
 8000fe0:	200041a0 	.word	0x200041a0

08000fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe8:	4b03      	ldr	r3, [pc, #12]	; (8000ff8 <HAL_GetTick+0x14>)
 8000fea:	681b      	ldr	r3, [r3, #0]
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	200041a0 	.word	0x200041a0

08000ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b084      	sub	sp, #16
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001004:	f7ff ffee 	bl	8000fe4 <HAL_GetTick>
 8001008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001014:	d005      	beq.n	8001022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001016:	4b09      	ldr	r3, [pc, #36]	; (800103c <HAL_Delay+0x40>)
 8001018:	781b      	ldrb	r3, [r3, #0]
 800101a:	461a      	mov	r2, r3
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	4413      	add	r3, r2
 8001020:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001022:	bf00      	nop
 8001024:	f7ff ffde 	bl	8000fe4 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	1ad2      	subs	r2, r2, r3
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	429a      	cmp	r2, r3
 8001032:	d3f7      	bcc.n	8001024 <HAL_Delay+0x28>
  {
  }
}
 8001034:	bf00      	nop
 8001036:	3710      	adds	r7, #16
 8001038:	46bd      	mov	sp, r7
 800103a:	bd80      	pop	{r7, pc}
 800103c:	20000000 	.word	0x20000000

08001040 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001048:	2300      	movs	r3, #0
 800104a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d101      	bne.n	8001056 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
 8001054:	e031      	b.n	80010ba <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105a:	2b00      	cmp	r3, #0
 800105c:	d109      	bne.n	8001072 <HAL_ADC_Init+0x32>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106c:	6878      	ldr	r0, [r7, #4]
 800106e:	f011 fed9 	bl	8012e24 <HAL_ADC_MspInit>
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001076:	f003 0310 	and.w	r3, r3, #16
 800107a:	2b00      	cmp	r3, #0
 800107c:	d116      	bne.n	80010ac <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_ADC_Init+0x84>)
 8001084:	4013      	ands	r3, r2
 8001086:	f043 0202 	orr.w	r2, r3, #2
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800108e:	6878      	ldr	r0, [r7, #4]
 8001090:	f000 fa84 	bl	800159c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109e:	f023 0303 	bic.w	r3, r3, #3
 80010a2:	f043 0201 	orr.w	r2, r3, #1
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	641a      	str	r2, [r3, #64]	; 0x40
 80010aa:	e001      	b.n	80010b0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3710      	adds	r7, #16
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	ffffeefd 	.word	0xffffeefd

080010c8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b085      	sub	sp, #20
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010da:	2b01      	cmp	r3, #1
 80010dc:	d101      	bne.n	80010e2 <HAL_ADC_Start+0x1a>
 80010de:	2302      	movs	r3, #2
 80010e0:	e085      	b.n	80011ee <HAL_ADC_Start+0x126>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2201      	movs	r2, #1
 80010e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	689b      	ldr	r3, [r3, #8]
 80010f0:	f003 0301 	and.w	r3, r3, #1
 80010f4:	2b01      	cmp	r3, #1
 80010f6:	d018      	beq.n	800112a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	6812      	ldr	r2, [r2, #0]
 8001100:	6892      	ldr	r2, [r2, #8]
 8001102:	f042 0201 	orr.w	r2, r2, #1
 8001106:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001108:	4b3c      	ldr	r3, [pc, #240]	; (80011fc <HAL_ADC_Start+0x134>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a3c      	ldr	r2, [pc, #240]	; (8001200 <HAL_ADC_Start+0x138>)
 800110e:	fba2 2303 	umull	r2, r3, r2, r3
 8001112:	0c9a      	lsrs	r2, r3, #18
 8001114:	4613      	mov	r3, r2
 8001116:	005b      	lsls	r3, r3, #1
 8001118:	4413      	add	r3, r2
 800111a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800111c:	e002      	b.n	8001124 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	3b01      	subs	r3, #1
 8001122:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d1f9      	bne.n	800111e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b00      	cmp	r3, #0
 8001136:	d059      	beq.n	80011ec <HAL_ADC_Start+0x124>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800113c:	4b31      	ldr	r3, [pc, #196]	; (8001204 <HAL_ADC_Start+0x13c>)
 800113e:	4013      	ands	r3, r2
 8001140:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001152:	2b00      	cmp	r3, #0
 8001154:	d007      	beq.n	8001166 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800115e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <HAL_ADC_Start+0xb8>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f023 0206 	bic.w	r2, r3, #6
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	645a      	str	r2, [r3, #68]	; 0x44
 800117e:	e002      	b.n	8001186 <HAL_ADC_Start+0xbe>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2200      	movs	r2, #0
 8001184:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2200      	movs	r2, #0
 800118a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001196:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_ADC_Start+0x140>)
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 031f 	and.w	r3, r3, #31
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10f      	bne.n	80011c4 <HAL_ADC_Start+0xfc>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689b      	ldr	r3, [r3, #8]
 80011aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11c      	bne.n	80011ec <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	687a      	ldr	r2, [r7, #4]
 80011b8:	6812      	ldr	r2, [r2, #0]
 80011ba:	6892      	ldr	r2, [r2, #8]
 80011bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	e013      	b.n	80011ec <HAL_ADC_Start+0x124>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4a10      	ldr	r2, [pc, #64]	; (800120c <HAL_ADC_Start+0x144>)
 80011ca:	4293      	cmp	r3, r2
 80011cc:	d10e      	bne.n	80011ec <HAL_ADC_Start+0x124>
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	689b      	ldr	r3, [r3, #8]
 80011d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d107      	bne.n	80011ec <HAL_ADC_Start+0x124>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	6812      	ldr	r2, [r2, #0]
 80011e4:	6892      	ldr	r2, [r2, #8]
 80011e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011ea:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80011ec:	2300      	movs	r3, #0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3714      	adds	r7, #20
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	20000118 	.word	0x20000118
 8001200:	431bde83 	.word	0x431bde83
 8001204:	fffff8fe 	.word	0xfffff8fe
 8001208:	40012300 	.word	0x40012300
 800120c:	40012000 	.word	0x40012000

08001210 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001228:	2b00      	cmp	r3, #0
 800122a:	d012      	beq.n	8001252 <HAL_ADC_PollForConversion+0x42>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689b      	ldr	r3, [r3, #8]
 8001232:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001236:	2b00      	cmp	r3, #0
 8001238:	d00b      	beq.n	8001252 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123e:	f043 0220 	orr.w	r2, r3, #32
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2200      	movs	r2, #0
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800124e:	2301      	movs	r3, #1
 8001250:	e05c      	b.n	800130c <HAL_ADC_PollForConversion+0xfc>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001252:	f7ff fec7 	bl	8000fe4 <HAL_GetTick>
 8001256:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001258:	e01a      	b.n	8001290 <HAL_ADC_PollForConversion+0x80>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001260:	d016      	beq.n	8001290 <HAL_ADC_PollForConversion+0x80>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d007      	beq.n	8001278 <HAL_ADC_PollForConversion+0x68>
 8001268:	f7ff febc 	bl	8000fe4 <HAL_GetTick>
 800126c:	4602      	mov	r2, r0
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	1ad2      	subs	r2, r2, r3
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	429a      	cmp	r2, r3
 8001276:	d90b      	bls.n	8001290 <HAL_ADC_PollForConversion+0x80>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800127c:	f043 0204 	orr.w	r2, r3, #4
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	2200      	movs	r2, #0
 8001288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 800128c:	2303      	movs	r3, #3
 800128e:	e03d      	b.n	800130c <HAL_ADC_PollForConversion+0xfc>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 0302 	and.w	r3, r3, #2
 800129a:	2b02      	cmp	r3, #2
 800129c:	d1dd      	bne.n	800125a <HAL_ADC_PollForConversion+0x4a>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f06f 0212 	mvn.w	r2, #18
 80012a6:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d123      	bne.n	800130a <HAL_ADC_PollForConversion+0xfa>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d11f      	bne.n	800130a <HAL_ADC_PollForConversion+0xfa>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012d0:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d006      	beq.n	80012e6 <HAL_ADC_PollForConversion+0xd6>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d111      	bne.n	800130a <HAL_ADC_PollForConversion+0xfa>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d105      	bne.n	800130a <HAL_ADC_PollForConversion+0xfa>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001302:	f043 0201 	orr.w	r2, r3, #1
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800130a:	2300      	movs	r3, #0
}
 800130c:	4618      	mov	r0, r3
 800130e:	3710      	adds	r7, #16
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}

08001314 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001322:	4618      	mov	r0, r3
 8001324:	370c      	adds	r7, #12
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr
	...

08001330 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001330:	b490      	push	{r4, r7}
 8001332:	b084      	sub	sp, #16
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001344:	2b01      	cmp	r3, #1
 8001346:	d101      	bne.n	800134c <HAL_ADC_ConfigChannel+0x1c>
 8001348:	2302      	movs	r3, #2
 800134a:	e117      	b.n	800157c <HAL_ADC_ConfigChannel+0x24c>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2201      	movs	r2, #1
 8001350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
			
	/* if ADC_Channel_10 ... ADC_Channel_18 is selected */
	if (sConfig->Channel > ADC_CHANNEL_9)
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b09      	cmp	r3, #9
 800135a:	d936      	bls.n	80013ca <HAL_ADC_ConfigChannel+0x9a>
	{
		/* Clear the old sample time */
		hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681a      	ldr	r2, [r3, #0]
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68d9      	ldr	r1, [r3, #12]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	b29b      	uxth	r3, r3
 800136c:	4618      	mov	r0, r3
 800136e:	4603      	mov	r3, r0
 8001370:	005b      	lsls	r3, r3, #1
 8001372:	4403      	add	r3, r0
 8001374:	3b1e      	subs	r3, #30
 8001376:	2007      	movs	r0, #7
 8001378:	fa00 f303 	lsl.w	r3, r0, r3
 800137c:	43db      	mvns	r3, r3
 800137e:	400b      	ands	r3, r1
 8001380:	60d3      	str	r3, [r2, #12]

		if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4a80      	ldr	r2, [pc, #512]	; (8001588 <HAL_ADC_ConfigChannel+0x258>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d10a      	bne.n	80013a2 <HAL_ADC_ConfigChannel+0x72>
		{
			/* Set the new sample time */
			hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	687a      	ldr	r2, [r7, #4]
 8001392:	6812      	ldr	r2, [r2, #0]
 8001394:	68d1      	ldr	r1, [r2, #12]
 8001396:	683a      	ldr	r2, [r7, #0]
 8001398:	6892      	ldr	r2, [r2, #8]
 800139a:	0612      	lsls	r2, r2, #24
 800139c:	430a      	orrs	r2, r1
 800139e:	60da      	str	r2, [r3, #12]
 80013a0:	e037      	b.n	8001412 <HAL_ADC_ConfigChannel+0xe2>
		}
	  else
	  {	
		  /* Set the new sample time */
		  hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	68d9      	ldr	r1, [r3, #12]
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	6898      	ldr	r0, [r3, #8]
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	b29b      	uxth	r3, r3
 80013b6:	461c      	mov	r4, r3
 80013b8:	4623      	mov	r3, r4
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4423      	add	r3, r4
 80013be:	3b1e      	subs	r3, #30
 80013c0:	fa00 f303 	lsl.w	r3, r0, r3
 80013c4:	430b      	orrs	r3, r1
 80013c6:	60d3      	str	r3, [r2, #12]
 80013c8:	e023      	b.n	8001412 <HAL_ADC_ConfigChannel+0xe2>
	  }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	6919      	ldr	r1, [r3, #16]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	b29b      	uxth	r3, r3
 80013da:	4618      	mov	r0, r3
 80013dc:	4603      	mov	r3, r0
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	4403      	add	r3, r0
 80013e2:	2007      	movs	r0, #7
 80013e4:	fa00 f303 	lsl.w	r3, r0, r3
 80013e8:	43db      	mvns	r3, r3
 80013ea:	400b      	ands	r3, r1
 80013ec:	6113      	str	r3, [r2, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	6919      	ldr	r1, [r3, #16]
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	6898      	ldr	r0, [r3, #8]
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	b29b      	uxth	r3, r3
 8001402:	461c      	mov	r4, r3
 8001404:	4623      	mov	r3, r4
 8001406:	005b      	lsls	r3, r3, #1
 8001408:	4423      	add	r3, r4
 800140a:	fa00 f303 	lsl.w	r3, r0, r3
 800140e:	430b      	orrs	r3, r1
 8001410:	6113      	str	r3, [r2, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b06      	cmp	r3, #6
 8001418:	d824      	bhi.n	8001464 <HAL_ADC_ConfigChannel+0x134>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6819      	ldr	r1, [r3, #0]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	685a      	ldr	r2, [r3, #4]
 8001428:	4613      	mov	r3, r2
 800142a:	009b      	lsls	r3, r3, #2
 800142c:	4413      	add	r3, r2
 800142e:	3b05      	subs	r3, #5
 8001430:	221f      	movs	r2, #31
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	43db      	mvns	r3, r3
 8001438:	4003      	ands	r3, r0
 800143a:	634b      	str	r3, [r1, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6819      	ldr	r1, [r3, #0]
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	b29b      	uxth	r3, r3
 800144c:	461c      	mov	r4, r3
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	685a      	ldr	r2, [r3, #4]
 8001452:	4613      	mov	r3, r2
 8001454:	009b      	lsls	r3, r3, #2
 8001456:	4413      	add	r3, r2
 8001458:	3b05      	subs	r3, #5
 800145a:	fa04 f303 	lsl.w	r3, r4, r3
 800145e:	4303      	orrs	r3, r0
 8001460:	634b      	str	r3, [r1, #52]	; 0x34
 8001462:	e04c      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685b      	ldr	r3, [r3, #4]
 8001468:	2b0c      	cmp	r3, #12
 800146a:	d824      	bhi.n	80014b6 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6819      	ldr	r1, [r3, #0]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	685a      	ldr	r2, [r3, #4]
 800147a:	4613      	mov	r3, r2
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	4413      	add	r3, r2
 8001480:	3b23      	subs	r3, #35	; 0x23
 8001482:	221f      	movs	r2, #31
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	43db      	mvns	r3, r3
 800148a:	4003      	ands	r3, r0
 800148c:	630b      	str	r3, [r1, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6819      	ldr	r1, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	b29b      	uxth	r3, r3
 800149e:	461c      	mov	r4, r3
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	685a      	ldr	r2, [r3, #4]
 80014a4:	4613      	mov	r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	4413      	add	r3, r2
 80014aa:	3b23      	subs	r3, #35	; 0x23
 80014ac:	fa04 f303 	lsl.w	r3, r4, r3
 80014b0:	4303      	orrs	r3, r0
 80014b2:	630b      	str	r3, [r1, #48]	; 0x30
 80014b4:	e023      	b.n	80014fe <HAL_ADC_ConfigChannel+0x1ce>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6819      	ldr	r1, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685a      	ldr	r2, [r3, #4]
 80014c4:	4613      	mov	r3, r2
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	4413      	add	r3, r2
 80014ca:	3b41      	subs	r3, #65	; 0x41
 80014cc:	221f      	movs	r2, #31
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	4003      	ands	r3, r0
 80014d6:	62cb      	str	r3, [r1, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6819      	ldr	r1, [r3, #0]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	b29b      	uxth	r3, r3
 80014e8:	461c      	mov	r4, r3
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	4613      	mov	r3, r2
 80014f0:	009b      	lsls	r3, r3, #2
 80014f2:	4413      	add	r3, r2
 80014f4:	3b41      	subs	r3, #65	; 0x41
 80014f6:	fa04 f303 	lsl.w	r3, r4, r3
 80014fa:	4303      	orrs	r3, r0
 80014fc:	62cb      	str	r3, [r1, #44]	; 0x2c
  }
  
  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a22      	ldr	r2, [pc, #136]	; (800158c <HAL_ADC_ConfigChannel+0x25c>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d109      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1ec>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d105      	bne.n	800151c <HAL_ADC_ConfigChannel+0x1ec>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001510:	4a1f      	ldr	r2, [pc, #124]	; (8001590 <HAL_ADC_ConfigChannel+0x260>)
 8001512:	4b1f      	ldr	r3, [pc, #124]	; (8001590 <HAL_ADC_ConfigChannel+0x260>)
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800151a:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a1a      	ldr	r2, [pc, #104]	; (800158c <HAL_ADC_ConfigChannel+0x25c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d125      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x242>
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	4a17      	ldr	r2, [pc, #92]	; (8001588 <HAL_ADC_ConfigChannel+0x258>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d003      	beq.n	8001538 <HAL_ADC_ConfigChannel+0x208>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b11      	cmp	r3, #17
 8001536:	d11c      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x242>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001538:	4a15      	ldr	r2, [pc, #84]	; (8001590 <HAL_ADC_ConfigChannel+0x260>)
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <HAL_ADC_ConfigChannel+0x260>)
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001542:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4a0f      	ldr	r2, [pc, #60]	; (8001588 <HAL_ADC_ConfigChannel+0x258>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d111      	bne.n	8001572 <HAL_ADC_ConfigChannel+0x242>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800154e:	4b11      	ldr	r3, [pc, #68]	; (8001594 <HAL_ADC_ConfigChannel+0x264>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a11      	ldr	r2, [pc, #68]	; (8001598 <HAL_ADC_ConfigChannel+0x268>)
 8001554:	fba2 2303 	umull	r2, r3, r2, r3
 8001558:	0c9a      	lsrs	r2, r3, #18
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001564:	e002      	b.n	800156c <HAL_ADC_ConfigChannel+0x23c>
      {
        counter--;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	3b01      	subs	r3, #1
 800156a:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1f9      	bne.n	8001566 <HAL_ADC_ConfigChannel+0x236>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	2200      	movs	r2, #0
 8001576:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3710      	adds	r7, #16
 8001580:	46bd      	mov	sp, r7
 8001582:	bc90      	pop	{r4, r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	10000012 	.word	0x10000012
 800158c:	40012000 	.word	0x40012000
 8001590:	40012300 	.word	0x40012300
 8001594:	20000118 	.word	0x20000118
 8001598:	431bde83 	.word	0x431bde83

0800159c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80015a4:	4a77      	ldr	r2, [pc, #476]	; (8001784 <ADC_Init+0x1e8>)
 80015a6:	4b77      	ldr	r3, [pc, #476]	; (8001784 <ADC_Init+0x1e8>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80015ae:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80015b0:	4974      	ldr	r1, [pc, #464]	; (8001784 <ADC_Init+0x1e8>)
 80015b2:	4b74      	ldr	r3, [pc, #464]	; (8001784 <ADC_Init+0x1e8>)
 80015b4:	685a      	ldr	r2, [r3, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	4313      	orrs	r3, r2
 80015bc:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6812      	ldr	r2, [r2, #0]
 80015c6:	6852      	ldr	r2, [r2, #4]
 80015c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80015cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	6812      	ldr	r2, [r2, #0]
 80015d6:	6851      	ldr	r1, [r2, #4]
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	6912      	ldr	r2, [r2, #16]
 80015dc:	0212      	lsls	r2, r2, #8
 80015de:	430a      	orrs	r2, r1
 80015e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	687a      	ldr	r2, [r7, #4]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	6852      	ldr	r2, [r2, #4]
 80015ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80015f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	687a      	ldr	r2, [r7, #4]
 80015f8:	6812      	ldr	r2, [r2, #0]
 80015fa:	6851      	ldr	r1, [r2, #4]
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	6892      	ldr	r2, [r2, #8]
 8001600:	430a      	orrs	r2, r1
 8001602:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	6892      	ldr	r2, [r2, #8]
 800160e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001612:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	6812      	ldr	r2, [r2, #0]
 800161c:	6891      	ldr	r1, [r2, #8]
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	68d2      	ldr	r2, [r2, #12]
 8001622:	430a      	orrs	r2, r1
 8001624:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	4a57      	ldr	r2, [pc, #348]	; (8001788 <ADC_Init+0x1ec>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d022      	beq.n	8001676 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	6892      	ldr	r2, [r2, #8]
 800163a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800163e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	6891      	ldr	r1, [r2, #8]
 800164a:	687a      	ldr	r2, [r7, #4]
 800164c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800164e:	430a      	orrs	r2, r1
 8001650:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	6812      	ldr	r2, [r2, #0]
 800165a:	6892      	ldr	r2, [r2, #8]
 800165c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001660:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	6812      	ldr	r2, [r2, #0]
 800166a:	6891      	ldr	r1, [r2, #8]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	e00f      	b.n	8001696 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	6892      	ldr	r2, [r2, #8]
 8001680:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001684:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	6812      	ldr	r2, [r2, #0]
 800168e:	6892      	ldr	r2, [r2, #8]
 8001690:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001694:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	6812      	ldr	r2, [r2, #0]
 800169e:	6892      	ldr	r2, [r2, #8]
 80016a0:	f022 0202 	bic.w	r2, r2, #2
 80016a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	6812      	ldr	r2, [r2, #0]
 80016ae:	6891      	ldr	r1, [r2, #8]
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	6992      	ldr	r2, [r2, #24]
 80016b4:	0052      	lsls	r2, r2, #1
 80016b6:	430a      	orrs	r2, r1
 80016b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a1b      	ldr	r3, [r3, #32]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d01b      	beq.n	80016fa <ADC_Init+0x15e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6812      	ldr	r2, [r2, #0]
 80016ca:	6852      	ldr	r2, [r2, #4]
 80016cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80016d0:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	6852      	ldr	r2, [r2, #4]
 80016dc:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80016e0:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	6812      	ldr	r2, [r2, #0]
 80016ea:	6851      	ldr	r1, [r2, #4]
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f0:	3a01      	subs	r2, #1
 80016f2:	0352      	lsls	r2, r2, #13
 80016f4:	430a      	orrs	r2, r1
 80016f6:	605a      	str	r2, [r3, #4]
 80016f8:	e007      	b.n	800170a <ADC_Init+0x16e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6812      	ldr	r2, [r2, #0]
 8001702:	6852      	ldr	r2, [r2, #4]
 8001704:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001708:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	687a      	ldr	r2, [r7, #4]
 8001710:	6812      	ldr	r2, [r2, #0]
 8001712:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001714:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001718:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6812      	ldr	r2, [r2, #0]
 8001722:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001724:	687a      	ldr	r2, [r7, #4]
 8001726:	69d2      	ldr	r2, [r2, #28]
 8001728:	3a01      	subs	r2, #1
 800172a:	0512      	lsls	r2, r2, #20
 800172c:	430a      	orrs	r2, r1
 800172e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	687a      	ldr	r2, [r7, #4]
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	6892      	ldr	r2, [r2, #8]
 800173a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800173e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq(hadc->Init.DMAContinuousRequests);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	6812      	ldr	r2, [r2, #0]
 8001748:	6891      	ldr	r1, [r2, #8]
 800174a:	687a      	ldr	r2, [r7, #4]
 800174c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800174e:	0252      	lsls	r2, r2, #9
 8001750:	430a      	orrs	r2, r1
 8001752:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	687a      	ldr	r2, [r7, #4]
 800175a:	6812      	ldr	r2, [r2, #0]
 800175c:	6892      	ldr	r2, [r2, #8]
 800175e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	687a      	ldr	r2, [r7, #4]
 800176a:	6812      	ldr	r2, [r2, #0]
 800176c:	6891      	ldr	r1, [r2, #8]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	6952      	ldr	r2, [r2, #20]
 8001772:	0292      	lsls	r2, r2, #10
 8001774:	430a      	orrs	r2, r1
 8001776:	609a      	str	r2, [r3, #8]
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr
 8001784:	40012300 	.word	0x40012300
 8001788:	0f000001 	.word	0x0f000001

0800178c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f003 0307 	and.w	r3, r3, #7
 800179a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800179c:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <NVIC_SetPriorityGrouping+0x40>)
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017a2:	68ba      	ldr	r2, [r7, #8]
 80017a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017a8:	4013      	ands	r3, r2
 80017aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017b0:	68bb      	ldr	r3, [r7, #8]
 80017b2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <NVIC_SetPriorityGrouping+0x44>)
 80017b6:	4313      	orrs	r3, r2
 80017b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ba:	4a04      	ldr	r2, [pc, #16]	; (80017cc <NVIC_SetPriorityGrouping+0x40>)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	60d3      	str	r3, [r2, #12]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000ed00 	.word	0xe000ed00
 80017d0:	05fa0000 	.word	0x05fa0000

080017d4 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017d8:	4b04      	ldr	r3, [pc, #16]	; (80017ec <NVIC_GetPriorityGrouping+0x18>)
 80017da:	68db      	ldr	r3, [r3, #12]
 80017dc:	0a1b      	lsrs	r3, r3, #8
 80017de:	f003 0307 	and.w	r3, r3, #7
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr
 80017ec:	e000ed00 	.word	0xe000ed00

080017f0 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017f0:	b480      	push	{r7}
 80017f2:	b083      	sub	sp, #12
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	4603      	mov	r3, r0
 80017f8:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80017fa:	4909      	ldr	r1, [pc, #36]	; (8001820 <NVIC_EnableIRQ+0x30>)
 80017fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	79fa      	ldrb	r2, [r7, #7]
 8001804:	f002 021f 	and.w	r2, r2, #31
 8001808:	2001      	movs	r0, #1
 800180a:	fa00 f202 	lsl.w	r2, r0, r2
 800180e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr
 800181e:	bf00      	nop
 8001820:	e000e100 	.word	0xe000e100

08001824 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	6039      	str	r1, [r7, #0]
 800182e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001834:	2b00      	cmp	r3, #0
 8001836:	da0b      	bge.n	8001850 <NVIC_SetPriority+0x2c>
  {
    SCB->SHPR[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001838:	490d      	ldr	r1, [pc, #52]	; (8001870 <NVIC_SetPriority+0x4c>)
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	f003 030f 	and.w	r3, r3, #15
 8001840:	3b04      	subs	r3, #4
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	b2d2      	uxtb	r2, r2
 8001846:	0112      	lsls	r2, r2, #4
 8001848:	b2d2      	uxtb	r2, r2
 800184a:	440b      	add	r3, r1
 800184c:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800184e:	e009      	b.n	8001864 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001850:	4908      	ldr	r1, [pc, #32]	; (8001874 <NVIC_SetPriority+0x50>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	0112      	lsls	r2, r2, #4
 800185c:	b2d2      	uxtb	r2, r2
 800185e:	440b      	add	r3, r1
 8001860:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001864:	bf00      	nop
 8001866:	370c      	adds	r7, #12
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	e000e100 	.word	0xe000e100

08001878 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001878:	b480      	push	{r7}
 800187a:	b089      	sub	sp, #36	; 0x24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	f1c3 0307 	rsb	r3, r3, #7
 8001892:	2b04      	cmp	r3, #4
 8001894:	bf28      	it	cs
 8001896:	2304      	movcs	r3, #4
 8001898:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800189a:	69fb      	ldr	r3, [r7, #28]
 800189c:	3304      	adds	r3, #4
 800189e:	2b06      	cmp	r3, #6
 80018a0:	d902      	bls.n	80018a8 <NVIC_EncodePriority+0x30>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b03      	subs	r3, #3
 80018a6:	e000      	b.n	80018aa <NVIC_EncodePriority+0x32>
 80018a8:	2300      	movs	r3, #0
 80018aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ac:	2201      	movs	r2, #1
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	1e5a      	subs	r2, r3, #1
 80018b6:	68bb      	ldr	r3, [r7, #8]
 80018b8:	401a      	ands	r2, r3
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018be:	2101      	movs	r1, #1
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa01 f303 	lsl.w	r3, r1, r3
 80018c6:	1e59      	subs	r1, r3, #1
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018cc:	4313      	orrs	r3, r2
         );
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3724      	adds	r7, #36	; 0x24
 80018d2:	46bd      	mov	sp, r7
 80018d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d8:	4770      	bx	lr
	...

080018dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018ec:	d301      	bcc.n	80018f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00f      	b.n	8001912 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018f2:	4a0a      	ldr	r2, [pc, #40]	; (800191c <SysTick_Config+0x40>)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3b01      	subs	r3, #1
 80018f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018fa:	210f      	movs	r1, #15
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001900:	f7ff ff90 	bl	8001824 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <SysTick_Config+0x40>)
 8001906:	2200      	movs	r2, #0
 8001908:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800190a:	4b04      	ldr	r3, [pc, #16]	; (800191c <SysTick_Config+0x40>)
 800190c:	2207      	movs	r2, #7
 800190e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001910:	2300      	movs	r3, #0
}
 8001912:	4618      	mov	r0, r3
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	e000e010 	.word	0xe000e010

08001920 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f7ff ff2f 	bl	800178c <NVIC_SetPriorityGrouping>
}
 800192e:	bf00      	nop
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001936:	b580      	push	{r7, lr}
 8001938:	b086      	sub	sp, #24
 800193a:	af00      	add	r7, sp, #0
 800193c:	4603      	mov	r3, r0
 800193e:	60b9      	str	r1, [r7, #8]
 8001940:	607a      	str	r2, [r7, #4]
 8001942:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001944:	2300      	movs	r3, #0
 8001946:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001948:	f7ff ff44 	bl	80017d4 <NVIC_GetPriorityGrouping>
 800194c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	68b9      	ldr	r1, [r7, #8]
 8001952:	6978      	ldr	r0, [r7, #20]
 8001954:	f7ff ff90 	bl	8001878 <NVIC_EncodePriority>
 8001958:	4602      	mov	r2, r0
 800195a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800195e:	4611      	mov	r1, r2
 8001960:	4618      	mov	r0, r3
 8001962:	f7ff ff5f 	bl	8001824 <NVIC_SetPriority>
}
 8001966:	bf00      	nop
 8001968:	3718      	adds	r7, #24
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
 8001974:	4603      	mov	r3, r0
 8001976:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff37 	bl	80017f0 <NVIC_EnableIRQ>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}

0800198a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198a:	b580      	push	{r7, lr}
 800198c:	b082      	sub	sp, #8
 800198e:	af00      	add	r7, sp, #0
 8001990:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001992:	6878      	ldr	r0, [r7, #4]
 8001994:	f7ff ffa2 	bl	80018dc <SysTick_Config>
 8001998:	4603      	mov	r3, r0
}
 800199a:	4618      	mov	r0, r3
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
	...

080019a4 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2b04      	cmp	r3, #4
 80019b0:	d106      	bne.n	80019c0 <HAL_SYSTICK_CLKSourceConfig+0x1c>
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 80019b2:	4a09      	ldr	r2, [pc, #36]	; (80019d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019b4:	4b08      	ldr	r3, [pc, #32]	; (80019d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	6013      	str	r3, [r2, #0]
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
  }
}
 80019be:	e005      	b.n	80019cc <HAL_SYSTICK_CLKSourceConfig+0x28>
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 80019c0:	4a05      	ldr	r2, [pc, #20]	; (80019d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019c2:	4b05      	ldr	r3, [pc, #20]	; (80019d8 <HAL_SYSTICK_CLKSourceConfig+0x34>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f023 0304 	bic.w	r3, r3, #4
 80019ca:	6013      	str	r3, [r2, #0]
}
 80019cc:	bf00      	nop
 80019ce:	370c      	adds	r7, #12
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	e000e010 	.word	0xe000e010

080019dc <HAL_ETH_Init>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b088      	sub	sp, #32
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  uint32_t tempreg = 0, phyreg = 0;
 80019e4:	2300      	movs	r3, #0
 80019e6:	61fb      	str	r3, [r7, #28]
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
  uint32_t hclk = 60000000;
 80019ec:	4ba9      	ldr	r3, [pc, #676]	; (8001c94 <HAL_ETH_Init+0x2b8>)
 80019ee:	61bb      	str	r3, [r7, #24]
  uint32_t tickstart = 0;
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]
  uint32_t err = ETH_SUCCESS;
 80019f4:	2300      	movs	r3, #0
 80019f6:	613b      	str	r3, [r7, #16]
  
  /* Check the ETH peripheral state */
  if(heth == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_ETH_Init+0x26>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e183      	b.n	8001d0a <HAL_ETH_Init+0x32e>
  assert_param(IS_ETH_AUTONEGOTIATION(heth->Init.AutoNegotiation));
  assert_param(IS_ETH_RX_MODE(heth->Init.RxMode));
  assert_param(IS_ETH_CHECKSUM_MODE(heth->Init.ChecksumMode));
  assert_param(IS_ETH_MEDIA_INTERFACE(heth->Init.MediaInterface));  
  
  if(heth->State == HAL_ETH_STATE_RESET)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001a08:	b2db      	uxtb	r3, r3
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d106      	bne.n	8001a1c <HAL_ETH_Init+0x40>
  {
    /* Allocate lock resource and initialize it */
    heth->Lock = HAL_UNLOCKED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001a16:	6878      	ldr	r0, [r7, #4]
 8001a18:	f011 fafa 	bl	8013010 <HAL_ETH_MspInit>
  }
  
  /* Enable SYSCFG Clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a1c:	4a9e      	ldr	r2, [pc, #632]	; (8001c98 <HAL_ETH_Init+0x2bc>)
 8001a1e:	4b9e      	ldr	r3, [pc, #632]	; (8001c98 <HAL_ETH_Init+0x2bc>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a26:	6453      	str	r3, [r2, #68]	; 0x44
 8001a28:	4b9b      	ldr	r3, [pc, #620]	; (8001c98 <HAL_ETH_Init+0x2bc>)
 8001a2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	60bb      	str	r3, [r7, #8]
 8001a32:	68bb      	ldr	r3, [r7, #8]
  
  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001a34:	4a99      	ldr	r2, [pc, #612]	; (8001c9c <HAL_ETH_Init+0x2c0>)
 8001a36:	4b99      	ldr	r3, [pc, #612]	; (8001c9c <HAL_ETH_Init+0x2c0>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a3e:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001a40:	4996      	ldr	r1, [pc, #600]	; (8001c9c <HAL_ETH_Init+0x2c0>)
 8001a42:	4b96      	ldr	r3, [pc, #600]	; (8001c9c <HAL_ETH_Init+0x2c0>)
 8001a44:	685a      	ldr	r2, [r3, #4]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	604b      	str	r3, [r1, #4]
  
  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  (heth->Instance)->DMABMR |= ETH_DMABMR_SR;
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6812      	ldr	r2, [r2, #0]
 8001a56:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a5a:	6812      	ldr	r2, [r2, #0]
 8001a5c:	f042 0201 	orr.w	r2, r2, #1
 8001a60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a64:	601a      	str	r2, [r3, #0]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 8001a66:	f7ff fabd 	bl	8000fe4 <HAL_GetTick>
 8001a6a:	6178      	str	r0, [r7, #20]
  
  /* Wait for software reset */
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a6c:	e011      	b.n	8001a92 <HAL_ETH_Init+0xb6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_SWRESET)
 8001a6e:	f7ff fab9 	bl	8000fe4 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001a7c:	d909      	bls.n	8001a92 <HAL_ETH_Init+0xb6>
    {     
      heth->State= HAL_ETH_STATE_TIMEOUT;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2203      	movs	r2, #3
 8001a82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2200      	movs	r2, #0
 8001a8a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      /* Note: The SWR is not performed if the ETH_RX_CLK or the ETH_TX_CLK are  
         not available, please check your external PHY or the IO configuration */
               
      return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e13b      	b.n	8001d0a <HAL_ETH_Init+0x32e>
  while (((heth->Instance)->DMABMR & ETH_DMABMR_SR) != (uint32_t)RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d1e4      	bne.n	8001a6e <HAL_ETH_Init+0x92>
    }
  }
  
  /*-------------------------------- MAC Initialization ----------------------*/
  /* Get the ETHERNET MACMIIAR value */
  tempreg = (heth->Instance)->MACMIIAR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	61fb      	str	r3, [r7, #28]
  /* Clear CSR Clock Range CR[2:0] bits */
  tempreg &= ETH_MACMIIAR_CR_MASK;
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	f023 031c 	bic.w	r3, r3, #28
 8001ab2:	61fb      	str	r3, [r7, #28]
  
  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001ab4:	f001 fde0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8001ab8:	61b8      	str	r0, [r7, #24]
  
  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000)&&(hclk < 35000000))
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	4a78      	ldr	r2, [pc, #480]	; (8001ca0 <HAL_ETH_Init+0x2c4>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d908      	bls.n	8001ad4 <HAL_ETH_Init+0xf8>
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	4a77      	ldr	r2, [pc, #476]	; (8001ca4 <HAL_ETH_Init+0x2c8>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d804      	bhi.n	8001ad4 <HAL_ETH_Init+0xf8>
  {
    /* CSR Clock Range between 20-35 MHz */
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	f043 0308 	orr.w	r3, r3, #8
 8001ad0:	61fb      	str	r3, [r7, #28]
 8001ad2:	e027      	b.n	8001b24 <HAL_ETH_Init+0x148>
  }
  else if((hclk >= 35000000)&&(hclk < 60000000))
 8001ad4:	69bb      	ldr	r3, [r7, #24]
 8001ad6:	4a73      	ldr	r2, [pc, #460]	; (8001ca4 <HAL_ETH_Init+0x2c8>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d908      	bls.n	8001aee <HAL_ETH_Init+0x112>
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	4a72      	ldr	r2, [pc, #456]	; (8001ca8 <HAL_ETH_Init+0x2cc>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d804      	bhi.n	8001aee <HAL_ETH_Init+0x112>
  {
    /* CSR Clock Range between 35-60 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001ae4:	69fb      	ldr	r3, [r7, #28]
 8001ae6:	f043 030c 	orr.w	r3, r3, #12
 8001aea:	61fb      	str	r3, [r7, #28]
 8001aec:	e01a      	b.n	8001b24 <HAL_ETH_Init+0x148>
  }  
  else if((hclk >= 60000000)&&(hclk < 100000000))
 8001aee:	69bb      	ldr	r3, [r7, #24]
 8001af0:	4a6d      	ldr	r2, [pc, #436]	; (8001ca8 <HAL_ETH_Init+0x2cc>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d903      	bls.n	8001afe <HAL_ETH_Init+0x122>
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	4a6c      	ldr	r2, [pc, #432]	; (8001cac <HAL_ETH_Init+0x2d0>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d911      	bls.n	8001b22 <HAL_ETH_Init+0x146>
  {
    /* CSR Clock Range between 60-100 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }  
  else if((hclk >= 100000000)&&(hclk < 150000000))
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	4a6a      	ldr	r2, [pc, #424]	; (8001cac <HAL_ETH_Init+0x2d0>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d908      	bls.n	8001b18 <HAL_ETH_Init+0x13c>
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	4a69      	ldr	r2, [pc, #420]	; (8001cb0 <HAL_ETH_Init+0x2d4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d804      	bhi.n	8001b18 <HAL_ETH_Init+0x13c>
  {
    /* CSR Clock Range between 100-150 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	f043 0304 	orr.w	r3, r3, #4
 8001b14:	61fb      	str	r3, [r7, #28]
 8001b16:	e005      	b.n	8001b24 <HAL_ETH_Init+0x148>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 216000000)) */
  {
    /* CSR Clock Range between 150-216 MHz */ 
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;    
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	f043 0310 	orr.w	r3, r3, #16
 8001b1e:	61fb      	str	r3, [r7, #28]
 8001b20:	e000      	b.n	8001b24 <HAL_ETH_Init+0x148>
    tempreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8001b22:	bf00      	nop
  }
  
  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tempreg;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	69fa      	ldr	r2, [r7, #28]
 8001b2a:	611a      	str	r2, [r3, #16]
  
  /*-------------------- PHY initialization and configuration ----------------*/
  /* Put the PHY in reset mode */
  if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_RESET)) != HAL_OK)
 8001b2c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001b30:	2100      	movs	r1, #0
 8001b32:	6878      	ldr	r0, [r7, #4]
 8001b34:	f000 fc19 	bl	800236a <HAL_ETH_WritePHYRegister>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00b      	beq.n	8001b56 <HAL_ETH_Init+0x17a>
  {
    /* In case of write timeout */
    err = ETH_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	613b      	str	r3, [r7, #16]
    
    /* Config MAC and DMA */
    ETH_MACDMAConfig(heth, err);
 8001b42:	6939      	ldr	r1, [r7, #16]
 8001b44:	6878      	ldr	r0, [r7, #4]
 8001b46:	f000 fca5 	bl	8002494 <ETH_MACDMAConfig>
    
    /* Set the ETH peripheral state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Return HAL_ERROR */
    return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e0d9      	b.n	8001d0a <HAL_ETH_Init+0x32e>
  }
  
  /* Delay to assure PHY reset */
  HAL_Delay(PHY_RESET_DELAY);
 8001b56:	20ff      	movs	r0, #255	; 0xff
 8001b58:	f7ff fa50 	bl	8000ffc <HAL_Delay>
  
  if((heth->Init).AutoNegotiation != ETH_AUTONEGOTIATION_DISABLE)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	f000 80a7 	beq.w	8001cb4 <HAL_ETH_Init+0x2d8>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b66:	f7ff fa3d 	bl	8000fe4 <HAL_GetTick>
 8001b6a:	6178      	str	r0, [r7, #20]
    
    /* We wait for linked status */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001b6c:	f107 030c 	add.w	r3, r7, #12
 8001b70:	461a      	mov	r2, r3
 8001b72:	2101      	movs	r1, #1
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 fb90 	bl	800229a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_LINKED_STATE)
 8001b7a:	f7ff fa33 	bl	8000fe4 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d90f      	bls.n	8001bac <HAL_ETH_Init+0x1d0>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001b90:	6939      	ldr	r1, [r7, #16]
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f000 fc7e 	bl	8002494 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001ba8:	2303      	movs	r3, #3
 8001baa:	e0ae      	b.n	8001d0a <HAL_ETH_Init+0x32e>
      }
    } while (((phyreg & PHY_LINKED_STATUS) != PHY_LINKED_STATUS));
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	f003 0304 	and.w	r3, r3, #4
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d0da      	beq.n	8001b6c <HAL_ETH_Init+0x190>

    
    /* Enable Auto-Negotiation */
    if((HAL_ETH_WritePHYRegister(heth, PHY_BCR, PHY_AUTONEGOTIATION)) != HAL_OK)
 8001bb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f000 fbd4 	bl	800236a <HAL_ETH_WritePHYRegister>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d00b      	beq.n	8001be0 <HAL_ETH_Init+0x204>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001bcc:	6939      	ldr	r1, [r7, #16]
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f000 fc60 	bl	8002494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e094      	b.n	8001d0a <HAL_ETH_Init+0x32e>
    }
    
    /* Get tick */
    tickstart = HAL_GetTick();
 8001be0:	f7ff fa00 	bl	8000fe4 <HAL_GetTick>
 8001be4:	6178      	str	r0, [r7, #20]
    
    /* Wait until the auto-negotiation will be completed */
    do
    {
      HAL_ETH_ReadPHYRegister(heth, PHY_BSR, &phyreg);
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	461a      	mov	r2, r3
 8001bec:	2101      	movs	r1, #1
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f000 fb53 	bl	800229a <HAL_ETH_ReadPHYRegister>
      
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > ETH_TIMEOUT_AUTONEGO_COMPLETED)
 8001bf4:	f7ff f9f6 	bl	8000fe4 <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d90f      	bls.n	8001c26 <HAL_ETH_Init+0x24a>
      {
        /* In case of write timeout */
        err = ETH_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	613b      	str	r3, [r7, #16]
      
        /* Config MAC and DMA */
        ETH_MACDMAConfig(heth, err);
 8001c0a:	6939      	ldr	r1, [r7, #16]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f000 fc41 	bl	8002494 <ETH_MACDMAConfig>
        
        heth->State= HAL_ETH_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
        /* Process Unlocked */
        __HAL_UNLOCK(heth);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e071      	b.n	8001d0a <HAL_ETH_Init+0x32e>
      }
      
    } while (((phyreg & PHY_AUTONEGO_COMPLETE) != PHY_AUTONEGO_COMPLETE));
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	f003 0320 	and.w	r3, r3, #32
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0da      	beq.n	8001be6 <HAL_ETH_Init+0x20a>
    
    /* Read the result of the auto-negotiation */
    if((HAL_ETH_ReadPHYRegister(heth, PHY_SR, &phyreg)) != HAL_OK)
 8001c30:	f107 030c 	add.w	r3, r7, #12
 8001c34:	461a      	mov	r2, r3
 8001c36:	2110      	movs	r1, #16
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fb2e 	bl	800229a <HAL_ETH_ReadPHYRegister>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d00b      	beq.n	8001c5c <HAL_ETH_Init+0x280>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001c48:	6939      	ldr	r1, [r7, #16]
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fc22 	bl	8002494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;   
 8001c58:	2301      	movs	r3, #1
 8001c5a:	e056      	b.n	8001d0a <HAL_ETH_Init+0x32e>
    }
    
    /* Configure the MAC with the Duplex Mode fixed by the auto-negotiation process */
    if((phyreg & PHY_DUPLEX_STATUS) != (uint32_t)RESET)
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_ETH_Init+0x294>
    {
      /* Set Ethernet duplex mode to Full-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;  
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001c6c:	60da      	str	r2, [r3, #12]
 8001c6e:	e002      	b.n	8001c76 <HAL_ETH_Init+0x29a>
    }
    else
    {
      /* Set Ethernet duplex mode to Half-duplex following the auto-negotiation */
      (heth->Init).DuplexMode = ETH_MODE_HALFDUPLEX;           
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
    }
    /* Configure the MAC with the speed fixed by the auto-negotiation process */
    if((phyreg & PHY_SPEED_STATUS) == PHY_SPEED_STATUS)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f003 0302 	and.w	r3, r3, #2
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <HAL_ETH_Init+0x2ac>
    {  
      /* Set Ethernet speed to 10M following the auto-negotiation */
      (heth->Init).Speed = ETH_SPEED_10M; 
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	e037      	b.n	8001cf8 <HAL_ETH_Init+0x31c>
    }
    else
    {   
      /* Set Ethernet speed to 100M following the auto-negotiation */ 
      (heth->Init).Speed = ETH_SPEED_100M;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	e032      	b.n	8001cf8 <HAL_ETH_Init+0x31c>
 8001c92:	bf00      	nop
 8001c94:	03938700 	.word	0x03938700
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	40013800 	.word	0x40013800
 8001ca0:	01312cff 	.word	0x01312cff
 8001ca4:	02160ebf 	.word	0x02160ebf
 8001ca8:	039386ff 	.word	0x039386ff
 8001cac:	05f5e0ff 	.word	0x05f5e0ff
 8001cb0:	08f0d17f 	.word	0x08f0d17f
    /* Check parameters */
    assert_param(IS_ETH_SPEED(heth->Init.Speed));
    assert_param(IS_ETH_DUPLEX_MODE(heth->Init.DuplexMode));
    
    /* Set MAC Speed and Duplex Mode */
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	08db      	lsrs	r3, r3, #3
 8001cba:	b29a      	uxth	r2, r3
                                                (uint16_t)((heth->Init).Speed >> 1))) != HAL_OK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	085b      	lsrs	r3, r3, #1
 8001cc2:	b29b      	uxth	r3, r3
    if(HAL_ETH_WritePHYRegister(heth, PHY_BCR, ((uint16_t)((heth->Init).DuplexMode >> 3) |
 8001cc4:	4313      	orrs	r3, r2
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	461a      	mov	r2, r3
 8001cca:	2100      	movs	r1, #0
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fb4c 	bl	800236a <HAL_ETH_WritePHYRegister>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00b      	beq.n	8001cf0 <HAL_ETH_Init+0x314>
    {
      /* In case of write timeout */
      err = ETH_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	613b      	str	r3, [r7, #16]
      
      /* Config MAC and DMA */
      ETH_MACDMAConfig(heth, err);
 8001cdc:	6939      	ldr	r1, [r7, #16]
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	f000 fbd8 	bl	8002494 <ETH_MACDMAConfig>
      
      /* Set the ETH peripheral state to READY */
      heth->State = HAL_ETH_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Return HAL_ERROR */
      return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e00c      	b.n	8001d0a <HAL_ETH_Init+0x32e>
    }  
    
    /* Delay to assure PHY configuration */
    HAL_Delay(PHY_CONFIG_DELAY);
 8001cf0:	f640 70ff 	movw	r0, #4095	; 0xfff
 8001cf4:	f7ff f982 	bl	8000ffc <HAL_Delay>
  }
  
  /* Config MAC and DMA */
  ETH_MACDMAConfig(heth, err);
 8001cf8:	6939      	ldr	r1, [r7, #16]
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 fbca 	bl	8002494 <ETH_MACDMAConfig>
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2201      	movs	r2, #1
 8001d04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8001d08:	2300      	movs	r3, #0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3720      	adds	r7, #32
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop

08001d14 <HAL_ETH_DMATxDescListInit>:
  * @param  TxBuff Pointer to the first TxBuffer list
  * @param  TxBuffCount Number of the used Tx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMATxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMATxDescTab, uint8_t *TxBuff, uint32_t TxBuffCount)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b087      	sub	sp, #28
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	607a      	str	r2, [r7, #4]
 8001d20:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *dmatxdesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d101      	bne.n	8001d34 <HAL_ETH_DMATxDescListInit+0x20>
 8001d30:	2302      	movs	r3, #2
 8001d32:	e052      	b.n	8001dda <HAL_ETH_DMATxDescListInit+0xc6>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	2202      	movs	r2, #2
 8001d40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the DMATxDescToSet pointer with the first one of the DMATxDescTab list */
  heth->TxDesc = DMATxDescTab;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Fill each DMATxDesc descriptor with the right values */   
  for(i=0; i < TxBuffCount; i++)
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	617b      	str	r3, [r7, #20]
 8001d4e:	e030      	b.n	8001db2 <HAL_ETH_DMATxDescListInit+0x9e>
  {
    /* Get the pointer on the ith member of the Tx Desc list */
    dmatxdesc = DMATxDescTab + i;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	015b      	lsls	r3, r3, #5
 8001d54:	68ba      	ldr	r2, [r7, #8]
 8001d56:	4413      	add	r3, r2
 8001d58:	613b      	str	r3, [r7, #16]
    
    /* Set Second Address Chained bit */
    dmatxdesc->Status = ETH_DMATXDESC_TCH;  
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d60:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 address pointer */
    dmatxdesc->Buffer1Addr = (uint32_t)(&TxBuff[i*ETH_TX_BUF_SIZE]);
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001d68:	fb02 f303 	mul.w	r3, r2, r3
 8001d6c:	687a      	ldr	r2, [r7, #4]
 8001d6e:	4413      	add	r3, r2
 8001d70:	461a      	mov	r2, r3
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	609a      	str	r2, [r3, #8]
    
    if ((heth->Init).ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	69db      	ldr	r3, [r3, #28]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_ETH_DMATxDescListInit+0x76>
    {
      /* Set the DMA Tx descriptors checksum insertion */
      dmatxdesc->Status |= ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL;
 8001d7e:	693b      	ldr	r3, [r7, #16]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	601a      	str	r2, [r3, #0]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (TxBuffCount-1))
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	1e5a      	subs	r2, r3, #1
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d908      	bls.n	8001da6 <HAL_ETH_DMATxDescListInit+0x92>
    {
      /* Set next descriptor address register with next descriptor base address */
      dmatxdesc->Buffer2NextDescAddr = (uint32_t)(DMATxDescTab+i+1);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	3301      	adds	r3, #1
 8001d98:	015b      	lsls	r3, r3, #5
 8001d9a:	68ba      	ldr	r2, [r7, #8]
 8001d9c:	4413      	add	r3, r2
 8001d9e:	461a      	mov	r2, r3
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	60da      	str	r2, [r3, #12]
 8001da4:	e002      	b.n	8001dac <HAL_ETH_DMATxDescListInit+0x98>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      dmatxdesc->Buffer2NextDescAddr = (uint32_t) DMATxDescTab;  
 8001da6:	68ba      	ldr	r2, [r7, #8]
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	60da      	str	r2, [r3, #12]
  for(i=0; i < TxBuffCount; i++)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	d3ca      	bcc.n	8001d50 <HAL_ETH_DMATxDescListInit+0x3c>
    }
  }
  
  /* Set Transmit Descriptor List Address Register */
  (heth->Instance)->DMATDLAR = (uint32_t) DMATxDescTab;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6819      	ldr	r1, [r3, #0]
 8001dbe:	68ba      	ldr	r2, [r7, #8]
 8001dc0:	f241 0310 	movw	r3, #4112	; 0x1010
 8001dc4:	440b      	add	r3, r1
 8001dc6:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2201      	movs	r2, #1
 8001dcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	371c      	adds	r7, #28
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_ETH_DMARxDescListInit>:
  * @param  RxBuff Pointer to the first RxBuffer list
  * @param  RxBuffCount Number of the used Rx desc in the list
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_DMARxDescListInit(ETH_HandleTypeDef *heth, ETH_DMADescTypeDef *DMARxDescTab, uint8_t *RxBuff, uint32_t RxBuffCount)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b087      	sub	sp, #28
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	60f8      	str	r0, [r7, #12]
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
  uint32_t i = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	617b      	str	r3, [r7, #20]
  ETH_DMADescTypeDef *DMARxDesc;
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d101      	bne.n	8001e06 <HAL_ETH_DMARxDescListInit+0x20>
 8001e02:	2302      	movs	r3, #2
 8001e04:	e056      	b.n	8001eb4 <HAL_ETH_DMARxDescListInit+0xce>
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	2201      	movs	r2, #1
 8001e0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	2202      	movs	r2, #2
 8001e12:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Set the Ethernet RxDesc pointer with the first one of the DMARxDescTab list */
  heth->RxDesc = DMARxDescTab; 
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	68ba      	ldr	r2, [r7, #8]
 8001e1a:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Fill each DMARxDesc descriptor with the right values */
  for(i=0; i < RxBuffCount; i++)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	617b      	str	r3, [r7, #20]
 8001e20:	e034      	b.n	8001e8c <HAL_ETH_DMARxDescListInit+0xa6>
  {
    /* Get the pointer on the ith member of the Rx Desc list */
    DMARxDesc = DMARxDescTab+i;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	015b      	lsls	r3, r3, #5
 8001e26:	68ba      	ldr	r2, [r7, #8]
 8001e28:	4413      	add	r3, r2
 8001e2a:	613b      	str	r3, [r7, #16]
    
    /* Set Own bit of the Rx descriptor Status */
    DMARxDesc->Status = ETH_DMARXDESC_OWN;
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001e32:	601a      	str	r2, [r3, #0]
    
    /* Set Buffer1 size and Second Address Chained bit */
    DMARxDesc->ControlBufferSize = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;  
 8001e34:	693b      	ldr	r3, [r7, #16]
 8001e36:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8001e3a:	605a      	str	r2, [r3, #4]
    
    /* Set Buffer1 address pointer */
    DMARxDesc->Buffer1Addr = (uint32_t)(&RxBuff[i*ETH_RX_BUF_SIZE]);
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001e42:	fb02 f303 	mul.w	r3, r2, r3
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	4413      	add	r3, r2
 8001e4a:	461a      	mov	r2, r3
 8001e4c:	693b      	ldr	r3, [r7, #16]
 8001e4e:	609a      	str	r2, [r3, #8]
    
    if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	699b      	ldr	r3, [r3, #24]
 8001e54:	2b01      	cmp	r3, #1
 8001e56:	d105      	bne.n	8001e64 <HAL_ETH_DMARxDescListInit+0x7e>
    {
      /* Enable Ethernet DMA Rx Descriptor interrupt */
      DMARxDesc->ControlBufferSize &= ~ETH_DMARXDESC_DIC;
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	605a      	str	r2, [r3, #4]
    }
    
    /* Initialize the next descriptor with the Next Descriptor Polling Enable */
    if(i < (RxBuffCount-1))
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	1e5a      	subs	r2, r3, #1
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d908      	bls.n	8001e80 <HAL_ETH_DMARxDescListInit+0x9a>
    {
      /* Set next descriptor address register with next descriptor base address */
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab+i+1); 
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	3301      	adds	r3, #1
 8001e72:	015b      	lsls	r3, r3, #5
 8001e74:	68ba      	ldr	r2, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	461a      	mov	r2, r3
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	60da      	str	r2, [r3, #12]
 8001e7e:	e002      	b.n	8001e86 <HAL_ETH_DMARxDescListInit+0xa0>
    }
    else
    {
      /* For last descriptor, set next descriptor address register equal to the first descriptor base address */ 
      DMARxDesc->Buffer2NextDescAddr = (uint32_t)(DMARxDescTab); 
 8001e80:	68ba      	ldr	r2, [r7, #8]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	60da      	str	r2, [r3, #12]
  for(i=0; i < RxBuffCount; i++)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	617b      	str	r3, [r7, #20]
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d3c6      	bcc.n	8001e22 <HAL_ETH_DMARxDescListInit+0x3c>
    }
  }
  
  /* Set Receive Descriptor List Address Register */
  (heth->Instance)->DMARDLAR = (uint32_t) DMARxDescTab;
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	68ba      	ldr	r2, [r7, #8]
 8001e9a:	f241 030c 	movw	r3, #4108	; 0x100c
 8001e9e:	440b      	add	r3, r1
 8001ea0:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to Ready */
  heth->State= HAL_ETH_STATE_READY;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 8001eb2:	2300      	movs	r3, #0
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	371c      	adds	r7, #28
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr

08001ec0 <HAL_ETH_TransmitFrame>:
  *         the configuration information for ETHERNET module
  * @param  FrameLength Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_TransmitFrame(ETH_HandleTypeDef *heth, uint32_t FrameLength)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b087      	sub	sp, #28
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  uint32_t bufcount = 0, size = 0, i = 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60fb      	str	r3, [r7, #12]
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	613b      	str	r3, [r7, #16]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_ETH_TransmitFrame+0x24>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e0cd      	b.n	8002080 <HAL_ETH_TransmitFrame+0x1c0>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  if (FrameLength == 0) 
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d109      	bne.n	8001f0e <HAL_ETH_TransmitFrame+0x4e>
  {
    /* Set ETH HAL state to READY */
    heth->State = HAL_ETH_STATE_READY;
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2200      	movs	r2, #0
 8001f06:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return  HAL_ERROR;                                    
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e0b8      	b.n	8002080 <HAL_ETH_TransmitFrame+0x1c0>
  }  
  
  /* Check if the descriptor is owned by the ETHERNET DMA (when set) or CPU (when reset) */
  if(((heth->TxDesc)->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da09      	bge.n	8001f2c <HAL_ETH_TransmitFrame+0x6c>
  {  
    /* OWN bit set */
    heth->State = HAL_ETH_STATE_BUSY_TX;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2212      	movs	r2, #18
 8001f1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0a9      	b.n	8002080 <HAL_ETH_TransmitFrame+0x1c0>
  }
  
  /* Get the number of needed Tx buffers for the current frame */
  if (FrameLength > ETH_TX_BUF_SIZE)
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d915      	bls.n	8001f62 <HAL_ETH_TransmitFrame+0xa2>
  {
    bufcount = FrameLength/ETH_TX_BUF_SIZE;
 8001f36:	683b      	ldr	r3, [r7, #0]
 8001f38:	4a54      	ldr	r2, [pc, #336]	; (800208c <HAL_ETH_TransmitFrame+0x1cc>)
 8001f3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f3e:	0a9b      	lsrs	r3, r3, #10
 8001f40:	617b      	str	r3, [r7, #20]
    if (FrameLength % ETH_TX_BUF_SIZE) 
 8001f42:	683a      	ldr	r2, [r7, #0]
 8001f44:	4b51      	ldr	r3, [pc, #324]	; (800208c <HAL_ETH_TransmitFrame+0x1cc>)
 8001f46:	fba3 1302 	umull	r1, r3, r3, r2
 8001f4a:	0a9b      	lsrs	r3, r3, #10
 8001f4c:	f240 51f4 	movw	r1, #1524	; 0x5f4
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_ETH_TransmitFrame+0xa6>
    {
      bufcount++;
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	e001      	b.n	8001f66 <HAL_ETH_TransmitFrame+0xa6>
    }
  }
  else 
  {  
    bufcount = 1;
 8001f62:	2301      	movs	r3, #1
 8001f64:	617b      	str	r3, [r7, #20]
  }
  if (bufcount == 1)
 8001f66:	697b      	ldr	r3, [r7, #20]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d11c      	bne.n	8001fa6 <HAL_ETH_TransmitFrame+0xe6>
  {
    /* Set LAST and FIRST segment */
    heth->TxDesc->Status |=ETH_DMATXDESC_FS|ETH_DMATXDESC_LS;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f70:	687a      	ldr	r2, [r7, #4]
 8001f72:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f74:	6812      	ldr	r2, [r2, #0]
 8001f76:	f042 5240 	orr.w	r2, r2, #805306368	; 0x30000000
 8001f7a:	601a      	str	r2, [r3, #0]
    /* Set frame size */
    heth->TxDesc->ControlBufferSize = (FrameLength & ETH_DMATXDESC_TBS1);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f80:	683a      	ldr	r2, [r7, #0]
 8001f82:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8001f86:	605a      	str	r2, [r3, #4]
    /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
    heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001f90:	6812      	ldr	r2, [r2, #0]
 8001f92:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001f96:	601a      	str	r2, [r3, #0]
    /* Point to next descriptor */
    heth->TxDesc= (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f9c:	68db      	ldr	r3, [r3, #12]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fa4:	e04b      	b.n	800203e <HAL_ETH_TransmitFrame+0x17e>
  }
  else
  {
    for (i=0; i< bufcount; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	613b      	str	r3, [r7, #16]
 8001faa:	e044      	b.n	8002036 <HAL_ETH_TransmitFrame+0x176>
    {
      /* Clear FIRST and LAST segment bits */
      heth->TxDesc->Status &= ~(ETH_DMATXDESC_FS | ETH_DMATXDESC_LS);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fb4:	6812      	ldr	r2, [r2, #0]
 8001fb6:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fba:	601a      	str	r2, [r3, #0]
      
      if (i == 0) 
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_ETH_TransmitFrame+0x112>
      {
        /* Setting the first segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_FS;  
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc6:	687a      	ldr	r2, [r7, #4]
 8001fc8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fca:	6812      	ldr	r2, [r2, #0]
 8001fcc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001fd0:	601a      	str	r2, [r3, #0]
      }
      
      /* Program size */
      heth->TxDesc->ControlBufferSize = (ETH_TX_BUF_SIZE & ETH_DMATXDESC_TBS1);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fd6:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001fda:	605a      	str	r2, [r3, #4]
      
      if (i == (bufcount-1))
 8001fdc:	697b      	ldr	r3, [r7, #20]
 8001fde:	1e5a      	subs	r2, r3, #1
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d116      	bne.n	8002014 <HAL_ETH_TransmitFrame+0x154>
      {
        /* Setting the last segment bit */
        heth->TxDesc->Status |= ETH_DMATXDESC_LS;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001fee:	6812      	ldr	r2, [r2, #0]
 8001ff0:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001ff4:	601a      	str	r2, [r3, #0]
        size = FrameLength - (bufcount-1)*ETH_TX_BUF_SIZE;
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	4a25      	ldr	r2, [pc, #148]	; (8002090 <HAL_ETH_TransmitFrame+0x1d0>)
 8001ffa:	fb02 f203 	mul.w	r2, r2, r3
 8001ffe:	683b      	ldr	r3, [r7, #0]
 8002000:	4413      	add	r3, r2
 8002002:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8002006:	60fb      	str	r3, [r7, #12]
        heth->TxDesc->ControlBufferSize = (size & ETH_DMATXDESC_TBS1);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 8002012:	605a      	str	r2, [r3, #4]
      }
      
      /* Set Own bit of the Tx descriptor Status: gives the buffer back to ETHERNET DMA */
      heth->TxDesc->Status |= ETH_DMATXDESC_OWN;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800201c:	6812      	ldr	r2, [r2, #0]
 800201e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8002022:	601a      	str	r2, [r3, #0]
      /* point to next descriptor */
      heth->TxDesc = (ETH_DMADescTypeDef *)(heth->TxDesc->Buffer2NextDescAddr);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002028:	68db      	ldr	r3, [r3, #12]
 800202a:	461a      	mov	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	62da      	str	r2, [r3, #44]	; 0x2c
    for (i=0; i< bufcount; i++)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	3301      	adds	r3, #1
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	429a      	cmp	r2, r3
 800203c:	d3b6      	bcc.n	8001fac <HAL_ETH_TransmitFrame+0xec>
    }
  }
  
  /* When Tx Buffer unavailable flag is set: clear it and resume transmission */
  if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	f241 0314 	movw	r3, #4116	; 0x1014
 8002046:	4413      	add	r3, r2
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0304 	and.w	r3, r3, #4
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00d      	beq.n	800206e <HAL_ETH_TransmitFrame+0x1ae>
  {
    /* Clear TBUS ETHERNET DMA flag */
    (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	f241 0314 	movw	r3, #4116	; 0x1014
 800205a:	4413      	add	r3, r2
 800205c:	2204      	movs	r2, #4
 800205e:	601a      	str	r2, [r3, #0]
    /* Resume DMA transmission*/
    (heth->Instance)->DMATPDR = 0;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	f241 0304 	movw	r3, #4100	; 0x1004
 8002068:	4413      	add	r3, r2
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
  }
  
  /* Set ETH HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2201      	movs	r2, #1
 8002072:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2200      	movs	r2, #0
 800207a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800207e:	2300      	movs	r3, #0
}
 8002080:	4618      	mov	r0, r3
 8002082:	371c      	adds	r7, #28
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr
 800208c:	ac02b00b 	.word	0xac02b00b
 8002090:	fffffa0c 	.word	0xfffffa0c

08002094 <HAL_ETH_GetReceivedFrame_IT>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_GetReceivedFrame_IT(ETH_HandleTypeDef *heth)
{
 8002094:	b480      	push	{r7}
 8002096:	b085      	sub	sp, #20
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t descriptorscancounter = 0;
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(heth);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d101      	bne.n	80020ae <HAL_ETH_GetReceivedFrame_IT+0x1a>
 80020aa:	2302      	movs	r3, #2
 80020ac:	e074      	b.n	8002198 <HAL_ETH_GetReceivedFrame_IT+0x104>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	2201      	movs	r2, #1
 80020b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set ETH HAL State to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2202      	movs	r2, #2
 80020ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Scan descriptors owned by CPU */
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 80020be:	e05a      	b.n	8002176 <HAL_ETH_GetReceivedFrame_IT+0xe2>
  {
    /* Just for security */
    descriptorscancounter++;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	3301      	adds	r3, #1
 80020c4:	60fb      	str	r3, [r7, #12]
    
    /* Check if first segment in frame */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_FS) != (uint32_t)RESET) && ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)) */  
    if((heth->RxDesc->Status & (ETH_DMARXDESC_FS | ETH_DMARXDESC_LS)) == (uint32_t)ETH_DMARXDESC_FS)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d4:	d10d      	bne.n	80020f2 <HAL_ETH_GetReceivedFrame_IT+0x5e>
    { 
      heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	631a      	str	r2, [r3, #48]	; 0x30
      heth->RxFrameInfos.SegCount = 1;   
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	461a      	mov	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	629a      	str	r2, [r3, #40]	; 0x28
 80020f0:	e041      	b.n	8002176 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Check if intermediate segment */
    /* ((heth->RxDesc->Status & ETH_DMARXDESC_LS) == (uint32_t)RESET)&& ((heth->RxDesc->Status & ETH_DMARXDESC_FS) == (uint32_t)RESET)) */
    else if ((heth->RxDesc->Status & (ETH_DMARXDESC_LS | ETH_DMARXDESC_FS)) == (uint32_t)RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d10b      	bne.n	8002118 <HAL_ETH_GetReceivedFrame_IT+0x84>
    {
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	639a      	str	r2, [r3, #56]	; 0x38
      /* Point to next descriptor */
      heth->RxDesc = (ETH_DMADescTypeDef*)(heth->RxDesc->Buffer2NextDescAddr);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	461a      	mov	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	629a      	str	r2, [r3, #40]	; 0x28
 8002116:	e02e      	b.n	8002176 <HAL_ETH_GetReceivedFrame_IT+0xe2>
    }
    /* Should be last segment */
    else
    { 
      /* Last segment */
      heth->RxFrameInfos.LSRxDesc = heth->RxDesc;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Increment segment count */
      (heth->RxFrameInfos.SegCount)++;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002124:	1c5a      	adds	r2, r3, #1
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Check if last segment is first segment: one segment contains the frame */
      if ((heth->RxFrameInfos.SegCount) == 1)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800212e:	2b01      	cmp	r3, #1
 8002130:	d103      	bne.n	800213a <HAL_ETH_GetReceivedFrame_IT+0xa6>
      {
        heth->RxFrameInfos.FSRxDesc = heth->RxDesc;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
      }
      
      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      heth->RxFrameInfos.length = (((heth->RxDesc)->Status & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8002146:	1f1a      	subs	r2, r3, #4
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Get the address of the buffer start address */ 
      heth->RxFrameInfos.buffer =((heth->RxFrameInfos).FSRxDesc)->Buffer1Addr;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Point to next descriptor */      
      heth->RxDesc = (ETH_DMADescTypeDef*) (heth->RxDesc->Buffer2NextDescAddr);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	461a      	mov	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Set HAL State to Ready */
      heth->State = HAL_ETH_STATE_READY;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
      /* Return function status */
      return HAL_OK;
 8002172:	2300      	movs	r3, #0
 8002174:	e010      	b.n	8002198 <HAL_ETH_GetReceivedFrame_IT+0x104>
  while (((heth->RxDesc->Status & ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (descriptorscancounter < ETH_RXBUFNB))
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	db02      	blt.n	8002186 <HAL_ETH_GetReceivedFrame_IT+0xf2>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b03      	cmp	r3, #3
 8002184:	d99c      	bls.n	80020c0 <HAL_ETH_GetReceivedFrame_IT+0x2c>
    }
  }

  /* Set HAL State to Ready */
  heth->State = HAL_ETH_STATE_READY;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2201      	movs	r2, #1
 800218a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2200      	movs	r2, #0
 8002192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_ERROR;
 8002196:	2301      	movs	r3, #1
}
 8002198:	4618      	mov	r0, r3
 800219a:	3714      	adds	r7, #20
 800219c:	46bd      	mov	sp, r7
 800219e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a2:	4770      	bx	lr

080021a4 <HAL_ETH_IRQHandler>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  /* Frame received */
  if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_R)) 
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	f241 0314 	movw	r3, #4116	; 0x1014
 80021b4:	4413      	add	r3, r2
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021bc:	2b40      	cmp	r3, #64	; 0x40
 80021be:	d112      	bne.n	80021e6 <HAL_ETH_IRQHandler+0x42>
  {
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80021c0:	6878      	ldr	r0, [r7, #4]
 80021c2:	f010 ffad 	bl	8013120 <HAL_ETH_RxCpltCallback>
    
     /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_R);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	f241 0314 	movw	r3, #4116	; 0x1014
 80021ce:	4413      	add	r3, r2
 80021d0:	2240      	movs	r2, #64	; 0x40
 80021d2:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	2200      	movs	r2, #0
 80021e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80021e4:	e01b      	b.n	800221e <HAL_ETH_IRQHandler+0x7a>

  }
  /* Frame transmitted */
  else if (__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_T)) 
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681a      	ldr	r2, [r3, #0]
 80021ea:	f241 0314 	movw	r3, #4116	; 0x1014
 80021ee:	4413      	add	r3, r2
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d111      	bne.n	800221e <HAL_ETH_IRQHandler+0x7a>
  {
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f000 f839 	bl	8002272 <HAL_ETH_TxCpltCallback>
    
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_T);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681a      	ldr	r2, [r3, #0]
 8002204:	f241 0314 	movw	r3, #4116	; 0x1014
 8002208:	4413      	add	r3, r2
 800220a:	2201      	movs	r2, #1
 800220c:	601a      	str	r2, [r3, #0]

    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2201      	movs	r2, #1
 8002212:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2200      	movs	r2, #0
 800221a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
  
  /* Clear the interrupt flags */
  __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_IT_NIS);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681a      	ldr	r2, [r3, #0]
 8002222:	f241 0314 	movw	r3, #4116	; 0x1014
 8002226:	4413      	add	r3, r2
 8002228:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800222c:	601a      	str	r2, [r3, #0]
  
  /* ETH DMA Error */
  if(__HAL_ETH_DMA_GET_FLAG(heth, ETH_DMA_FLAG_AIS))
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	f241 0314 	movw	r3, #4116	; 0x1014
 8002236:	4413      	add	r3, r2
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800223e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002242:	d112      	bne.n	800226a <HAL_ETH_IRQHandler+0xc6>
  {
    /* Ethernet Error callback */
    HAL_ETH_ErrorCallback(heth);
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f000 f81e 	bl	8002286 <HAL_ETH_ErrorCallback>

    /* Clear the interrupt flags */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMA_FLAG_AIS);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681a      	ldr	r2, [r3, #0]
 800224e:	f241 0314 	movw	r3, #4116	; 0x1014
 8002252:	4413      	add	r3, r2
 8002254:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002258:	601a      	str	r2, [r3, #0]
  
    /* Set HAL State to Ready */
    heth->State = HAL_ETH_STATE_READY;
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	2201      	movs	r2, #1
 800225e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    
    /* Process Unlocked */
    __HAL_UNLOCK(heth);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2200      	movs	r2, #0
 8002266:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }
}
 800226a:	bf00      	nop
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <HAL_ETH_TxCpltCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *heth)
{
 8002272:	b480      	push	{r7}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800227a:	bf00      	nop
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <HAL_ETH_ErrorCallback>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *heth)
{
 8002286:	b480      	push	{r7}
 8002288:	b083      	sub	sp, #12
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  UNUSED(heth);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_TxCpltCallback could be implemented in the user file
  */ 
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <HAL_ETH_ReadPHYRegister>:
  *                   More PHY register could be read depending on the used PHY
  * @param RegValue PHY register value                  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t *RegValue)
{
 800229a:	b580      	push	{r7, lr}
 800229c:	b086      	sub	sp, #24
 800229e:	af00      	add	r7, sp, #0
 80022a0:	60f8      	str	r0, [r7, #12]
 80022a2:	460b      	mov	r3, r1
 80022a4:	607a      	str	r2, [r7, #4]
 80022a6:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;     
 80022a8:	2300      	movs	r3, #0
 80022aa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 80022ac:	2300      	movs	r3, #0
 80022ae:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_RD)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	2b82      	cmp	r3, #130	; 0x82
 80022ba:	d101      	bne.n	80022c0 <HAL_ETH_ReadPHYRegister+0x26>
  {
    return HAL_BUSY;
 80022bc:	2302      	movs	r3, #2
 80022be:	e050      	b.n	8002362 <HAL_ETH_ReadPHYRegister+0xc8>
  }
  /* Set ETH HAL State to BUSY_RD */
  heth->State = HAL_ETH_STATE_BUSY_RD;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2282      	movs	r2, #130	; 0x82
 80022c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	f003 031c 	and.w	r3, r3, #28
 80022d6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII address register value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress << 11) & ETH_MACMIIAR_PA); /* Set the PHY device address   */
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8a1b      	ldrh	r3, [r3, #16]
 80022dc:	02db      	lsls	r3, r3, #11
 80022de:	b29b      	uxth	r3, r3
 80022e0:	697a      	ldr	r2, [r7, #20]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                   /* Set the PHY register address */
 80022e6:	897b      	ldrh	r3, [r7, #10]
 80022e8:	019b      	lsls	r3, r3, #6
 80022ea:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80022ee:	697a      	ldr	r2, [r7, #20]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	617b      	str	r3, [r7, #20]
  tmpreg &= ~ETH_MACMIIAR_MW;                                           /* Set the read mode            */
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f023 0302 	bic.w	r3, r3, #2
 80022fa:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                            /* Set the MII Busy bit         */
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	f043 0301 	orr.w	r3, r3, #1
 8002302:	617b      	str	r3, [r7, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	697a      	ldr	r2, [r7, #20]
 800230a:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 800230c:	f7fe fe6a 	bl	8000fe4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002312:	e015      	b.n	8002340 <HAL_ETH_ReadPHYRegister+0xa6>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_READ_TO)
 8002314:	f7fe fe66 	bl	8000fe4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002322:	d309      	bcc.n	8002338 <HAL_ETH_ReadPHYRegister+0x9e>
    {
      heth->State= HAL_ETH_STATE_READY;
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	2201      	movs	r2, #1
 8002328:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	2200      	movs	r2, #0
 8002330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 8002334:	2303      	movs	r3, #3
 8002336:	e014      	b.n	8002362 <HAL_ETH_ReadPHYRegister+0xc8>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	691b      	ldr	r3, [r3, #16]
 800233e:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1e4      	bne.n	8002314 <HAL_ETH_ReadPHYRegister+0x7a>
  }
  
  /* Get MACMIIDR value */
  *RegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695b      	ldr	r3, [r3, #20]
 8002350:	b29b      	uxth	r3, r3
 8002352:	461a      	mov	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	601a      	str	r2, [r3, #0]
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3718      	adds	r7, #24
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_ETH_WritePHYRegister>:
  *             More PHY register could be written depending on the used PHY
  * @param  RegValue the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint16_t PHYReg, uint32_t RegValue)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b086      	sub	sp, #24
 800236e:	af00      	add	r7, sp, #0
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	460b      	mov	r3, r1
 8002374:	607a      	str	r2, [r7, #4]
 8002376:	817b      	strh	r3, [r7, #10]
  uint32_t tmpreg = 0;
 8002378:	2300      	movs	r3, #0
 800237a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	613b      	str	r3, [r7, #16]
  
  /* Check parameters */
  assert_param(IS_ETH_PHY_ADDRESS(heth->Init.PhyAddress));
  
  /* Check the ETH peripheral state */
  if(heth->State == HAL_ETH_STATE_BUSY_WR)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002386:	b2db      	uxtb	r3, r3
 8002388:	2b42      	cmp	r3, #66	; 0x42
 800238a:	d101      	bne.n	8002390 <HAL_ETH_WritePHYRegister+0x26>
  {
    return HAL_BUSY;
 800238c:	2302      	movs	r3, #2
 800238e:	e04e      	b.n	800242e <HAL_ETH_WritePHYRegister+0xc4>
  }
  /* Set ETH HAL State to BUSY_WR */
  heth->State = HAL_ETH_STATE_BUSY_WR;
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	2242      	movs	r2, #66	; 0x42
 8002394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Get the ETHERNET MACMIIAR value */
  tmpreg = heth->Instance->MACMIIAR;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	617b      	str	r3, [r7, #20]
  
  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg &= ~ETH_MACMIIAR_CR_MASK;
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	f003 031c 	and.w	r3, r3, #28
 80023a6:	617b      	str	r3, [r7, #20]
  
  /* Prepare the MII register address value */
  tmpreg |=(((uint32_t)heth->Init.PhyAddress<<11) & ETH_MACMIIAR_PA); /* Set the PHY device address */
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8a1b      	ldrh	r3, [r3, #16]
 80023ac:	02db      	lsls	r3, r3, #11
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	617b      	str	r3, [r7, #20]
  tmpreg |=(((uint32_t)PHYReg<<6) & ETH_MACMIIAR_MR);                 /* Set the PHY register address */
 80023b6:	897b      	ldrh	r3, [r7, #10]
 80023b8:	019b      	lsls	r3, r3, #6
 80023ba:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80023be:	697a      	ldr	r2, [r7, #20]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MW;                                          /* Set the write mode */
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	f043 0302 	orr.w	r3, r3, #2
 80023ca:	617b      	str	r3, [r7, #20]
  tmpreg |= ETH_MACMIIAR_MB;                                          /* Set the MII Busy bit */
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
  
  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	687a      	ldr	r2, [r7, #4]
 80023da:	b292      	uxth	r2, r2
 80023dc:	615a      	str	r2, [r3, #20]
  
  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	611a      	str	r2, [r3, #16]
  
  /* Get tick */
  tickstart = HAL_GetTick();
 80023e6:	f7fe fdfd 	bl	8000fe4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]
  
  /* Check for the Busy flag */
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80023ec:	e015      	b.n	800241a <HAL_ETH_WritePHYRegister+0xb0>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > PHY_WRITE_TO)
 80023ee:	f7fe fdf9 	bl	8000fe4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023fc:	d309      	bcc.n	8002412 <HAL_ETH_WritePHYRegister+0xa8>
    {
      heth->State= HAL_ETH_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2201      	movs	r2, #1
 8002402:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
      /* Process Unlocked */
      __HAL_UNLOCK(heth);
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    
      return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e00d      	b.n	800242e <HAL_ETH_WritePHYRegister+0xc4>
    }
    
    tmpreg = heth->Instance->MACMIIAR;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	617b      	str	r3, [r7, #20]
  while((tmpreg & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	f003 0301 	and.w	r3, r3, #1
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1e4      	bne.n	80023ee <HAL_ETH_WritePHYRegister+0x84>
  }
  
  /* Set ETH HAL State to READY */
  heth->State = HAL_ETH_STATE_READY;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Return function status */
  return HAL_OK; 
 800242c:	2300      	movs	r3, #0
}
 800242e:	4618      	mov	r0, r3
 8002430:	3718      	adds	r7, #24
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}

08002436 <HAL_ETH_Start>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{  
 8002436:	b580      	push	{r7, lr}
 8002438:	b082      	sub	sp, #8
 800243a:	af00      	add	r7, sp, #0
 800243c:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(heth);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002444:	2b01      	cmp	r3, #1
 8002446:	d101      	bne.n	800244c <HAL_ETH_Start+0x16>
 8002448:	2302      	movs	r3, #2
 800244a:	e01f      	b.n	800248c <HAL_ETH_Start+0x56>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Set the ETH peripheral state to BUSY */
  heth->State = HAL_ETH_STATE_BUSY;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2202      	movs	r2, #2
 8002458:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Enable transmit state machine of the MAC for transmission on the MII */
  ETH_MACTransmissionEnable(heth);
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f000 fa19 	bl	8002894 <ETH_MACTransmissionEnable>
  
  /* Enable receive state machine of the MAC for reception from the MII */
  ETH_MACReceptionEnable(heth);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fa33 	bl	80028ce <ETH_MACReceptionEnable>
  
  /* Flush Transmit FIFO */
  ETH_FlushTransmitFIFO(heth);
 8002468:	6878      	ldr	r0, [r7, #4]
 800246a:	f000 fa7d 	bl	8002968 <ETH_FlushTransmitFIFO>
  
  /* Start DMA transmission */
  ETH_DMATransmissionEnable(heth);
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	f000 fa4a 	bl	8002908 <ETH_DMATransmissionEnable>
  
  /* Start DMA reception */
  ETH_DMAReceptionEnable(heth);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fa5f 	bl	8002938 <ETH_DMAReceptionEnable>
  
  /* Set the ETH state to READY*/
  heth->State= HAL_ETH_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  
  /* Process Unlocked */
  __HAL_UNLOCK(heth);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  
  /* Return function status */
  return HAL_OK;
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	3708      	adds	r7, #8
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}

08002494 <ETH_MACDMAConfig>:
  *         the configuration information for ETHERNET module
  * @param  err Ethernet Init error
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth, uint32_t err)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b0b0      	sub	sp, #192	; 0xc0
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	6039      	str	r1, [r7, #0]
  ETH_MACInitTypeDef macinit;
  ETH_DMAInitTypeDef dmainit;
  uint32_t tmpreg = 0;
 800249e:	2300      	movs	r3, #0
 80024a0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  if (err != ETH_SUCCESS) /* Auto-negotiation failed */
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d007      	beq.n	80024ba <ETH_MACDMAConfig+0x26>
  {
    /* Set Ethernet duplex mode to Full-duplex */
    (heth->Init).DuplexMode = ETH_MODE_FULLDUPLEX;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80024b0:	60da      	str	r2, [r3, #12]
    
    /* Set Ethernet speed to 100M */
    (heth->Init).Speed = ETH_SPEED_100M;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80024b8:	609a      	str	r2, [r3, #8]
  }
  
  /* Ethernet MAC default initialization **************************************/
  macinit.Watchdog = ETH_WATCHDOG_ENABLE;
 80024ba:	2300      	movs	r3, #0
 80024bc:	64bb      	str	r3, [r7, #72]	; 0x48
  macinit.Jabber = ETH_JABBER_ENABLE;
 80024be:	2300      	movs	r3, #0
 80024c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  macinit.InterFrameGap = ETH_INTERFRAMEGAP_96BIT;
 80024c2:	2300      	movs	r3, #0
 80024c4:	653b      	str	r3, [r7, #80]	; 0x50
  macinit.CarrierSense = ETH_CARRIERSENCE_ENABLE;
 80024c6:	2300      	movs	r3, #0
 80024c8:	657b      	str	r3, [r7, #84]	; 0x54
  macinit.ReceiveOwn = ETH_RECEIVEOWN_ENABLE;
 80024ca:	2300      	movs	r3, #0
 80024cc:	65bb      	str	r3, [r7, #88]	; 0x58
  macinit.LoopbackMode = ETH_LOOPBACKMODE_DISABLE;
 80024ce:	2300      	movs	r3, #0
 80024d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if(heth->Init.ChecksumMode == ETH_CHECKSUM_BY_HARDWARE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	69db      	ldr	r3, [r3, #28]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d103      	bne.n	80024e2 <ETH_MACDMAConfig+0x4e>
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_ENABLE;
 80024da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80024de:	663b      	str	r3, [r7, #96]	; 0x60
 80024e0:	e001      	b.n	80024e6 <ETH_MACDMAConfig+0x52>
  }
  else
  {
    macinit.ChecksumOffload = ETH_CHECKSUMOFFLAOD_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	663b      	str	r3, [r7, #96]	; 0x60
  }
  macinit.RetryTransmission = ETH_RETRYTRANSMISSION_DISABLE;
 80024e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80024ea:	667b      	str	r3, [r7, #100]	; 0x64
  macinit.AutomaticPadCRCStrip = ETH_AUTOMATICPADCRCSTRIP_DISABLE;
 80024ec:	2300      	movs	r3, #0
 80024ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macinit.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80024f0:	2300      	movs	r3, #0
 80024f2:	66fb      	str	r3, [r7, #108]	; 0x6c
  macinit.DeferralCheck = ETH_DEFFERRALCHECK_DISABLE;
 80024f4:	2300      	movs	r3, #0
 80024f6:	673b      	str	r3, [r7, #112]	; 0x70
  macinit.ReceiveAll = ETH_RECEIVEAll_DISABLE;
 80024f8:	2300      	movs	r3, #0
 80024fa:	677b      	str	r3, [r7, #116]	; 0x74
  macinit.SourceAddrFilter = ETH_SOURCEADDRFILTER_DISABLE;
 80024fc:	2300      	movs	r3, #0
 80024fe:	67bb      	str	r3, [r7, #120]	; 0x78
  macinit.PassControlFrames = ETH_PASSCONTROLFRAMES_BLOCKALL;
 8002500:	2340      	movs	r3, #64	; 0x40
 8002502:	67fb      	str	r3, [r7, #124]	; 0x7c
  macinit.BroadcastFramesReception = ETH_BROADCASTFRAMESRECEPTION_ENABLE;
 8002504:	2300      	movs	r3, #0
 8002506:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  macinit.DestinationAddrFilter = ETH_DESTINATIONADDRFILTER_NORMAL;
 800250a:	2300      	movs	r3, #0
 800250c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macinit.PromiscuousMode = ETH_PROMISCUOUS_MODE_DISABLE;
 8002510:	2300      	movs	r3, #0
 8002512:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macinit.MulticastFramesFilter = ETH_MULTICASTFRAMESFILTER_PERFECT;
 8002516:	2300      	movs	r3, #0
 8002518:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  macinit.UnicastFramesFilter = ETH_UNICASTFRAMESFILTER_PERFECT;
 800251c:	2300      	movs	r3, #0
 800251e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  macinit.HashTableHigh = 0x0;
 8002522:	2300      	movs	r3, #0
 8002524:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  macinit.HashTableLow = 0x0;
 8002528:	2300      	movs	r3, #0
 800252a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  macinit.PauseTime = 0x0;
 800252e:	2300      	movs	r3, #0
 8002530:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  macinit.ZeroQuantaPause = ETH_ZEROQUANTAPAUSE_DISABLE;
 8002534:	2380      	movs	r3, #128	; 0x80
 8002536:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  macinit.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800253a:	2300      	movs	r3, #0
 800253c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  macinit.UnicastPauseFrameDetect = ETH_UNICASTPAUSEFRAMEDETECT_DISABLE;
 8002540:	2300      	movs	r3, #0
 8002542:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  macinit.ReceiveFlowControl = ETH_RECEIVEFLOWCONTROL_DISABLE;
 8002546:	2300      	movs	r3, #0
 8002548:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  macinit.TransmitFlowControl = ETH_TRANSMITFLOWCONTROL_DISABLE;
 800254c:	2300      	movs	r3, #0
 800254e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  macinit.VLANTagComparison = ETH_VLANTAGCOMPARISON_16BIT;
 8002552:	2300      	movs	r3, #0
 8002554:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  macinit.VLANTagIdentifier = 0x0;
 8002558:	2300      	movs	r3, #0
 800255a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  
  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg = (heth->Instance)->MACCR;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg &= ETH_MACCR_CLEAR_MASK;
 8002568:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800256c:	4baa      	ldr	r3, [pc, #680]	; (8002818 <ETH_MACDMAConfig+0x384>)
 800256e:	4013      	ands	r3, r2
 8002570:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  /* Set the IPCO bit according to ETH ChecksumOffload value */
  /* Set the DR bit according to ETH RetryTransmission value */
  /* Set the ACS bit according to ETH AutomaticPadCRCStrip value */
  /* Set the BL bit according to ETH BackOffLimit value */
  /* Set the DC bit according to ETH DeferralCheck value */
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002574:	6cba      	ldr	r2, [r7, #72]	; 0x48
                       macinit.Jabber | 
 8002576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 8002578:	431a      	orrs	r2, r3
                       macinit.InterFrameGap |
 800257a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
                       macinit.Jabber | 
 800257c:	431a      	orrs	r2, r3
                       macinit.CarrierSense |
 800257e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
                       macinit.InterFrameGap |
 8002580:	431a      	orrs	r2, r3
                       (heth->Init).Speed | 
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	689b      	ldr	r3, [r3, #8]
                       macinit.CarrierSense |
 8002586:	431a      	orrs	r2, r3
                       macinit.ReceiveOwn |
 8002588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
                       (heth->Init).Speed | 
 800258a:	431a      	orrs	r2, r3
                       macinit.LoopbackMode |
 800258c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
                       macinit.ReceiveOwn |
 800258e:	431a      	orrs	r2, r3
                       (heth->Init).DuplexMode | 
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	68db      	ldr	r3, [r3, #12]
                       macinit.LoopbackMode |
 8002594:	431a      	orrs	r2, r3
                       macinit.ChecksumOffload |    
 8002596:	6e3b      	ldr	r3, [r7, #96]	; 0x60
                       (heth->Init).DuplexMode | 
 8002598:	431a      	orrs	r2, r3
                       macinit.RetryTransmission | 
 800259a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
                       macinit.ChecksumOffload |    
 800259c:	431a      	orrs	r2, r3
                       macinit.AutomaticPadCRCStrip | 
 800259e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
                       macinit.RetryTransmission | 
 80025a0:	431a      	orrs	r2, r3
                       macinit.BackOffLimit | 
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
                       macinit.AutomaticPadCRCStrip | 
 80025a4:	431a      	orrs	r2, r3
                       macinit.DeferralCheck);
 80025a6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
                       macinit.BackOffLimit | 
 80025a8:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(macinit.Watchdog | 
 80025aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  
  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025bc:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80025c8:	2001      	movs	r0, #1
 80025ca:	f7fe fd17 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg; 
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80025d6:	601a      	str	r2, [r3, #0]
  /* Set the DAIF bit according to ETH DestinationAddrFilter value */
  /* Set the PR bit according to ETH PromiscuousMode value */
  /* Set the PM, HMC and HPF bits according to ETH MulticastFramesFilter value */
  /* Set the HUC and HPF bits according to ETH UnicastFramesFilter value */
  /* Write to ETHERNET MACFFR */  
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	6f79      	ldr	r1, [r7, #116]	; 0x74
                                        macinit.SourceAddrFilter |
 80025de:	6fba      	ldr	r2, [r7, #120]	; 0x78
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 80025e0:	4311      	orrs	r1, r2
                                        macinit.PassControlFrames |
 80025e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
                                        macinit.SourceAddrFilter |
 80025e4:	4311      	orrs	r1, r2
                                        macinit.BroadcastFramesReception | 
 80025e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
                                        macinit.PassControlFrames |
 80025ea:	4311      	orrs	r1, r2
                                        macinit.DestinationAddrFilter |
 80025ec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
                                        macinit.BroadcastFramesReception | 
 80025f0:	4311      	orrs	r1, r2
                                        macinit.PromiscuousMode |
 80025f2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
                                        macinit.DestinationAddrFilter |
 80025f6:	4311      	orrs	r1, r2
                                        macinit.MulticastFramesFilter |
 80025f8:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
                                        macinit.PromiscuousMode |
 80025fc:	4311      	orrs	r1, r2
                                        macinit.UnicastFramesFilter);
 80025fe:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
                                        macinit.MulticastFramesFilter |
 8002602:	430a      	orrs	r2, r1
  (heth->Instance)->MACFFR = (uint32_t)(macinit.ReceiveAll | 
 8002604:	605a      	str	r2, [r3, #4]
   
   /* Wait until the write operation will be taken into account:
      at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFFR;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 8002610:	2001      	movs	r0, #1
 8002612:	f7fe fcf3 	bl	8000ffc <HAL_Delay>
   (heth->Instance)->MACFFR = tmpreg;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800261e:	605a      	str	r2, [r3, #4]
   
   /*--------------- ETHERNET MACHTHR and MACHTLR Configuration --------------*/
   /* Write to ETHERNET MACHTHR */
   (heth->Instance)->MACHTHR = (uint32_t)macinit.HashTableHigh;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002628:	609a      	str	r2, [r3, #8]
   
   /* Write to ETHERNET MACHTLR */
   (heth->Instance)->MACHTLR = (uint32_t)macinit.HashTableLow;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8002632:	60da      	str	r2, [r3, #12]
   /*----------------------- ETHERNET MACFCR Configuration -------------------*/
   
   /* Get the ETHERNET MACFCR value */  
   tmpreg = (heth->Instance)->MACFCR;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699b      	ldr	r3, [r3, #24]
 800263a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Clear xx bits */
   tmpreg &= ETH_MACFCR_CLEAR_MASK;
 800263e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002642:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002646:	4013      	ands	r3, r2
 8002648:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   /* Set the DZPQ bit according to ETH ZeroQuantaPause value */
   /* Set the PLT bit according to ETH PauseLowThreshold value */
   /* Set the UP bit according to ETH UnicastPauseFrameDetect value */
   /* Set the RFE bit according to ETH ReceiveFlowControl value */
   /* Set the TFE bit according to ETH TransmitFlowControl value */ 
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 800264c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002650:	041a      	lsls	r2, r3, #16
                        macinit.ZeroQuantaPause |
 8002652:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002656:	431a      	orrs	r2, r3
                        macinit.PauseLowThreshold |
 8002658:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
                        macinit.ZeroQuantaPause |
 800265c:	431a      	orrs	r2, r3
                        macinit.UnicastPauseFrameDetect | 
 800265e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
                        macinit.PauseLowThreshold |
 8002662:	431a      	orrs	r2, r3
                        macinit.ReceiveFlowControl |
 8002664:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
                        macinit.UnicastPauseFrameDetect | 
 8002668:	431a      	orrs	r2, r3
                        macinit.TransmitFlowControl); 
 800266a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
                        macinit.ReceiveFlowControl |
 800266e:	4313      	orrs	r3, r2
   tmpreg |= (uint32_t)((macinit.PauseTime << 16) | 
 8002670:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002674:	4313      	orrs	r3, r2
 8002676:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   
   /* Write to ETHERNET MACFCR */
   (heth->Instance)->MACFCR = (uint32_t)tmpreg;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002682:	619a      	str	r2, [r3, #24]
   
   /* Wait until the write operation will be taken into account:
   at least four TX_CLK/RX_CLK clock cycles */
   tmpreg = (heth->Instance)->MACFCR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
   HAL_Delay(ETH_REG_WRITE_DELAY);
 800268e:	2001      	movs	r0, #1
 8002690:	f7fe fcb4 	bl	8000ffc <HAL_Delay>
   (heth->Instance)->MACFCR = tmpreg;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800269c:	619a      	str	r2, [r3, #24]
   
   /*----------------------- ETHERNET MACVLANTR Configuration ----------------*/
   /* Set the ETV bit according to ETH VLANTagComparison value */
   /* Set the VL bit according to ETH VLANTagIdentifier value */  
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
                                            macinit.VLANTagIdentifier);
 80026a6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
   (heth->Instance)->MACVLANTR = (uint32_t)(macinit.VLANTagComparison | 
 80026aa:	430a      	orrs	r2, r1
 80026ac:	61da      	str	r2, [r3, #28]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->MACVLANTR;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	69db      	ldr	r3, [r3, #28]
 80026b4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80026b8:	2001      	movs	r0, #1
 80026ba:	f7fe fc9f 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->MACVLANTR = tmpreg;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80026c6:	61da      	str	r2, [r3, #28]
    
    /* Ethernet DMA default initialization ************************************/
    dmainit.DropTCPIPChecksumErrorFrame = ETH_DROPTCPIPCHECKSUMERRORFRAME_ENABLE;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60bb      	str	r3, [r7, #8]
    dmainit.ReceiveStoreForward = ETH_RECEIVESTOREFORWARD_ENABLE;
 80026cc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026d0:	60fb      	str	r3, [r7, #12]
    dmainit.FlushReceivedFrame = ETH_FLUSHRECEIVEDFRAME_ENABLE;
 80026d2:	2300      	movs	r3, #0
 80026d4:	613b      	str	r3, [r7, #16]
    dmainit.TransmitStoreForward = ETH_TRANSMITSTOREFORWARD_ENABLE;  
 80026d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80026da:	617b      	str	r3, [r7, #20]
    dmainit.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80026dc:	2300      	movs	r3, #0
 80026de:	61bb      	str	r3, [r7, #24]
    dmainit.ForwardErrorFrames = ETH_FORWARDERRORFRAMES_DISABLE;
 80026e0:	2300      	movs	r3, #0
 80026e2:	61fb      	str	r3, [r7, #28]
    dmainit.ForwardUndersizedGoodFrames = ETH_FORWARDUNDERSIZEDGOODFRAMES_DISABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	623b      	str	r3, [r7, #32]
    dmainit.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80026e8:	2300      	movs	r3, #0
 80026ea:	627b      	str	r3, [r7, #36]	; 0x24
    dmainit.SecondFrameOperate = ETH_SECONDFRAMEOPERARTE_ENABLE;
 80026ec:	2304      	movs	r3, #4
 80026ee:	62bb      	str	r3, [r7, #40]	; 0x28
    dmainit.AddressAlignedBeats = ETH_ADDRESSALIGNEDBEATS_ENABLE;
 80026f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80026f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    dmainit.FixedBurst = ETH_FIXEDBURST_ENABLE;
 80026f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80026fa:	633b      	str	r3, [r7, #48]	; 0x30
    dmainit.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80026fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002700:	637b      	str	r3, [r7, #52]	; 0x34
    dmainit.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002702:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002706:	63bb      	str	r3, [r7, #56]	; 0x38
    dmainit.EnhancedDescriptorFormat = ETH_DMAENHANCEDDESCRIPTOR_ENABLE;
 8002708:	2380      	movs	r3, #128	; 0x80
 800270a:	63fb      	str	r3, [r7, #60]	; 0x3c
    dmainit.DescriptorSkipLength = 0x0;
 800270c:	2300      	movs	r3, #0
 800270e:	643b      	str	r3, [r7, #64]	; 0x40
    dmainit.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002710:	2300      	movs	r3, #0
 8002712:	647b      	str	r3, [r7, #68]	; 0x44
    
    /* Get the ETHERNET DMAOMR value */
    tmpreg = (heth->Instance)->DMAOMR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681a      	ldr	r2, [r3, #0]
 8002718:	f241 0318 	movw	r3, #4120	; 0x1018
 800271c:	4413      	add	r3, r2
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Clear xx bits */
    tmpreg &= ETH_DMAOMR_CLEAR_MASK;
 8002724:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002728:	4b3c      	ldr	r3, [pc, #240]	; (800281c <ETH_MACDMAConfig+0x388>)
 800272a:	4013      	ands	r3, r2
 800272c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    /* Set the TTC bit according to ETH TransmitThresholdControl value */
    /* Set the FEF bit according to ETH ForwardErrorFrames value */
    /* Set the FUF bit according to ETH ForwardUndersizedGoodFrames value */
    /* Set the RTC bit according to ETH ReceiveThresholdControl value */
    /* Set the OSF bit according to ETH SecondFrameOperate value */
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002730:	68ba      	ldr	r2, [r7, #8]
                         dmainit.ReceiveStoreForward |
 8002732:	68fb      	ldr	r3, [r7, #12]
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002734:	431a      	orrs	r2, r3
                         dmainit.FlushReceivedFrame |
 8002736:	693b      	ldr	r3, [r7, #16]
                         dmainit.ReceiveStoreForward |
 8002738:	431a      	orrs	r2, r3
                         dmainit.TransmitStoreForward | 
 800273a:	697b      	ldr	r3, [r7, #20]
                         dmainit.FlushReceivedFrame |
 800273c:	431a      	orrs	r2, r3
                         dmainit.TransmitThresholdControl |
 800273e:	69bb      	ldr	r3, [r7, #24]
                         dmainit.TransmitStoreForward | 
 8002740:	431a      	orrs	r2, r3
                         dmainit.ForwardErrorFrames |
 8002742:	69fb      	ldr	r3, [r7, #28]
                         dmainit.TransmitThresholdControl |
 8002744:	431a      	orrs	r2, r3
                         dmainit.ForwardUndersizedGoodFrames |
 8002746:	6a3b      	ldr	r3, [r7, #32]
                         dmainit.ForwardErrorFrames |
 8002748:	431a      	orrs	r2, r3
                         dmainit.ReceiveThresholdControl |
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                         dmainit.ForwardUndersizedGoodFrames |
 800274c:	431a      	orrs	r2, r3
                         dmainit.SecondFrameOperate);
 800274e:	6abb      	ldr	r3, [r7, #40]	; 0x28
                         dmainit.ReceiveThresholdControl |
 8002750:	4313      	orrs	r3, r2
    tmpreg |= (uint32_t)(dmainit.DropTCPIPChecksumErrorFrame | 
 8002752:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    
    /* Write to ETHERNET DMAOMR */
    (heth->Instance)->DMAOMR = (uint32_t)tmpreg;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	f241 0318 	movw	r3, #4120	; 0x1018
 8002764:	4413      	add	r3, r2
 8002766:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 800276a:	601a      	str	r2, [r3, #0]
    
    /* Wait until the write operation will be taken into account:
       at least four TX_CLK/RX_CLK clock cycles */
    tmpreg = (heth->Instance)->DMAOMR;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	f241 0318 	movw	r3, #4120	; 0x1018
 8002774:	4413      	add	r3, r2
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800277c:	2001      	movs	r0, #1
 800277e:	f7fe fc3d 	bl	8000ffc <HAL_Delay>
    (heth->Instance)->DMAOMR = tmpreg;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f241 0318 	movw	r3, #4120	; 0x1018
 800278a:	4413      	add	r3, r2
 800278c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8002790:	601a      	str	r2, [r3, #0]
    /* Set the RPBL and 4*PBL bits according to ETH RxDMABurstLength value */
    /* Set the PBL and 4*PBL bits according to ETH TxDMABurstLength value */
    /* Set the Enhanced DMA descriptors bit according to ETH EnhancedDescriptorFormat value*/
    /* Set the DSL bit according to ETH DesciptorSkipLength value */
    /* Set the PR and DA bits according to ETH DMAArbitration value */
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
                                          dmainit.FixedBurst |
 8002798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 800279a:	4311      	orrs	r1, r2
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 800279c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
                                          dmainit.FixedBurst |
 800279e:	4311      	orrs	r1, r2
                                          dmainit.TxDMABurstLength |
 80027a0:	6bba      	ldr	r2, [r7, #56]	; 0x38
                                          dmainit.RxDMABurstLength |    /* !! if 4xPBL is selected for Tx or Rx it is applied for the other */
 80027a2:	4311      	orrs	r1, r2
                                          dmainit.EnhancedDescriptorFormat |
 80027a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
                                          dmainit.TxDMABurstLength |
 80027a6:	4311      	orrs	r1, r2
                                          (dmainit.DescriptorSkipLength << 2) |
 80027a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80027aa:	0092      	lsls	r2, r2, #2
                                          dmainit.EnhancedDescriptorFormat |
 80027ac:	4311      	orrs	r1, r2
                                          dmainit.DMAArbitration |
 80027ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
                                          (dmainit.DescriptorSkipLength << 2) |
 80027b0:	430a      	orrs	r2, r1
    (heth->Instance)->DMABMR = (uint32_t)(dmainit.AddressAlignedBeats | 
 80027b2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80027b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ba:	601a      	str	r2, [r3, #0]
                                          ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */
     
     /* Wait until the write operation will be taken into account:
        at least four TX_CLK/RX_CLK clock cycles */
     tmpreg = (heth->Instance)->DMABMR;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
     HAL_Delay(ETH_REG_WRITE_DELAY);
 80027ca:	2001      	movs	r0, #1
 80027cc:	f7fe fc16 	bl	8000ffc <HAL_Delay>
     (heth->Instance)->DMABMR = tmpreg;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d8:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80027dc:	601a      	str	r2, [r3, #0]

     if((heth->Init).RxMode == ETH_RXINTERRUPT_MODE)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	699b      	ldr	r3, [r3, #24]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d10d      	bne.n	8002802 <ETH_MACDMAConfig+0x36e>
     {
       /* Enable the Ethernet Rx Interrupt */
       __HAL_ETH_DMA_ENABLE_IT((heth), ETH_DMA_IT_NIS | ETH_DMA_IT_R);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6819      	ldr	r1, [r3, #0]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	f241 031c 	movw	r3, #4124	; 0x101c
 80027f2:	4413      	add	r3, r2
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <ETH_MACDMAConfig+0x38c>)
 80027f8:	431a      	orrs	r2, r3
 80027fa:	f241 031c 	movw	r3, #4124	; 0x101c
 80027fe:	440b      	add	r3, r1
 8002800:	601a      	str	r2, [r3, #0]
     }

     /* Initialize MAC address in ethernet MAC */ 
     ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	461a      	mov	r2, r3
 8002808:	2100      	movs	r1, #0
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f80a 	bl	8002824 <ETH_MACAddressConfig>
}
 8002810:	bf00      	nop
 8002812:	37c0      	adds	r7, #192	; 0xc0
 8002814:	46bd      	mov	sp, r7
 8002816:	bd80      	pop	{r7, pc}
 8002818:	ff20810f 	.word	0xff20810f
 800281c:	f8de3f23 	.word	0xf8de3f23
 8002820:	00010040 	.word	0x00010040

08002824 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002824:	b480      	push	{r7}
 8002826:	b087      	sub	sp, #28
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
  
  /* Check the parameters */
  assert_param(IS_ETH_MAC_ADDRESS0123(MacAddr));
  
  /* Calculate the selected MAC address high register */
  tmpreg = ((uint32_t)Addr[5] << 8) | (uint32_t)Addr[4];
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3305      	adds	r3, #5
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	687a      	ldr	r2, [r7, #4]
 800283a:	3204      	adds	r2, #4
 800283c:	7812      	ldrb	r2, [r2, #0]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg;
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	4b11      	ldr	r3, [pc, #68]	; (800288c <ETH_MACAddressConfig+0x68>)
 8002846:	4413      	add	r3, r2
 8002848:	461a      	mov	r2, r3
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg = ((uint32_t)Addr[3] << 24) | ((uint32_t)Addr[2] << 16) | ((uint32_t)Addr[1] << 8) | Addr[0];
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3303      	adds	r3, #3
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	061a      	lsls	r2, r3, #24
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	3302      	adds	r3, #2
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	041b      	lsls	r3, r3, #16
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	3301      	adds	r3, #1
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	021b      	lsls	r3, r3, #8
 8002868:	4313      	orrs	r3, r2
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	7812      	ldrb	r2, [r2, #0]
 800286e:	4313      	orrs	r3, r2
 8002870:	617b      	str	r3, [r7, #20]
  
  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg;
 8002872:	68ba      	ldr	r2, [r7, #8]
 8002874:	4b06      	ldr	r3, [pc, #24]	; (8002890 <ETH_MACAddressConfig+0x6c>)
 8002876:	4413      	add	r3, r2
 8002878:	461a      	mov	r2, r3
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	6013      	str	r3, [r2, #0]
}
 800287e:	bf00      	nop
 8002880:	371c      	adds	r7, #28
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	40028040 	.word	0x40028040
 8002890:	40028044 	.word	0x40028044

08002894 <ETH_MACTransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module  
  * @retval None
  */
static void ETH_MACTransmissionEnable(ETH_HandleTypeDef *heth)
{ 
 8002894:	b580      	push	{r7, lr}
 8002896:	b084      	sub	sp, #16
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC transmission */
  (heth->Instance)->MACCR |= ETH_MACCR_TE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	6812      	ldr	r2, [r2, #0]
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	f042 0208 	orr.w	r2, r2, #8
 80028ae:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f7fe fb9f 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	601a      	str	r2, [r3, #0]
}
 80028c6:	bf00      	nop
 80028c8:	3710      	adds	r7, #16
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <ETH_MACReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_MACReceptionEnable(ETH_HandleTypeDef *heth)
{ 
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b084      	sub	sp, #16
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
  
  /* Enable the MAC reception */
  (heth->Instance)->MACCR |= ETH_MACCR_RE;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6812      	ldr	r2, [r2, #0]
 80028e2:	6812      	ldr	r2, [r2, #0]
 80028e4:	f042 0204 	orr.w	r2, r2, #4
 80028e8:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->MACCR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028f2:	2001      	movs	r0, #1
 80028f4:	f7fe fb82 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	68fa      	ldr	r2, [r7, #12]
 80028fe:	601a      	str	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <ETH_DMATransmissionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module   
  * @retval None
  */
static void ETH_DMATransmissionEnable(ETH_HandleTypeDef *heth)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA transmission */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_ST;  
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6819      	ldr	r1, [r3, #0]
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	f241 0318 	movw	r3, #4120	; 0x1018
 800291c:	4413      	add	r3, r2
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8002924:	f241 0318 	movw	r3, #4120	; 0x1018
 8002928:	440b      	add	r3, r1
 800292a:	601a      	str	r2, [r3, #0]
}
 800292c:	bf00      	nop
 800292e:	370c      	adds	r7, #12
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <ETH_DMAReceptionEnable>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module 
  * @retval None
  */
static void ETH_DMAReceptionEnable(ETH_HandleTypeDef *heth)
{  
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  /* Enable the DMA reception */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_SR;  
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6819      	ldr	r1, [r3, #0]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	f241 0318 	movw	r3, #4120	; 0x1018
 800294c:	4413      	add	r3, r2
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f043 0202 	orr.w	r2, r3, #2
 8002954:	f241 0318 	movw	r3, #4120	; 0x1018
 8002958:	440b      	add	r3, r1
 800295a:	601a      	str	r2, [r3, #0]
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002970:	2300      	movs	r3, #0
 8002972:	60fb      	str	r3, [r7, #12]
  
  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6819      	ldr	r1, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	f241 0318 	movw	r3, #4120	; 0x1018
 8002980:	4413      	add	r3, r2
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002988:	f241 0318 	movw	r3, #4120	; 0x1018
 800298c:	440b      	add	r3, r1
 800298e:	601a      	str	r2, [r3, #0]
  
  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	f241 0318 	movw	r3, #4120	; 0x1018
 8002998:	4413      	add	r3, r2
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800299e:	2001      	movs	r0, #1
 80029a0:	f7fe fb2c 	bl	8000ffc <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6819      	ldr	r1, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	f241 0318 	movw	r3, #4120	; 0x1018
 80029ae:	440b      	add	r3, r1
 80029b0:	601a      	str	r2, [r3, #0]
}
 80029b2:	bf00      	nop
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
	...

080029bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029bc:	b480      	push	{r7}
 80029be:	b089      	sub	sp, #36	; 0x24
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80029c6:	2300      	movs	r3, #0
 80029c8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80029ca:	2300      	movs	r3, #0
 80029cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80029d6:	2300      	movs	r3, #0
 80029d8:	61fb      	str	r3, [r7, #28]
 80029da:	e175      	b.n	8002cc8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80029dc:	2201      	movs	r2, #1
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	fa02 f303 	lsl.w	r3, r2, r3
 80029e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029f0:	693a      	ldr	r2, [r7, #16]
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	f040 8164 	bne.w	8002cc2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d003      	beq.n	8002a0a <HAL_GPIO_Init+0x4e>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	2b12      	cmp	r3, #18
 8002a08:	d123      	bne.n	8002a52 <HAL_GPIO_Init+0x96>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	08da      	lsrs	r2, r3, #3
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	3208      	adds	r2, #8
 8002a12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0307 	and.w	r3, r3, #7
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	691a      	ldr	r2, [r3, #16]
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	f003 0307 	and.w	r3, r3, #7
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3e:	69ba      	ldr	r2, [r7, #24]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002a44:	69fb      	ldr	r3, [r7, #28]
 8002a46:	08da      	lsrs	r2, r3, #3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	3208      	adds	r2, #8
 8002a4c:	69b9      	ldr	r1, [r7, #24]
 8002a4e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a58:	69fb      	ldr	r3, [r7, #28]
 8002a5a:	005b      	lsls	r3, r3, #1
 8002a5c:	2203      	movs	r2, #3
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43db      	mvns	r3, r3
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	4013      	ands	r3, r2
 8002a68:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0203 	and.w	r2, r3, #3
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	69ba      	ldr	r2, [r7, #24]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	69ba      	ldr	r2, [r7, #24]
 8002a84:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b01      	cmp	r3, #1
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_GPIO_Init+0xea>
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d007      	beq.n	8002aa6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a96:	683b      	ldr	r3, [r7, #0]
 8002a98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002a9a:	2b11      	cmp	r3, #17
 8002a9c:	d003      	beq.n	8002aa6 <HAL_GPIO_Init+0xea>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	2b12      	cmp	r3, #18
 8002aa4:	d130      	bne.n	8002b08 <HAL_GPIO_Init+0x14c>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002adc:	2201      	movs	r2, #1
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae4:	43db      	mvns	r3, r3
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	4013      	ands	r3, r2
 8002aea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	685b      	ldr	r3, [r3, #4]
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	f003 0201 	and.w	r2, r3, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	68db      	ldr	r3, [r3, #12]
 8002b0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	005b      	lsls	r3, r3, #1
 8002b12:	2203      	movs	r2, #3
 8002b14:	fa02 f303 	lsl.w	r3, r2, r3
 8002b18:	43db      	mvns	r3, r3
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4013      	ands	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	689a      	ldr	r2, [r3, #8]
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 80be 	beq.w	8002cc2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b46:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_GPIO_Init+0x320>)
 8002b48:	4b64      	ldr	r3, [pc, #400]	; (8002cdc <HAL_GPIO_Init+0x320>)
 8002b4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b50:	6453      	str	r3, [r2, #68]	; 0x44
 8002b52:	4b62      	ldr	r3, [pc, #392]	; (8002cdc <HAL_GPIO_Init+0x320>)
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b5a:	60fb      	str	r3, [r7, #12]
 8002b5c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002b5e:	4a60      	ldr	r2, [pc, #384]	; (8002ce0 <HAL_GPIO_Init+0x324>)
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	089b      	lsrs	r3, r3, #2
 8002b64:	3302      	adds	r3, #2
 8002b66:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002b6c:	69fb      	ldr	r3, [r7, #28]
 8002b6e:	f003 0303 	and.w	r3, r3, #3
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	220f      	movs	r2, #15
 8002b76:	fa02 f303 	lsl.w	r3, r2, r3
 8002b7a:	43db      	mvns	r3, r3
 8002b7c:	69ba      	ldr	r2, [r7, #24]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a57      	ldr	r2, [pc, #348]	; (8002ce4 <HAL_GPIO_Init+0x328>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d037      	beq.n	8002bfa <HAL_GPIO_Init+0x23e>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a56      	ldr	r2, [pc, #344]	; (8002ce8 <HAL_GPIO_Init+0x32c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d031      	beq.n	8002bf6 <HAL_GPIO_Init+0x23a>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a55      	ldr	r2, [pc, #340]	; (8002cec <HAL_GPIO_Init+0x330>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d02b      	beq.n	8002bf2 <HAL_GPIO_Init+0x236>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a54      	ldr	r2, [pc, #336]	; (8002cf0 <HAL_GPIO_Init+0x334>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d025      	beq.n	8002bee <HAL_GPIO_Init+0x232>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4a53      	ldr	r2, [pc, #332]	; (8002cf4 <HAL_GPIO_Init+0x338>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d01f      	beq.n	8002bea <HAL_GPIO_Init+0x22e>
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	4a52      	ldr	r2, [pc, #328]	; (8002cf8 <HAL_GPIO_Init+0x33c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d019      	beq.n	8002be6 <HAL_GPIO_Init+0x22a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4a51      	ldr	r2, [pc, #324]	; (8002cfc <HAL_GPIO_Init+0x340>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d013      	beq.n	8002be2 <HAL_GPIO_Init+0x226>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a50      	ldr	r2, [pc, #320]	; (8002d00 <HAL_GPIO_Init+0x344>)
 8002bbe:	4293      	cmp	r3, r2
 8002bc0:	d00d      	beq.n	8002bde <HAL_GPIO_Init+0x222>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4a4f      	ldr	r2, [pc, #316]	; (8002d04 <HAL_GPIO_Init+0x348>)
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	d007      	beq.n	8002bda <HAL_GPIO_Init+0x21e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	4a4e      	ldr	r2, [pc, #312]	; (8002d08 <HAL_GPIO_Init+0x34c>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d101      	bne.n	8002bd6 <HAL_GPIO_Init+0x21a>
 8002bd2:	2309      	movs	r3, #9
 8002bd4:	e012      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bd6:	230a      	movs	r3, #10
 8002bd8:	e010      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	e00e      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bde:	2307      	movs	r3, #7
 8002be0:	e00c      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002be2:	2306      	movs	r3, #6
 8002be4:	e00a      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002be6:	2305      	movs	r3, #5
 8002be8:	e008      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bea:	2304      	movs	r3, #4
 8002bec:	e006      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e004      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bf2:	2302      	movs	r3, #2
 8002bf4:	e002      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e000      	b.n	8002bfc <HAL_GPIO_Init+0x240>
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	69fa      	ldr	r2, [r7, #28]
 8002bfe:	f002 0203 	and.w	r2, r2, #3
 8002c02:	0092      	lsls	r2, r2, #2
 8002c04:	4093      	lsls	r3, r2
 8002c06:	69ba      	ldr	r2, [r7, #24]
 8002c08:	4313      	orrs	r3, r2
 8002c0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002c0c:	4934      	ldr	r1, [pc, #208]	; (8002ce0 <HAL_GPIO_Init+0x324>)
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	089b      	lsrs	r3, r3, #2
 8002c12:	3302      	adds	r3, #2
 8002c14:	69ba      	ldr	r2, [r7, #24]
 8002c16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c1a:	4b3c      	ldr	r3, [pc, #240]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	43db      	mvns	r3, r3
 8002c24:	69ba      	ldr	r2, [r7, #24]
 8002c26:	4013      	ands	r3, r2
 8002c28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d003      	beq.n	8002c3e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002c36:	69ba      	ldr	r2, [r7, #24]
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c3e:	4a33      	ldr	r2, [pc, #204]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c40:	69bb      	ldr	r3, [r7, #24]
 8002c42:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002c44:	4b31      	ldr	r3, [pc, #196]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d003      	beq.n	8002c68 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002c60:	69ba      	ldr	r2, [r7, #24]
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c68:	4a28      	ldr	r2, [pc, #160]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b27      	ldr	r3, [pc, #156]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	43db      	mvns	r3, r3
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002c8a:	69ba      	ldr	r2, [r7, #24]
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c92:	4a1e      	ldr	r2, [pc, #120]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c94:	69bb      	ldr	r3, [r7, #24]
 8002c96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c98:	4b1c      	ldr	r3, [pc, #112]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	43db      	mvns	r3, r3
 8002ca2:	69ba      	ldr	r2, [r7, #24]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002cb4:	69ba      	ldr	r2, [r7, #24]
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cbc:	4a13      	ldr	r2, [pc, #76]	; (8002d0c <HAL_GPIO_Init+0x350>)
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	3301      	adds	r3, #1
 8002cc6:	61fb      	str	r3, [r7, #28]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	f67f ae86 	bls.w	80029dc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002cd0:	bf00      	nop
 8002cd2:	3724      	adds	r7, #36	; 0x24
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40013800 	.word	0x40013800
 8002ce4:	40020000 	.word	0x40020000
 8002ce8:	40020400 	.word	0x40020400
 8002cec:	40020800 	.word	0x40020800
 8002cf0:	40020c00 	.word	0x40020c00
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	40021400 	.word	0x40021400
 8002cfc:	40021800 	.word	0x40021800
 8002d00:	40021c00 	.word	0x40021c00
 8002d04:	40022000 	.word	0x40022000
 8002d08:	40022400 	.word	0x40022400
 8002d0c:	40013c00 	.word	0x40013c00

08002d10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d10:	b480      	push	{r7}
 8002d12:	b085      	sub	sp, #20
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	460b      	mov	r3, r1
 8002d1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	691a      	ldr	r2, [r3, #16]
 8002d20:	887b      	ldrh	r3, [r7, #2]
 8002d22:	4013      	ands	r3, r2
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d002      	beq.n	8002d2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
 8002d2c:	e001      	b.n	8002d32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3714      	adds	r7, #20
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	460b      	mov	r3, r1
 8002d4a:	807b      	strh	r3, [r7, #2]
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d50:	787b      	ldrb	r3, [r7, #1]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002d5c:	e003      	b.n	8002d66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002d5e:	887b      	ldrh	r3, [r7, #2]
 8002d60:	041a      	lsls	r2, r3, #16
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	619a      	str	r2, [r3, #24]
}
 8002d66:	bf00      	nop
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d7e:	4a23      	ldr	r2, [pc, #140]	; (8002e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002d80:	4b22      	ldr	r3, [pc, #136]	; (8002e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d88:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8a:	4b20      	ldr	r3, [pc, #128]	; (8002e0c <HAL_PWREx_EnableOverDrive+0x98>)
 8002d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d92:	603b      	str	r3, [r7, #0]
 8002d94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d96:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d98:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002da2:	f7fe f91f 	bl	8000fe4 <HAL_GetTick>
 8002da6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002da8:	e009      	b.n	8002dbe <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002daa:	f7fe f91b 	bl	8000fe4 <HAL_GetTick>
 8002dae:	4602      	mov	r2, r0
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	1ad3      	subs	r3, r2, r3
 8002db4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002db8:	d901      	bls.n	8002dbe <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002dba:	2303      	movs	r3, #3
 8002dbc:	e022      	b.n	8002e04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dc0:	685b      	ldr	r3, [r3, #4]
 8002dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002dc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dca:	d1ee      	bne.n	8002daa <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002dcc:	4a10      	ldr	r2, [pc, #64]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dce:	4b10      	ldr	r3, [pc, #64]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dd8:	f7fe f904 	bl	8000fe4 <HAL_GetTick>
 8002ddc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002dde:	e009      	b.n	8002df4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002de0:	f7fe f900 	bl	8000fe4 <HAL_GetTick>
 8002de4:	4602      	mov	r2, r0
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dee:	d901      	bls.n	8002df4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e007      	b.n	8002e04 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002df4:	4b06      	ldr	r3, [pc, #24]	; (8002e10 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002e00:	d1ee      	bne.n	8002de0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002e02:	2300      	movs	r3, #0
}
 8002e04:	4618      	mov	r0, r3
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	40023800 	.word	0x40023800
 8002e10:	40007000 	.word	0x40007000

08002e14 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b086      	sub	sp, #24
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  FlagStatus pwrclkchanged = RESET;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d101      	bne.n	8002e2a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e25e      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0301 	and.w	r3, r3, #1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	f000 8087 	beq.w	8002f46 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e38:	4b96      	ldr	r3, [pc, #600]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	f003 030c 	and.w	r3, r3, #12
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d00c      	beq.n	8002e5e <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e44:	4b93      	ldr	r3, [pc, #588]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d112      	bne.n	8002e76 <HAL_RCC_OscConfig+0x62>
 8002e50:	4b90      	ldr	r3, [pc, #576]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e58:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e5c:	d10b      	bne.n	8002e76 <HAL_RCC_OscConfig+0x62>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e5e:	4b8d      	ldr	r3, [pc, #564]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d06c      	beq.n	8002f44 <HAL_RCC_OscConfig+0x130>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d168      	bne.n	8002f44 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	e238      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e7e:	d106      	bne.n	8002e8e <HAL_RCC_OscConfig+0x7a>
 8002e80:	4a84      	ldr	r2, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e82:	4b84      	ldr	r3, [pc, #528]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e8a:	6013      	str	r3, [r2, #0]
 8002e8c:	e02e      	b.n	8002eec <HAL_RCC_OscConfig+0xd8>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d10c      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x9c>
 8002e96:	4a7f      	ldr	r2, [pc, #508]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e98:	4b7e      	ldr	r3, [pc, #504]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ea0:	6013      	str	r3, [r2, #0]
 8002ea2:	4a7c      	ldr	r2, [pc, #496]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ea4:	4b7b      	ldr	r3, [pc, #492]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	e01d      	b.n	8002eec <HAL_RCC_OscConfig+0xd8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0xc0>
 8002eba:	4a76      	ldr	r2, [pc, #472]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ebc:	4b75      	ldr	r3, [pc, #468]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ec4:	6013      	str	r3, [r2, #0]
 8002ec6:	4a73      	ldr	r2, [pc, #460]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ec8:	4b72      	ldr	r3, [pc, #456]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0xd8>
 8002ed4:	4a6f      	ldr	r2, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ed6:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ede:	6013      	str	r3, [r2, #0]
 8002ee0:	4a6c      	ldr	r2, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002eea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d013      	beq.n	8002f1c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ef4:	f7fe f876 	bl	8000fe4 <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002efc:	f7fe f872 	bl	8000fe4 <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	2b64      	cmp	r3, #100	; 0x64
 8002f08:	d901      	bls.n	8002f0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f0a:	2303      	movs	r3, #3
 8002f0c:	e1ec      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f0e:	4b61      	ldr	r3, [pc, #388]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0f0      	beq.n	8002efc <HAL_RCC_OscConfig+0xe8>
 8002f1a:	e014      	b.n	8002f46 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f1c:	f7fe f862 	bl	8000fe4 <HAL_GetTick>
 8002f20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f22:	e008      	b.n	8002f36 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f24:	f7fe f85e 	bl	8000fe4 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b64      	cmp	r3, #100	; 0x64
 8002f30:	d901      	bls.n	8002f36 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e1d8      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f36:	4b57      	ldr	r3, [pc, #348]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d1f0      	bne.n	8002f24 <HAL_RCC_OscConfig+0x110>
 8002f42:	e000      	b.n	8002f46 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d069      	beq.n	8003026 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f52:	4b50      	ldr	r3, [pc, #320]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <HAL_RCC_OscConfig+0x162>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f5e:	4b4d      	ldr	r3, [pc, #308]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	f003 030c 	and.w	r3, r3, #12
 8002f66:	2b08      	cmp	r3, #8
 8002f68:	d11c      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x190>
 8002f6a:	4b4a      	ldr	r3, [pc, #296]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d116      	bne.n	8002fa4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f76:	4b47      	ldr	r3, [pc, #284]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 0302 	and.w	r3, r3, #2
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d005      	beq.n	8002f8e <HAL_RCC_OscConfig+0x17a>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d001      	beq.n	8002f8e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e1ac      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f8e:	4941      	ldr	r1, [pc, #260]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f90:	4b40      	ldr	r3, [pc, #256]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	00db      	lsls	r3, r3, #3
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fa2:	e040      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	68db      	ldr	r3, [r3, #12]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d023      	beq.n	8002ff4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002fac:	4a39      	ldr	r2, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002fae:	4b39      	ldr	r3, [pc, #228]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f043 0301 	orr.w	r3, r3, #1
 8002fb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fb8:	f7fe f814 	bl	8000fe4 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fbe:	e008      	b.n	8002fd2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fc0:	f7fe f810 	bl	8000fe4 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	2b02      	cmp	r3, #2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e18a      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fd2:	4b30      	ldr	r3, [pc, #192]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0f0      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fde:	492d      	ldr	r1, [pc, #180]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002fe0:	4b2c      	ldr	r3, [pc, #176]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	00db      	lsls	r3, r3, #3
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	600b      	str	r3, [r1, #0]
 8002ff2:	e018      	b.n	8003026 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ff4:	4a27      	ldr	r2, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	4b27      	ldr	r3, [pc, #156]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003000:	f7fd fff0 	bl	8000fe4 <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003008:	f7fd ffec 	bl	8000fe4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e166      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800301a:	4b1e      	ldr	r3, [pc, #120]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 0302 	and.w	r3, r3, #2
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f003 0308 	and.w	r3, r3, #8
 800302e:	2b00      	cmp	r3, #0
 8003030:	d038      	beq.n	80030a4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d019      	beq.n	800306e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800303a:	4a16      	ldr	r2, [pc, #88]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 800303c:	4b15      	ldr	r3, [pc, #84]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 800303e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003040:	f043 0301 	orr.w	r3, r3, #1
 8003044:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003046:	f7fd ffcd 	bl	8000fe4 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800304c:	e008      	b.n	8003060 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800304e:	f7fd ffc9 	bl	8000fe4 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d901      	bls.n	8003060 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e143      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003060:	4b0c      	ldr	r3, [pc, #48]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8003062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003064:	f003 0302 	and.w	r3, r3, #2
 8003068:	2b00      	cmp	r3, #0
 800306a:	d0f0      	beq.n	800304e <HAL_RCC_OscConfig+0x23a>
 800306c:	e01a      	b.n	80030a4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800306e:	4a09      	ldr	r2, [pc, #36]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8003070:	4b08      	ldr	r3, [pc, #32]	; (8003094 <HAL_RCC_OscConfig+0x280>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f023 0301 	bic.w	r3, r3, #1
 8003078:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800307a:	f7fd ffb3 	bl	8000fe4 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003080:	e00a      	b.n	8003098 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003082:	f7fd ffaf 	bl	8000fe4 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d903      	bls.n	8003098 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e129      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
 8003094:	40023800 	.word	0x40023800
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003098:	4b95      	ldr	r3, [pc, #596]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800309a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800309c:	f003 0302 	and.w	r3, r3, #2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d1ee      	bne.n	8003082 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f003 0304 	and.w	r3, r3, #4
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	f000 80a4 	beq.w	80031fa <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80030b2:	4b8f      	ldr	r3, [pc, #572]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10d      	bne.n	80030da <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80030be:	4a8c      	ldr	r2, [pc, #560]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80030c0:	4b8b      	ldr	r3, [pc, #556]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80030c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030c8:	6413      	str	r3, [r2, #64]	; 0x40
 80030ca:	4b89      	ldr	r3, [pc, #548]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80030cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030d2:	60fb      	str	r3, [r7, #12]
 80030d4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80030d6:	2301      	movs	r3, #1
 80030d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030da:	4b86      	ldr	r3, [pc, #536]	; (80032f4 <HAL_RCC_OscConfig+0x4e0>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d118      	bne.n	8003118 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80030e6:	4a83      	ldr	r2, [pc, #524]	; (80032f4 <HAL_RCC_OscConfig+0x4e0>)
 80030e8:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x4e0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030f2:	f7fd ff77 	bl	8000fe4 <HAL_GetTick>
 80030f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030f8:	e008      	b.n	800310c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80030fa:	f7fd ff73 	bl	8000fe4 <HAL_GetTick>
 80030fe:	4602      	mov	r2, r0
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	2b64      	cmp	r3, #100	; 0x64
 8003106:	d901      	bls.n	800310c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e0ed      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800310c:	4b79      	ldr	r3, [pc, #484]	; (80032f4 <HAL_RCC_OscConfig+0x4e0>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003114:	2b00      	cmp	r3, #0
 8003116:	d0f0      	beq.n	80030fa <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d106      	bne.n	800312e <HAL_RCC_OscConfig+0x31a>
 8003120:	4a73      	ldr	r2, [pc, #460]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003122:	4b73      	ldr	r3, [pc, #460]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	f043 0301 	orr.w	r3, r3, #1
 800312a:	6713      	str	r3, [r2, #112]	; 0x70
 800312c:	e02d      	b.n	800318a <HAL_RCC_OscConfig+0x376>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10c      	bne.n	8003150 <HAL_RCC_OscConfig+0x33c>
 8003136:	4a6e      	ldr	r2, [pc, #440]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003138:	4b6d      	ldr	r3, [pc, #436]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800313c:	f023 0301 	bic.w	r3, r3, #1
 8003140:	6713      	str	r3, [r2, #112]	; 0x70
 8003142:	4a6b      	ldr	r2, [pc, #428]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003144:	4b6a      	ldr	r3, [pc, #424]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003148:	f023 0304 	bic.w	r3, r3, #4
 800314c:	6713      	str	r3, [r2, #112]	; 0x70
 800314e:	e01c      	b.n	800318a <HAL_RCC_OscConfig+0x376>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2b05      	cmp	r3, #5
 8003156:	d10c      	bne.n	8003172 <HAL_RCC_OscConfig+0x35e>
 8003158:	4a65      	ldr	r2, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800315a:	4b65      	ldr	r3, [pc, #404]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800315c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800315e:	f043 0304 	orr.w	r3, r3, #4
 8003162:	6713      	str	r3, [r2, #112]	; 0x70
 8003164:	4a62      	ldr	r2, [pc, #392]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003166:	4b62      	ldr	r3, [pc, #392]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800316a:	f043 0301 	orr.w	r3, r3, #1
 800316e:	6713      	str	r3, [r2, #112]	; 0x70
 8003170:	e00b      	b.n	800318a <HAL_RCC_OscConfig+0x376>
 8003172:	4a5f      	ldr	r2, [pc, #380]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003174:	4b5e      	ldr	r3, [pc, #376]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003176:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003178:	f023 0301 	bic.w	r3, r3, #1
 800317c:	6713      	str	r3, [r2, #112]	; 0x70
 800317e:	4a5c      	ldr	r2, [pc, #368]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003180:	4b5b      	ldr	r3, [pc, #364]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003182:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003184:	f023 0304 	bic.w	r3, r3, #4
 8003188:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d015      	beq.n	80031be <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003192:	f7fd ff27 	bl	8000fe4 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003198:	e00a      	b.n	80031b0 <HAL_RCC_OscConfig+0x39c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800319a:	f7fd ff23 	bl	8000fe4 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d901      	bls.n	80031b0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e09b      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031b0:	4b4f      	ldr	r3, [pc, #316]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80031b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b4:	f003 0302 	and.w	r3, r3, #2
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ee      	beq.n	800319a <HAL_RCC_OscConfig+0x386>
 80031bc:	e014      	b.n	80031e8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031be:	f7fd ff11 	bl	8000fe4 <HAL_GetTick>
 80031c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031c4:	e00a      	b.n	80031dc <HAL_RCC_OscConfig+0x3c8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80031c6:	f7fd ff0d 	bl	8000fe4 <HAL_GetTick>
 80031ca:	4602      	mov	r2, r0
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	1ad3      	subs	r3, r2, r3
 80031d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d901      	bls.n	80031dc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80031d8:	2303      	movs	r3, #3
 80031da:	e085      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80031dc:	4b44      	ldr	r3, [pc, #272]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80031de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031e0:	f003 0302 	and.w	r3, r3, #2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d1ee      	bne.n	80031c6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031e8:	7dfb      	ldrb	r3, [r7, #23]
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d105      	bne.n	80031fa <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ee:	4a40      	ldr	r2, [pc, #256]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80031f0:	4b3f      	ldr	r3, [pc, #252]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80031f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	699b      	ldr	r3, [r3, #24]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d071      	beq.n	80032e6 <HAL_RCC_OscConfig+0x4d2>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003202:	4b3b      	ldr	r3, [pc, #236]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 030c 	and.w	r3, r3, #12
 800320a:	2b08      	cmp	r3, #8
 800320c:	d069      	beq.n	80032e2 <HAL_RCC_OscConfig+0x4ce>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b02      	cmp	r3, #2
 8003214:	d14b      	bne.n	80032ae <HAL_RCC_OscConfig+0x49a>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003216:	4a36      	ldr	r2, [pc, #216]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 8003218:	4b35      	ldr	r3, [pc, #212]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003222:	f7fd fedf 	bl	8000fe4 <HAL_GetTick>
 8003226:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003228:	e008      	b.n	800323c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800322a:	f7fd fedb 	bl	8000fe4 <HAL_GetTick>
 800322e:	4602      	mov	r2, r0
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	1ad3      	subs	r3, r2, r3
 8003234:	2b02      	cmp	r3, #2
 8003236:	d901      	bls.n	800323c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	e055      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800323c:	4b2c      	ldr	r3, [pc, #176]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f0      	bne.n	800322a <HAL_RCC_OscConfig+0x416>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003248:	4929      	ldr	r1, [pc, #164]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69da      	ldr	r2, [r3, #28]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a1b      	ldr	r3, [r3, #32]
 8003252:	431a      	orrs	r2, r3
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003258:	019b      	lsls	r3, r3, #6
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003260:	085b      	lsrs	r3, r3, #1
 8003262:	3b01      	subs	r3, #1
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326c:	061b      	lsls	r3, r3, #24
 800326e:	431a      	orrs	r2, r3
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003274:	071b      	lsls	r3, r3, #28
 8003276:	4313      	orrs	r3, r2
 8003278:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800327a:	4a1d      	ldr	r2, [pc, #116]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003284:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003286:	f7fd fead 	bl	8000fe4 <HAL_GetTick>
 800328a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800328c:	e008      	b.n	80032a0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800328e:	f7fd fea9 	bl	8000fe4 <HAL_GetTick>
 8003292:	4602      	mov	r2, r0
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	2b02      	cmp	r3, #2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e023      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032a0:	4b13      	ldr	r3, [pc, #76]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d0f0      	beq.n	800328e <HAL_RCC_OscConfig+0x47a>
 80032ac:	e01b      	b.n	80032e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ae:	4a10      	ldr	r2, [pc, #64]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80032b0:	4b0f      	ldr	r3, [pc, #60]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032ba:	f7fd fe93 	bl	8000fe4 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032c0:	e008      	b.n	80032d4 <HAL_RCC_OscConfig+0x4c0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032c2:	f7fd fe8f 	bl	8000fe4 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d901      	bls.n	80032d4 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 80032d0:	2303      	movs	r3, #3
 80032d2:	e009      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d4:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <HAL_RCC_OscConfig+0x4dc>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d1f0      	bne.n	80032c2 <HAL_RCC_OscConfig+0x4ae>
 80032e0:	e001      	b.n	80032e6 <HAL_RCC_OscConfig+0x4d2>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80032e2:	2301      	movs	r3, #1
 80032e4:	e000      	b.n	80032e8 <HAL_RCC_OscConfig+0x4d4>
    }
  }
  return HAL_OK;
 80032e6:	2300      	movs	r3, #0
}
 80032e8:	4618      	mov	r0, r3
 80032ea:	3718      	adds	r7, #24
 80032ec:	46bd      	mov	sp, r7
 80032ee:	bd80      	pop	{r7, pc}
 80032f0:	40023800 	.word	0x40023800
 80032f4:	40007000 	.word	0x40007000

080032f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003302:	2300      	movs	r3, #0
 8003304:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d101      	bne.n	8003310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800330c:	2301      	movs	r3, #1
 800330e:	e0ce      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 020f 	and.w	r2, r3, #15
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	429a      	cmp	r2, r3
 800331c:	d210      	bcs.n	8003340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800331e:	4966      	ldr	r1, [pc, #408]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003320:	4b65      	ldr	r3, [pc, #404]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f023 020f 	bic.w	r2, r3, #15
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	4313      	orrs	r3, r2
 800332c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800332e:	4b62      	ldr	r3, [pc, #392]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 020f 	and.w	r2, r3, #15
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	429a      	cmp	r2, r3
 800333a:	d001      	beq.n	8003340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800333c:	2301      	movs	r3, #1
 800333e:	e0b6      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0302 	and.w	r3, r3, #2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d020      	beq.n	800338e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0304 	and.w	r3, r3, #4
 8003354:	2b00      	cmp	r3, #0
 8003356:	d005      	beq.n	8003364 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003358:	4a58      	ldr	r2, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800335a:	4b58      	ldr	r3, [pc, #352]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003362:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0308 	and.w	r3, r3, #8
 800336c:	2b00      	cmp	r3, #0
 800336e:	d005      	beq.n	800337c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003370:	4a52      	ldr	r2, [pc, #328]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003372:	4b52      	ldr	r3, [pc, #328]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800337a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800337c:	494f      	ldr	r1, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800337e:	4b4f      	ldr	r3, [pc, #316]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	4313      	orrs	r3, r2
 800338c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0301 	and.w	r3, r3, #1
 8003396:	2b00      	cmp	r3, #0
 8003398:	d040      	beq.n	800341c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d107      	bne.n	80033b2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033a2:	4b46      	ldr	r3, [pc, #280]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d115      	bne.n	80033da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e07d      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d107      	bne.n	80033ca <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ba:	4b40      	ldr	r3, [pc, #256]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d109      	bne.n	80033da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e071      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033ca:	4b3c      	ldr	r3, [pc, #240]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0302 	and.w	r3, r3, #2
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e069      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033da:	4938      	ldr	r1, [pc, #224]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033dc:	4b37      	ldr	r3, [pc, #220]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f023 0203 	bic.w	r2, r3, #3
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	4313      	orrs	r3, r2
 80033ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033ec:	f7fd fdfa 	bl	8000fe4 <HAL_GetTick>
 80033f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033f2:	e00a      	b.n	800340a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033f4:	f7fd fdf6 	bl	8000fe4 <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003402:	4293      	cmp	r3, r2
 8003404:	d901      	bls.n	800340a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003406:	2303      	movs	r3, #3
 8003408:	e051      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	4b2c      	ldr	r3, [pc, #176]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	f003 020c 	and.w	r2, r3, #12
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	429a      	cmp	r2, r3
 800341a:	d1eb      	bne.n	80033f4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800341c:	4b26      	ldr	r3, [pc, #152]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 020f 	and.w	r2, r3, #15
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d910      	bls.n	800344c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4923      	ldr	r1, [pc, #140]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800342c:	4b22      	ldr	r3, [pc, #136]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 020f 	bic.w	r2, r3, #15
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	4313      	orrs	r3, r2
 8003438:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800343a:	4b1f      	ldr	r3, [pc, #124]	; (80034b8 <HAL_RCC_ClockConfig+0x1c0>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 020f 	and.w	r2, r3, #15
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d001      	beq.n	800344c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e030      	b.n	80034ae <HAL_RCC_ClockConfig+0x1b6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0304 	and.w	r3, r3, #4
 8003454:	2b00      	cmp	r3, #0
 8003456:	d008      	beq.n	800346a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003458:	4918      	ldr	r1, [pc, #96]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	4b18      	ldr	r3, [pc, #96]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	68db      	ldr	r3, [r3, #12]
 8003466:	4313      	orrs	r3, r2
 8003468:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f003 0308 	and.w	r3, r3, #8
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003476:	4911      	ldr	r1, [pc, #68]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	4b10      	ldr	r3, [pc, #64]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	00db      	lsls	r3, r3, #3
 8003486:	4313      	orrs	r3, r2
 8003488:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800348a:	f000 f81d 	bl	80034c8 <HAL_RCC_GetSysClockFreq>
 800348e:	4601      	mov	r1, r0
 8003490:	4b0a      	ldr	r3, [pc, #40]	; (80034bc <HAL_RCC_ClockConfig+0x1c4>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	091b      	lsrs	r3, r3, #4
 8003496:	f003 030f 	and.w	r3, r3, #15
 800349a:	4a09      	ldr	r2, [pc, #36]	; (80034c0 <HAL_RCC_ClockConfig+0x1c8>)
 800349c:	5cd3      	ldrb	r3, [r2, r3]
 800349e:	fa21 f303 	lsr.w	r3, r1, r3
 80034a2:	4a08      	ldr	r2, [pc, #32]	; (80034c4 <HAL_RCC_ClockConfig+0x1cc>)
 80034a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80034a6:	2000      	movs	r0, #0
 80034a8:	f011 ff3c 	bl	8015324 <HAL_InitTick>

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}
 80034b6:	bf00      	nop
 80034b8:	40023c00 	.word	0x40023c00
 80034bc:	40023800 	.word	0x40023800
 80034c0:	0801a5e0 	.word	0x0801a5e0
 80034c4:	20000118 	.word	0x20000118

080034c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80034cc:	b08f      	sub	sp, #60	; 0x3c
 80034ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80034d0:	2300      	movs	r3, #0
 80034d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034d4:	2300      	movs	r3, #0
 80034d6:	637b      	str	r3, [r7, #52]	; 0x34
 80034d8:	2300      	movs	r3, #0
 80034da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t sysclockfreq = 0;
 80034dc:	2300      	movs	r3, #0
 80034de:	633b      	str	r3, [r7, #48]	; 0x30

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034e0:	4b62      	ldr	r3, [pc, #392]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	f003 030c 	and.w	r3, r3, #12
 80034e8:	2b04      	cmp	r3, #4
 80034ea:	d007      	beq.n	80034fc <HAL_RCC_GetSysClockFreq+0x34>
 80034ec:	2b08      	cmp	r3, #8
 80034ee:	d008      	beq.n	8003502 <HAL_RCC_GetSysClockFreq+0x3a>
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f040 80b2 	bne.w	800365a <HAL_RCC_GetSysClockFreq+0x192>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034f6:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80034f8:	633b      	str	r3, [r7, #48]	; 0x30
       break;
 80034fa:	e0b1      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034fc:	4b5d      	ldr	r3, [pc, #372]	; (8003674 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80034fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003500:	e0ae      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x198>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003502:	4b5a      	ldr	r3, [pc, #360]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800350a:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800350c:	4b57      	ldr	r3, [pc, #348]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003514:	2b00      	cmp	r3, #0
 8003516:	d04e      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0xee>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003518:	4b54      	ldr	r3, [pc, #336]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	099b      	lsrs	r3, r3, #6
 800351e:	f04f 0400 	mov.w	r4, #0
 8003522:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003526:	f04f 0200 	mov.w	r2, #0
 800352a:	ea01 0103 	and.w	r1, r1, r3
 800352e:	ea02 0204 	and.w	r2, r2, r4
 8003532:	460b      	mov	r3, r1
 8003534:	4614      	mov	r4, r2
 8003536:	0160      	lsls	r0, r4, #5
 8003538:	6278      	str	r0, [r7, #36]	; 0x24
 800353a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800353c:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 8003540:	6278      	str	r0, [r7, #36]	; 0x24
 8003542:	015b      	lsls	r3, r3, #5
 8003544:	623b      	str	r3, [r7, #32]
 8003546:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800354a:	1a5b      	subs	r3, r3, r1
 800354c:	eb64 0402 	sbc.w	r4, r4, r2
 8003550:	ea4f 1984 	mov.w	r9, r4, lsl #6
 8003554:	ea49 6993 	orr.w	r9, r9, r3, lsr #26
 8003558:	ea4f 1883 	mov.w	r8, r3, lsl #6
 800355c:	ebb8 0803 	subs.w	r8, r8, r3
 8003560:	eb69 0904 	sbc.w	r9, r9, r4
 8003564:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003568:	61fb      	str	r3, [r7, #28]
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003570:	61fb      	str	r3, [r7, #28]
 8003572:	ea4f 03c8 	mov.w	r3, r8, lsl #3
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800357c:	eb18 0801 	adds.w	r8, r8, r1
 8003580:	eb49 0902 	adc.w	r9, r9, r2
 8003584:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]
 800358c:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8003590:	617b      	str	r3, [r7, #20]
 8003592:	ea4f 2348 	mov.w	r3, r8, lsl #9
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800359c:	4640      	mov	r0, r8
 800359e:	4649      	mov	r1, r9
 80035a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a2:	f04f 0400 	mov.w	r4, #0
 80035a6:	461a      	mov	r2, r3
 80035a8:	4623      	mov	r3, r4
 80035aa:	f7fd fb71 	bl	8000c90 <__aeabi_uldivmod>
 80035ae:	4603      	mov	r3, r0
 80035b0:	460c      	mov	r4, r1
 80035b2:	637b      	str	r3, [r7, #52]	; 0x34
 80035b4:	e043      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x176>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b2d      	ldr	r3, [pc, #180]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	f04f 0400 	mov.w	r4, #0
 80035c0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80035c4:	f04f 0200 	mov.w	r2, #0
 80035c8:	ea01 0103 	and.w	r1, r1, r3
 80035cc:	ea02 0204 	and.w	r2, r2, r4
 80035d0:	460b      	mov	r3, r1
 80035d2:	4614      	mov	r4, r2
 80035d4:	0160      	lsls	r0, r4, #5
 80035d6:	60f8      	str	r0, [r7, #12]
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	ea40 60d3 	orr.w	r0, r0, r3, lsr #27
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	015b      	lsls	r3, r3, #5
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80035e8:	1a5b      	subs	r3, r3, r1
 80035ea:	eb64 0402 	sbc.w	r4, r4, r2
 80035ee:	01a6      	lsls	r6, r4, #6
 80035f0:	ea46 6693 	orr.w	r6, r6, r3, lsr #26
 80035f4:	019d      	lsls	r5, r3, #6
 80035f6:	1aed      	subs	r5, r5, r3
 80035f8:	eb66 0604 	sbc.w	r6, r6, r4
 80035fc:	00f3      	lsls	r3, r6, #3
 80035fe:	607b      	str	r3, [r7, #4]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	ea43 7355 	orr.w	r3, r3, r5, lsr #29
 8003606:	607b      	str	r3, [r7, #4]
 8003608:	00eb      	lsls	r3, r5, #3
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	e897 0060 	ldmia.w	r7, {r5, r6}
 8003610:	186d      	adds	r5, r5, r1
 8003612:	eb46 0602 	adc.w	r6, r6, r2
 8003616:	ea4f 2b86 	mov.w	fp, r6, lsl #10
 800361a:	ea4b 5b95 	orr.w	fp, fp, r5, lsr #22
 800361e:	ea4f 2a85 	mov.w	sl, r5, lsl #10
 8003622:	4655      	mov	r5, sl
 8003624:	465e      	mov	r6, fp
 8003626:	4628      	mov	r0, r5
 8003628:	4631      	mov	r1, r6
 800362a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362c:	f04f 0400 	mov.w	r4, #0
 8003630:	461a      	mov	r2, r3
 8003632:	4623      	mov	r3, r4
 8003634:	f7fd fb2c 	bl	8000c90 <__aeabi_uldivmod>
 8003638:	4603      	mov	r3, r0
 800363a:	460c      	mov	r4, r1
 800363c:	637b      	str	r3, [r7, #52]	; 0x34
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1 ) *2);
 800363e:	4b0b      	ldr	r3, [pc, #44]	; (800366c <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	0c1b      	lsrs	r3, r3, #16
 8003644:	f003 0303 	and.w	r3, r3, #3
 8003648:	3301      	adds	r3, #1
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	62bb      	str	r3, [r7, #40]	; 0x28

      sysclockfreq = pllvco/pllp;
 800364e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003652:	fbb2 f3f3 	udiv	r3, r2, r3
 8003656:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8003658:	e002      	b.n	8003660 <HAL_RCC_GetSysClockFreq+0x198>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800365a:	4b05      	ldr	r3, [pc, #20]	; (8003670 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800365c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800365e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003660:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8003662:	4618      	mov	r0, r3
 8003664:	373c      	adds	r7, #60	; 0x3c
 8003666:	46bd      	mov	sp, r7
 8003668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800366c:	40023800 	.word	0x40023800
 8003670:	00f42400 	.word	0x00f42400
 8003674:	007a1200 	.word	0x007a1200

08003678 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_GetHCLKFreq+0x14>)
 800367e:	681b      	ldr	r3, [r3, #0]
}
 8003680:	4618      	mov	r0, r3
 8003682:	46bd      	mov	sp, r7
 8003684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003688:	4770      	bx	lr
 800368a:	bf00      	nop
 800368c:	20000118 	.word	0x20000118

08003690 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003694:	f7ff fff0 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8003698:	4601      	mov	r1, r0
 800369a:	4b05      	ldr	r3, [pc, #20]	; (80036b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	0b5b      	lsrs	r3, r3, #13
 80036a0:	f003 0307 	and.w	r3, r3, #7
 80036a4:	4a03      	ldr	r2, [pc, #12]	; (80036b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036a6:	5cd3      	ldrb	r3, [r2, r3]
 80036a8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	40023800 	.word	0x40023800
 80036b4:	0801a5f0 	.word	0x0801a5f0

080036b8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	220f      	movs	r2, #15
 80036c6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80036c8:	4b12      	ldr	r3, [pc, #72]	; (8003714 <HAL_RCC_GetClockConfig+0x5c>)
 80036ca:	689b      	ldr	r3, [r3, #8]
 80036cc:	f003 0203 	and.w	r2, r3, #3
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036d4:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <HAL_RCC_GetClockConfig+0x5c>)
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036e0:	4b0c      	ldr	r3, [pc, #48]	; (8003714 <HAL_RCC_GetClockConfig+0x5c>)
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036ec:	4b09      	ldr	r3, [pc, #36]	; (8003714 <HAL_RCC_GetClockConfig+0x5c>)
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	08db      	lsrs	r3, r3, #3
 80036f2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036fa:	4b07      	ldr	r3, [pc, #28]	; (8003718 <HAL_RCC_GetClockConfig+0x60>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 020f 	and.w	r2, r3, #15
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	601a      	str	r2, [r3, #0]
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40023800 	.word	0x40023800
 8003718:	40023c00 	.word	0x40023c00

0800371c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b084      	sub	sp, #16
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d101      	bne.n	800372e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e082      	b.n	8003834 <HAL_SPI_Init+0x118>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800373a:	b2db      	uxtb	r3, r3
 800373c:	2b00      	cmp	r3, #0
 800373e:	d106      	bne.n	800374e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f011 fd5b 	bl	8015204 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2202      	movs	r2, #2
 8003752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6812      	ldr	r2, [r2, #0]
 800375e:	6812      	ldr	r2, [r2, #0]
 8003760:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003764:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800376e:	d902      	bls.n	8003776 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003770:	2300      	movs	r3, #0
 8003772:	60fb      	str	r3, [r7, #12]
 8003774:	e002      	b.n	800377c <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003776:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800377a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003784:	d007      	beq.n	8003796 <HAL_SPI_Init+0x7a>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	68db      	ldr	r3, [r3, #12]
 800378a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800378e:	d002      	beq.n	8003796 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379a:	2b00      	cmp	r3, #0
 800379c:	d10b      	bne.n	80037b6 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	68db      	ldr	r3, [r3, #12]
 80037a2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80037a6:	d903      	bls.n	80037b0 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2202      	movs	r2, #2
 80037ac:	631a      	str	r2, [r3, #48]	; 0x30
 80037ae:	e002      	b.n	80037b6 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6851      	ldr	r1, [r2, #4]
 80037be:	687a      	ldr	r2, [r7, #4]
 80037c0:	6892      	ldr	r2, [r2, #8]
 80037c2:	4311      	orrs	r1, r2
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6912      	ldr	r2, [r2, #16]
 80037c8:	4311      	orrs	r1, r2
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	6952      	ldr	r2, [r2, #20]
 80037ce:	4311      	orrs	r1, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6992      	ldr	r2, [r2, #24]
 80037d4:	f402 7200 	and.w	r2, r2, #512	; 0x200
 80037d8:	4311      	orrs	r1, r2
 80037da:	687a      	ldr	r2, [r7, #4]
 80037dc:	69d2      	ldr	r2, [r2, #28]
 80037de:	4311      	orrs	r1, r2
 80037e0:	687a      	ldr	r2, [r7, #4]
 80037e2:	6a12      	ldr	r2, [r2, #32]
 80037e4:	4311      	orrs	r1, r2
 80037e6:	687a      	ldr	r2, [r7, #4]
 80037e8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80037ea:	430a      	orrs	r2, r1
 80037ec:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	687a      	ldr	r2, [r7, #4]
 80037f4:	6992      	ldr	r2, [r2, #24]
 80037f6:	0c12      	lsrs	r2, r2, #16
 80037f8:	f002 0104 	and.w	r1, r2, #4
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003800:	4311      	orrs	r1, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003806:	4311      	orrs	r1, r2
 8003808:	687a      	ldr	r2, [r7, #4]
 800380a:	68d2      	ldr	r2, [r2, #12]
 800380c:	4311      	orrs	r1, r2
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	430a      	orrs	r2, r1
 8003812:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	687a      	ldr	r2, [r7, #4]
 800381a:	6812      	ldr	r2, [r2, #0]
 800381c:	69d2      	ldr	r2, [r2, #28]
 800381e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003822:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2201      	movs	r2, #1
 800382e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3710      	adds	r7, #16
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b088      	sub	sp, #32
 8003840:	af00      	add	r7, sp, #0
 8003842:	60f8      	str	r0, [r7, #12]
 8003844:	60b9      	str	r1, [r7, #8]
 8003846:	603b      	str	r3, [r7, #0]
 8003848:	4613      	mov	r3, r2
 800384a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 800384c:	2300      	movs	r3, #0
 800384e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003850:	2300      	movs	r3, #0
 8003852:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800385a:	2b01      	cmp	r3, #1
 800385c:	d101      	bne.n	8003862 <HAL_SPI_Transmit+0x26>
 800385e:	2302      	movs	r3, #2
 8003860:	e0f7      	b.n	8003a52 <HAL_SPI_Transmit+0x216>
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2201      	movs	r2, #1
 8003866:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800386a:	f7fd fbbb 	bl	8000fe4 <HAL_GetTick>
 800386e:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b01      	cmp	r3, #1
 800387a:	d002      	beq.n	8003882 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800387c:	2302      	movs	r3, #2
 800387e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003880:	e0de      	b.n	8003a40 <HAL_SPI_Transmit+0x204>
  }

  if ((pData == NULL) || (Size == 0U))
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d002      	beq.n	800388e <HAL_SPI_Transmit+0x52>
 8003888:	88fb      	ldrh	r3, [r7, #6]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d102      	bne.n	8003894 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003892:	e0d5      	b.n	8003a40 <HAL_SPI_Transmit+0x204>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2203      	movs	r2, #3
 8003898:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2200      	movs	r2, #0
 80038a0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	88fa      	ldrh	r2, [r7, #6]
 80038b2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	2200      	movs	r2, #0
 80038ce:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	2200      	movs	r2, #0
 80038d4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038de:	d107      	bne.n	80038f0 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	6812      	ldr	r2, [r2, #0]
 80038e8:	6812      	ldr	r2, [r2, #0]
 80038ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038ee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038fa:	2b40      	cmp	r3, #64	; 0x40
 80038fc:	d007      	beq.n	800390e <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68fa      	ldr	r2, [r7, #12]
 8003904:	6812      	ldr	r2, [r2, #0]
 8003906:	6812      	ldr	r2, [r2, #0]
 8003908:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800390c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	68db      	ldr	r3, [r3, #12]
 8003912:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003916:	d96e      	bls.n	80039f6 <HAL_SPI_Transmit+0x1ba>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003918:	e028      	b.n	800396c <HAL_SPI_Transmit+0x130>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	f003 0302 	and.w	r3, r3, #2
 8003924:	2b02      	cmp	r3, #2
 8003926:	d10f      	bne.n	8003948 <HAL_SPI_Transmit+0x10c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	8812      	ldrh	r2, [r2, #0]
 8003930:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3302      	adds	r3, #2
 8003936:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800393c:	b29b      	uxth	r3, r3
 800393e:	3b01      	subs	r3, #1
 8003940:	b29a      	uxth	r2, r3
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003946:	e011      	b.n	800396c <HAL_SPI_Transmit+0x130>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00b      	beq.n	8003966 <HAL_SPI_Transmit+0x12a>
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003954:	d00a      	beq.n	800396c <HAL_SPI_Transmit+0x130>
 8003956:	f7fd fb45 	bl	8000fe4 <HAL_GetTick>
 800395a:	4602      	mov	r2, r0
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	1ad2      	subs	r2, r2, r3
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	429a      	cmp	r2, r3
 8003964:	d302      	bcc.n	800396c <HAL_SPI_Transmit+0x130>
        {
          errorcode = HAL_TIMEOUT;
 8003966:	2303      	movs	r3, #3
 8003968:	77fb      	strb	r3, [r7, #31]
          goto error;
 800396a:	e069      	b.n	8003a40 <HAL_SPI_Transmit+0x204>
    while (hspi->TxXferCount > 0U)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1d1      	bne.n	800391a <HAL_SPI_Transmit+0xde>
 8003976:	e043      	b.n	8003a00 <HAL_SPI_Transmit+0x1c4>
  else
  {
    while (hspi->TxXferCount > 0U)
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	2b02      	cmp	r3, #2
 8003984:	d125      	bne.n	80039d2 <HAL_SPI_Transmit+0x196>
      {
        if (hspi->TxXferCount > 1U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b01      	cmp	r3, #1
 800398e:	d90f      	bls.n	80039b0 <HAL_SPI_Transmit+0x174>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68ba      	ldr	r2, [r7, #8]
 8003996:	8812      	ldrh	r2, [r2, #0]
 8003998:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	3302      	adds	r3, #2
 800399e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	3b02      	subs	r3, #2
 80039a8:	b29a      	uxth	r2, r3
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039ae:	e022      	b.n	80039f6 <HAL_SPI_Transmit+0x1ba>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	f103 020c 	add.w	r2, r3, #12
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039d0:	e011      	b.n	80039f6 <HAL_SPI_Transmit+0x1ba>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00b      	beq.n	80039f0 <HAL_SPI_Transmit+0x1b4>
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039de:	d00a      	beq.n	80039f6 <HAL_SPI_Transmit+0x1ba>
 80039e0:	f7fd fb00 	bl	8000fe4 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	69bb      	ldr	r3, [r7, #24]
 80039e8:	1ad2      	subs	r2, r2, r3
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <HAL_SPI_Transmit+0x1ba>
        {
          errorcode = HAL_TIMEOUT;
 80039f0:	2303      	movs	r3, #3
 80039f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039f4:	e024      	b.n	8003a40 <HAL_SPI_Transmit+0x204>
    while (hspi->TxXferCount > 0U)
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d1bb      	bne.n	8003978 <HAL_SPI_Transmit+0x13c>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	6839      	ldr	r1, [r7, #0]
 8003a04:	68f8      	ldr	r0, [r7, #12]
 8003a06:	f000 f8fc 	bl	8003c02 <SPI_EndRxTxTransaction>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d002      	beq.n	8003a16 <HAL_SPI_Transmit+0x1da>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d10a      	bne.n	8003a34 <HAL_SPI_Transmit+0x1f8>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	689b      	ldr	r3, [r3, #8]
 8003a30:	617b      	str	r3, [r7, #20]
 8003a32:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d001      	beq.n	8003a40 <HAL_SPI_Transmit+0x204>
  {
    errorcode = HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	77fb      	strb	r3, [r7, #31]
  }

error:
  hspi->State = HAL_SPI_STATE_READY;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003a50:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3720      	adds	r7, #32
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}

08003a5a <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a5a:	b580      	push	{r7, lr}
 8003a5c:	b084      	sub	sp, #16
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	60f8      	str	r0, [r7, #12]
 8003a62:	60b9      	str	r1, [r7, #8]
 8003a64:	607a      	str	r2, [r7, #4]
 8003a66:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Flag) != State)
 8003a68:	e04d      	b.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a70:	d049      	beq.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d007      	beq.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003a78:	f7fd fab4 	bl	8000fe4 <HAL_GetTick>
 8003a7c:	4602      	mov	r2, r0
 8003a7e:	69bb      	ldr	r3, [r7, #24]
 8003a80:	1ad2      	subs	r2, r2, r3
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d33e      	bcc.n	8003b06 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	6812      	ldr	r2, [r2, #0]
 8003a90:	6852      	ldr	r2, [r2, #4]
 8003a92:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a96:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003aa0:	d111      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aaa:	d004      	beq.n	8003ab6 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ab4:	d107      	bne.n	8003ac6 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6812      	ldr	r2, [r2, #0]
 8003ac0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ac4:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ace:	d110      	bne.n	8003af2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6819      	ldr	r1, [r3, #0]
 8003ada:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003ade:	400b      	ands	r3, r1
 8003ae0:	6013      	str	r3, [r2, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	6812      	ldr	r2, [r2, #0]
 8003aea:	6812      	ldr	r2, [r2, #0]
 8003aec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003af0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	2201      	movs	r2, #1
 8003af6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e008      	b.n	8003b18 <SPI_WaitFlagStateUntilTimeout+0xbe>
  while ((hspi->Instance->SR & Flag) != State)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68bb      	ldr	r3, [r7, #8]
 8003b0e:	401a      	ands	r2, r3
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d1a9      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003b16:	2300      	movs	r3, #0
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3710      	adds	r7, #16
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	60f8      	str	r0, [r7, #12]
 8003b28:	60b9      	str	r1, [r7, #8]
 8003b2a:	607a      	str	r2, [r7, #4]
 8003b2c:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8003b2e:	e05b      	b.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0xc8>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003b30:	68bb      	ldr	r3, [r7, #8]
 8003b32:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003b36:	d109      	bne.n	8003b4c <SPI_WaitFifoStateUntilTimeout+0x2c>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d106      	bne.n	8003b4c <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	330c      	adds	r3, #12
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8003b4a:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003b52:	d049      	beq.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0xc8>
    {
      if ((Timeout == 0) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d007      	beq.n	8003b6a <SPI_WaitFifoStateUntilTimeout+0x4a>
 8003b5a:	f7fd fa43 	bl	8000fe4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	6a3b      	ldr	r3, [r7, #32]
 8003b62:	1ad2      	subs	r2, r2, r3
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d33e      	bcc.n	8003be8 <SPI_WaitFifoStateUntilTimeout+0xc8>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	68fa      	ldr	r2, [r7, #12]
 8003b70:	6812      	ldr	r2, [r2, #0]
 8003b72:	6852      	ldr	r2, [r2, #4]
 8003b74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003b78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003b82:	d111      	bne.n	8003ba8 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	689b      	ldr	r3, [r3, #8]
 8003b88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b8c:	d004      	beq.n	8003b98 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b96:	d107      	bne.n	8003ba8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	6812      	ldr	r2, [r2, #0]
 8003ba0:	6812      	ldr	r2, [r2, #0]
 8003ba2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003ba6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bb0:	d110      	bne.n	8003bd4 <SPI_WaitFifoStateUntilTimeout+0xb4>
        {
          SPI_RESET_CRC(hspi);
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6819      	ldr	r1, [r3, #0]
 8003bbc:	f64d 73ff 	movw	r3, #57343	; 0xdfff
 8003bc0:	400b      	ands	r3, r1
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	6812      	ldr	r2, [r2, #0]
 8003bcc:	6812      	ldr	r2, [r2, #0]
 8003bce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bd2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003be4:	2303      	movs	r3, #3
 8003be6:	e008      	b.n	8003bfa <SPI_WaitFifoStateUntilTimeout+0xda>
  while ((hspi->Instance->SR & Fifo) != State)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689a      	ldr	r2, [r3, #8]
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	401a      	ands	r2, r3
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	429a      	cmp	r2, r3
 8003bf6:	d19b      	bne.n	8003b30 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}

08003c02 <SPI_EndRxTxTransaction>:
  * @param hspi SPI handle
  * @param Timeout Timeout duration
  * @param Tickstart tick start value
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003c02:	b580      	push	{r7, lr}
 8003c04:	b086      	sub	sp, #24
 8003c06:	af02      	add	r7, sp, #8
 8003c08:	60f8      	str	r0, [r7, #12]
 8003c0a:	60b9      	str	r1, [r7, #8]
 8003c0c:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	9300      	str	r3, [sp, #0]
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f7ff ff80 	bl	8003b20 <SPI_WaitFifoStateUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d007      	beq.n	8003c36 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c2a:	f043 0220 	orr.w	r2, r3, #32
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e027      	b.n	8003c86 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	9300      	str	r3, [sp, #0]
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	2180      	movs	r1, #128	; 0x80
 8003c40:	68f8      	ldr	r0, [r7, #12]
 8003c42:	f7ff ff0a 	bl	8003a5a <SPI_WaitFlagStateUntilTimeout>
 8003c46:	4603      	mov	r3, r0
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d007      	beq.n	8003c5c <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c50:	f043 0220 	orr.w	r2, r3, #32
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	e014      	b.n	8003c86 <SPI_EndRxTxTransaction+0x84>
  }
  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003c68:	68f8      	ldr	r0, [r7, #12]
 8003c6a:	f7ff ff59 	bl	8003b20 <SPI_WaitFifoStateUntilTimeout>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d007      	beq.n	8003c84 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c78:	f043 0220 	orr.w	r2, r3, #32
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e000      	b.n	8003c86 <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 8003c84:	2300      	movs	r3, #0
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}

08003c8e <HAL_TIM_Base_Init>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d101      	bne.n	8003ca0 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01d      	b.n	8003cdc <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if(htim->State == HAL_TIM_STATE_RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d106      	bne.n	8003cba <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f815 	bl	8003ce4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	3304      	adds	r3, #4
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4610      	mov	r0, r2
 8003cce:	f000 f975 	bl	8003fbc <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2201      	movs	r2, #1
 8003cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 8003cda:	2300      	movs	r3, #0
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3708      	adds	r7, #8
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	bd80      	pop	{r7, pc}

08003ce4 <HAL_TIM_Base_MspInit>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_TIM_Base_Start_IT>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	687a      	ldr	r2, [r7, #4]
 8003d06:	6812      	ldr	r2, [r2, #0]
 8003d08:	68d2      	ldr	r2, [r2, #12]
 8003d0a:	f042 0201 	orr.w	r2, r2, #1
 8003d0e:	60da      	str	r2, [r3, #12]
      
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	6812      	ldr	r2, [r2, #0]
 8003d18:	6812      	ldr	r2, [r2, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr

08003d2e <HAL_TIM_IRQHandler>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d122      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
 8003d4a:	f003 0302 	and.w	r3, r3, #2
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	d11b      	bne.n	8003d8a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f06f 0202 	mvn.w	r2, #2
 8003d5a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	f003 0303 	and.w	r3, r3, #3
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d003      	beq.n	8003d78 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 f905 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003d76:	e005      	b.n	8003d84 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8f7 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f000 f908 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	f003 0304 	and.w	r3, r3, #4
 8003d94:	2b04      	cmp	r3, #4
 8003d96:	d122      	bne.n	8003dde <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	2b04      	cmp	r3, #4
 8003da4:	d11b      	bne.n	8003dde <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f06f 0204 	mvn.w	r2, #4
 8003dae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d003      	beq.n	8003dcc <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f8db 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003dca:	e005      	b.n	8003dd8 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f000 f8cd 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f8de 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	691b      	ldr	r3, [r3, #16]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d122      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	f003 0308 	and.w	r3, r3, #8
 8003df6:	2b08      	cmp	r3, #8
 8003df8:	d11b      	bne.n	8003e32 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f06f 0208 	mvn.w	r2, #8
 8003e02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2204      	movs	r2, #4
 8003e08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69db      	ldr	r3, [r3, #28]
 8003e10:	f003 0303 	and.w	r3, r3, #3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_TIM_IRQHandler+0xf2>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f8b1 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003e1e:	e005      	b.n	8003e2c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f000 f8a3 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8b4 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	f003 0310 	and.w	r3, r3, #16
 8003e3c:	2b10      	cmp	r3, #16
 8003e3e:	d122      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f003 0310 	and.w	r3, r3, #16
 8003e4a:	2b10      	cmp	r3, #16
 8003e4c:	d11b      	bne.n	8003e86 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f06f 0210 	mvn.w	r2, #16
 8003e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	69db      	ldr	r3, [r3, #28]
 8003e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_TIM_IRQHandler+0x146>
      {          
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f887 	bl	8003f80 <HAL_TIM_IC_CaptureCallback>
 8003e72:	e005      	b.n	8003e80 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f879 	bl	8003f6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f88a 	bl	8003f94 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	f003 0301 	and.w	r3, r3, #1
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d10e      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d107      	bne.n	8003eb2 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f06f 0201 	mvn.w	r2, #1
 8003eaa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003eac:	6878      	ldr	r0, [r7, #4]
 8003eae:	f010 f88b 	bl	8013fc8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	691b      	ldr	r3, [r3, #16]
 8003eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ebc:	2b80      	cmp	r3, #128	; 0x80
 8003ebe:	d10e      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	68db      	ldr	r3, [r3, #12]
 8003ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003eca:	2b80      	cmp	r3, #128	; 0x80
 8003ecc:	d107      	bne.n	8003ede <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ed6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ed8:	6878      	ldr	r0, [r7, #4]
 8003eda:	f000 f929 	bl	8004130 <HAL_TIMEx_BreakCallback>

    }
  }
  
    /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	691b      	ldr	r3, [r3, #16]
 8003ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003eec:	d10e      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef8:	2b80      	cmp	r3, #128	; 0x80
 8003efa:	d107      	bne.n	8003f0c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003f04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f06:	6878      	ldr	r0, [r7, #4]
 8003f08:	f000 f912 	bl	8004130 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f16:	2b40      	cmp	r3, #64	; 0x40
 8003f18:	d10e      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f24:	2b40      	cmp	r3, #64	; 0x40
 8003f26:	d107      	bne.n	8003f38 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003f30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f838 	bl	8003fa8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	f003 0320 	and.w	r3, r3, #32
 8003f42:	2b20      	cmp	r3, #32
 8003f44:	d10e      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68db      	ldr	r3, [r3, #12]
 8003f4c:	f003 0320 	and.w	r3, r3, #32
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d107      	bne.n	8003f64 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f06f 0220 	mvn.w	r2, #32
 8003f5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutationCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f8dc 	bl	800411c <HAL_TIMEx_CommutationCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}

08003f6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr

08003f80 <HAL_TIM_IC_CaptureCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f92:	4770      	bx	lr

08003f94 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f94:	b480      	push	{r7}
 8003f96:	b083      	sub	sp, #12
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f9c:	bf00      	nop
 8003f9e:	370c      	adds	r7, #12
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIM_TriggerCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr

08003fbc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure pointer on TIM Time Base required parameters  
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b085      	sub	sp, #20
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0;
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if(IS_TIM_CC3_INSTANCE(TIMx) != RESET)   
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a47      	ldr	r2, [pc, #284]	; (80040f0 <TIM_Base_SetConfig+0x134>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <TIM_Base_SetConfig+0x44>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fde:	d00f      	beq.n	8004000 <TIM_Base_SetConfig+0x44>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a44      	ldr	r2, [pc, #272]	; (80040f4 <TIM_Base_SetConfig+0x138>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x44>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a43      	ldr	r2, [pc, #268]	; (80040f8 <TIM_Base_SetConfig+0x13c>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x44>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a42      	ldr	r2, [pc, #264]	; (80040fc <TIM_Base_SetConfig+0x140>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x44>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a41      	ldr	r2, [pc, #260]	; (8004100 <TIM_Base_SetConfig+0x144>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d101      	bne.n	8004004 <TIM_Base_SetConfig+0x48>
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <TIM_Base_SetConfig+0x4a>
 8004004:	2300      	movs	r3, #0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d008      	beq.n	800401c <TIM_Base_SetConfig+0x60>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CC1_INSTANCE(TIMx) != RESET)  
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a34      	ldr	r2, [pc, #208]	; (80040f0 <TIM_Base_SetConfig+0x134>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d02b      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d027      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a31      	ldr	r2, [pc, #196]	; (80040f4 <TIM_Base_SetConfig+0x138>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d023      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	4a30      	ldr	r2, [pc, #192]	; (80040f8 <TIM_Base_SetConfig+0x13c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d01f      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a2f      	ldr	r2, [pc, #188]	; (80040fc <TIM_Base_SetConfig+0x140>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d01b      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a2e      	ldr	r2, [pc, #184]	; (8004100 <TIM_Base_SetConfig+0x144>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d017      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	4a2d      	ldr	r2, [pc, #180]	; (8004104 <TIM_Base_SetConfig+0x148>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	4a2c      	ldr	r2, [pc, #176]	; (8004108 <TIM_Base_SetConfig+0x14c>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d00f      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a2b      	ldr	r2, [pc, #172]	; (800410c <TIM_Base_SetConfig+0x150>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d00b      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	4a2a      	ldr	r2, [pc, #168]	; (8004110 <TIM_Base_SetConfig+0x154>)
 8004068:	4293      	cmp	r3, r2
 800406a:	d007      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a29      	ldr	r2, [pc, #164]	; (8004114 <TIM_Base_SetConfig+0x158>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d003      	beq.n	800407c <TIM_Base_SetConfig+0xc0>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a28      	ldr	r2, [pc, #160]	; (8004118 <TIM_Base_SetConfig+0x15c>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d101      	bne.n	8004080 <TIM_Base_SetConfig+0xc4>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <TIM_Base_SetConfig+0xc6>
 8004080:	2300      	movs	r3, #0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d008      	beq.n	8004098 <TIM_Base_SetConfig+0xdc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800408c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	4313      	orrs	r3, r2
 8004096:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	695b      	ldr	r3, [r3, #20]
 80040a2:	4313      	orrs	r3, r2
 80040a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	601a      	str	r2, [r3, #0]

  /* Set the Auto-reload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	689a      	ldr	r2, [r3, #8]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	629a      	str	r2, [r3, #40]	; 0x28
    
  if(IS_TIM_ADVANCED_INSTANCE(TIMx) != RESET)  
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	4a0c      	ldr	r2, [pc, #48]	; (80040f0 <TIM_Base_SetConfig+0x134>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d003      	beq.n	80040cc <TIM_Base_SetConfig+0x110>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a0e      	ldr	r2, [pc, #56]	; (8004100 <TIM_Base_SetConfig+0x144>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d101      	bne.n	80040d0 <TIM_Base_SetConfig+0x114>
 80040cc:	2301      	movs	r3, #1
 80040ce:	e000      	b.n	80040d2 <TIM_Base_SetConfig+0x116>
 80040d0:	2300      	movs	r3, #0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d003      	beq.n	80040de <TIM_Base_SetConfig+0x122>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040d6:	683b      	ldr	r3, [r7, #0]
 80040d8:	691a      	ldr	r2, [r3, #16]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	615a      	str	r2, [r3, #20]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	40010000 	.word	0x40010000
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40010400 	.word	0x40010400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800
 8004110:	40001800 	.word	0x40001800
 8004114:	40001c00 	.word	0x40001c00
 8004118:	40002000 	.word	0x40002000

0800411c <HAL_TIMEx_CommutationCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 800411c:	b480      	push	{r7}
 800411e:	b083      	sub	sp, #12
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8004124:	bf00      	nop
 8004126:	370c      	adds	r7, #12
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr

08004130 <HAL_TIMEx_BreakCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8004144:	b480      	push	{r7}
 8004146:	b085      	sub	sp, #20
 8004148:	af00      	add	r7, sp, #0
 800414a:	4603      	mov	r3, r0
 800414c:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800414e:	2300      	movs	r3, #0
 8004150:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8004152:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004156:	2b84      	cmp	r3, #132	; 0x84
 8004158:	d005      	beq.n	8004166 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800415a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	3303      	adds	r3, #3
 8004164:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8004166:	68fb      	ldr	r3, [r7, #12]
}
 8004168:	4618      	mov	r0, r3
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004172:	4770      	bx	lr

08004174 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417a:	f3ef 8305 	mrs	r3, IPSR
 800417e:	607b      	str	r3, [r7, #4]
  return(result);
 8004180:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8004182:	2b00      	cmp	r3, #0
 8004184:	bf14      	ite	ne
 8004186:	2301      	movne	r3, #1
 8004188:	2300      	moveq	r3, #0
 800418a:	b2db      	uxtb	r3, r3
}
 800418c:	4618      	mov	r0, r3
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800419c:	f001 ff86 	bl	80060ac <vTaskStartScheduler>
  
  return osOK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 80041a6:	b580      	push	{r7, lr}
 80041a8:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 80041aa:	f7ff ffe3 	bl	8004174 <inHandlerMode>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d003      	beq.n	80041bc <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 80041b4:	f002 f880 	bl	80062b8 <xTaskGetTickCountFromISR>
 80041b8:	4603      	mov	r3, r0
 80041ba:	e002      	b.n	80041c2 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 80041bc:	f002 f86c 	bl	8006298 <xTaskGetTickCount>
 80041c0:	4603      	mov	r3, r0
  }
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80041c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041c8:	b087      	sub	sp, #28
 80041ca:	af02      	add	r7, sp, #8
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	685c      	ldr	r4, [r3, #4]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80041dc:	b29e      	uxth	r6, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7ff ffad 	bl	8004144 <makeFreeRtosPriority>
 80041ea:	4602      	mov	r2, r0
 80041ec:	f107 030c 	add.w	r3, r7, #12
 80041f0:	9301      	str	r3, [sp, #4]
 80041f2:	9200      	str	r2, [sp, #0]
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	4632      	mov	r2, r6
 80041f8:	4629      	mov	r1, r5
 80041fa:	4620      	mov	r0, r4
 80041fc:	f001 fd64 	bl	8005cc8 <xTaskCreate>
 8004200:	4603      	mov	r3, r0
 8004202:	2b01      	cmp	r3, #1
 8004204:	d001      	beq.n	800420a <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8004206:	2300      	movs	r3, #0
 8004208:	e000      	b.n	800420c <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 800420a:	68fb      	ldr	r3, [r7, #12]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004214 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b082      	sub	sp, #8
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f001 fe7f 	bl	8005f20 <vTaskDelete>
  return osOK;
 8004222:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 8004224:	4618      	mov	r0, r3
 8004226:	3708      	adds	r7, #8
 8004228:	46bd      	mov	sp, r7
 800422a:	bd80      	pop	{r7, pc}

0800422c <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d001      	beq.n	8004242 <osDelay+0x16>
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	e000      	b.n	8004244 <osDelay+0x18>
 8004242:	2301      	movs	r3, #1
 8004244:	4618      	mov	r0, r3
 8004246:	f001 fefb 	bl	8006040 <vTaskDelay>
  
  return osOK;
 800424a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800424c:	4618      	mov	r0, r3
 800424e:	3710      	adds	r7, #16
 8004250:	46bd      	mov	sp, r7
 8004252:	bd80      	pop	{r7, pc}

08004254 <osTimerCreate>:
* @param  argument      argument to the timer call back function.
* @retval  timer ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osTimerCreate shall be consistent in every CMSIS-RTOS.
*/
osTimerId osTimerCreate (const osTimerDef_t *timer_def, os_timer_type type, void *argument)
{
 8004254:	b480      	push	{r7}
 8004256:	b085      	sub	sp, #20
 8004258:	af00      	add	r7, sp, #0
 800425a:	60f8      	str	r0, [r7, #12]
 800425c:	460b      	mov	r3, r1
 800425e:	607a      	str	r2, [r7, #4]
 8004260:	72fb      	strb	r3, [r7, #11]
                      (void *) argument,
                      (TaskFunction_t)timer_def->ptimer);
#endif

#else 
	return NULL;
 8004262:	2300      	movs	r3, #0
#endif
}
 8004264:	4618      	mov	r0, r3
 8004266:	3714      	adds	r7, #20
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr

08004270 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
    return xSemaphoreCreateMutex(); 
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
#else  
    return xSemaphoreCreateMutex(); 
 8004278:	2001      	movs	r0, #1
 800427a:	f000 ffad 	bl	80051d8 <xQueueCreateMutex>
 800427e:	4603      	mov	r3, r0
#endif
#else
  return NULL;
#endif
}
 8004280:	4618      	mov	r0, r3
 8004282:	3708      	adds	r7, #8
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
 8004290:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8004292:	2300      	movs	r3, #0
 8004294:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d101      	bne.n	80042a0 <osMutexWait+0x18>
    return osErrorParameter;
 800429c:	2380      	movs	r3, #128	; 0x80
 800429e:	e03c      	b.n	800431a <osMutexWait+0x92>
  }
  
  ticks = 0;
 80042a0:	2300      	movs	r3, #0
 80042a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042aa:	d103      	bne.n	80042b4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 80042ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042b0:	60fb      	str	r3, [r7, #12]
 80042b2:	e009      	b.n	80042c8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <osMutexWait+0x40>
      ticks = 1;
 80042c4:	2301      	movs	r3, #1
 80042c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80042c8:	f7ff ff54 	bl	8004174 <inHandlerMode>
 80042cc:	4603      	mov	r3, r0
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d017      	beq.n	8004302 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 80042d2:	f107 0308 	add.w	r3, r7, #8
 80042d6:	461a      	mov	r2, r3
 80042d8:	2100      	movs	r1, #0
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f001 fadc 	bl	8005898 <xQueueReceiveFromISR>
 80042e0:	4603      	mov	r3, r0
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d001      	beq.n	80042ea <osMutexWait+0x62>
      return osErrorOS;
 80042e6:	23ff      	movs	r3, #255	; 0xff
 80042e8:	e017      	b.n	800431a <osMutexWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d013      	beq.n	8004318 <osMutexWait+0x90>
 80042f0:	4b0c      	ldr	r3, [pc, #48]	; (8004324 <osMutexWait+0x9c>)
 80042f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042f6:	601a      	str	r2, [r3, #0]
 80042f8:	f3bf 8f4f 	dsb	sy
 80042fc:	f3bf 8f6f 	isb	sy
 8004300:	e00a      	b.n	8004318 <osMutexWait+0x90>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8004302:	2300      	movs	r3, #0
 8004304:	68fa      	ldr	r2, [r7, #12]
 8004306:	2100      	movs	r1, #0
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f001 f9ad 	bl	8005668 <xQueueGenericReceive>
 800430e:	4603      	mov	r3, r0
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <osMutexWait+0x90>
    return osErrorOS;
 8004314:	23ff      	movs	r3, #255	; 0xff
 8004316:	e000      	b.n	800431a <osMutexWait+0x92>
  }
  
  return osOK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3710      	adds	r7, #16
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
 8004322:	bf00      	nop
 8004324:	e000ed04 	.word	0xe000ed04

08004328 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b084      	sub	sp, #16
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004330:	2300      	movs	r3, #0
 8004332:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8004334:	2300      	movs	r3, #0
 8004336:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8004338:	f7ff ff1c 	bl	8004174 <inHandlerMode>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d016      	beq.n	8004370 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8004342:	f107 0308 	add.w	r3, r7, #8
 8004346:	4619      	mov	r1, r3
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f001 f8fb 	bl	8005544 <xQueueGiveFromISR>
 800434e:	4603      	mov	r3, r0
 8004350:	2b01      	cmp	r3, #1
 8004352:	d001      	beq.n	8004358 <osMutexRelease+0x30>
      return osErrorOS;
 8004354:	23ff      	movs	r3, #255	; 0xff
 8004356:	e017      	b.n	8004388 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d013      	beq.n	8004386 <osMutexRelease+0x5e>
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <osMutexRelease+0x68>)
 8004360:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004364:	601a      	str	r2, [r3, #0]
 8004366:	f3bf 8f4f 	dsb	sy
 800436a:	f3bf 8f6f 	isb	sy
 800436e:	e00a      	b.n	8004386 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8004370:	2300      	movs	r3, #0
 8004372:	2200      	movs	r2, #0
 8004374:	2100      	movs	r1, #0
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f000 ff46 	bl	8005208 <xQueueGenericSend>
 800437c:	4603      	mov	r3, r0
 800437e:	2b01      	cmp	r3, #1
 8004380:	d001      	beq.n	8004386 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8004382:	23ff      	movs	r3, #255	; 0xff
 8004384:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8004386:	68fb      	ldr	r3, [r7, #12]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}
 8004390:	e000ed04 	.word	0xe000ed04

08004394 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
#endif    
  }
#else  // configSUPPORT_STATIC_ALLOCATION == 0  && configSUPPORT_DYNAMIC_ALLOCATION == 1
  osSemaphoreId sema;
 
  if (count == 1) {
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	2b01      	cmp	r3, #1
 80043a2:	d110      	bne.n	80043c6 <osSemaphoreCreate+0x32>
    vSemaphoreCreateBinary(sema);
 80043a4:	2203      	movs	r2, #3
 80043a6:	2100      	movs	r1, #0
 80043a8:	2001      	movs	r0, #1
 80043aa:	f000 fea1 	bl	80050f0 <xQueueGenericCreate>
 80043ae:	60f8      	str	r0, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d005      	beq.n	80043c2 <osSemaphoreCreate+0x2e>
 80043b6:	2300      	movs	r3, #0
 80043b8:	2200      	movs	r2, #0
 80043ba:	2100      	movs	r1, #0
 80043bc:	68f8      	ldr	r0, [r7, #12]
 80043be:	f000 ff23 	bl	8005208 <xQueueGenericSend>
    return sema;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	e000      	b.n	80043c8 <osSemaphoreCreate+0x34>
  }
  else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
    return xSemaphoreCreateCounting(count, count);
#else
    return NULL;
 80043c6:	2300      	movs	r3, #0
#endif
  }
#endif
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}

080043d0 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b084      	sub	sp, #16
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
 80043d8:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 80043da:	2300      	movs	r3, #0
 80043dc:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d101      	bne.n	80043e8 <osSemaphoreWait+0x18>
    return osErrorParameter;
 80043e4:	2380      	movs	r3, #128	; 0x80
 80043e6:	e03c      	b.n	8004462 <osSemaphoreWait+0x92>
  }
  
  ticks = 0;
 80043e8:	2300      	movs	r3, #0
 80043ea:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043f2:	d103      	bne.n	80043fc <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80043f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043f8:	60fb      	str	r3, [r7, #12]
 80043fa:	e009      	b.n	8004410 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <osSemaphoreWait+0x40>
      ticks = 1;
 800440c:	2301      	movs	r3, #1
 800440e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8004410:	f7ff feb0 	bl	8004174 <inHandlerMode>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d017      	beq.n	800444a <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800441a:	f107 0308 	add.w	r3, r7, #8
 800441e:	461a      	mov	r2, r3
 8004420:	2100      	movs	r1, #0
 8004422:	6878      	ldr	r0, [r7, #4]
 8004424:	f001 fa38 	bl	8005898 <xQueueReceiveFromISR>
 8004428:	4603      	mov	r3, r0
 800442a:	2b01      	cmp	r3, #1
 800442c:	d001      	beq.n	8004432 <osSemaphoreWait+0x62>
      return osErrorOS;
 800442e:	23ff      	movs	r3, #255	; 0xff
 8004430:	e017      	b.n	8004462 <osSemaphoreWait+0x92>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d013      	beq.n	8004460 <osSemaphoreWait+0x90>
 8004438:	4b0c      	ldr	r3, [pc, #48]	; (800446c <osSemaphoreWait+0x9c>)
 800443a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	f3bf 8f4f 	dsb	sy
 8004444:	f3bf 8f6f 	isb	sy
 8004448:	e00a      	b.n	8004460 <osSemaphoreWait+0x90>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800444a:	2300      	movs	r3, #0
 800444c:	68fa      	ldr	r2, [r7, #12]
 800444e:	2100      	movs	r1, #0
 8004450:	6878      	ldr	r0, [r7, #4]
 8004452:	f001 f909 	bl	8005668 <xQueueGenericReceive>
 8004456:	4603      	mov	r3, r0
 8004458:	2b01      	cmp	r3, #1
 800445a:	d001      	beq.n	8004460 <osSemaphoreWait+0x90>
    return osErrorOS;
 800445c:	23ff      	movs	r3, #255	; 0xff
 800445e:	e000      	b.n	8004462 <osSemaphoreWait+0x92>
  }
  
  return osOK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3710      	adds	r7, #16
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	e000ed04 	.word	0xe000ed04

08004470 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8004478:	2300      	movs	r3, #0
 800447a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800447c:	2300      	movs	r3, #0
 800447e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8004480:	f7ff fe78 	bl	8004174 <inHandlerMode>
 8004484:	4603      	mov	r3, r0
 8004486:	2b00      	cmp	r3, #0
 8004488:	d016      	beq.n	80044b8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800448a:	f107 0308 	add.w	r3, r7, #8
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f001 f857 	bl	8005544 <xQueueGiveFromISR>
 8004496:	4603      	mov	r3, r0
 8004498:	2b01      	cmp	r3, #1
 800449a:	d001      	beq.n	80044a0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800449c:	23ff      	movs	r3, #255	; 0xff
 800449e:	e017      	b.n	80044d0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d013      	beq.n	80044ce <osSemaphoreRelease+0x5e>
 80044a6:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <osSemaphoreRelease+0x68>)
 80044a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044ac:	601a      	str	r2, [r3, #0]
 80044ae:	f3bf 8f4f 	dsb	sy
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	e00a      	b.n	80044ce <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 80044b8:	2300      	movs	r3, #0
 80044ba:	2200      	movs	r2, #0
 80044bc:	2100      	movs	r1, #0
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	f000 fea2 	bl	8005208 <xQueueGenericSend>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d001      	beq.n	80044ce <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80044ca:	23ff      	movs	r3, #255	; 0xff
 80044cc:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80044ce:	68fb      	ldr	r3, [r7, #12]
}
 80044d0:	4618      	mov	r0, r3
 80044d2:	3710      	adds	r7, #16
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	e000ed04 	.word	0xe000ed04

080044dc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80044e4:	f7ff fe46 	bl	8004174 <inHandlerMode>
 80044e8:	4603      	mov	r3, r0
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d001      	beq.n	80044f2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80044ee:	2382      	movs	r3, #130	; 0x82
 80044f0:	e003      	b.n	80044fa <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80044f2:	6878      	ldr	r0, [r7, #4]
 80044f4:	f001 fa8f 	bl	8005a16 <vQueueDelete>

  return osOK; 
 80044f8:	2300      	movs	r3, #0
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3708      	adds	r7, #8
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b082      	sub	sp, #8
 8004506:	af00      	add	r7, sp, #0
 8004508:	6078      	str	r0, [r7, #4]
 800450a:	6039      	str	r1, [r7, #0]
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
  }
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6818      	ldr	r0, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	4619      	mov	r1, r3
 8004518:	f000 fdea 	bl	80050f0 <xQueueGenericCreate>
 800451c:	4603      	mov	r3, r0
#endif
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8004534:	2300      	movs	r3, #0
 8004536:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d101      	bne.n	8004546 <osMessagePut+0x1e>
    ticks = 1;
 8004542:	2301      	movs	r3, #1
 8004544:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8004546:	f7ff fe15 	bl	8004174 <inHandlerMode>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d018      	beq.n	8004582 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8004550:	f107 0210 	add.w	r2, r7, #16
 8004554:	f107 0108 	add.w	r1, r7, #8
 8004558:	2300      	movs	r3, #0
 800455a:	68f8      	ldr	r0, [r7, #12]
 800455c:	f000 ff56 	bl	800540c <xQueueGenericSendFromISR>
 8004560:	4603      	mov	r3, r0
 8004562:	2b01      	cmp	r3, #1
 8004564:	d001      	beq.n	800456a <osMessagePut+0x42>
      return osErrorOS;
 8004566:	23ff      	movs	r3, #255	; 0xff
 8004568:	e018      	b.n	800459c <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d014      	beq.n	800459a <osMessagePut+0x72>
 8004570:	4b0c      	ldr	r3, [pc, #48]	; (80045a4 <osMessagePut+0x7c>)
 8004572:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	e00b      	b.n	800459a <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8004582:	f107 0108 	add.w	r1, r7, #8
 8004586:	2300      	movs	r3, #0
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	68f8      	ldr	r0, [r7, #12]
 800458c:	f000 fe3c 	bl	8005208 <xQueueGenericSend>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <osMessagePut+0x72>
      return osErrorOS;
 8004596:	23ff      	movs	r3, #255	; 0xff
 8004598:	e000      	b.n	800459c <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	3718      	adds	r7, #24
 80045a0:	46bd      	mov	sp, r7
 80045a2:	bd80      	pop	{r7, pc}
 80045a4:	e000ed04 	.word	0xe000ed04

080045a8 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80045a8:	b590      	push	{r4, r7, lr}
 80045aa:	b08b      	sub	sp, #44	; 0x2c
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80045b8:	2300      	movs	r3, #0
 80045ba:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10a      	bne.n	80045d8 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80045c2:	2380      	movs	r3, #128	; 0x80
 80045c4:	617b      	str	r3, [r7, #20]
    return event;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	461c      	mov	r4, r3
 80045ca:	f107 0314 	add.w	r3, r7, #20
 80045ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80045d2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80045d6:	e054      	b.n	8004682 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80045d8:	2300      	movs	r3, #0
 80045da:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80045dc:	2300      	movs	r3, #0
 80045de:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80045e6:	d103      	bne.n	80045f0 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80045e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
 80045ee:	e009      	b.n	8004604 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d006      	beq.n	8004604 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d101      	bne.n	8004604 <osMessageGet+0x5c>
      ticks = 1;
 8004600:	2301      	movs	r3, #1
 8004602:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8004604:	f7ff fdb6 	bl	8004174 <inHandlerMode>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d01c      	beq.n	8004648 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800460e:	f107 0220 	add.w	r2, r7, #32
 8004612:	f107 0314 	add.w	r3, r7, #20
 8004616:	3304      	adds	r3, #4
 8004618:	4619      	mov	r1, r3
 800461a:	68b8      	ldr	r0, [r7, #8]
 800461c:	f001 f93c 	bl	8005898 <xQueueReceiveFromISR>
 8004620:	4603      	mov	r3, r0
 8004622:	2b01      	cmp	r3, #1
 8004624:	d102      	bne.n	800462c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8004626:	2310      	movs	r3, #16
 8004628:	617b      	str	r3, [r7, #20]
 800462a:	e001      	b.n	8004630 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8004630:	6a3b      	ldr	r3, [r7, #32]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01d      	beq.n	8004672 <osMessageGet+0xca>
 8004636:	4b15      	ldr	r3, [pc, #84]	; (800468c <osMessageGet+0xe4>)
 8004638:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	f3bf 8f4f 	dsb	sy
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	e014      	b.n	8004672 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8004648:	f107 0314 	add.w	r3, r7, #20
 800464c:	1d19      	adds	r1, r3, #4
 800464e:	2300      	movs	r3, #0
 8004650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004652:	68b8      	ldr	r0, [r7, #8]
 8004654:	f001 f808 	bl	8005668 <xQueueGenericReceive>
 8004658:	4603      	mov	r3, r0
 800465a:	2b01      	cmp	r3, #1
 800465c:	d102      	bne.n	8004664 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800465e:	2310      	movs	r3, #16
 8004660:	617b      	str	r3, [r7, #20]
 8004662:	e006      	b.n	8004672 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8004664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004666:	2b00      	cmp	r3, #0
 8004668:	d101      	bne.n	800466e <osMessageGet+0xc6>
 800466a:	2300      	movs	r3, #0
 800466c:	e000      	b.n	8004670 <osMessageGet+0xc8>
 800466e:	2340      	movs	r3, #64	; 0x40
 8004670:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	461c      	mov	r4, r3
 8004676:	f107 0314 	add.w	r3, r7, #20
 800467a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800467e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	372c      	adds	r7, #44	; 0x2c
 8004686:	46bd      	mov	sp, r7
 8004688:	bd90      	pop	{r4, r7, pc}
 800468a:	bf00      	nop
 800468c:	e000ed04 	.word	0xe000ed04

08004690 <osSystickHandler>:
* @brief  Handles the tick increment
* @param  none.
* @retval none.
*/
void osSystickHandler(void)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	af00      	add	r7, sp, #0

#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004694:	f002 f924 	bl	80068e0 <xTaskGetSchedulerState>
 8004698:	4603      	mov	r3, r0
 800469a:	2b01      	cmp	r3, #1
 800469c:	d001      	beq.n	80046a2 <osSystickHandler+0x12>
  {
#endif  /* INCLUDE_xTaskGetSchedulerState */  
    xPortSysTickHandler();
 800469e:	f000 fa53 	bl	8004b48 <xPortSysTickHandler>
#if (INCLUDE_xTaskGetSchedulerState  == 1 )
  }
#endif  /* INCLUDE_xTaskGetSchedulerState */  
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}

080046a6 <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b082      	sub	sp, #8
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80046ae:	f7ff fd61 	bl	8004174 <inHandlerMode>
 80046b2:	4603      	mov	r3, r0
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d004      	beq.n	80046c2 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f001 f98f 	bl	80059dc <uxQueueMessagesWaitingFromISR>
 80046be:	4603      	mov	r3, r0
 80046c0:	e003      	b.n	80046ca <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f001 f96b 	bl	800599e <uxQueueMessagesWaiting>
 80046c8:	4603      	mov	r3, r0
  }
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3708      	adds	r7, #8
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b082      	sub	sp, #8
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80046da:	f7ff fd4b 	bl	8004174 <inHandlerMode>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d001      	beq.n	80046e8 <osMessageDelete+0x16>
    return osErrorISR;
 80046e4:	2382      	movs	r3, #130	; 0x82
 80046e6:	e003      	b.n	80046f0 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80046e8:	6878      	ldr	r0, [r7, #4]
 80046ea:	f001 f994 	bl	8005a16 <vQueueDelete>

  return osOK; 
 80046ee:	2300      	movs	r3, #0
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	3708      	adds	r7, #8
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	f103 0208 	add.w	r2, r3, #8
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	f103 0208 	add.w	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 0208 	add.w	r2, r3, #8
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004738:	b480      	push	{r7}
 800473a:	b083      	sub	sp, #12
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004746:	bf00      	nop
 8004748:	370c      	adds	r7, #12
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004752:	b480      	push	{r7}
 8004754:	b085      	sub	sp, #20
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
 800475a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	68fa      	ldr	r2, [r7, #12]
 8004766:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	689a      	ldr	r2, [r3, #8]
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	689b      	ldr	r3, [r3, #8]
 8004774:	683a      	ldr	r2, [r7, #0]
 8004776:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	683a      	ldr	r2, [r7, #0]
 800477c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	687a      	ldr	r2, [r7, #4]
 8004782:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	1c5a      	adds	r2, r3, #1
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	601a      	str	r2, [r3, #0]
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800479a:	b480      	push	{r7}
 800479c:	b085      	sub	sp, #20
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
 80047a2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047b0:	d103      	bne.n	80047ba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	60fb      	str	r3, [r7, #12]
 80047b8:	e00c      	b.n	80047d4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	3308      	adds	r3, #8
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	e002      	b.n	80047c8 <vListInsert+0x2e>
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	60fb      	str	r3, [r7, #12]
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	68bb      	ldr	r3, [r7, #8]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d9f6      	bls.n	80047c2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	683a      	ldr	r2, [r7, #0]
 80047e2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	683a      	ldr	r2, [r7, #0]
 80047ee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	1c5a      	adds	r2, r3, #1
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	601a      	str	r2, [r3, #0]
}
 8004800:	bf00      	nop
 8004802:	3714      	adds	r7, #20
 8004804:	46bd      	mov	sp, r7
 8004806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480a:	4770      	bx	lr

0800480c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800480c:	b480      	push	{r7}
 800480e:	b085      	sub	sp, #20
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	687a      	ldr	r2, [r7, #4]
 8004820:	6892      	ldr	r2, [r2, #8]
 8004822:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	6852      	ldr	r2, [r2, #4]
 800482c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	429a      	cmp	r2, r3
 8004836:	d103      	bne.n	8004840 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689a      	ldr	r2, [r3, #8]
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	1e5a      	subs	r2, r3, #1
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
}
 8004854:	4618      	mov	r0, r3
 8004856:	3714      	adds	r7, #20
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	3b04      	subs	r3, #4
 8004870:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004878:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3b04      	subs	r3, #4
 800487e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0201 	bic.w	r2, r3, #1
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	3b04      	subs	r3, #4
 800488e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004890:	4a0c      	ldr	r2, [pc, #48]	; (80048c4 <pxPortInitialiseStack+0x64>)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	3b14      	subs	r3, #20
 800489a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800489c:	687a      	ldr	r2, [r7, #4]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3b04      	subs	r3, #4
 80048a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXEC_RETURN;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	f06f 0202 	mvn.w	r2, #2
 80048ae:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	3b20      	subs	r3, #32
 80048b4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048b6:	68fb      	ldr	r3, [r7, #12]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3714      	adds	r7, #20
 80048bc:	46bd      	mov	sp, r7
 80048be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c2:	4770      	bx	lr
 80048c4:	080048c9 	.word	0x080048c9

080048c8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048c8:	b480      	push	{r7}
 80048ca:	b083      	sub	sp, #12
 80048cc:	af00      	add	r7, sp, #0
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80048ce:	4b0e      	ldr	r3, [pc, #56]	; (8004908 <prvTaskExitError+0x40>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048d6:	d00b      	beq.n	80048f0 <prvTaskExitError+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048dc:	b672      	cpsid	i
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	b662      	cpsie	i
 80048ec:	607b      	str	r3, [r7, #4]
 80048ee:	e7fe      	b.n	80048ee <prvTaskExitError+0x26>
 80048f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f4:	b672      	cpsid	i
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	b662      	cpsie	i
 8004904:	603b      	str	r3, [r7, #0]
	portDISABLE_INTERRUPTS();
	for( ;; );
 8004906:	e7fe      	b.n	8004906 <prvTaskExitError+0x3e>
 8004908:	20000004 	.word	0x20000004
 800490c:	00000000 	.word	0x00000000

08004910 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004910:	4b07      	ldr	r3, [pc, #28]	; (8004930 <pxCurrentTCBConst2>)
 8004912:	6819      	ldr	r1, [r3, #0]
 8004914:	6808      	ldr	r0, [r1, #0]
 8004916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800491a:	f380 8809 	msr	PSP, r0
 800491e:	f3bf 8f6f 	isb	sy
 8004922:	f04f 0000 	mov.w	r0, #0
 8004926:	f380 8811 	msr	BASEPRI, r0
 800492a:	4770      	bx	lr
 800492c:	f3af 8000 	nop.w

08004930 <pxCurrentTCBConst2>:
 8004930:	20003de4 	.word	0x20003de4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004934:	bf00      	nop
 8004936:	bf00      	nop

08004938 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8004938:	4806      	ldr	r0, [pc, #24]	; (8004954 <prvPortStartFirstTask+0x1c>)
 800493a:	6800      	ldr	r0, [r0, #0]
 800493c:	6800      	ldr	r0, [r0, #0]
 800493e:	f380 8808 	msr	MSP, r0
 8004942:	b662      	cpsie	i
 8004944:	b661      	cpsie	f
 8004946:	f3bf 8f4f 	dsb	sy
 800494a:	f3bf 8f6f 	isb	sy
 800494e:	df00      	svc	0
 8004950:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004952:	bf00      	nop
 8004954:	e000ed08 	.word	0xe000ed08

08004958 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800495e:	4b2c      	ldr	r3, [pc, #176]	; (8004a10 <xPortStartScheduler+0xb8>)
 8004960:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b2db      	uxtb	r3, r3
 8004968:	60bb      	str	r3, [r7, #8]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	22ff      	movs	r2, #255	; 0xff
 800496e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	781b      	ldrb	r3, [r3, #0]
 8004974:	b2db      	uxtb	r3, r3
 8004976:	71fb      	strb	r3, [r7, #7]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004978:	79fb      	ldrb	r3, [r7, #7]
 800497a:	b2db      	uxtb	r3, r3
 800497c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004980:	b2da      	uxtb	r2, r3
 8004982:	4b24      	ldr	r3, [pc, #144]	; (8004a14 <xPortStartScheduler+0xbc>)
 8004984:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004986:	4b24      	ldr	r3, [pc, #144]	; (8004a18 <xPortStartScheduler+0xc0>)
 8004988:	2207      	movs	r2, #7
 800498a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800498c:	e009      	b.n	80049a2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800498e:	4b22      	ldr	r3, [pc, #136]	; (8004a18 <xPortStartScheduler+0xc0>)
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	3b01      	subs	r3, #1
 8004994:	4a20      	ldr	r2, [pc, #128]	; (8004a18 <xPortStartScheduler+0xc0>)
 8004996:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	b2db      	uxtb	r3, r3
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	71fb      	strb	r3, [r7, #7]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80049a2:	79fb      	ldrb	r3, [r7, #7]
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b80      	cmp	r3, #128	; 0x80
 80049ac:	d0ef      	beq.n	800498e <xPortStartScheduler+0x36>
		}

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80049ae:	4b1a      	ldr	r3, [pc, #104]	; (8004a18 <xPortStartScheduler+0xc0>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	021b      	lsls	r3, r3, #8
 80049b4:	4a18      	ldr	r2, [pc, #96]	; (8004a18 <xPortStartScheduler+0xc0>)
 80049b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80049b8:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <xPortStartScheduler+0xc0>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80049c0:	4a15      	ldr	r2, [pc, #84]	; (8004a18 <xPortStartScheduler+0xc0>)
 80049c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80049cc:	4a13      	ldr	r2, [pc, #76]	; (8004a1c <xPortStartScheduler+0xc4>)
 80049ce:	4b13      	ldr	r3, [pc, #76]	; (8004a1c <xPortStartScheduler+0xc4>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80049d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80049d8:	4a10      	ldr	r2, [pc, #64]	; (8004a1c <xPortStartScheduler+0xc4>)
 80049da:	4b10      	ldr	r3, [pc, #64]	; (8004a1c <xPortStartScheduler+0xc4>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80049e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80049e4:	f000 f8d2 	bl	8004b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80049e8:	4b0d      	ldr	r3, [pc, #52]	; (8004a20 <xPortStartScheduler+0xc8>)
 80049ea:	2200      	movs	r2, #0
 80049ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80049ee:	f000 f8e9 	bl	8004bc4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80049f2:	4a0c      	ldr	r2, [pc, #48]	; (8004a24 <xPortStartScheduler+0xcc>)
 80049f4:	4b0b      	ldr	r3, [pc, #44]	; (8004a24 <xPortStartScheduler+0xcc>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80049fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80049fe:	f7ff ff9b 	bl	8004938 <prvPortStartFirstTask>

	/* Should never get here as the tasks will now be executing!  Call the task
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS. */
	prvTaskExitError();
 8004a02:	f7ff ff61 	bl	80048c8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004a06:	2300      	movs	r3, #0
}
 8004a08:	4618      	mov	r0, r3
 8004a0a:	3710      	adds	r7, #16
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	bd80      	pop	{r7, pc}
 8004a10:	e000e400 	.word	0xe000e400
 8004a14:	200001c4 	.word	0x200001c4
 8004a18:	200001c8 	.word	0x200001c8
 8004a1c:	e000ed20 	.word	0xe000ed20
 8004a20:	20000004 	.word	0x20000004
 8004a24:	e000ef34 	.word	0xe000ef34

08004a28 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	b672      	cpsid	i
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	b662      	cpsie	i
 8004a42:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004a44:	4b0f      	ldr	r3, [pc, #60]	; (8004a84 <vPortEnterCritical+0x5c>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	4a0e      	ldr	r2, [pc, #56]	; (8004a84 <vPortEnterCritical+0x5c>)
 8004a4c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004a4e:	4b0d      	ldr	r3, [pc, #52]	; (8004a84 <vPortEnterCritical+0x5c>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d110      	bne.n	8004a78 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004a56:	4b0c      	ldr	r3, [pc, #48]	; (8004a88 <vPortEnterCritical+0x60>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d00b      	beq.n	8004a78 <vPortEnterCritical+0x50>
 8004a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a64:	b672      	cpsid	i
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	b662      	cpsie	i
 8004a74:	603b      	str	r3, [r7, #0]
 8004a76:	e7fe      	b.n	8004a76 <vPortEnterCritical+0x4e>
	}
}
 8004a78:	bf00      	nop
 8004a7a:	370c      	adds	r7, #12
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr
 8004a84:	20000004 	.word	0x20000004
 8004a88:	e000ed04 	.word	0xe000ed04

08004a8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <vPortExitCritical+0x50>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d10b      	bne.n	8004ab2 <vPortExitCritical+0x26>
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	b672      	cpsid	i
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	b662      	cpsie	i
 8004aae:	607b      	str	r3, [r7, #4]
 8004ab0:	e7fe      	b.n	8004ab0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 8004ab2:	4b0a      	ldr	r3, [pc, #40]	; (8004adc <vPortExitCritical+0x50>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	4a08      	ldr	r2, [pc, #32]	; (8004adc <vPortExitCritical+0x50>)
 8004aba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004abc:	4b07      	ldr	r3, [pc, #28]	; (8004adc <vPortExitCritical+0x50>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d104      	bne.n	8004ace <vPortExitCritical+0x42>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ace:	bf00      	nop
 8004ad0:	370c      	adds	r7, #12
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	20000004 	.word	0x20000004

08004ae0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ae0:	f3ef 8009 	mrs	r0, PSP
 8004ae4:	f3bf 8f6f 	isb	sy
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <pxCurrentTCBConst>)
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f01e 0f10 	tst.w	lr, #16
 8004af0:	bf08      	it	eq
 8004af2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004af6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004afa:	6010      	str	r0, [r2, #0]
 8004afc:	f84d 3d04 	str.w	r3, [sp, #-4]!
 8004b00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004b04:	b672      	cpsid	i
 8004b06:	f380 8811 	msr	BASEPRI, r0
 8004b0a:	f3bf 8f4f 	dsb	sy
 8004b0e:	f3bf 8f6f 	isb	sy
 8004b12:	b662      	cpsie	i
 8004b14:	f001 fca0 	bl	8006458 <vTaskSwitchContext>
 8004b18:	f04f 0000 	mov.w	r0, #0
 8004b1c:	f380 8811 	msr	BASEPRI, r0
 8004b20:	bc08      	pop	{r3}
 8004b22:	6819      	ldr	r1, [r3, #0]
 8004b24:	6808      	ldr	r0, [r1, #0]
 8004b26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b2a:	f01e 0f10 	tst.w	lr, #16
 8004b2e:	bf08      	it	eq
 8004b30:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004b34:	f380 8809 	msr	PSP, r0
 8004b38:	f3bf 8f6f 	isb	sy
 8004b3c:	4770      	bx	lr
 8004b3e:	bf00      	nop

08004b40 <pxCurrentTCBConst>:
 8004b40:	20003de4 	.word	0x20003de4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004b44:	bf00      	nop
 8004b46:	bf00      	nop

08004b48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b52:	b672      	cpsid	i
 8004b54:	f383 8811 	msr	BASEPRI, r3
 8004b58:	f3bf 8f6f 	isb	sy
 8004b5c:	f3bf 8f4f 	dsb	sy
 8004b60:	b662      	cpsie	i
 8004b62:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004b64:	f001 fbba 	bl	80062dc <xTaskIncrementTick>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <xPortSysTickHandler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004b6e:	4b06      	ldr	r3, [pc, #24]	; (8004b88 <xPortSysTickHandler+0x40>)
 8004b70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b74:	601a      	str	r2, [r3, #0]
 8004b76:	2300      	movs	r3, #0
 8004b78:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8004b80:	bf00      	nop
 8004b82:	3708      	adds	r7, #8
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}
 8004b88:	e000ed04 	.word	0xe000ed04

08004b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004b90:	4a08      	ldr	r2, [pc, #32]	; (8004bb4 <vPortSetupTimerInterrupt+0x28>)
 8004b92:	4b09      	ldr	r3, [pc, #36]	; (8004bb8 <vPortSetupTimerInterrupt+0x2c>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	4909      	ldr	r1, [pc, #36]	; (8004bbc <vPortSetupTimerInterrupt+0x30>)
 8004b98:	fba1 1303 	umull	r1, r3, r1, r3
 8004b9c:	099b      	lsrs	r3, r3, #6
 8004b9e:	3b01      	subs	r3, #1
 8004ba0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004ba2:	4b07      	ldr	r3, [pc, #28]	; (8004bc0 <vPortSetupTimerInterrupt+0x34>)
 8004ba4:	2207      	movs	r2, #7
 8004ba6:	601a      	str	r2, [r3, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	46bd      	mov	sp, r7
 8004bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb0:	4770      	bx	lr
 8004bb2:	bf00      	nop
 8004bb4:	e000e014 	.word	0xe000e014
 8004bb8:	20000118 	.word	0x20000118
 8004bbc:	10624dd3 	.word	0x10624dd3
 8004bc0:	e000e010 	.word	0xe000e010

08004bc4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004bc4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004bd4 <vPortEnableVFP+0x10>
 8004bc8:	6801      	ldr	r1, [r0, #0]
 8004bca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004bce:	6001      	str	r1, [r0, #0]
 8004bd0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004bd2:	bf00      	nop
 8004bd4:	e000ed88 	.word	0xe000ed88

08004bd8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004bd8:	b480      	push	{r7}
 8004bda:	b085      	sub	sp, #20
 8004bdc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) );
 8004bde:	f3ef 8305 	mrs	r3, IPSR
 8004be2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b0f      	cmp	r3, #15
 8004be8:	d915      	bls.n	8004c16 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004bea:	4a18      	ldr	r2, [pc, #96]	; (8004c4c <vPortValidateInterruptPriority+0x74>)
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	4413      	add	r3, r2
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004bf4:	4b16      	ldr	r3, [pc, #88]	; (8004c50 <vPortValidateInterruptPriority+0x78>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	7afa      	ldrb	r2, [r7, #11]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d20b      	bcs.n	8004c16 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c02:	b672      	cpsid	i
 8004c04:	f383 8811 	msr	BASEPRI, r3
 8004c08:	f3bf 8f6f 	isb	sy
 8004c0c:	f3bf 8f4f 	dsb	sy
 8004c10:	b662      	cpsie	i
 8004c12:	607b      	str	r3, [r7, #4]
 8004c14:	e7fe      	b.n	8004c14 <vPortValidateInterruptPriority+0x3c>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredicable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004c16:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <vPortValidateInterruptPriority+0x7c>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004c1e:	4b0e      	ldr	r3, [pc, #56]	; (8004c58 <vPortValidateInterruptPriority+0x80>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d90b      	bls.n	8004c3e <vPortValidateInterruptPriority+0x66>
 8004c26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c2a:	b672      	cpsid	i
 8004c2c:	f383 8811 	msr	BASEPRI, r3
 8004c30:	f3bf 8f6f 	isb	sy
 8004c34:	f3bf 8f4f 	dsb	sy
 8004c38:	b662      	cpsie	i
 8004c3a:	603b      	str	r3, [r7, #0]
 8004c3c:	e7fe      	b.n	8004c3c <vPortValidateInterruptPriority+0x64>
	}
 8004c3e:	bf00      	nop
 8004c40:	3714      	adds	r7, #20
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	e000e3f0 	.word	0xe000e3f0
 8004c50:	200001c4 	.word	0x200001c4
 8004c54:	e000ed0c 	.word	0xe000ed0c
 8004c58:	200001c8 	.word	0x200001c8

08004c5c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b08a      	sub	sp, #40	; 0x28
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004c68:	f001 fa6a 	bl	8006140 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004c6c:	4b5a      	ldr	r3, [pc, #360]	; (8004dd8 <pvPortMalloc+0x17c>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d101      	bne.n	8004c78 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004c74:	f000 f916 	bl	8004ea4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004c78:	4b58      	ldr	r3, [pc, #352]	; (8004ddc <pvPortMalloc+0x180>)
 8004c7a:	681a      	ldr	r2, [r3, #0]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	4013      	ands	r3, r2
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f040 8090 	bne.w	8004da6 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01e      	beq.n	8004cca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8004c8c:	2208      	movs	r2, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f003 0307 	and.w	r3, r3, #7
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d015      	beq.n	8004cca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	f023 0307 	bic.w	r3, r3, #7
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f003 0307 	and.w	r3, r3, #7
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d00b      	beq.n	8004cca <pvPortMalloc+0x6e>
 8004cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cb6:	b672      	cpsid	i
 8004cb8:	f383 8811 	msr	BASEPRI, r3
 8004cbc:	f3bf 8f6f 	isb	sy
 8004cc0:	f3bf 8f4f 	dsb	sy
 8004cc4:	b662      	cpsie	i
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e7fe      	b.n	8004cc8 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d06a      	beq.n	8004da6 <pvPortMalloc+0x14a>
 8004cd0:	4b43      	ldr	r3, [pc, #268]	; (8004de0 <pvPortMalloc+0x184>)
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	429a      	cmp	r2, r3
 8004cd8:	d865      	bhi.n	8004da6 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004cda:	4b42      	ldr	r3, [pc, #264]	; (8004de4 <pvPortMalloc+0x188>)
 8004cdc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004cde:	4b41      	ldr	r3, [pc, #260]	; (8004de4 <pvPortMalloc+0x188>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ce4:	e004      	b.n	8004cf0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8004ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	685a      	ldr	r2, [r3, #4]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	429a      	cmp	r2, r3
 8004cf8:	d203      	bcs.n	8004d02 <pvPortMalloc+0xa6>
 8004cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f1      	bne.n	8004ce6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004d02:	4b35      	ldr	r3, [pc, #212]	; (8004dd8 <pvPortMalloc+0x17c>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d04c      	beq.n	8004da6 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004d0c:	6a3b      	ldr	r3, [r7, #32]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	2208      	movs	r2, #8
 8004d12:	4413      	add	r3, r2
 8004d14:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d18:	681a      	ldr	r2, [r3, #0]
 8004d1a:	6a3b      	ldr	r3, [r7, #32]
 8004d1c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d20:	685a      	ldr	r2, [r3, #4]
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	1ad2      	subs	r2, r2, r3
 8004d26:	2308      	movs	r3, #8
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d920      	bls.n	8004d70 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004d2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	4413      	add	r3, r2
 8004d34:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	f003 0307 	and.w	r3, r3, #7
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00b      	beq.n	8004d58 <pvPortMalloc+0xfc>
 8004d40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d44:	b672      	cpsid	i
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	b662      	cpsie	i
 8004d54:	613b      	str	r3, [r7, #16]
 8004d56:	e7fe      	b.n	8004d56 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d5a:	685a      	ldr	r2, [r3, #4]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	1ad2      	subs	r2, r2, r3
 8004d60:	69bb      	ldr	r3, [r7, #24]
 8004d62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004d6a:	69b8      	ldr	r0, [r7, #24]
 8004d6c:	f000 f8fc 	bl	8004f68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004d70:	4b1b      	ldr	r3, [pc, #108]	; (8004de0 <pvPortMalloc+0x184>)
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	1ad3      	subs	r3, r2, r3
 8004d7a:	4a19      	ldr	r2, [pc, #100]	; (8004de0 <pvPortMalloc+0x184>)
 8004d7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004d7e:	4b18      	ldr	r3, [pc, #96]	; (8004de0 <pvPortMalloc+0x184>)
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	4b19      	ldr	r3, [pc, #100]	; (8004de8 <pvPortMalloc+0x18c>)
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	429a      	cmp	r2, r3
 8004d88:	d203      	bcs.n	8004d92 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004d8a:	4b15      	ldr	r3, [pc, #84]	; (8004de0 <pvPortMalloc+0x184>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4a16      	ldr	r2, [pc, #88]	; (8004de8 <pvPortMalloc+0x18c>)
 8004d90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d94:	685a      	ldr	r2, [r3, #4]
 8004d96:	4b11      	ldr	r3, [pc, #68]	; (8004ddc <pvPortMalloc+0x180>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004da2:	2200      	movs	r2, #0
 8004da4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004da6:	f001 f9d9 	bl	800615c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	f003 0307 	and.w	r3, r3, #7
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d00b      	beq.n	8004dcc <pvPortMalloc+0x170>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	b672      	cpsid	i
 8004dba:	f383 8811 	msr	BASEPRI, r3
 8004dbe:	f3bf 8f6f 	isb	sy
 8004dc2:	f3bf 8f4f 	dsb	sy
 8004dc6:	b662      	cpsie	i
 8004dc8:	60fb      	str	r3, [r7, #12]
 8004dca:	e7fe      	b.n	8004dca <pvPortMalloc+0x16e>
	return pvReturn;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
}
 8004dce:	4618      	mov	r0, r3
 8004dd0:	3728      	adds	r7, #40	; 0x28
 8004dd2:	46bd      	mov	sp, r7
 8004dd4:	bd80      	pop	{r7, pc}
 8004dd6:	bf00      	nop
 8004dd8:	20003dd4 	.word	0x20003dd4
 8004ddc:	20003de0 	.word	0x20003de0
 8004de0:	20003dd8 	.word	0x20003dd8
 8004de4:	20003dcc 	.word	0x20003dcc
 8004de8:	20003ddc 	.word	0x20003ddc

08004dec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b086      	sub	sp, #24
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d04a      	beq.n	8004e94 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004dfe:	2308      	movs	r3, #8
 8004e00:	425b      	negs	r3, r3
 8004e02:	697a      	ldr	r2, [r7, #20]
 8004e04:	4413      	add	r3, r2
 8004e06:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	4b22      	ldr	r3, [pc, #136]	; (8004e9c <vPortFree+0xb0>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4013      	ands	r3, r2
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <vPortFree+0x46>
 8004e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1e:	b672      	cpsid	i
 8004e20:	f383 8811 	msr	BASEPRI, r3
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	f3bf 8f4f 	dsb	sy
 8004e2c:	b662      	cpsie	i
 8004e2e:	60fb      	str	r3, [r7, #12]
 8004e30:	e7fe      	b.n	8004e30 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00b      	beq.n	8004e52 <vPortFree+0x66>
 8004e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e3e:	b672      	cpsid	i
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	b662      	cpsie	i
 8004e4e:	60bb      	str	r3, [r7, #8]
 8004e50:	e7fe      	b.n	8004e50 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	685a      	ldr	r2, [r3, #4]
 8004e56:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <vPortFree+0xb0>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	4013      	ands	r3, r2
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d019      	beq.n	8004e94 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004e60:	693b      	ldr	r3, [r7, #16]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d115      	bne.n	8004e94 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004e68:	693b      	ldr	r3, [r7, #16]
 8004e6a:	685a      	ldr	r2, [r3, #4]
 8004e6c:	4b0b      	ldr	r3, [pc, #44]	; (8004e9c <vPortFree+0xb0>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	43db      	mvns	r3, r3
 8004e72:	401a      	ands	r2, r3
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004e78:	f001 f962 	bl	8006140 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	685a      	ldr	r2, [r3, #4]
 8004e80:	4b07      	ldr	r3, [pc, #28]	; (8004ea0 <vPortFree+0xb4>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4413      	add	r3, r2
 8004e86:	4a06      	ldr	r2, [pc, #24]	; (8004ea0 <vPortFree+0xb4>)
 8004e88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004e8a:	6938      	ldr	r0, [r7, #16]
 8004e8c:	f000 f86c 	bl	8004f68 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004e90:	f001 f964 	bl	800615c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004e94:	bf00      	nop
 8004e96:	3718      	adds	r7, #24
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}
 8004e9c:	20003de0 	.word	0x20003de0
 8004ea0:	20003dd8 	.word	0x20003dd8

08004ea4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b085      	sub	sp, #20
 8004ea8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004eaa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004eae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004eb0:	4b27      	ldr	r3, [pc, #156]	; (8004f50 <prvHeapInit+0xac>)
 8004eb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f003 0307 	and.w	r3, r3, #7
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d00c      	beq.n	8004ed8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3307      	adds	r3, #7
 8004ec2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	f023 0307 	bic.w	r3, r3, #7
 8004eca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ecc:	68ba      	ldr	r2, [r7, #8]
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	4a1f      	ldr	r2, [pc, #124]	; (8004f50 <prvHeapInit+0xac>)
 8004ed4:	4413      	add	r3, r2
 8004ed6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <prvHeapInit+0xb0>)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ee2:	4b1c      	ldr	r3, [pc, #112]	; (8004f54 <prvHeapInit+0xb0>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	4413      	add	r3, r2
 8004eee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004ef0:	2208      	movs	r2, #8
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	1a9b      	subs	r3, r3, r2
 8004ef6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	f023 0307 	bic.w	r3, r3, #7
 8004efe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <prvHeapInit+0xb4>)
 8004f04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004f06:	4b14      	ldr	r3, [pc, #80]	; (8004f58 <prvHeapInit+0xb4>)
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004f0e:	4b12      	ldr	r3, [pc, #72]	; (8004f58 <prvHeapInit+0xb4>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	68fa      	ldr	r2, [r7, #12]
 8004f1e:	1ad2      	subs	r2, r2, r3
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f24:	4b0c      	ldr	r3, [pc, #48]	; (8004f58 <prvHeapInit+0xb4>)
 8004f26:	681a      	ldr	r2, [r3, #0]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	4a0a      	ldr	r2, [pc, #40]	; (8004f5c <prvHeapInit+0xb8>)
 8004f32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	4a09      	ldr	r2, [pc, #36]	; (8004f60 <prvHeapInit+0xbc>)
 8004f3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f3c:	4b09      	ldr	r3, [pc, #36]	; (8004f64 <prvHeapInit+0xc0>)
 8004f3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004f42:	601a      	str	r2, [r3, #0]
}
 8004f44:	bf00      	nop
 8004f46:	3714      	adds	r7, #20
 8004f48:	46bd      	mov	sp, r7
 8004f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f4e:	4770      	bx	lr
 8004f50:	200001cc 	.word	0x200001cc
 8004f54:	20003dcc 	.word	0x20003dcc
 8004f58:	20003dd4 	.word	0x20003dd4
 8004f5c:	20003ddc 	.word	0x20003ddc
 8004f60:	20003dd8 	.word	0x20003dd8
 8004f64:	20003de0 	.word	0x20003de0

08004f68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f70:	4b28      	ldr	r3, [pc, #160]	; (8005014 <prvInsertBlockIntoFreeList+0xac>)
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e002      	b.n	8004f7c <prvInsertBlockIntoFreeList+0x14>
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	60fb      	str	r3, [r7, #12]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d3f7      	bcc.n	8004f76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	441a      	add	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d108      	bne.n	8004faa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	441a      	add	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	68ba      	ldr	r2, [r7, #8]
 8004fb4:	441a      	add	r2, r3
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d118      	bne.n	8004ff0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	4b15      	ldr	r3, [pc, #84]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d00d      	beq.n	8004fe6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	441a      	add	r2, r3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e008      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004fe6:	4b0c      	ldr	r3, [pc, #48]	; (8005018 <prvInsertBlockIntoFreeList+0xb0>)
 8004fe8:	681a      	ldr	r2, [r3, #0]
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	e003      	b.n	8004ff8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d002      	beq.n	8005006 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005006:	bf00      	nop
 8005008:	3714      	adds	r7, #20
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	20003dcc 	.word	0x20003dcc
 8005018:	20003dd4 	.word	0x20003dd4

0800501c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
 8005024:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d10b      	bne.n	8005048 <xQueueGenericReset+0x2c>
 8005030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005034:	b672      	cpsid	i
 8005036:	f383 8811 	msr	BASEPRI, r3
 800503a:	f3bf 8f6f 	isb	sy
 800503e:	f3bf 8f4f 	dsb	sy
 8005042:	b662      	cpsie	i
 8005044:	60bb      	str	r3, [r7, #8]
 8005046:	e7fe      	b.n	8005046 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 8005048:	f7ff fcee 	bl	8004a28 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	681a      	ldr	r2, [r3, #0]
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005054:	68f9      	ldr	r1, [r7, #12]
 8005056:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005058:	fb01 f303 	mul.w	r3, r1, r3
 800505c:	441a      	add	r2, r3
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681a      	ldr	r2, [r3, #0]
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005078:	3b01      	subs	r3, #1
 800507a:	68f9      	ldr	r1, [r7, #12]
 800507c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800507e:	fb01 f303 	mul.w	r3, r1, r3
 8005082:	441a      	add	r2, r3
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	22ff      	movs	r2, #255	; 0xff
 800508c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	22ff      	movs	r2, #255	; 0xff
 8005094:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	2b00      	cmp	r3, #0
 800509c:	d114      	bne.n	80050c8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d01a      	beq.n	80050dc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	3310      	adds	r3, #16
 80050aa:	4618      	mov	r0, r3
 80050ac:	f001 fa56 	bl	800655c <xTaskRemoveFromEventList>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d012      	beq.n	80050dc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80050b6:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <xQueueGenericReset+0xd0>)
 80050b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050bc:	601a      	str	r2, [r3, #0]
 80050be:	f3bf 8f4f 	dsb	sy
 80050c2:	f3bf 8f6f 	isb	sy
 80050c6:	e009      	b.n	80050dc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	3310      	adds	r3, #16
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7ff fb13 	bl	80046f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	3324      	adds	r3, #36	; 0x24
 80050d6:	4618      	mov	r0, r3
 80050d8:	f7ff fb0e 	bl	80046f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80050dc:	f7ff fcd6 	bl	8004a8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80050e0:	2301      	movs	r3, #1
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3710      	adds	r7, #16
 80050e6:	46bd      	mov	sp, r7
 80050e8:	bd80      	pop	{r7, pc}
 80050ea:	bf00      	nop
 80050ec:	e000ed04 	.word	0xe000ed04

080050f0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b08a      	sub	sp, #40	; 0x28
 80050f4:	af02      	add	r7, sp, #8
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d10b      	bne.n	800511c <xQueueGenericCreate+0x2c>
 8005104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005108:	b672      	cpsid	i
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	b662      	cpsie	i
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e7fe      	b.n	800511a <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	2b00      	cmp	r3, #0
 8005120:	d102      	bne.n	8005128 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	e004      	b.n	8005132 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	fb02 f303 	mul.w	r3, r2, r3
 8005130:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	3348      	adds	r3, #72	; 0x48
 8005136:	4618      	mov	r0, r3
 8005138:	f7ff fd90 	bl	8004c5c <pvPortMalloc>
 800513c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d00b      	beq.n	800515c <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8005144:	69bb      	ldr	r3, [r7, #24]
 8005146:	3348      	adds	r3, #72	; 0x48
 8005148:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800514a:	79fa      	ldrb	r2, [r7, #7]
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	9300      	str	r3, [sp, #0]
 8005150:	4613      	mov	r3, r2
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	68b9      	ldr	r1, [r7, #8]
 8005156:	68f8      	ldr	r0, [r7, #12]
 8005158:	f000 f805 	bl	8005166 <prvInitialiseNewQueue>
		}

		return pxNewQueue;
 800515c:	69bb      	ldr	r3, [r7, #24]
	}
 800515e:	4618      	mov	r0, r3
 8005160:	3720      	adds	r7, #32
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}

08005166 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005166:	b580      	push	{r7, lr}
 8005168:	b084      	sub	sp, #16
 800516a:	af00      	add	r7, sp, #0
 800516c:	60f8      	str	r0, [r7, #12]
 800516e:	60b9      	str	r1, [r7, #8]
 8005170:	607a      	str	r2, [r7, #4]
 8005172:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e002      	b.n	8005188 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005182:	69bb      	ldr	r3, [r7, #24]
 8005184:	687a      	ldr	r2, [r7, #4]
 8005186:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005188:	69bb      	ldr	r3, [r7, #24]
 800518a:	68fa      	ldr	r2, [r7, #12]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800518e:	69bb      	ldr	r3, [r7, #24]
 8005190:	68ba      	ldr	r2, [r7, #8]
 8005192:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005194:	2101      	movs	r1, #1
 8005196:	69b8      	ldr	r0, [r7, #24]
 8005198:	f7ff ff40 	bl	800501c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800519c:	bf00      	nop
 800519e:	3710      	adds	r7, #16
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d00e      	beq.n	80051d0 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2200      	movs	r2, #0
 80051bc:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80051c4:	2300      	movs	r3, #0
 80051c6:	2200      	movs	r2, #0
 80051c8:	2100      	movs	r1, #0
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f81c 	bl	8005208 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80051d0:	bf00      	nop
 80051d2:	3708      	adds	r7, #8
 80051d4:	46bd      	mov	sp, r7
 80051d6:	bd80      	pop	{r7, pc}

080051d8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80051d8:	b580      	push	{r7, lr}
 80051da:	b086      	sub	sp, #24
 80051dc:	af00      	add	r7, sp, #0
 80051de:	4603      	mov	r3, r0
 80051e0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80051e2:	2301      	movs	r3, #1
 80051e4:	617b      	str	r3, [r7, #20]
 80051e6:	2300      	movs	r3, #0
 80051e8:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80051ea:	79fb      	ldrb	r3, [r7, #7]
 80051ec:	461a      	mov	r2, r3
 80051ee:	6939      	ldr	r1, [r7, #16]
 80051f0:	6978      	ldr	r0, [r7, #20]
 80051f2:	f7ff ff7d 	bl	80050f0 <xQueueGenericCreate>
 80051f6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 80051f8:	68f8      	ldr	r0, [r7, #12]
 80051fa:	f7ff ffd3 	bl	80051a4 <prvInitialiseMutex>

		return pxNewQueue;
 80051fe:	68fb      	ldr	r3, [r7, #12]
	}
 8005200:	4618      	mov	r0, r3
 8005202:	3718      	adds	r7, #24
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08e      	sub	sp, #56	; 0x38
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005216:	2300      	movs	r3, #0
 8005218:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10b      	bne.n	800523c <xQueueGenericSend+0x34>
 8005224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005228:	b672      	cpsid	i
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	b662      	cpsie	i
 8005238:	62bb      	str	r3, [r7, #40]	; 0x28
 800523a:	e7fe      	b.n	800523a <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d103      	bne.n	800524a <xQueueGenericSend+0x42>
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b00      	cmp	r3, #0
 8005248:	d101      	bne.n	800524e <xQueueGenericSend+0x46>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericSend+0x48>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <xQueueGenericSend+0x64>
 8005254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005258:	b672      	cpsid	i
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	b662      	cpsie	i
 8005268:	627b      	str	r3, [r7, #36]	; 0x24
 800526a:	e7fe      	b.n	800526a <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	2b02      	cmp	r3, #2
 8005270:	d103      	bne.n	800527a <xQueueGenericSend+0x72>
 8005272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005274:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005276:	2b01      	cmp	r3, #1
 8005278:	d101      	bne.n	800527e <xQueueGenericSend+0x76>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <xQueueGenericSend+0x78>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <xQueueGenericSend+0x94>
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	b672      	cpsid	i
 800528a:	f383 8811 	msr	BASEPRI, r3
 800528e:	f3bf 8f6f 	isb	sy
 8005292:	f3bf 8f4f 	dsb	sy
 8005296:	b662      	cpsie	i
 8005298:	623b      	str	r3, [r7, #32]
 800529a:	e7fe      	b.n	800529a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800529c:	f001 fb20 	bl	80068e0 <xTaskGetSchedulerState>
 80052a0:	4603      	mov	r3, r0
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d102      	bne.n	80052ac <xQueueGenericSend+0xa4>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <xQueueGenericSend+0xa8>
 80052ac:	2301      	movs	r3, #1
 80052ae:	e000      	b.n	80052b2 <xQueueGenericSend+0xaa>
 80052b0:	2300      	movs	r3, #0
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d10b      	bne.n	80052ce <xQueueGenericSend+0xc6>
 80052b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ba:	b672      	cpsid	i
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	b662      	cpsie	i
 80052ca:	61fb      	str	r3, [r7, #28]
 80052cc:	e7fe      	b.n	80052cc <xQueueGenericSend+0xc4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ce:	f7ff fbab 	bl	8004a28 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052da:	429a      	cmp	r2, r3
 80052dc:	d302      	bcc.n	80052e4 <xQueueGenericSend+0xdc>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d129      	bne.n	8005338 <xQueueGenericSend+0x130>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052e4:	683a      	ldr	r2, [r7, #0]
 80052e6:	68b9      	ldr	r1, [r7, #8]
 80052e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ea:	f000 fbb3 	bl	8005a54 <prvCopyDataToQueue>
 80052ee:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d010      	beq.n	800531a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fa:	3324      	adds	r3, #36	; 0x24
 80052fc:	4618      	mov	r0, r3
 80052fe:	f001 f92d 	bl	800655c <xTaskRemoveFromEventList>
 8005302:	4603      	mov	r3, r0
 8005304:	2b00      	cmp	r3, #0
 8005306:	d013      	beq.n	8005330 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005308:	4b3f      	ldr	r3, [pc, #252]	; (8005408 <xQueueGenericSend+0x200>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	e00a      	b.n	8005330 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d007      	beq.n	8005330 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005320:	4b39      	ldr	r3, [pc, #228]	; (8005408 <xQueueGenericSend+0x200>)
 8005322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005326:	601a      	str	r2, [r3, #0]
 8005328:	f3bf 8f4f 	dsb	sy
 800532c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005330:	f7ff fbac 	bl	8004a8c <vPortExitCritical>
				return pdPASS;
 8005334:	2301      	movs	r3, #1
 8005336:	e063      	b.n	8005400 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d103      	bne.n	8005346 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800533e:	f7ff fba5 	bl	8004a8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005342:	2300      	movs	r3, #0
 8005344:	e05c      	b.n	8005400 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 800534c:	f107 0314 	add.w	r3, r7, #20
 8005350:	4618      	mov	r0, r3
 8005352:	f001 f967 	bl	8006624 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005356:	2301      	movs	r3, #1
 8005358:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800535a:	f7ff fb97 	bl	8004a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800535e:	f000 feef 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005362:	f7ff fb61 	bl	8004a28 <vPortEnterCritical>
 8005366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005368:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800536c:	b25b      	sxtb	r3, r3
 800536e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005372:	d103      	bne.n	800537c <xQueueGenericSend+0x174>
 8005374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005376:	2200      	movs	r2, #0
 8005378:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800537c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800537e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005382:	b25b      	sxtb	r3, r3
 8005384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005388:	d103      	bne.n	8005392 <xQueueGenericSend+0x18a>
 800538a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800538c:	2200      	movs	r2, #0
 800538e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005392:	f7ff fb7b 	bl	8004a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005396:	1d3a      	adds	r2, r7, #4
 8005398:	f107 0314 	add.w	r3, r7, #20
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 f966 	bl	8006670 <xTaskCheckForTimeOut>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d124      	bne.n	80053f4 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ac:	f000 fc4a 	bl	8005c44 <prvIsQueueFull>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d018      	beq.n	80053e8 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053b8:	3310      	adds	r3, #16
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4611      	mov	r1, r2
 80053be:	4618      	mov	r0, r3
 80053c0:	f001 f8a6 	bl	8006510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c6:	f000 fbd5 	bl	8005b74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053ca:	f000 fec7 	bl	800615c <xTaskResumeAll>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f47f af7c 	bne.w	80052ce <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80053d6:	4b0c      	ldr	r3, [pc, #48]	; (8005408 <xQueueGenericSend+0x200>)
 80053d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053dc:	601a      	str	r2, [r3, #0]
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	f3bf 8f6f 	isb	sy
 80053e6:	e772      	b.n	80052ce <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ea:	f000 fbc3 	bl	8005b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ee:	f000 feb5 	bl	800615c <xTaskResumeAll>
 80053f2:	e76c      	b.n	80052ce <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053f6:	f000 fbbd 	bl	8005b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053fa:	f000 feaf 	bl	800615c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053fe:	2300      	movs	r3, #0
		}
	}
}
 8005400:	4618      	mov	r0, r3
 8005402:	3738      	adds	r7, #56	; 0x38
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	e000ed04 	.word	0xe000ed04

0800540c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b08e      	sub	sp, #56	; 0x38
 8005410:	af00      	add	r7, sp, #0
 8005412:	60f8      	str	r0, [r7, #12]
 8005414:	60b9      	str	r1, [r7, #8]
 8005416:	607a      	str	r2, [r7, #4]
 8005418:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800541e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <xQueueGenericSendFromISR+0x30>
 8005424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005428:	b672      	cpsid	i
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	b662      	cpsie	i
 8005438:	627b      	str	r3, [r7, #36]	; 0x24
 800543a:	e7fe      	b.n	800543a <xQueueGenericSendFromISR+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	2b00      	cmp	r3, #0
 8005440:	d103      	bne.n	800544a <xQueueGenericSendFromISR+0x3e>
 8005442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	2b00      	cmp	r3, #0
 8005448:	d101      	bne.n	800544e <xQueueGenericSendFromISR+0x42>
 800544a:	2301      	movs	r3, #1
 800544c:	e000      	b.n	8005450 <xQueueGenericSendFromISR+0x44>
 800544e:	2300      	movs	r3, #0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10b      	bne.n	800546c <xQueueGenericSendFromISR+0x60>
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	b672      	cpsid	i
 800545a:	f383 8811 	msr	BASEPRI, r3
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f3bf 8f4f 	dsb	sy
 8005466:	b662      	cpsie	i
 8005468:	623b      	str	r3, [r7, #32]
 800546a:	e7fe      	b.n	800546a <xQueueGenericSendFromISR+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	2b02      	cmp	r3, #2
 8005470:	d103      	bne.n	800547a <xQueueGenericSendFromISR+0x6e>
 8005472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005476:	2b01      	cmp	r3, #1
 8005478:	d101      	bne.n	800547e <xQueueGenericSendFromISR+0x72>
 800547a:	2301      	movs	r3, #1
 800547c:	e000      	b.n	8005480 <xQueueGenericSendFromISR+0x74>
 800547e:	2300      	movs	r3, #0
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10b      	bne.n	800549c <xQueueGenericSendFromISR+0x90>
 8005484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005488:	b672      	cpsid	i
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	b662      	cpsie	i
 8005498:	61fb      	str	r3, [r7, #28]
 800549a:	e7fe      	b.n	800549a <xQueueGenericSendFromISR+0x8e>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800549c:	f7ff fb9c 	bl	8004bd8 <vPortValidateInterruptPriority>
	__asm volatile
 80054a0:	f3ef 8211 	mrs	r2, BASEPRI
 80054a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a8:	b672      	cpsid	i
 80054aa:	f383 8811 	msr	BASEPRI, r3
 80054ae:	f3bf 8f6f 	isb	sy
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	b662      	cpsie	i
 80054b8:	61ba      	str	r2, [r7, #24]
 80054ba:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80054bc:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054c8:	429a      	cmp	r2, r3
 80054ca:	d302      	bcc.n	80054d2 <xQueueGenericSendFromISR+0xc6>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b02      	cmp	r3, #2
 80054d0:	d12c      	bne.n	800552c <xQueueGenericSendFromISR+0x120>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054dc:	683a      	ldr	r2, [r7, #0]
 80054de:	68b9      	ldr	r1, [r7, #8]
 80054e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80054e2:	f000 fab7 	bl	8005a54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054e6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80054ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ee:	d112      	bne.n	8005516 <xQueueGenericSendFromISR+0x10a>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d016      	beq.n	8005526 <xQueueGenericSendFromISR+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fa:	3324      	adds	r3, #36	; 0x24
 80054fc:	4618      	mov	r0, r3
 80054fe:	f001 f82d 	bl	800655c <xTaskRemoveFromEventList>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d00e      	beq.n	8005526 <xQueueGenericSendFromISR+0x11a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00b      	beq.n	8005526 <xQueueGenericSendFromISR+0x11a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2201      	movs	r2, #1
 8005512:	601a      	str	r2, [r3, #0]
 8005514:	e007      	b.n	8005526 <xQueueGenericSendFromISR+0x11a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005516:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800551a:	3301      	adds	r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	b25a      	sxtb	r2, r3
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005526:	2301      	movs	r3, #1
 8005528:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800552a:	e001      	b.n	8005530 <xQueueGenericSendFromISR+0x124>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800552c:	2300      	movs	r3, #0
 800552e:	637b      	str	r3, [r7, #52]	; 0x34
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800553a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800553c:	4618      	mov	r0, r3
 800553e:	3738      	adds	r7, #56	; 0x38
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}

08005544 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b08e      	sub	sp, #56	; 0x38
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005554:	2b00      	cmp	r3, #0
 8005556:	d10b      	bne.n	8005570 <xQueueGiveFromISR+0x2c>
	__asm volatile
 8005558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800555c:	b672      	cpsid	i
 800555e:	f383 8811 	msr	BASEPRI, r3
 8005562:	f3bf 8f6f 	isb	sy
 8005566:	f3bf 8f4f 	dsb	sy
 800556a:	b662      	cpsie	i
 800556c:	623b      	str	r3, [r7, #32]
 800556e:	e7fe      	b.n	800556e <xQueueGiveFromISR+0x2a>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00b      	beq.n	8005590 <xQueueGiveFromISR+0x4c>
 8005578:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557c:	b672      	cpsid	i
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	b662      	cpsie	i
 800558c:	61fb      	str	r3, [r7, #28]
 800558e:	e7fe      	b.n	800558e <xQueueGiveFromISR+0x4a>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->pxMutexHolder != NULL ) ) );
 8005590:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d103      	bne.n	80055a0 <xQueueGiveFromISR+0x5c>
 8005598:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d101      	bne.n	80055a4 <xQueueGiveFromISR+0x60>
 80055a0:	2301      	movs	r3, #1
 80055a2:	e000      	b.n	80055a6 <xQueueGiveFromISR+0x62>
 80055a4:	2300      	movs	r3, #0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d10b      	bne.n	80055c2 <xQueueGiveFromISR+0x7e>
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	b672      	cpsid	i
 80055b0:	f383 8811 	msr	BASEPRI, r3
 80055b4:	f3bf 8f6f 	isb	sy
 80055b8:	f3bf 8f4f 	dsb	sy
 80055bc:	b662      	cpsie	i
 80055be:	61bb      	str	r3, [r7, #24]
 80055c0:	e7fe      	b.n	80055c0 <xQueueGiveFromISR+0x7c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055c2:	f7ff fb09 	bl	8004bd8 <vPortValidateInterruptPriority>
	__asm volatile
 80055c6:	f3ef 8211 	mrs	r2, BASEPRI
 80055ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ce:	b672      	cpsid	i
 80055d0:	f383 8811 	msr	BASEPRI, r3
 80055d4:	f3bf 8f6f 	isb	sy
 80055d8:	f3bf 8f4f 	dsb	sy
 80055dc:	b662      	cpsie	i
 80055de:	617a      	str	r2, [r7, #20]
 80055e0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055e2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80055f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f2:	429a      	cmp	r2, r3
 80055f4:	d92b      	bls.n	800564e <xQueueGiveFromISR+0x10a>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005602:	1c5a      	adds	r2, r3, #1
 8005604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005606:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005608:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800560c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005610:	d112      	bne.n	8005638 <xQueueGiveFromISR+0xf4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <xQueueGiveFromISR+0x104>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	3324      	adds	r3, #36	; 0x24
 800561e:	4618      	mov	r0, r3
 8005620:	f000 ff9c 	bl	800655c <xTaskRemoveFromEventList>
 8005624:	4603      	mov	r3, r0
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00e      	beq.n	8005648 <xQueueGiveFromISR+0x104>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	2b00      	cmp	r3, #0
 800562e:	d00b      	beq.n	8005648 <xQueueGiveFromISR+0x104>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
 8005636:	e007      	b.n	8005648 <xQueueGiveFromISR+0x104>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005638:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800563c:	3301      	adds	r3, #1
 800563e:	b2db      	uxtb	r3, r3
 8005640:	b25a      	sxtb	r2, r3
 8005642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005644:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005648:	2301      	movs	r3, #1
 800564a:	637b      	str	r3, [r7, #52]	; 0x34
 800564c:	e001      	b.n	8005652 <xQueueGiveFromISR+0x10e>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800564e:	2300      	movs	r3, #0
 8005650:	637b      	str	r3, [r7, #52]	; 0x34
 8005652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005654:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800565c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800565e:	4618      	mov	r0, r3
 8005660:	3738      	adds	r7, #56	; 0x38
 8005662:	46bd      	mov	sp, r7
 8005664:	bd80      	pop	{r7, pc}
	...

08005668 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait, const BaseType_t xJustPeeking )
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b08e      	sub	sp, #56	; 0x38
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
 8005674:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005676:	2300      	movs	r3, #0
 8005678:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
int8_t *pcOriginalReadPosition;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800567e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10b      	bne.n	800569c <xQueueGenericReceive+0x34>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	b672      	cpsid	i
 800568a:	f383 8811 	msr	BASEPRI, r3
 800568e:	f3bf 8f6f 	isb	sy
 8005692:	f3bf 8f4f 	dsb	sy
 8005696:	b662      	cpsie	i
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	e7fe      	b.n	800569a <xQueueGenericReceive+0x32>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d103      	bne.n	80056aa <xQueueGenericReceive+0x42>
 80056a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueGenericReceive+0x46>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueGenericReceive+0x48>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10b      	bne.n	80056cc <xQueueGenericReceive+0x64>
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	b672      	cpsid	i
 80056ba:	f383 8811 	msr	BASEPRI, r3
 80056be:	f3bf 8f6f 	isb	sy
 80056c2:	f3bf 8f4f 	dsb	sy
 80056c6:	b662      	cpsie	i
 80056c8:	623b      	str	r3, [r7, #32]
 80056ca:	e7fe      	b.n	80056ca <xQueueGenericReceive+0x62>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056cc:	f001 f908 	bl	80068e0 <xTaskGetSchedulerState>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d102      	bne.n	80056dc <xQueueGenericReceive+0x74>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d101      	bne.n	80056e0 <xQueueGenericReceive+0x78>
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <xQueueGenericReceive+0x7a>
 80056e0:	2300      	movs	r3, #0
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <xQueueGenericReceive+0x96>
 80056e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ea:	b672      	cpsid	i
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	b662      	cpsie	i
 80056fa:	61fb      	str	r3, [r7, #28]
 80056fc:	e7fe      	b.n	80056fc <xQueueGenericReceive+0x94>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80056fe:	f7ff f993 	bl	8004a28 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800570a:	2b00      	cmp	r3, #0
 800570c:	d046      	beq.n	800579c <xQueueGenericReceive+0x134>
			{
				/* Remember the read position in case the queue is only being
				peeked. */
				pcOriginalReadPosition = pxQueue->u.pcReadFrom;
 800570e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	62bb      	str	r3, [r7, #40]	; 0x28

				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005714:	68b9      	ldr	r1, [r7, #8]
 8005716:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005718:	f000 fa06 	bl	8005b28 <prvCopyDataFromQueue>

				if( xJustPeeking == pdFALSE )
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	2b00      	cmp	r3, #0
 8005720:	d121      	bne.n	8005766 <xQueueGenericReceive+0xfe>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* Actually removing data, not just peeking. */
					pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005724:	1e5a      	subs	r2, r3, #1
 8005726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005728:	639a      	str	r2, [r3, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d104      	bne.n	800573c <xQueueGenericReceive+0xd4>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = ( int8_t * ) pvTaskIncrementMutexHeldCount(); /*lint !e961 Cast is not redundant as TaskHandle_t is a typedef. */
 8005732:	f001 f9f1 	bl	8006b18 <pvTaskIncrementMutexHeldCount>
 8005736:	4602      	mov	r2, r0
 8005738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573a:	605a      	str	r2, [r3, #4]
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configUSE_MUTEXES */

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800573c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800573e:	691b      	ldr	r3, [r3, #16]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d027      	beq.n	8005794 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005746:	3310      	adds	r3, #16
 8005748:	4618      	mov	r0, r3
 800574a:	f000 ff07 	bl	800655c <xTaskRemoveFromEventList>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d01f      	beq.n	8005794 <xQueueGenericReceive+0x12c>
						{
							queueYIELD_IF_USING_PREEMPTION();
 8005754:	4b4f      	ldr	r3, [pc, #316]	; (8005894 <xQueueGenericReceive+0x22c>)
 8005756:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	f3bf 8f4f 	dsb	sy
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	e016      	b.n	8005794 <xQueueGenericReceive+0x12c>
				{
					traceQUEUE_PEEK( pxQueue );

					/* The data is not being removed, so reset the read
					pointer. */
					pxQueue->u.pcReadFrom = pcOriginalReadPosition;
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576a:	60da      	str	r2, [r3, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800576c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800576e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <xQueueGenericReceive+0x12c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	3324      	adds	r3, #36	; 0x24
 8005778:	4618      	mov	r0, r3
 800577a:	f000 feef 	bl	800655c <xTaskRemoveFromEventList>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xQueueGenericReceive+0x12c>
						{
							/* The task waiting has a higher priority than this task. */
							queueYIELD_IF_USING_PREEMPTION();
 8005784:	4b43      	ldr	r3, [pc, #268]	; (8005894 <xQueueGenericReceive+0x22c>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				taskEXIT_CRITICAL();
 8005794:	f7ff f97a 	bl	8004a8c <vPortExitCritical>
				return pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	e077      	b.n	800588c <xQueueGenericReceive+0x224>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueGenericReceive+0x142>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a2:	f7ff f973 	bl	8004a8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e070      	b.n	800588c <xQueueGenericReceive+0x224>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <xQueueGenericReceive+0x156>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
 80057b0:	f107 0314 	add.w	r3, r7, #20
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 ff35 	bl	8006624 <vTaskSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057be:	f7ff f965 	bl	8004a8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c2:	f000 fcbd 	bl	8006140 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f7ff f92f 	bl	8004a28 <vPortEnterCritical>
 80057ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057d6:	d103      	bne.n	80057e0 <xQueueGenericReceive+0x178>
 80057d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057ec:	d103      	bne.n	80057f6 <xQueueGenericReceive+0x18e>
 80057ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057f6:	f7ff f949 	bl	8004a8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	f107 0314 	add.w	r3, r7, #20
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ff34 	bl	8006670 <xTaskCheckForTimeOut>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d131      	bne.n	8005872 <xQueueGenericReceive+0x20a>
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005810:	f000 fa02 	bl	8005c18 <prvIsQueueEmpty>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d025      	beq.n	8005866 <xQueueGenericReceive+0x1fe>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d108      	bne.n	8005834 <xQueueGenericReceive+0x1cc>
					{
						taskENTER_CRITICAL();
 8005822:	f7ff f901 	bl	8004a28 <vPortEnterCritical>
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
 8005826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	4618      	mov	r0, r3
 800582c:	f001 f876 	bl	800691c <vTaskPriorityInherit>
						}
						taskEXIT_CRITICAL();
 8005830:	f7ff f92c 	bl	8004a8c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005834:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	4611      	mov	r1, r2
 800583c:	4618      	mov	r0, r3
 800583e:	f000 fe67 	bl	8006510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005842:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005844:	f000 f996 	bl	8005b74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005848:	f000 fc88 	bl	800615c <xTaskResumeAll>
 800584c:	4603      	mov	r3, r0
 800584e:	2b00      	cmp	r3, #0
 8005850:	f47f af55 	bne.w	80056fe <xQueueGenericReceive+0x96>
				{
					portYIELD_WITHIN_API();
 8005854:	4b0f      	ldr	r3, [pc, #60]	; (8005894 <xQueueGenericReceive+0x22c>)
 8005856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800585a:	601a      	str	r2, [r3, #0]
 800585c:	f3bf 8f4f 	dsb	sy
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	e74b      	b.n	80056fe <xQueueGenericReceive+0x96>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005866:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005868:	f000 f984 	bl	8005b74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800586c:	f000 fc76 	bl	800615c <xTaskResumeAll>
 8005870:	e745      	b.n	80056fe <xQueueGenericReceive+0x96>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
 8005872:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005874:	f000 f97e 	bl	8005b74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005878:	f000 fc70 	bl	800615c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800587c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800587e:	f000 f9cb 	bl	8005c18 <prvIsQueueEmpty>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f43f af3a 	beq.w	80056fe <xQueueGenericReceive+0x96>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800588a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800588c:	4618      	mov	r0, r3
 800588e:	3738      	adds	r7, #56	; 0x38
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	e000ed04 	.word	0xe000ed04

08005898 <xQueueReceiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b08e      	sub	sp, #56	; 0x38
 800589c:	af00      	add	r7, sp, #0
 800589e:	60f8      	str	r0, [r7, #12]
 80058a0:	60b9      	str	r1, [r7, #8]
 80058a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d10b      	bne.n	80058c6 <xQueueReceiveFromISR+0x2e>
 80058ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058b2:	b672      	cpsid	i
 80058b4:	f383 8811 	msr	BASEPRI, r3
 80058b8:	f3bf 8f6f 	isb	sy
 80058bc:	f3bf 8f4f 	dsb	sy
 80058c0:	b662      	cpsie	i
 80058c2:	623b      	str	r3, [r7, #32]
 80058c4:	e7fe      	b.n	80058c4 <xQueueReceiveFromISR+0x2c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d103      	bne.n	80058d4 <xQueueReceiveFromISR+0x3c>
 80058cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <xQueueReceiveFromISR+0x40>
 80058d4:	2301      	movs	r3, #1
 80058d6:	e000      	b.n	80058da <xQueueReceiveFromISR+0x42>
 80058d8:	2300      	movs	r3, #0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10b      	bne.n	80058f6 <xQueueReceiveFromISR+0x5e>
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	b672      	cpsid	i
 80058e4:	f383 8811 	msr	BASEPRI, r3
 80058e8:	f3bf 8f6f 	isb	sy
 80058ec:	f3bf 8f4f 	dsb	sy
 80058f0:	b662      	cpsie	i
 80058f2:	61fb      	str	r3, [r7, #28]
 80058f4:	e7fe      	b.n	80058f4 <xQueueReceiveFromISR+0x5c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058f6:	f7ff f96f 	bl	8004bd8 <vPortValidateInterruptPriority>
	__asm volatile
 80058fa:	f3ef 8211 	mrs	r2, BASEPRI
 80058fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005902:	b672      	cpsid	i
 8005904:	f383 8811 	msr	BASEPRI, r3
 8005908:	f3bf 8f6f 	isb	sy
 800590c:	f3bf 8f4f 	dsb	sy
 8005910:	b662      	cpsie	i
 8005912:	61ba      	str	r2, [r7, #24]
 8005914:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005916:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005918:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02f      	beq.n	8005986 <xQueueReceiveFromISR+0xee>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005928:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800592c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005930:	68b9      	ldr	r1, [r7, #8]
 8005932:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005934:	f000 f8f8 	bl	8005b28 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - 1;
 8005938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800593a:	1e5a      	subs	r2, r3, #1
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005940:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005944:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005948:	d112      	bne.n	8005970 <xQueueReceiveFromISR+0xd8>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <xQueueReceiveFromISR+0xe8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	3310      	adds	r3, #16
 8005956:	4618      	mov	r0, r3
 8005958:	f000 fe00 	bl	800655c <xTaskRemoveFromEventList>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00e      	beq.n	8005980 <xQueueReceiveFromISR+0xe8>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d00b      	beq.n	8005980 <xQueueReceiveFromISR+0xe8>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	601a      	str	r2, [r3, #0]
 800596e:	e007      	b.n	8005980 <xQueueReceiveFromISR+0xe8>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005970:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005974:	3301      	adds	r3, #1
 8005976:	b2db      	uxtb	r3, r3
 8005978:	b25a      	sxtb	r2, r3
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005980:	2301      	movs	r3, #1
 8005982:	637b      	str	r3, [r7, #52]	; 0x34
 8005984:	e001      	b.n	800598a <xQueueReceiveFromISR+0xf2>
		}
		else
		{
			xReturn = pdFAIL;
 8005986:	2300      	movs	r3, #0
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
 800598a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800598e:	693b      	ldr	r3, [r7, #16]
 8005990:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005996:	4618      	mov	r0, r3
 8005998:	3738      	adds	r7, #56	; 0x38
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d10b      	bne.n	80059c4 <uxQueueMessagesWaiting+0x26>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b0:	b672      	cpsid	i
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	b662      	cpsie	i
 80059c0:	60bb      	str	r3, [r7, #8]
 80059c2:	e7fe      	b.n	80059c2 <uxQueueMessagesWaiting+0x24>

	taskENTER_CRITICAL();
 80059c4:	f7ff f830 	bl	8004a28 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059cc:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 80059ce:	f7ff f85d 	bl	8004a8c <vPortExitCritical>

	return uxReturn;
 80059d2:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 80059d4:	4618      	mov	r0, r3
 80059d6:	3710      	adds	r7, #16
 80059d8:	46bd      	mov	sp, r7
 80059da:	bd80      	pop	{r7, pc}

080059dc <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 80059dc:	b480      	push	{r7}
 80059de:	b085      	sub	sp, #20
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d10b      	bne.n	8005a02 <uxQueueMessagesWaitingFromISR+0x26>
 80059ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ee:	b672      	cpsid	i
 80059f0:	f383 8811 	msr	BASEPRI, r3
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	f3bf 8f4f 	dsb	sy
 80059fc:	b662      	cpsie	i
 80059fe:	60bb      	str	r3, [r7, #8]
 8005a00:	e7fe      	b.n	8005a00 <uxQueueMessagesWaitingFromISR+0x24>

	uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a06:	60fb      	str	r3, [r7, #12]

	return uxReturn;
 8005a08:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr

08005a16 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005a16:	b580      	push	{r7, lr}
 8005a18:	b084      	sub	sp, #16
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d10b      	bne.n	8005a40 <vQueueDelete+0x2a>
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	b672      	cpsid	i
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	b662      	cpsie	i
 8005a3c:	60bb      	str	r3, [r7, #8]
 8005a3e:	e7fe      	b.n	8005a3e <vQueueDelete+0x28>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f917 	bl	8005c74 <vQueueUnregisterQueue>

	#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
	{
		/* The queue can only have been allocated dynamically - free it
		again. */
		vPortFree( pxQueue );
 8005a46:	68f8      	ldr	r0, [r7, #12]
 8005a48:	f7ff f9d0 	bl	8004dec <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005a4c:	bf00      	nop
 8005a4e:	3710      	adds	r7, #16
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvCopyDataToQueue>:

#endif /* configUSE_TRACE_FACILITY */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b086      	sub	sp, #24
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	60f8      	str	r0, [r7, #12]
 8005a5c:	60b9      	str	r1, [r7, #8]
 8005a5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10d      	bne.n	8005a8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d14d      	bne.n	8005b16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	685b      	ldr	r3, [r3, #4]
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f000 ffc2 	bl	8006a08 <xTaskPriorityDisinherit>
 8005a84:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	605a      	str	r2, [r3, #4]
 8005a8c:	e043      	b.n	8005b16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d119      	bne.n	8005ac8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	6898      	ldr	r0, [r3, #8]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	68b9      	ldr	r1, [r7, #8]
 8005aa0:	f010 f985 	bl	8015dae <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	689a      	ldr	r2, [r3, #8]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	441a      	add	r2, r3
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	689a      	ldr	r2, [r3, #8]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d32b      	bcc.n	8005b16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	609a      	str	r2, [r3, #8]
 8005ac6:	e026      	b.n	8005b16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	68d8      	ldr	r0, [r3, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ad0:	461a      	mov	r2, r3
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	f010 f96b 	bl	8015dae <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	68da      	ldr	r2, [r3, #12]
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae0:	425b      	negs	r3, r3
 8005ae2:	441a      	add	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	68da      	ldr	r2, [r3, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d207      	bcs.n	8005b04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005afc:	425b      	negs	r3, r3
 8005afe:	441a      	add	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d105      	bne.n	8005b16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d002      	beq.n	8005b16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005b10:	693b      	ldr	r3, [r7, #16]
 8005b12:	3b01      	subs	r3, #1
 8005b14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + 1;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	1c5a      	adds	r2, r3, #1
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005b1e:	697b      	ldr	r3, [r7, #20]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3718      	adds	r7, #24
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b082      	sub	sp, #8
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	68da      	ldr	r2, [r3, #12]
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b42:	441a      	add	r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	68da      	ldr	r2, [r3, #12]
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	429a      	cmp	r2, r3
 8005b52:	d303      	bcc.n	8005b5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	68d9      	ldr	r1, [r3, #12]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b64:	461a      	mov	r2, r3
 8005b66:	6838      	ldr	r0, [r7, #0]
 8005b68:	f010 f921 	bl	8015dae <memcpy>
	}
}
 8005b6c:	bf00      	nop
 8005b6e:	3708      	adds	r7, #8
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}

08005b74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b084      	sub	sp, #16
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005b7c:	f7fe ff54 	bl	8004a28 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b88:	e011      	b.n	8005bae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d012      	beq.n	8005bb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	3324      	adds	r3, #36	; 0x24
 8005b96:	4618      	mov	r0, r3
 8005b98:	f000 fce0 	bl	800655c <xTaskRemoveFromEventList>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d001      	beq.n	8005ba6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ba2:	f000 fdc7 	bl	8006734 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b2db      	uxtb	r3, r3
 8005bac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005bae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	dce9      	bgt.n	8005b8a <prvUnlockQueue+0x16>
 8005bb6:	e000      	b.n	8005bba <prvUnlockQueue+0x46>
					break;
 8005bb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	22ff      	movs	r2, #255	; 0xff
 8005bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005bc2:	f7fe ff63 	bl	8004a8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005bc6:	f7fe ff2f 	bl	8004a28 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bd2:	e011      	b.n	8005bf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	691b      	ldr	r3, [r3, #16]
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d012      	beq.n	8005c02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	3310      	adds	r3, #16
 8005be0:	4618      	mov	r0, r3
 8005be2:	f000 fcbb 	bl	800655c <xTaskRemoveFromEventList>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d001      	beq.n	8005bf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005bec:	f000 fda2 	bl	8006734 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005bf0:	7bbb      	ldrb	r3, [r7, #14]
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005bf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	dce9      	bgt.n	8005bd4 <prvUnlockQueue+0x60>
 8005c00:	e000      	b.n	8005c04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005c02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	22ff      	movs	r2, #255	; 0xff
 8005c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005c0c:	f7fe ff3e 	bl	8004a8c <vPortExitCritical>
}
 8005c10:	bf00      	nop
 8005c12:	3710      	adds	r7, #16
 8005c14:	46bd      	mov	sp, r7
 8005c16:	bd80      	pop	{r7, pc}

08005c18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b084      	sub	sp, #16
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c20:	f7fe ff02 	bl	8004a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d102      	bne.n	8005c32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	e001      	b.n	8005c36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005c32:	2300      	movs	r3, #0
 8005c34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c36:	f7fe ff29 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	bd80      	pop	{r7, pc}

08005c44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b084      	sub	sp, #16
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005c4c:	f7fe feec 	bl	8004a28 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	d102      	bne.n	8005c62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	60fb      	str	r3, [r7, #12]
 8005c60:	e001      	b.n	8005c66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005c62:	2300      	movs	r3, #0
 8005c64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005c66:	f7fe ff11 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]
 8005c80:	e016      	b.n	8005cb0 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005c82:	4a10      	ldr	r2, [pc, #64]	; (8005cc4 <vQueueUnregisterQueue+0x50>)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	00db      	lsls	r3, r3, #3
 8005c88:	4413      	add	r3, r2
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d10b      	bne.n	8005caa <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005c92:	4a0c      	ldr	r2, [pc, #48]	; (8005cc4 <vQueueUnregisterQueue+0x50>)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2100      	movs	r1, #0
 8005c98:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005c9c:	4a09      	ldr	r2, [pc, #36]	; (8005cc4 <vQueueUnregisterQueue+0x50>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	00db      	lsls	r3, r3, #3
 8005ca2:	4413      	add	r3, r2
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	605a      	str	r2, [r3, #4]
				break;
 8005ca8:	e005      	b.n	8005cb6 <vQueueUnregisterQueue+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	3301      	adds	r3, #1
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	2b07      	cmp	r3, #7
 8005cb4:	d9e5      	bls.n	8005c82 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005cb6:	bf00      	nop
 8005cb8:	3714      	adds	r7, #20
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr
 8005cc2:	bf00      	nop
 8005cc4:	200041a4 	.word	0x200041a4

08005cc8 <xTaskCreate>:
							const char * const pcName,
							const uint16_t usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b08c      	sub	sp, #48	; 0x30
 8005ccc:	af04      	add	r7, sp, #16
 8005cce:	60f8      	str	r0, [r7, #12]
 8005cd0:	60b9      	str	r1, [r7, #8]
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	4613      	mov	r3, r2
 8005cd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cd8:	88fb      	ldrh	r3, [r7, #6]
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7fe ffbd 	bl	8004c5c <pvPortMalloc>
 8005ce2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00e      	beq.n	8005d08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005cea:	2054      	movs	r0, #84	; 0x54
 8005cec:	f7fe ffb6 	bl	8004c5c <pvPortMalloc>
 8005cf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	697a      	ldr	r2, [r7, #20]
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30
 8005cfe:	e005      	b.n	8005d0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d00:	6978      	ldr	r0, [r7, #20]
 8005d02:	f7ff f873 	bl	8004dec <vPortFree>
 8005d06:	e001      	b.n	8005d0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d013      	beq.n	8005d3a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d12:	88fa      	ldrh	r2, [r7, #6]
 8005d14:	2300      	movs	r3, #0
 8005d16:	9303      	str	r3, [sp, #12]
 8005d18:	69fb      	ldr	r3, [r7, #28]
 8005d1a:	9302      	str	r3, [sp, #8]
 8005d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1e:	9301      	str	r3, [sp, #4]
 8005d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	68f8      	ldr	r0, [r7, #12]
 8005d2a:	f000 f80e 	bl	8005d4a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d2e:	69f8      	ldr	r0, [r7, #28]
 8005d30:	f000 f88c 	bl	8005e4c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d34:	2301      	movs	r3, #1
 8005d36:	61bb      	str	r3, [r7, #24]
 8005d38:	e002      	b.n	8005d40 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005d3e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d40:	69bb      	ldr	r3, [r7, #24]
	}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3720      	adds	r7, #32
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b088      	sub	sp, #32
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	60f8      	str	r0, [r7, #12]
 8005d52:	60b9      	str	r1, [r7, #8]
 8005d54:	607a      	str	r2, [r7, #4]
 8005d56:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005d58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d5c:	6879      	ldr	r1, [r7, #4]
 8005d5e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8005d62:	440b      	add	r3, r1
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005d6a:	69bb      	ldr	r3, [r7, #24]
 8005d6c:	f023 0307 	bic.w	r3, r3, #7
 8005d70:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d72:	69bb      	ldr	r3, [r7, #24]
 8005d74:	f003 0307 	and.w	r3, r3, #7
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d00b      	beq.n	8005d94 <prvInitialiseNewTask+0x4a>
 8005d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d80:	b672      	cpsid	i
 8005d82:	f383 8811 	msr	BASEPRI, r3
 8005d86:	f3bf 8f6f 	isb	sy
 8005d8a:	f3bf 8f4f 	dsb	sy
 8005d8e:	b662      	cpsie	i
 8005d90:	617b      	str	r3, [r7, #20]
 8005d92:	e7fe      	b.n	8005d92 <prvInitialiseNewTask+0x48>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d94:	2300      	movs	r3, #0
 8005d96:	61fb      	str	r3, [r7, #28]
 8005d98:	e012      	b.n	8005dc0 <prvInitialiseNewTask+0x76>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	69fb      	ldr	r3, [r7, #28]
 8005d9e:	4413      	add	r3, r2
 8005da0:	7819      	ldrb	r1, [r3, #0]
 8005da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	4413      	add	r3, r2
 8005da8:	3334      	adds	r3, #52	; 0x34
 8005daa:	460a      	mov	r2, r1
 8005dac:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005dae:	68ba      	ldr	r2, [r7, #8]
 8005db0:	69fb      	ldr	r3, [r7, #28]
 8005db2:	4413      	add	r3, r2
 8005db4:	781b      	ldrb	r3, [r3, #0]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d006      	beq.n	8005dc8 <prvInitialiseNewTask+0x7e>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	3301      	adds	r3, #1
 8005dbe:	61fb      	str	r3, [r7, #28]
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	2b0f      	cmp	r3, #15
 8005dc4:	d9e9      	bls.n	8005d9a <prvInitialiseNewTask+0x50>
 8005dc6:	e000      	b.n	8005dca <prvInitialiseNewTask+0x80>
		{
			break;
 8005dc8:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005dca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005dd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dd4:	2b0f      	cmp	r3, #15
 8005dd6:	d901      	bls.n	8005ddc <prvInitialiseNewTask+0x92>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005dd8:	230f      	movs	r3, #15
 8005dda:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005de6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dea:	2200      	movs	r2, #0
 8005dec:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fca0 	bl	8004738 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfa:	3318      	adds	r3, #24
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fe fc9b 	bl	8004738 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e06:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0a:	f1c3 0210 	rsb	r2, r3, #16
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e16:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e26:	683a      	ldr	r2, [r7, #0]
 8005e28:	68f9      	ldr	r1, [r7, #12]
 8005e2a:	69b8      	ldr	r0, [r7, #24]
 8005e2c:	f7fe fd18 	bl	8004860 <pxPortInitialiseStack>
 8005e30:	4602      	mov	r2, r0
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <prvInitialiseNewTask+0xf8>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e42:	bf00      	nop
 8005e44:	3720      	adds	r7, #32
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
	...

08005e4c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b082      	sub	sp, #8
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005e54:	f7fe fde8 	bl	8004a28 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005e58:	4b2a      	ldr	r3, [pc, #168]	; (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	3301      	adds	r3, #1
 8005e5e:	4a29      	ldr	r2, [pc, #164]	; (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e60:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005e62:	4b29      	ldr	r3, [pc, #164]	; (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d109      	bne.n	8005e7e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005e6a:	4a27      	ldr	r2, [pc, #156]	; (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e70:	4b24      	ldr	r3, [pc, #144]	; (8005f04 <prvAddNewTaskToReadyList+0xb8>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d110      	bne.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e78:	f000 fc80 	bl	800677c <prvInitialiseTaskLists>
 8005e7c:	e00d      	b.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e7e:	4b23      	ldr	r3, [pc, #140]	; (8005f0c <prvAddNewTaskToReadyList+0xc0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d109      	bne.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e86:	4b20      	ldr	r3, [pc, #128]	; (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e90:	429a      	cmp	r2, r3
 8005e92:	d802      	bhi.n	8005e9a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e94:	4a1c      	ldr	r2, [pc, #112]	; (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e9a:	4b1d      	ldr	r3, [pc, #116]	; (8005f10 <prvAddNewTaskToReadyList+0xc4>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	4a1b      	ldr	r2, [pc, #108]	; (8005f10 <prvAddNewTaskToReadyList+0xc4>)
 8005ea2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ea8:	2201      	movs	r2, #1
 8005eaa:	409a      	lsls	r2, r3
 8005eac:	4b19      	ldr	r3, [pc, #100]	; (8005f14 <prvAddNewTaskToReadyList+0xc8>)
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4313      	orrs	r3, r2
 8005eb2:	4a18      	ldr	r2, [pc, #96]	; (8005f14 <prvAddNewTaskToReadyList+0xc8>)
 8005eb4:	6013      	str	r3, [r2, #0]
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005eba:	4613      	mov	r3, r2
 8005ebc:	009b      	lsls	r3, r3, #2
 8005ebe:	4413      	add	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4a15      	ldr	r2, [pc, #84]	; (8005f18 <prvAddNewTaskToReadyList+0xcc>)
 8005ec4:	441a      	add	r2, r3
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	3304      	adds	r3, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4610      	mov	r0, r2
 8005ece:	f7fe fc40 	bl	8004752 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005ed2:	f7fe fddb 	bl	8004a8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005ed6:	4b0d      	ldr	r3, [pc, #52]	; (8005f0c <prvAddNewTaskToReadyList+0xc0>)
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d00e      	beq.n	8005efc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005ede:	4b0a      	ldr	r3, [pc, #40]	; (8005f08 <prvAddNewTaskToReadyList+0xbc>)
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	429a      	cmp	r2, r3
 8005eea:	d207      	bcs.n	8005efc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005eec:	4b0b      	ldr	r3, [pc, #44]	; (8005f1c <prvAddNewTaskToReadyList+0xd0>)
 8005eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef2:	601a      	str	r2, [r3, #0]
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20003f98 	.word	0x20003f98
 8005f08:	20003de4 	.word	0x20003de4
 8005f0c:	20003fa4 	.word	0x20003fa4
 8005f10:	20003fb4 	.word	0x20003fb4
 8005f14:	20003fa0 	.word	0x20003fa0
 8005f18:	20003de8 	.word	0x20003de8
 8005f1c:	e000ed04 	.word	0xe000ed04

08005f20 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b084      	sub	sp, #16
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005f28:	f7fe fd7e 	bl	8004a28 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d102      	bne.n	8005f38 <vTaskDelete+0x18>
 8005f32:	4b39      	ldr	r3, [pc, #228]	; (8006018 <vTaskDelete+0xf8>)
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	e000      	b.n	8005f3a <vTaskDelete+0x1a>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	3304      	adds	r3, #4
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fe fc63 	bl	800480c <uxListRemove>
 8005f46:	4603      	mov	r3, r0
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d115      	bne.n	8005f78 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f50:	4932      	ldr	r1, [pc, #200]	; (800601c <vTaskDelete+0xfc>)
 8005f52:	4613      	mov	r3, r2
 8005f54:	009b      	lsls	r3, r3, #2
 8005f56:	4413      	add	r3, r2
 8005f58:	009b      	lsls	r3, r3, #2
 8005f5a:	440b      	add	r3, r1
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d10a      	bne.n	8005f78 <vTaskDelete+0x58>
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	2201      	movs	r2, #1
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	43da      	mvns	r2, r3
 8005f6e:	4b2c      	ldr	r3, [pc, #176]	; (8006020 <vTaskDelete+0x100>)
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4013      	ands	r3, r2
 8005f74:	4a2a      	ldr	r2, [pc, #168]	; (8006020 <vTaskDelete+0x100>)
 8005f76:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d004      	beq.n	8005f8a <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	3318      	adds	r3, #24
 8005f84:	4618      	mov	r0, r3
 8005f86:	f7fe fc41 	bl	800480c <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005f8a:	4b26      	ldr	r3, [pc, #152]	; (8006024 <vTaskDelete+0x104>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3301      	adds	r3, #1
 8005f90:	4a24      	ldr	r2, [pc, #144]	; (8006024 <vTaskDelete+0x104>)
 8005f92:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005f94:	4b20      	ldr	r3, [pc, #128]	; (8006018 <vTaskDelete+0xf8>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	429a      	cmp	r2, r3
 8005f9c:	d10b      	bne.n	8005fb6 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	4619      	mov	r1, r3
 8005fa4:	4820      	ldr	r0, [pc, #128]	; (8006028 <vTaskDelete+0x108>)
 8005fa6:	f7fe fbd4 	bl	8004752 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005faa:	4b20      	ldr	r3, [pc, #128]	; (800602c <vTaskDelete+0x10c>)
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	4a1e      	ldr	r2, [pc, #120]	; (800602c <vTaskDelete+0x10c>)
 8005fb2:	6013      	str	r3, [r2, #0]
 8005fb4:	e009      	b.n	8005fca <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005fb6:	4b1e      	ldr	r3, [pc, #120]	; (8006030 <vTaskDelete+0x110>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	4a1c      	ldr	r2, [pc, #112]	; (8006030 <vTaskDelete+0x110>)
 8005fbe:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8005fc0:	68f8      	ldr	r0, [r7, #12]
 8005fc2:	f000 fc57 	bl	8006874 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005fc6:	f000 fc65 	bl	8006894 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8005fca:	f7fe fd5f 	bl	8004a8c <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005fce:	4b19      	ldr	r3, [pc, #100]	; (8006034 <vTaskDelete+0x114>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d01c      	beq.n	8006010 <vTaskDelete+0xf0>
		{
			if( pxTCB == pxCurrentTCB )
 8005fd6:	4b10      	ldr	r3, [pc, #64]	; (8006018 <vTaskDelete+0xf8>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68fa      	ldr	r2, [r7, #12]
 8005fdc:	429a      	cmp	r2, r3
 8005fde:	d117      	bne.n	8006010 <vTaskDelete+0xf0>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005fe0:	4b15      	ldr	r3, [pc, #84]	; (8006038 <vTaskDelete+0x118>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d00b      	beq.n	8006000 <vTaskDelete+0xe0>
 8005fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fec:	b672      	cpsid	i
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	b662      	cpsie	i
 8005ffc:	60bb      	str	r3, [r7, #8]
 8005ffe:	e7fe      	b.n	8005ffe <vTaskDelete+0xde>
				portYIELD_WITHIN_API();
 8006000:	4b0e      	ldr	r3, [pc, #56]	; (800603c <vTaskDelete+0x11c>)
 8006002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006006:	601a      	str	r2, [r3, #0]
 8006008:	f3bf 8f4f 	dsb	sy
 800600c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006010:	bf00      	nop
 8006012:	3710      	adds	r7, #16
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}
 8006018:	20003de4 	.word	0x20003de4
 800601c:	20003de8 	.word	0x20003de8
 8006020:	20003fa0 	.word	0x20003fa0
 8006024:	20003fb4 	.word	0x20003fb4
 8006028:	20003f6c 	.word	0x20003f6c
 800602c:	20003f80 	.word	0x20003f80
 8006030:	20003f98 	.word	0x20003f98
 8006034:	20003fa4 	.word	0x20003fa4
 8006038:	20003fc0 	.word	0x20003fc0
 800603c:	e000ed04 	.word	0xe000ed04

08006040 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006048:	2300      	movs	r3, #0
 800604a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d018      	beq.n	8006084 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006052:	4b14      	ldr	r3, [pc, #80]	; (80060a4 <vTaskDelay+0x64>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d00b      	beq.n	8006072 <vTaskDelay+0x32>
 800605a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605e:	b672      	cpsid	i
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	b662      	cpsie	i
 800606e:	60bb      	str	r3, [r7, #8]
 8006070:	e7fe      	b.n	8006070 <vTaskDelay+0x30>
			vTaskSuspendAll();
 8006072:	f000 f865 	bl	8006140 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006076:	2100      	movs	r1, #0
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 fd61 	bl	8006b40 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800607e:	f000 f86d 	bl	800615c <xTaskResumeAll>
 8006082:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d107      	bne.n	800609a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800608a:	4b07      	ldr	r3, [pc, #28]	; (80060a8 <vTaskDelay+0x68>)
 800608c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006090:	601a      	str	r2, [r3, #0]
 8006092:	f3bf 8f4f 	dsb	sy
 8006096:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800609a:	bf00      	nop
 800609c:	3710      	adds	r7, #16
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	20003fc0 	.word	0x20003fc0
 80060a8:	e000ed04 	.word	0xe000ed04

080060ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80060b2:	4b1d      	ldr	r3, [pc, #116]	; (8006128 <vTaskStartScheduler+0x7c>)
 80060b4:	9301      	str	r3, [sp, #4]
 80060b6:	2300      	movs	r3, #0
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	2300      	movs	r3, #0
 80060bc:	2280      	movs	r2, #128	; 0x80
 80060be:	491b      	ldr	r1, [pc, #108]	; (800612c <vTaskStartScheduler+0x80>)
 80060c0:	481b      	ldr	r0, [pc, #108]	; (8006130 <vTaskStartScheduler+0x84>)
 80060c2:	f7ff fe01 	bl	8005cc8 <xTaskCreate>
 80060c6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d117      	bne.n	80060fe <vTaskStartScheduler+0x52>
 80060ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d2:	b672      	cpsid	i
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	b662      	cpsie	i
 80060e2:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060e4:	4b13      	ldr	r3, [pc, #76]	; (8006134 <vTaskStartScheduler+0x88>)
 80060e6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060ec:	4b12      	ldr	r3, [pc, #72]	; (8006138 <vTaskStartScheduler+0x8c>)
 80060ee:	2201      	movs	r2, #1
 80060f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80060f2:	4b12      	ldr	r3, [pc, #72]	; (800613c <vTaskStartScheduler+0x90>)
 80060f4:	2200      	movs	r2, #0
 80060f6:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80060f8:	f7fe fc2e 	bl	8004958 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80060fc:	e00f      	b.n	800611e <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006104:	d10b      	bne.n	800611e <vTaskStartScheduler+0x72>
 8006106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610a:	b672      	cpsid	i
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	b662      	cpsie	i
 800611a:	607b      	str	r3, [r7, #4]
 800611c:	e7fe      	b.n	800611c <vTaskStartScheduler+0x70>
}
 800611e:	bf00      	nop
 8006120:	3710      	adds	r7, #16
 8006122:	46bd      	mov	sp, r7
 8006124:	bd80      	pop	{r7, pc}
 8006126:	bf00      	nop
 8006128:	20003fbc 	.word	0x20003fbc
 800612c:	08017cb8 	.word	0x08017cb8
 8006130:	0800674d 	.word	0x0800674d
 8006134:	20003fb8 	.word	0x20003fb8
 8006138:	20003fa4 	.word	0x20003fa4
 800613c:	20003f9c 	.word	0x20003f9c

08006140 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006140:	b480      	push	{r7}
 8006142:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8006144:	4b04      	ldr	r3, [pc, #16]	; (8006158 <vTaskSuspendAll+0x18>)
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	3301      	adds	r3, #1
 800614a:	4a03      	ldr	r2, [pc, #12]	; (8006158 <vTaskSuspendAll+0x18>)
 800614c:	6013      	str	r3, [r2, #0]
}
 800614e:	bf00      	nop
 8006150:	46bd      	mov	sp, r7
 8006152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006156:	4770      	bx	lr
 8006158:	20003fc0 	.word	0x20003fc0

0800615c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006162:	2300      	movs	r3, #0
 8006164:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006166:	2300      	movs	r3, #0
 8006168:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800616a:	4b42      	ldr	r3, [pc, #264]	; (8006274 <xTaskResumeAll+0x118>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d10b      	bne.n	800618a <xTaskResumeAll+0x2e>
 8006172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006176:	b672      	cpsid	i
 8006178:	f383 8811 	msr	BASEPRI, r3
 800617c:	f3bf 8f6f 	isb	sy
 8006180:	f3bf 8f4f 	dsb	sy
 8006184:	b662      	cpsie	i
 8006186:	603b      	str	r3, [r7, #0]
 8006188:	e7fe      	b.n	8006188 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800618a:	f7fe fc4d 	bl	8004a28 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800618e:	4b39      	ldr	r3, [pc, #228]	; (8006274 <xTaskResumeAll+0x118>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	3b01      	subs	r3, #1
 8006194:	4a37      	ldr	r2, [pc, #220]	; (8006274 <xTaskResumeAll+0x118>)
 8006196:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006198:	4b36      	ldr	r3, [pc, #216]	; (8006274 <xTaskResumeAll+0x118>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d161      	bne.n	8006264 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061a0:	4b35      	ldr	r3, [pc, #212]	; (8006278 <xTaskResumeAll+0x11c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d05d      	beq.n	8006264 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061a8:	e02e      	b.n	8006208 <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80061aa:	4b34      	ldr	r3, [pc, #208]	; (800627c <xTaskResumeAll+0x120>)
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	68db      	ldr	r3, [r3, #12]
 80061b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	3318      	adds	r3, #24
 80061b6:	4618      	mov	r0, r3
 80061b8:	f7fe fb28 	bl	800480c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3304      	adds	r3, #4
 80061c0:	4618      	mov	r0, r3
 80061c2:	f7fe fb23 	bl	800480c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ca:	2201      	movs	r2, #1
 80061cc:	409a      	lsls	r2, r3
 80061ce:	4b2c      	ldr	r3, [pc, #176]	; (8006280 <xTaskResumeAll+0x124>)
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	4a2a      	ldr	r2, [pc, #168]	; (8006280 <xTaskResumeAll+0x124>)
 80061d6:	6013      	str	r3, [r2, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061dc:	4613      	mov	r3, r2
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	009b      	lsls	r3, r3, #2
 80061e4:	4a27      	ldr	r2, [pc, #156]	; (8006284 <xTaskResumeAll+0x128>)
 80061e6:	441a      	add	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3304      	adds	r3, #4
 80061ec:	4619      	mov	r1, r3
 80061ee:	4610      	mov	r0, r2
 80061f0:	f7fe faaf 	bl	8004752 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f8:	4b23      	ldr	r3, [pc, #140]	; (8006288 <xTaskResumeAll+0x12c>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fe:	429a      	cmp	r2, r3
 8006200:	d302      	bcc.n	8006208 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006202:	4b22      	ldr	r3, [pc, #136]	; (800628c <xTaskResumeAll+0x130>)
 8006204:	2201      	movs	r2, #1
 8006206:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006208:	4b1c      	ldr	r3, [pc, #112]	; (800627c <xTaskResumeAll+0x120>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	2b00      	cmp	r3, #0
 800620e:	d1cc      	bne.n	80061aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006216:	f000 fb3d 	bl	8006894 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800621a:	4b1d      	ldr	r3, [pc, #116]	; (8006290 <xTaskResumeAll+0x134>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d010      	beq.n	8006248 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006226:	f000 f859 	bl	80062dc <xTaskIncrementTick>
 800622a:	4603      	mov	r3, r0
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006230:	4b16      	ldr	r3, [pc, #88]	; (800628c <xTaskResumeAll+0x130>)
 8006232:	2201      	movs	r2, #1
 8006234:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	3b01      	subs	r3, #1
 800623a:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1f1      	bne.n	8006226 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8006242:	4b13      	ldr	r3, [pc, #76]	; (8006290 <xTaskResumeAll+0x134>)
 8006244:	2200      	movs	r2, #0
 8006246:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006248:	4b10      	ldr	r3, [pc, #64]	; (800628c <xTaskResumeAll+0x130>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d009      	beq.n	8006264 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006250:	2301      	movs	r3, #1
 8006252:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006254:	4b0f      	ldr	r3, [pc, #60]	; (8006294 <xTaskResumeAll+0x138>)
 8006256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800625a:	601a      	str	r2, [r3, #0]
 800625c:	f3bf 8f4f 	dsb	sy
 8006260:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006264:	f7fe fc12 	bl	8004a8c <vPortExitCritical>

	return xAlreadyYielded;
 8006268:	68bb      	ldr	r3, [r7, #8]
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20003fc0 	.word	0x20003fc0
 8006278:	20003f98 	.word	0x20003f98
 800627c:	20003f58 	.word	0x20003f58
 8006280:	20003fa0 	.word	0x20003fa0
 8006284:	20003de8 	.word	0x20003de8
 8006288:	20003de4 	.word	0x20003de4
 800628c:	20003fac 	.word	0x20003fac
 8006290:	20003fa8 	.word	0x20003fa8
 8006294:	e000ed04 	.word	0xe000ed04

08006298 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800629e:	4b05      	ldr	r3, [pc, #20]	; (80062b4 <xTaskGetTickCount+0x1c>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062a4:	687b      	ldr	r3, [r7, #4]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	370c      	adds	r7, #12
 80062aa:	46bd      	mov	sp, r7
 80062ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	20003f9c 	.word	0x20003f9c

080062b8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80062be:	f7fe fc8b 	bl	8004bd8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80062c2:	2300      	movs	r3, #0
 80062c4:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80062c6:	4b04      	ldr	r3, [pc, #16]	; (80062d8 <xTaskGetTickCountFromISR+0x20>)
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80062cc:	683b      	ldr	r3, [r7, #0]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3708      	adds	r7, #8
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}
 80062d6:	bf00      	nop
 80062d8:	20003f9c 	.word	0x20003f9c

080062dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b086      	sub	sp, #24
 80062e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062e2:	2300      	movs	r3, #0
 80062e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062e6:	4b51      	ldr	r3, [pc, #324]	; (800642c <xTaskIncrementTick+0x150>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f040 808e 	bne.w	800640c <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + 1;
 80062f0:	4b4f      	ldr	r3, [pc, #316]	; (8006430 <xTaskIncrementTick+0x154>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	3301      	adds	r3, #1
 80062f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062f8:	4a4d      	ldr	r2, [pc, #308]	; (8006430 <xTaskIncrementTick+0x154>)
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U )
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d121      	bne.n	8006348 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006304:	4b4b      	ldr	r3, [pc, #300]	; (8006434 <xTaskIncrementTick+0x158>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d00b      	beq.n	8006326 <xTaskIncrementTick+0x4a>
 800630e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006312:	b672      	cpsid	i
 8006314:	f383 8811 	msr	BASEPRI, r3
 8006318:	f3bf 8f6f 	isb	sy
 800631c:	f3bf 8f4f 	dsb	sy
 8006320:	b662      	cpsie	i
 8006322:	603b      	str	r3, [r7, #0]
 8006324:	e7fe      	b.n	8006324 <xTaskIncrementTick+0x48>
 8006326:	4b43      	ldr	r3, [pc, #268]	; (8006434 <xTaskIncrementTick+0x158>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	60fb      	str	r3, [r7, #12]
 800632c:	4b42      	ldr	r3, [pc, #264]	; (8006438 <xTaskIncrementTick+0x15c>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	4a40      	ldr	r2, [pc, #256]	; (8006434 <xTaskIncrementTick+0x158>)
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	4a40      	ldr	r2, [pc, #256]	; (8006438 <xTaskIncrementTick+0x15c>)
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	6013      	str	r3, [r2, #0]
 800633a:	4b40      	ldr	r3, [pc, #256]	; (800643c <xTaskIncrementTick+0x160>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3301      	adds	r3, #1
 8006340:	4a3e      	ldr	r2, [pc, #248]	; (800643c <xTaskIncrementTick+0x160>)
 8006342:	6013      	str	r3, [r2, #0]
 8006344:	f000 faa6 	bl	8006894 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006348:	4b3d      	ldr	r3, [pc, #244]	; (8006440 <xTaskIncrementTick+0x164>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	693a      	ldr	r2, [r7, #16]
 800634e:	429a      	cmp	r2, r3
 8006350:	d34d      	bcc.n	80063ee <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006352:	4b38      	ldr	r3, [pc, #224]	; (8006434 <xTaskIncrementTick+0x158>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d101      	bne.n	8006360 <xTaskIncrementTick+0x84>
 800635c:	2301      	movs	r3, #1
 800635e:	e000      	b.n	8006362 <xTaskIncrementTick+0x86>
 8006360:	2300      	movs	r3, #0
 8006362:	2b00      	cmp	r3, #0
 8006364:	d004      	beq.n	8006370 <xTaskIncrementTick+0x94>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006366:	4b36      	ldr	r3, [pc, #216]	; (8006440 <xTaskIncrementTick+0x164>)
 8006368:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800636c:	601a      	str	r2, [r3, #0]
					break;
 800636e:	e03e      	b.n	80063ee <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006370:	4b30      	ldr	r3, [pc, #192]	; (8006434 <xTaskIncrementTick+0x158>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	429a      	cmp	r2, r3
 8006386:	d203      	bcs.n	8006390 <xTaskIncrementTick+0xb4>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006388:	4a2d      	ldr	r2, [pc, #180]	; (8006440 <xTaskIncrementTick+0x164>)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6013      	str	r3, [r2, #0]
						break;
 800638e:	e02e      	b.n	80063ee <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	3304      	adds	r3, #4
 8006394:	4618      	mov	r0, r3
 8006396:	f7fe fa39 	bl	800480c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800639a:	68bb      	ldr	r3, [r7, #8]
 800639c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <xTaskIncrementTick+0xd0>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	3318      	adds	r3, #24
 80063a6:	4618      	mov	r0, r3
 80063a8:	f7fe fa30 	bl	800480c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b0:	2201      	movs	r2, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	4b23      	ldr	r3, [pc, #140]	; (8006444 <xTaskIncrementTick+0x168>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	4a22      	ldr	r2, [pc, #136]	; (8006444 <xTaskIncrementTick+0x168>)
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	4613      	mov	r3, r2
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	009b      	lsls	r3, r3, #2
 80063ca:	4a1f      	ldr	r2, [pc, #124]	; (8006448 <xTaskIncrementTick+0x16c>)
 80063cc:	441a      	add	r2, r3
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	3304      	adds	r3, #4
 80063d2:	4619      	mov	r1, r3
 80063d4:	4610      	mov	r0, r2
 80063d6:	f7fe f9bc 	bl	8004752 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4b1b      	ldr	r3, [pc, #108]	; (800644c <xTaskIncrementTick+0x170>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d3b4      	bcc.n	8006352 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063e8:	2301      	movs	r3, #1
 80063ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ec:	e7b1      	b.n	8006352 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063ee:	4b17      	ldr	r3, [pc, #92]	; (800644c <xTaskIncrementTick+0x170>)
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4914      	ldr	r1, [pc, #80]	; (8006448 <xTaskIncrementTick+0x16c>)
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b01      	cmp	r3, #1
 8006404:	d907      	bls.n	8006416 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8006406:	2301      	movs	r3, #1
 8006408:	617b      	str	r3, [r7, #20]
 800640a:	e004      	b.n	8006416 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800640c:	4b10      	ldr	r3, [pc, #64]	; (8006450 <xTaskIncrementTick+0x174>)
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	3301      	adds	r3, #1
 8006412:	4a0f      	ldr	r2, [pc, #60]	; (8006450 <xTaskIncrementTick+0x174>)
 8006414:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8006416:	4b0f      	ldr	r3, [pc, #60]	; (8006454 <xTaskIncrementTick+0x178>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d001      	beq.n	8006422 <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8006422:	697b      	ldr	r3, [r7, #20]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3718      	adds	r7, #24
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}
 800642c:	20003fc0 	.word	0x20003fc0
 8006430:	20003f9c 	.word	0x20003f9c
 8006434:	20003f50 	.word	0x20003f50
 8006438:	20003f54 	.word	0x20003f54
 800643c:	20003fb0 	.word	0x20003fb0
 8006440:	20003fb8 	.word	0x20003fb8
 8006444:	20003fa0 	.word	0x20003fa0
 8006448:	20003de8 	.word	0x20003de8
 800644c:	20003de4 	.word	0x20003de4
 8006450:	20003fa8 	.word	0x20003fa8
 8006454:	20003fac 	.word	0x20003fac

08006458 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800645e:	4b27      	ldr	r3, [pc, #156]	; (80064fc <vTaskSwitchContext+0xa4>)
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d003      	beq.n	800646e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006466:	4b26      	ldr	r3, [pc, #152]	; (8006500 <vTaskSwitchContext+0xa8>)
 8006468:	2201      	movs	r2, #1
 800646a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800646c:	e040      	b.n	80064f0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800646e:	4b24      	ldr	r3, [pc, #144]	; (8006500 <vTaskSwitchContext+0xa8>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006474:	4b23      	ldr	r3, [pc, #140]	; (8006504 <vTaskSwitchContext+0xac>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) );
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	fab3 f383 	clz	r3, r3
 8006480:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006482:	7afb      	ldrb	r3, [r7, #11]
 8006484:	f1c3 031f 	rsb	r3, r3, #31
 8006488:	617b      	str	r3, [r7, #20]
 800648a:	491f      	ldr	r1, [pc, #124]	; (8006508 <vTaskSwitchContext+0xb0>)
 800648c:	697a      	ldr	r2, [r7, #20]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	440b      	add	r3, r1
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d10b      	bne.n	80064b6 <vTaskSwitchContext+0x5e>
	__asm volatile
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	b672      	cpsid	i
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	b662      	cpsie	i
 80064b2:	607b      	str	r3, [r7, #4]
 80064b4:	e7fe      	b.n	80064b4 <vTaskSwitchContext+0x5c>
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4a11      	ldr	r2, [pc, #68]	; (8006508 <vTaskSwitchContext+0xb0>)
 80064c2:	4413      	add	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	693b      	ldr	r3, [r7, #16]
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	685a      	ldr	r2, [r3, #4]
 80064d4:	693b      	ldr	r3, [r7, #16]
 80064d6:	3308      	adds	r3, #8
 80064d8:	429a      	cmp	r2, r3
 80064da:	d104      	bne.n	80064e6 <vTaskSwitchContext+0x8e>
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	693b      	ldr	r3, [r7, #16]
 80064e4:	605a      	str	r2, [r3, #4]
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	685b      	ldr	r3, [r3, #4]
 80064ea:	68db      	ldr	r3, [r3, #12]
 80064ec:	4a07      	ldr	r2, [pc, #28]	; (800650c <vTaskSwitchContext+0xb4>)
 80064ee:	6013      	str	r3, [r2, #0]
}
 80064f0:	bf00      	nop
 80064f2:	371c      	adds	r7, #28
 80064f4:	46bd      	mov	sp, r7
 80064f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fa:	4770      	bx	lr
 80064fc:	20003fc0 	.word	0x20003fc0
 8006500:	20003fac 	.word	0x20003fac
 8006504:	20003fa0 	.word	0x20003fa0
 8006508:	20003de8 	.word	0x20003de8
 800650c:	20003de4 	.word	0x20003de4

08006510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <vTaskPlaceOnEventList+0x28>
 8006520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006524:	b672      	cpsid	i
 8006526:	f383 8811 	msr	BASEPRI, r3
 800652a:	f3bf 8f6f 	isb	sy
 800652e:	f3bf 8f4f 	dsb	sy
 8006532:	b662      	cpsie	i
 8006534:	60fb      	str	r3, [r7, #12]
 8006536:	e7fe      	b.n	8006536 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006538:	4b07      	ldr	r3, [pc, #28]	; (8006558 <vTaskPlaceOnEventList+0x48>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3318      	adds	r3, #24
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fe f92a 	bl	800479a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006546:	2101      	movs	r1, #1
 8006548:	6838      	ldr	r0, [r7, #0]
 800654a:	f000 faf9 	bl	8006b40 <prvAddCurrentTaskToDelayedList>
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20003de4 	.word	0x20003de4

0800655c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	68db      	ldr	r3, [r3, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d10b      	bne.n	800658a <xTaskRemoveFromEventList+0x2e>
 8006572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006576:	b672      	cpsid	i
 8006578:	f383 8811 	msr	BASEPRI, r3
 800657c:	f3bf 8f6f 	isb	sy
 8006580:	f3bf 8f4f 	dsb	sy
 8006584:	b662      	cpsie	i
 8006586:	60fb      	str	r3, [r7, #12]
 8006588:	e7fe      	b.n	8006588 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800658a:	693b      	ldr	r3, [r7, #16]
 800658c:	3318      	adds	r3, #24
 800658e:	4618      	mov	r0, r3
 8006590:	f7fe f93c 	bl	800480c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006594:	4b1d      	ldr	r3, [pc, #116]	; (800660c <xTaskRemoveFromEventList+0xb0>)
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d11c      	bne.n	80065d6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe f933 	bl	800480c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065aa:	2201      	movs	r2, #1
 80065ac:	409a      	lsls	r2, r3
 80065ae:	4b18      	ldr	r3, [pc, #96]	; (8006610 <xTaskRemoveFromEventList+0xb4>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	4a16      	ldr	r2, [pc, #88]	; (8006610 <xTaskRemoveFromEventList+0xb4>)
 80065b6:	6013      	str	r3, [r2, #0]
 80065b8:	693b      	ldr	r3, [r7, #16]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4613      	mov	r3, r2
 80065be:	009b      	lsls	r3, r3, #2
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4a13      	ldr	r2, [pc, #76]	; (8006614 <xTaskRemoveFromEventList+0xb8>)
 80065c6:	441a      	add	r2, r3
 80065c8:	693b      	ldr	r3, [r7, #16]
 80065ca:	3304      	adds	r3, #4
 80065cc:	4619      	mov	r1, r3
 80065ce:	4610      	mov	r0, r2
 80065d0:	f7fe f8bf 	bl	8004752 <vListInsertEnd>
 80065d4:	e005      	b.n	80065e2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065d6:	693b      	ldr	r3, [r7, #16]
 80065d8:	3318      	adds	r3, #24
 80065da:	4619      	mov	r1, r3
 80065dc:	480e      	ldr	r0, [pc, #56]	; (8006618 <xTaskRemoveFromEventList+0xbc>)
 80065de:	f7fe f8b8 	bl	8004752 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e6:	4b0d      	ldr	r3, [pc, #52]	; (800661c <xTaskRemoveFromEventList+0xc0>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ec:	429a      	cmp	r2, r3
 80065ee:	d905      	bls.n	80065fc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065f0:	2301      	movs	r3, #1
 80065f2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065f4:	4b0a      	ldr	r3, [pc, #40]	; (8006620 <xTaskRemoveFromEventList+0xc4>)
 80065f6:	2201      	movs	r2, #1
 80065f8:	601a      	str	r2, [r3, #0]
 80065fa:	e001      	b.n	8006600 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065fc:	2300      	movs	r3, #0
 80065fe:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8006600:	697b      	ldr	r3, [r7, #20]
}
 8006602:	4618      	mov	r0, r3
 8006604:	3718      	adds	r7, #24
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}
 800660a:	bf00      	nop
 800660c:	20003fc0 	.word	0x20003fc0
 8006610:	20003fa0 	.word	0x20003fa0
 8006614:	20003de8 	.word	0x20003de8
 8006618:	20003f58 	.word	0x20003f58
 800661c:	20003de4 	.word	0x20003de4
 8006620:	20003fac 	.word	0x20003fac

08006624 <vTaskSetTimeOutState>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006624:	b480      	push	{r7}
 8006626:	b085      	sub	sp, #20
 8006628:	af00      	add	r7, sp, #0
 800662a:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d10b      	bne.n	800664a <vTaskSetTimeOutState+0x26>
 8006632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006636:	b672      	cpsid	i
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	b662      	cpsie	i
 8006646:	60fb      	str	r3, [r7, #12]
 8006648:	e7fe      	b.n	8006648 <vTaskSetTimeOutState+0x24>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <vTaskSetTimeOutState+0x44>)
 800664c:	681a      	ldr	r2, [r3, #0]
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006652:	4b06      	ldr	r3, [pc, #24]	; (800666c <vTaskSetTimeOutState+0x48>)
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	605a      	str	r2, [r3, #4]
}
 800665a:	bf00      	nop
 800665c:	3714      	adds	r7, #20
 800665e:	46bd      	mov	sp, r7
 8006660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006664:	4770      	bx	lr
 8006666:	bf00      	nop
 8006668:	20003fb0 	.word	0x20003fb0
 800666c:	20003f9c 	.word	0x20003f9c

08006670 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b086      	sub	sp, #24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d10b      	bne.n	8006698 <xTaskCheckForTimeOut+0x28>
 8006680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006684:	b672      	cpsid	i
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	b662      	cpsie	i
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	e7fe      	b.n	8006696 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 8006698:	683b      	ldr	r3, [r7, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <xTaskCheckForTimeOut+0x46>
 800669e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a2:	b672      	cpsid	i
 80066a4:	f383 8811 	msr	BASEPRI, r3
 80066a8:	f3bf 8f6f 	isb	sy
 80066ac:	f3bf 8f4f 	dsb	sy
 80066b0:	b662      	cpsie	i
 80066b2:	60bb      	str	r3, [r7, #8]
 80066b4:	e7fe      	b.n	80066b4 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 80066b6:	f7fe f9b7 	bl	8004a28 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066ba:	4b1c      	ldr	r3, [pc, #112]	; (800672c <xTaskCheckForTimeOut+0xbc>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	613b      	str	r3, [r7, #16]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066c8:	d102      	bne.n	80066d0 <xTaskCheckForTimeOut+0x60>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066ca:	2300      	movs	r3, #0
 80066cc:	617b      	str	r3, [r7, #20]
 80066ce:	e026      	b.n	800671e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681a      	ldr	r2, [r3, #0]
 80066d4:	4b16      	ldr	r3, [pc, #88]	; (8006730 <xTaskCheckForTimeOut+0xc0>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d007      	beq.n	80066ec <xTaskCheckForTimeOut+0x7c>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d802      	bhi.n	80066ec <xTaskCheckForTimeOut+0x7c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066e6:	2301      	movs	r3, #1
 80066e8:	617b      	str	r3, [r7, #20]
 80066ea:	e018      	b.n	800671e <xTaskCheckForTimeOut+0xae>
		}
		else if( ( ( TickType_t ) ( xConstTickCount - pxTimeOut->xTimeOnEntering ) ) < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	685b      	ldr	r3, [r3, #4]
 80066f0:	693a      	ldr	r2, [r7, #16]
 80066f2:	1ad2      	subs	r2, r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d20e      	bcs.n	800671a <xTaskCheckForTimeOut+0xaa>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( xConstTickCount - pxTimeOut->xTimeOnEntering );
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	681a      	ldr	r2, [r3, #0]
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	6859      	ldr	r1, [r3, #4]
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1acb      	subs	r3, r1, r3
 8006708:	441a      	add	r2, r3
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	601a      	str	r2, [r3, #0]
			vTaskSetTimeOutState( pxTimeOut );
 800670e:	6878      	ldr	r0, [r7, #4]
 8006710:	f7ff ff88 	bl	8006624 <vTaskSetTimeOutState>
			xReturn = pdFALSE;
 8006714:	2300      	movs	r3, #0
 8006716:	617b      	str	r3, [r7, #20]
 8006718:	e001      	b.n	800671e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			xReturn = pdTRUE;
 800671a:	2301      	movs	r3, #1
 800671c:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800671e:	f7fe f9b5 	bl	8004a8c <vPortExitCritical>

	return xReturn;
 8006722:	697b      	ldr	r3, [r7, #20]
}
 8006724:	4618      	mov	r0, r3
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20003f9c 	.word	0x20003f9c
 8006730:	20003fb0 	.word	0x20003fb0

08006734 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <vTaskMissedYield+0x14>)
 800673a:	2201      	movs	r2, #1
 800673c:	601a      	str	r2, [r3, #0]
}
 800673e:	bf00      	nop
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	20003fac 	.word	0x20003fac

0800674c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b082      	sub	sp, #8
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006754:	f000 f852 	bl	80067fc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006758:	4b06      	ldr	r3, [pc, #24]	; (8006774 <prvIdleTask+0x28>)
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	2b01      	cmp	r3, #1
 800675e:	d9f9      	bls.n	8006754 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006760:	4b05      	ldr	r3, [pc, #20]	; (8006778 <prvIdleTask+0x2c>)
 8006762:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006766:	601a      	str	r2, [r3, #0]
 8006768:	f3bf 8f4f 	dsb	sy
 800676c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006770:	e7f0      	b.n	8006754 <prvIdleTask+0x8>
 8006772:	bf00      	nop
 8006774:	20003de8 	.word	0x20003de8
 8006778:	e000ed04 	.word	0xe000ed04

0800677c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800677c:	b580      	push	{r7, lr}
 800677e:	b082      	sub	sp, #8
 8006780:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006782:	2300      	movs	r3, #0
 8006784:	607b      	str	r3, [r7, #4]
 8006786:	e00c      	b.n	80067a2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	4613      	mov	r3, r2
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	4413      	add	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4a12      	ldr	r2, [pc, #72]	; (80067dc <prvInitialiseTaskLists+0x60>)
 8006794:	4413      	add	r3, r2
 8006796:	4618      	mov	r0, r3
 8006798:	f7fd ffae 	bl	80046f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	3301      	adds	r3, #1
 80067a0:	607b      	str	r3, [r7, #4]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2b0f      	cmp	r3, #15
 80067a6:	d9ef      	bls.n	8006788 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067a8:	480d      	ldr	r0, [pc, #52]	; (80067e0 <prvInitialiseTaskLists+0x64>)
 80067aa:	f7fd ffa5 	bl	80046f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067ae:	480d      	ldr	r0, [pc, #52]	; (80067e4 <prvInitialiseTaskLists+0x68>)
 80067b0:	f7fd ffa2 	bl	80046f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067b4:	480c      	ldr	r0, [pc, #48]	; (80067e8 <prvInitialiseTaskLists+0x6c>)
 80067b6:	f7fd ff9f 	bl	80046f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067ba:	480c      	ldr	r0, [pc, #48]	; (80067ec <prvInitialiseTaskLists+0x70>)
 80067bc:	f7fd ff9c 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067c0:	480b      	ldr	r0, [pc, #44]	; (80067f0 <prvInitialiseTaskLists+0x74>)
 80067c2:	f7fd ff99 	bl	80046f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067c6:	4b0b      	ldr	r3, [pc, #44]	; (80067f4 <prvInitialiseTaskLists+0x78>)
 80067c8:	4a05      	ldr	r2, [pc, #20]	; (80067e0 <prvInitialiseTaskLists+0x64>)
 80067ca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067cc:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <prvInitialiseTaskLists+0x7c>)
 80067ce:	4a05      	ldr	r2, [pc, #20]	; (80067e4 <prvInitialiseTaskLists+0x68>)
 80067d0:	601a      	str	r2, [r3, #0]
}
 80067d2:	bf00      	nop
 80067d4:	3708      	adds	r7, #8
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	20003de8 	.word	0x20003de8
 80067e0:	20003f28 	.word	0x20003f28
 80067e4:	20003f3c 	.word	0x20003f3c
 80067e8:	20003f58 	.word	0x20003f58
 80067ec:	20003f6c 	.word	0x20003f6c
 80067f0:	20003f84 	.word	0x20003f84
 80067f4:	20003f50 	.word	0x20003f50
 80067f8:	20003f54 	.word	0x20003f54

080067fc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067fc:	b580      	push	{r7, lr}
 80067fe:	b082      	sub	sp, #8
 8006800:	af00      	add	r7, sp, #0
	{
		BaseType_t xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006802:	e028      	b.n	8006856 <prvCheckTasksWaitingTermination+0x5a>
		{
			vTaskSuspendAll();
 8006804:	f7ff fc9c 	bl	8006140 <vTaskSuspendAll>
			{
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
 8006808:	4b17      	ldr	r3, [pc, #92]	; (8006868 <prvCheckTasksWaitingTermination+0x6c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	bf0c      	ite	eq
 8006810:	2301      	moveq	r3, #1
 8006812:	2300      	movne	r3, #0
 8006814:	b2db      	uxtb	r3, r3
 8006816:	607b      	str	r3, [r7, #4]
			}
			( void ) xTaskResumeAll();
 8006818:	f7ff fca0 	bl	800615c <xTaskResumeAll>

			if( xListIsEmpty == pdFALSE )
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d119      	bne.n	8006856 <prvCheckTasksWaitingTermination+0x5a>
			{
				TCB_t *pxTCB;

				taskENTER_CRITICAL();
 8006822:	f7fe f901 	bl	8004a28 <vPortEnterCritical>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8006826:	4b10      	ldr	r3, [pc, #64]	; (8006868 <prvCheckTasksWaitingTermination+0x6c>)
 8006828:	68db      	ldr	r3, [r3, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	603b      	str	r3, [r7, #0]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	3304      	adds	r3, #4
 8006832:	4618      	mov	r0, r3
 8006834:	f7fd ffea 	bl	800480c <uxListRemove>
					--uxCurrentNumberOfTasks;
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <prvCheckTasksWaitingTermination+0x70>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	3b01      	subs	r3, #1
 800683e:	4a0b      	ldr	r2, [pc, #44]	; (800686c <prvCheckTasksWaitingTermination+0x70>)
 8006840:	6013      	str	r3, [r2, #0]
					--uxDeletedTasksWaitingCleanUp;
 8006842:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <prvCheckTasksWaitingTermination+0x74>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3b01      	subs	r3, #1
 8006848:	4a09      	ldr	r2, [pc, #36]	; (8006870 <prvCheckTasksWaitingTermination+0x74>)
 800684a:	6013      	str	r3, [r2, #0]
				}
				taskEXIT_CRITICAL();
 800684c:	f7fe f91e 	bl	8004a8c <vPortExitCritical>

				prvDeleteTCB( pxTCB );
 8006850:	6838      	ldr	r0, [r7, #0]
 8006852:	f000 f80f 	bl	8006874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006856:	4b06      	ldr	r3, [pc, #24]	; (8006870 <prvCheckTasksWaitingTermination+0x74>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1d2      	bne.n	8006804 <prvCheckTasksWaitingTermination+0x8>
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}
 8006866:	bf00      	nop
 8006868:	20003f6c 	.word	0x20003f6c
 800686c:	20003f98 	.word	0x20003f98
 8006870:	20003f80 	.word	0x20003f80

08006874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	4618      	mov	r0, r3
 8006882:	f7fe fab3 	bl	8004dec <vPortFree>
			vPortFree( pxTCB );
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f7fe fab0 	bl	8004dec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	)
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800688c:	bf00      	nop
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006894:	b480      	push	{r7}
 8006896:	b083      	sub	sp, #12
 8006898:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800689a:	4b0f      	ldr	r3, [pc, #60]	; (80068d8 <prvResetNextTaskUnblockTime+0x44>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d101      	bne.n	80068a8 <prvResetNextTaskUnblockTime+0x14>
 80068a4:	2301      	movs	r3, #1
 80068a6:	e000      	b.n	80068aa <prvResetNextTaskUnblockTime+0x16>
 80068a8:	2300      	movs	r3, #0
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d004      	beq.n	80068b8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068ae:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <prvResetNextTaskUnblockTime+0x48>)
 80068b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068b4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068b6:	e008      	b.n	80068ca <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <prvResetNextTaskUnblockTime+0x44>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	68db      	ldr	r3, [r3, #12]
 80068be:	68db      	ldr	r3, [r3, #12]
 80068c0:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	685b      	ldr	r3, [r3, #4]
 80068c6:	4a05      	ldr	r2, [pc, #20]	; (80068dc <prvResetNextTaskUnblockTime+0x48>)
 80068c8:	6013      	str	r3, [r2, #0]
}
 80068ca:	bf00      	nop
 80068cc:	370c      	adds	r7, #12
 80068ce:	46bd      	mov	sp, r7
 80068d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d4:	4770      	bx	lr
 80068d6:	bf00      	nop
 80068d8:	20003f50 	.word	0x20003f50
 80068dc:	20003fb8 	.word	0x20003fb8

080068e0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068e6:	4b0b      	ldr	r3, [pc, #44]	; (8006914 <xTaskGetSchedulerState+0x34>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d102      	bne.n	80068f4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068ee:	2301      	movs	r3, #1
 80068f0:	607b      	str	r3, [r7, #4]
 80068f2:	e008      	b.n	8006906 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068f4:	4b08      	ldr	r3, [pc, #32]	; (8006918 <xTaskGetSchedulerState+0x38>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068fc:	2302      	movs	r3, #2
 80068fe:	607b      	str	r3, [r7, #4]
 8006900:	e001      	b.n	8006906 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006902:	2300      	movs	r3, #0
 8006904:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006906:	687b      	ldr	r3, [r7, #4]
	}
 8006908:	4618      	mov	r0, r3
 800690a:	370c      	adds	r7, #12
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	20003fa4 	.word	0x20003fa4
 8006918:	20003fc0 	.word	0x20003fc0

0800691c <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800691c:	b580      	push	{r7, lr}
 800691e:	b084      	sub	sp, #16
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d062      	beq.n	80069f4 <vTaskPriorityInherit+0xd8>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006932:	4b32      	ldr	r3, [pc, #200]	; (80069fc <vTaskPriorityInherit+0xe0>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006938:	429a      	cmp	r2, r3
 800693a:	d25b      	bcs.n	80069f4 <vTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not	being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	699b      	ldr	r3, [r3, #24]
 8006940:	2b00      	cmp	r3, #0
 8006942:	db06      	blt.n	8006952 <vTaskPriorityInherit+0x36>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006944:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <vTaskPriorityInherit+0xe0>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	f1c3 0210 	rsb	r2, r3, #16
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	6959      	ldr	r1, [r3, #20]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695a:	4613      	mov	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4413      	add	r3, r2
 8006960:	009b      	lsls	r3, r3, #2
 8006962:	4a27      	ldr	r2, [pc, #156]	; (8006a00 <vTaskPriorityInherit+0xe4>)
 8006964:	4413      	add	r3, r2
 8006966:	4299      	cmp	r1, r3
 8006968:	d101      	bne.n	800696e <vTaskPriorityInherit+0x52>
 800696a:	2301      	movs	r3, #1
 800696c:	e000      	b.n	8006970 <vTaskPriorityInherit+0x54>
 800696e:	2300      	movs	r3, #0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d03a      	beq.n	80069ea <vTaskPriorityInherit+0xce>
				{
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	3304      	adds	r3, #4
 8006978:	4618      	mov	r0, r3
 800697a:	f7fd ff47 	bl	800480c <uxListRemove>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d115      	bne.n	80069b0 <vTaskPriorityInherit+0x94>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006988:	491d      	ldr	r1, [pc, #116]	; (8006a00 <vTaskPriorityInherit+0xe4>)
 800698a:	4613      	mov	r3, r2
 800698c:	009b      	lsls	r3, r3, #2
 800698e:	4413      	add	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	440b      	add	r3, r1
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	2b00      	cmp	r3, #0
 8006998:	d10a      	bne.n	80069b0 <vTaskPriorityInherit+0x94>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800699e:	2201      	movs	r2, #1
 80069a0:	fa02 f303 	lsl.w	r3, r2, r3
 80069a4:	43da      	mvns	r2, r3
 80069a6:	4b17      	ldr	r3, [pc, #92]	; (8006a04 <vTaskPriorityInherit+0xe8>)
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	4013      	ands	r3, r2
 80069ac:	4a15      	ldr	r2, [pc, #84]	; (8006a04 <vTaskPriorityInherit+0xe8>)
 80069ae:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069b0:	4b12      	ldr	r3, [pc, #72]	; (80069fc <vTaskPriorityInherit+0xe0>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxTCB );
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069be:	2201      	movs	r2, #1
 80069c0:	409a      	lsls	r2, r3
 80069c2:	4b10      	ldr	r3, [pc, #64]	; (8006a04 <vTaskPriorityInherit+0xe8>)
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	4a0e      	ldr	r2, [pc, #56]	; (8006a04 <vTaskPriorityInherit+0xe8>)
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069d0:	4613      	mov	r3, r2
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	4a09      	ldr	r2, [pc, #36]	; (8006a00 <vTaskPriorityInherit+0xe4>)
 80069da:	441a      	add	r2, r3
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4610      	mov	r0, r2
 80069e4:	f7fd feb5 	bl	8004752 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069e8:	e004      	b.n	80069f4 <vTaskPriorityInherit+0xd8>
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069ea:	4b04      	ldr	r3, [pc, #16]	; (80069fc <vTaskPriorityInherit+0xe0>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	62da      	str	r2, [r3, #44]	; 0x2c
	}
 80069f4:	bf00      	nop
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	20003de4 	.word	0x20003de4
 8006a00:	20003de8 	.word	0x20003de8
 8006a04:	20003fa0 	.word	0x20003fa0

08006a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a14:	2300      	movs	r3, #0
 8006a16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d070      	beq.n	8006b00 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a1e:	4b3b      	ldr	r3, [pc, #236]	; (8006b0c <xTaskPriorityDisinherit+0x104>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	429a      	cmp	r2, r3
 8006a26:	d00b      	beq.n	8006a40 <xTaskPriorityDisinherit+0x38>
 8006a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2c:	b672      	cpsid	i
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	b662      	cpsie	i
 8006a3c:	60fb      	str	r3, [r7, #12]
 8006a3e:	e7fe      	b.n	8006a3e <xTaskPriorityDisinherit+0x36>

			configASSERT( pxTCB->uxMutexesHeld );
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10b      	bne.n	8006a60 <xTaskPriorityDisinherit+0x58>
 8006a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a4c:	b672      	cpsid	i
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	b662      	cpsie	i
 8006a5c:	60bb      	str	r3, [r7, #8]
 8006a5e:	e7fe      	b.n	8006a5e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a64:	1e5a      	subs	r2, r3, #1
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d044      	beq.n	8006b00 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d140      	bne.n	8006b00 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding	task then it must be the running state task.  Remove
					the	holding task from the ready	list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4618      	mov	r0, r3
 8006a84:	f7fd fec2 	bl	800480c <uxListRemove>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d115      	bne.n	8006aba <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a92:	491f      	ldr	r1, [pc, #124]	; (8006b10 <xTaskPriorityDisinherit+0x108>)
 8006a94:	4613      	mov	r3, r2
 8006a96:	009b      	lsls	r3, r3, #2
 8006a98:	4413      	add	r3, r2
 8006a9a:	009b      	lsls	r3, r3, #2
 8006a9c:	440b      	add	r3, r1
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d10a      	bne.n	8006aba <xTaskPriorityDisinherit+0xb2>
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006aa8:	2201      	movs	r2, #1
 8006aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8006aae:	43da      	mvns	r2, r3
 8006ab0:	4b18      	ldr	r3, [pc, #96]	; (8006b14 <xTaskPriorityDisinherit+0x10c>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	4a17      	ldr	r2, [pc, #92]	; (8006b14 <xTaskPriorityDisinherit+0x10c>)
 8006ab8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac6:	f1c3 0210 	rsb	r2, r3, #16
 8006aca:	693b      	ldr	r3, [r7, #16]
 8006acc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ace:	693b      	ldr	r3, [r7, #16]
 8006ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	409a      	lsls	r2, r3
 8006ad6:	4b0f      	ldr	r3, [pc, #60]	; (8006b14 <xTaskPriorityDisinherit+0x10c>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	4313      	orrs	r3, r2
 8006adc:	4a0d      	ldr	r2, [pc, #52]	; (8006b14 <xTaskPriorityDisinherit+0x10c>)
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	009b      	lsls	r3, r3, #2
 8006ae8:	4413      	add	r3, r2
 8006aea:	009b      	lsls	r3, r3, #2
 8006aec:	4a08      	ldr	r2, [pc, #32]	; (8006b10 <xTaskPriorityDisinherit+0x108>)
 8006aee:	441a      	add	r2, r3
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	3304      	adds	r3, #4
 8006af4:	4619      	mov	r1, r3
 8006af6:	4610      	mov	r0, r2
 8006af8:	f7fd fe2b 	bl	8004752 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006afc:	2301      	movs	r3, #1
 8006afe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006b00:	697b      	ldr	r3, [r7, #20]
	}
 8006b02:	4618      	mov	r0, r3
 8006b04:	3718      	adds	r7, #24
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20003de4 	.word	0x20003de4
 8006b10:	20003de8 	.word	0x20003de8
 8006b14:	20003fa0 	.word	0x20003fa0

08006b18 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void *pvTaskIncrementMutexHeldCount( void )
	{
 8006b18:	b480      	push	{r7}
 8006b1a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006b1c:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d004      	beq.n	8006b2e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006b24:	4b05      	ldr	r3, [pc, #20]	; (8006b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006b2a:	3201      	adds	r2, #1
 8006b2c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8006b2e:	4b03      	ldr	r3, [pc, #12]	; (8006b3c <pvTaskIncrementMutexHeldCount+0x24>)
 8006b30:	681b      	ldr	r3, [r3, #0]
	}
 8006b32:	4618      	mov	r0, r3
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20003de4 	.word	0x20003de4

08006b40 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b084      	sub	sp, #16
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b4a:	4b29      	ldr	r3, [pc, #164]	; (8006bf0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b50:	4b28      	ldr	r3, [pc, #160]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	3304      	adds	r3, #4
 8006b56:	4618      	mov	r0, r3
 8006b58:	f7fd fe58 	bl	800480c <uxListRemove>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d10b      	bne.n	8006b7a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8006b62:	4b24      	ldr	r3, [pc, #144]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b68:	2201      	movs	r2, #1
 8006b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8006b6e:	43da      	mvns	r2, r3
 8006b70:	4b21      	ldr	r3, [pc, #132]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4013      	ands	r3, r2
 8006b76:	4a20      	ldr	r2, [pc, #128]	; (8006bf8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8006b78:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006b80:	d10a      	bne.n	8006b98 <prvAddCurrentTaskToDelayedList+0x58>
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d007      	beq.n	8006b98 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b88:	4b1a      	ldr	r3, [pc, #104]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	3304      	adds	r3, #4
 8006b8e:	4619      	mov	r1, r3
 8006b90:	481a      	ldr	r0, [pc, #104]	; (8006bfc <prvAddCurrentTaskToDelayedList+0xbc>)
 8006b92:	f7fd fdde 	bl	8004752 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b96:	e026      	b.n	8006be6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b98:	68fa      	ldr	r2, [r7, #12]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4413      	add	r3, r2
 8006b9e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ba0:	4b14      	ldr	r3, [pc, #80]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68ba      	ldr	r2, [r7, #8]
 8006ba6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ba8:	68ba      	ldr	r2, [r7, #8]
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d209      	bcs.n	8006bc4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bb0:	4b13      	ldr	r3, [pc, #76]	; (8006c00 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006bb2:	681a      	ldr	r2, [r3, #0]
 8006bb4:	4b0f      	ldr	r3, [pc, #60]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	3304      	adds	r3, #4
 8006bba:	4619      	mov	r1, r3
 8006bbc:	4610      	mov	r0, r2
 8006bbe:	f7fd fdec 	bl	800479a <vListInsert>
}
 8006bc2:	e010      	b.n	8006be6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006bc4:	4b0f      	ldr	r3, [pc, #60]	; (8006c04 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	4b0a      	ldr	r3, [pc, #40]	; (8006bf4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	3304      	adds	r3, #4
 8006bce:	4619      	mov	r1, r3
 8006bd0:	4610      	mov	r0, r2
 8006bd2:	f7fd fde2 	bl	800479a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006bd6:	4b0c      	ldr	r3, [pc, #48]	; (8006c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d202      	bcs.n	8006be6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006be0:	4a09      	ldr	r2, [pc, #36]	; (8006c08 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6013      	str	r3, [r2, #0]
}
 8006be6:	bf00      	nop
 8006be8:	3710      	adds	r7, #16
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	20003f9c 	.word	0x20003f9c
 8006bf4:	20003de4 	.word	0x20003de4
 8006bf8:	20003fa0 	.word	0x20003fa0
 8006bfc:	20003f84 	.word	0x20003f84
 8006c00:	20003f54 	.word	0x20003f54
 8006c04:	20003f50 	.word	0x20003f50
 8006c08:	20003fb8 	.word	0x20003fb8

08006c0c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8006c0c:	b580      	push	{r7, lr}
 8006c0e:	b084      	sub	sp, #16
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
 8006c14:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	330c      	adds	r3, #12
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	6839      	ldr	r1, [r7, #0]
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f002 f98b 	bl	8008f3c <tcpip_send_msg_wait_sem>
 8006c26:	4603      	mov	r3, r0
 8006c28:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8006c2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d103      	bne.n	8006c3a <netconn_apimsg+0x2e>
    return apimsg->err;
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8006c38:	e001      	b.n	8006c3e <netconn_apimsg+0x32>
  }
  return err;
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3710      	adds	r7, #16
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
	...

08006c48 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b08a      	sub	sp, #40	; 0x28
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	4603      	mov	r3, r0
 8006c50:	603a      	str	r2, [r7, #0]
 8006c52:	71fb      	strb	r3, [r7, #7]
 8006c54:	460b      	mov	r3, r1
 8006c56:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8006c58:	79fb      	ldrb	r3, [r7, #7]
 8006c5a:	6839      	ldr	r1, [r7, #0]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f000 ff9f 	bl	8007ba0 <netconn_alloc>
 8006c62:	6278      	str	r0, [r7, #36]	; 0x24
  if (conn != NULL) {
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d054      	beq.n	8006d14 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8006c6a:	79bb      	ldrb	r3, [r7, #6]
 8006c6c:	753b      	strb	r3, [r7, #20]
    API_MSG_VAR_REF(msg).conn = conn;
 8006c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c70:	60fb      	str	r3, [r7, #12]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8006c72:	f107 030c 	add.w	r3, r7, #12
 8006c76:	4619      	mov	r1, r3
 8006c78:	4829      	ldr	r0, [pc, #164]	; (8006d20 <netconn_new_with_proto_and_callback+0xd8>)
 8006c7a:	f7ff ffc7 	bl	8006c0c <netconn_apimsg>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (err != ERR_OK) {
 8006c84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d043      	beq.n	8006d14 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8006c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <netconn_new_with_proto_and_callback+0x58>
 8006c94:	4b23      	ldr	r3, [pc, #140]	; (8006d24 <netconn_new_with_proto_and_callback+0xdc>)
 8006c96:	2289      	movs	r2, #137	; 0x89
 8006c98:	4923      	ldr	r1, [pc, #140]	; (8006d28 <netconn_new_with_proto_and_callback+0xe0>)
 8006c9a:	4824      	ldr	r0, [pc, #144]	; (8006d2c <netconn_new_with_proto_and_callback+0xe4>)
 8006c9c:	f00f f89a 	bl	8015dd4 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	3310      	adds	r3, #16
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f00b ff3f 	bl	8012b28 <sys_mbox_valid>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d105      	bne.n	8006cbc <netconn_new_with_proto_and_callback+0x74>
 8006cb0:	4b1c      	ldr	r3, [pc, #112]	; (8006d24 <netconn_new_with_proto_and_callback+0xdc>)
 8006cb2:	228a      	movs	r2, #138	; 0x8a
 8006cb4:	491e      	ldr	r1, [pc, #120]	; (8006d30 <netconn_new_with_proto_and_callback+0xe8>)
 8006cb6:	481d      	ldr	r0, [pc, #116]	; (8006d2c <netconn_new_with_proto_and_callback+0xe4>)
 8006cb8:	f00f f88c 	bl	8015dd4 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	3314      	adds	r3, #20
 8006cc0:	4618      	mov	r0, r3
 8006cc2:	f00b ff31 	bl	8012b28 <sys_mbox_valid>
 8006cc6:	4603      	mov	r3, r0
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d005      	beq.n	8006cd8 <netconn_new_with_proto_and_callback+0x90>
 8006ccc:	4b15      	ldr	r3, [pc, #84]	; (8006d24 <netconn_new_with_proto_and_callback+0xdc>)
 8006cce:	228c      	movs	r2, #140	; 0x8c
 8006cd0:	4918      	ldr	r1, [pc, #96]	; (8006d34 <netconn_new_with_proto_and_callback+0xec>)
 8006cd2:	4816      	ldr	r0, [pc, #88]	; (8006d2c <netconn_new_with_proto_and_callback+0xe4>)
 8006cd4:	f00f f87e 	bl	8015dd4 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8006cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cda:	330c      	adds	r3, #12
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f00b ffb2 	bl	8012c46 <sys_sem_valid>
 8006ce2:	4603      	mov	r3, r0
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d105      	bne.n	8006cf4 <netconn_new_with_proto_and_callback+0xac>
 8006ce8:	4b0e      	ldr	r3, [pc, #56]	; (8006d24 <netconn_new_with_proto_and_callback+0xdc>)
 8006cea:	228f      	movs	r2, #143	; 0x8f
 8006cec:	4912      	ldr	r1, [pc, #72]	; (8006d38 <netconn_new_with_proto_and_callback+0xf0>)
 8006cee:	480f      	ldr	r0, [pc, #60]	; (8006d2c <netconn_new_with_proto_and_callback+0xe4>)
 8006cf0:	f00f f870 	bl	8015dd4 <iprintf>
      sys_sem_free(&conn->op_completed);
 8006cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf6:	330c      	adds	r3, #12
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f00b ff97 	bl	8012c2c <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	3310      	adds	r3, #16
 8006d02:	4618      	mov	r0, r3
 8006d04:	f00b fe74 	bl	80129f0 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8006d08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006d0a:	2007      	movs	r0, #7
 8006d0c:	f004 feda 	bl	800bac4 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8006d10:	2300      	movs	r3, #0
 8006d12:	e000      	b.n	8006d16 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8006d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	3728      	adds	r7, #40	; 0x28
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd80      	pop	{r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	08007b49 	.word	0x08007b49
 8006d24:	08017cc0 	.word	0x08017cc0
 8006d28:	08017cf4 	.word	0x08017cf4
 8006d2c:	08017d18 	.word	0x08017d18
 8006d30:	08017d40 	.word	0x08017d40
 8006d34:	08017d58 	.word	0x08017d58
 8006d38:	08017d7c 	.word	0x08017d7c

08006d3c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b088      	sub	sp, #32
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d101      	bne.n	8006d4e <netconn_delete+0x12>
    return ERR_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	e016      	b.n	8006d7c <netconn_delete+0x40>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	60bb      	str	r3, [r7, #8]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8006d52:	2302      	movs	r3, #2
 8006d54:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8006d56:	f107 0308 	add.w	r3, r7, #8
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <netconn_delete+0x48>)
 8006d5e:	f7ff ff55 	bl	8006c0c <netconn_apimsg>
 8006d62:	4603      	mov	r3, r0
 8006d64:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8006d66:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d002      	beq.n	8006d74 <netconn_delete+0x38>
    return err;
 8006d6e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8006d72:	e003      	b.n	8006d7c <netconn_delete+0x40>
  }

  netconn_free(conn);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 ff87 	bl	8007c88 <netconn_free>

  return ERR_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3720      	adds	r7, #32
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	0800810d 	.word	0x0800810d

08006d88 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b08a      	sub	sp, #40	; 0x28
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	4613      	mov	r3, r2
 8006d94:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  
  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d108      	bne.n	8006dae <netconn_bind+0x26>
 8006d9c:	4b11      	ldr	r3, [pc, #68]	; (8006de4 <netconn_bind+0x5c>)
 8006d9e:	22ff      	movs	r2, #255	; 0xff
 8006da0:	4911      	ldr	r1, [pc, #68]	; (8006de8 <netconn_bind+0x60>)
 8006da2:	4812      	ldr	r0, [pc, #72]	; (8006dec <netconn_bind+0x64>)
 8006da4:	f00f f816 	bl	8015dd4 <iprintf>
 8006da8:	f06f 030f 	mvn.w	r3, #15
 8006dac:	e015      	b.n	8006dda <netconn_bind+0x52>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8006dae:	68bb      	ldr	r3, [r7, #8]
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d101      	bne.n	8006db8 <netconn_bind+0x30>
    addr = IP4_ADDR_ANY;
 8006db4:	4b0e      	ldr	r3, [pc, #56]	; (8006df0 <netconn_bind+0x68>)
 8006db6:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	83bb      	strh	r3, [r7, #28]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8006dc4:	f107 0310 	add.w	r3, r7, #16
 8006dc8:	4619      	mov	r1, r3
 8006dca:	480a      	ldr	r0, [pc, #40]	; (8006df4 <netconn_bind+0x6c>)
 8006dcc:	f7ff ff1e 	bl	8006c0c <netconn_apimsg>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  API_MSG_VAR_FREE(msg);

  return err;
 8006dd6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3728      	adds	r7, #40	; 0x28
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}
 8006de2:	bf00      	nop
 8006de4:	08017cc0 	.word	0x08017cc0
 8006de8:	08017df8 	.word	0x08017df8
 8006dec:	08017d18 	.word	0x08017d18
 8006df0:	0801a4b8 	.word	0x0801a4b8
 8006df4:	08008315 	.word	0x08008315

08006df8 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
 8006e00:	460b      	mov	r3, r1
 8006e02:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d109      	bne.n	8006e1e <netconn_listen_with_backlog+0x26>
 8006e0a:	4b0d      	ldr	r3, [pc, #52]	; (8006e40 <netconn_listen_with_backlog+0x48>)
 8006e0c:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8006e10:	490c      	ldr	r1, [pc, #48]	; (8006e44 <netconn_listen_with_backlog+0x4c>)
 8006e12:	480d      	ldr	r0, [pc, #52]	; (8006e48 <netconn_listen_with_backlog+0x50>)
 8006e14:	f00e ffde 	bl	8015dd4 <iprintf>
 8006e18:	f06f 030f 	mvn.w	r3, #15
 8006e1c:	e00b      	b.n	8006e36 <netconn_listen_with_backlog+0x3e>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	60bb      	str	r3, [r7, #8]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8006e22:	f107 0308 	add.w	r3, r7, #8
 8006e26:	4619      	mov	r1, r3
 8006e28:	4808      	ldr	r0, [pc, #32]	; (8006e4c <netconn_listen_with_backlog+0x54>)
 8006e2a:	f7ff feef 	bl	8006c0c <netconn_apimsg>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8006e32:	f997 301f 	ldrsb.w	r3, [r7, #31]
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8006e36:	4618      	mov	r0, r3
 8006e38:	3720      	adds	r7, #32
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	08017cc0 	.word	0x08017cc0
 8006e44:	08017e58 	.word	0x08017e58
 8006e48:	08017d18 	.word	0x08017d18
 8006e4c:	080083d5 	.word	0x080083d5

08006e50 <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <netconn_accept+0x24>
 8006e60:	4b39      	ldr	r3, [pc, #228]	; (8006f48 <netconn_accept+0xf8>)
 8006e62:	f240 128d 	movw	r2, #397	; 0x18d
 8006e66:	4939      	ldr	r1, [pc, #228]	; (8006f4c <netconn_accept+0xfc>)
 8006e68:	4839      	ldr	r0, [pc, #228]	; (8006f50 <netconn_accept+0x100>)
 8006e6a:	f00e ffb3 	bl	8015dd4 <iprintf>
 8006e6e:	f06f 030f 	mvn.w	r3, #15
 8006e72:	e065      	b.n	8006f40 <netconn_accept+0xf0>
  *new_conn = NULL;
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d109      	bne.n	8006e94 <netconn_accept+0x44>
 8006e80:	4b31      	ldr	r3, [pc, #196]	; (8006f48 <netconn_accept+0xf8>)
 8006e82:	f240 128f 	movw	r2, #399	; 0x18f
 8006e86:	4933      	ldr	r1, [pc, #204]	; (8006f54 <netconn_accept+0x104>)
 8006e88:	4831      	ldr	r0, [pc, #196]	; (8006f50 <netconn_accept+0x100>)
 8006e8a:	f00e ffa3 	bl	8015dd4 <iprintf>
 8006e8e:	f06f 030f 	mvn.w	r3, #15
 8006e92:	e055      	b.n	8006f40 <netconn_accept+0xf0>

  if (ERR_IS_FATAL(conn->last_err)) {
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006e9a:	f113 0f0c 	cmn.w	r3, #12
 8006e9e:	da03      	bge.n	8006ea8 <netconn_accept+0x58>
    /* don't recv on fatal errors: this might block the application task
       waiting on acceptmbox forever! */
    return conn->last_err;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006ea6:	e04b      	b.n	8006f40 <netconn_accept+0xf0>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3314      	adds	r3, #20
 8006eac:	4618      	mov	r0, r3
 8006eae:	f00b fe3b 	bl	8012b28 <sys_mbox_valid>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d102      	bne.n	8006ebe <netconn_accept+0x6e>
    return ERR_CLSD;
 8006eb8:	f06f 030e 	mvn.w	r3, #14
 8006ebc:	e040      	b.n	8006f40 <netconn_accept+0xf0>
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_ALLOC(msg);
#endif /* TCP_LISTEN_BACKLOG */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f103 0014 	add.w	r0, r3, #20
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	69db      	ldr	r3, [r3, #28]
 8006ec8:	461a      	mov	r2, r3
 8006eca:	f107 030c 	add.w	r3, r7, #12
 8006ece:	4619      	mov	r1, r3
 8006ed0:	f00b fdcf 	bl	8012a72 <sys_arch_mbox_fetch>
 8006ed4:	4603      	mov	r3, r0
 8006ed6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eda:	d102      	bne.n	8006ee2 <netconn_accept+0x92>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_TIMEOUT;
 8006edc:	f06f 0302 	mvn.w	r3, #2
 8006ee0:	e02e      	b.n	8006f40 <netconn_accept+0xf0>
  }
#else
  sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
#endif /* LWIP_SO_RCVTIMEO*/
  newconn = (struct netconn *)accept_ptr;
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	617b      	str	r3, [r7, #20]
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d005      	beq.n	8006efa <netconn_accept+0xaa>
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	2101      	movs	r1, #1
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	4798      	blx	r3

  if (accept_ptr == &netconn_aborted) {
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	4a16      	ldr	r2, [pc, #88]	; (8006f58 <netconn_accept+0x108>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d102      	bne.n	8006f08 <netconn_accept+0xb8>
    /* a connection has been aborted: out of pcbs or out of netconns during accept */
    /* @todo: set netconn error, but this would be fatal and thus block further accepts */
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_ABRT;
 8006f02:	f06f 030c 	mvn.w	r3, #12
 8006f06:	e01b      	b.n	8006f40 <netconn_accept+0xf0>
  }
  if (newconn == NULL) {
 8006f08:	697b      	ldr	r3, [r7, #20]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d114      	bne.n	8006f38 <netconn_accept+0xe8>
    /* connection has been aborted */
    /* in this special case, we set the netconn error from application thread, as
       on a ready-to-accept listening netconn, there should not be anything running
       in tcpip_thread */
    NETCONN_SET_SAFE_ERR(conn, ERR_CLSD);
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00e      	beq.n	8006f32 <netconn_accept+0xe2>
 8006f14:	f00b ff18 	bl	8012d48 <sys_arch_protect>
 8006f18:	6138      	str	r0, [r7, #16]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8006f20:	f113 0f0c 	cmn.w	r3, #12
 8006f24:	db02      	blt.n	8006f2c <netconn_accept+0xdc>
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	22f1      	movs	r2, #241	; 0xf1
 8006f2a:	721a      	strb	r2, [r3, #8]
 8006f2c:	6938      	ldr	r0, [r7, #16]
 8006f2e:	f00b ff19 	bl	8012d64 <sys_arch_unprotect>
#if TCP_LISTEN_BACKLOG
    API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */
    return ERR_CLSD;
 8006f32:	f06f 030e 	mvn.w	r3, #14
 8006f36:	e003      	b.n	8006f40 <netconn_accept+0xf0>
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	697a      	ldr	r2, [r7, #20]
 8006f3c:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8006f3e:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	08017cc0 	.word	0x08017cc0
 8006f4c:	08017e78 	.word	0x08017e78
 8006f50:	08017d18 	.word	0x08017d18
 8006f54:	08017e98 	.word	0x08017e98
 8006f58:	200041e4 	.word	0x200041e4

08006f5c <netconn_recv_data>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08a      	sub	sp, #40	; 0x28
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
 8006f64:	6039      	str	r1, [r7, #0]
  void *buf = NULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	623b      	str	r3, [r7, #32]
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d109      	bne.n	8006f84 <netconn_recv_data+0x28>
 8006f70:	4b61      	ldr	r3, [pc, #388]	; (80070f8 <netconn_recv_data+0x19c>)
 8006f72:	f240 12e7 	movw	r2, #487	; 0x1e7
 8006f76:	4961      	ldr	r1, [pc, #388]	; (80070fc <netconn_recv_data+0x1a0>)
 8006f78:	4861      	ldr	r0, [pc, #388]	; (8007100 <netconn_recv_data+0x1a4>)
 8006f7a:	f00e ff2b 	bl	8015dd4 <iprintf>
 8006f7e:	f06f 030f 	mvn.w	r3, #15
 8006f82:	e0b4      	b.n	80070ee <netconn_recv_data+0x192>
  *new_buf = NULL;
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d109      	bne.n	8006fa4 <netconn_recv_data+0x48>
 8006f90:	4b59      	ldr	r3, [pc, #356]	; (80070f8 <netconn_recv_data+0x19c>)
 8006f92:	f240 12e9 	movw	r2, #489	; 0x1e9
 8006f96:	495b      	ldr	r1, [pc, #364]	; (8007104 <netconn_recv_data+0x1a8>)
 8006f98:	4859      	ldr	r0, [pc, #356]	; (8007100 <netconn_recv_data+0x1a4>)
 8006f9a:	f00e ff1b 	bl	8015dd4 <iprintf>
 8006f9e:	f06f 030f 	mvn.w	r3, #15
 8006fa2:	e0a4      	b.n	80070ee <netconn_recv_data+0x192>
#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	781b      	ldrb	r3, [r3, #0]
 8006fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d115      	bne.n	8006fdc <netconn_recv_data+0x80>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    if (!sys_mbox_valid(&conn->recvmbox)) {
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	3310      	adds	r3, #16
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	f00b fdb7 	bl	8012b28 <sys_mbox_valid>
 8006fba:	4603      	mov	r3, r0
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d10d      	bne.n	8006fdc <netconn_recv_data+0x80>
      /* This happens when calling this function after receiving FIN */
      return sys_mbox_valid(&conn->acceptmbox) ? ERR_CONN : ERR_CLSD;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	3314      	adds	r3, #20
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f00b fdaf 	bl	8012b28 <sys_mbox_valid>
 8006fca:	4603      	mov	r3, r0
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <netconn_recv_data+0x7a>
 8006fd0:	f06f 030a 	mvn.w	r3, #10
 8006fd4:	e08b      	b.n	80070ee <netconn_recv_data+0x192>
 8006fd6:	f06f 030e 	mvn.w	r3, #14
 8006fda:	e088      	b.n	80070ee <netconn_recv_data+0x192>
    }
  }
#endif /* LWIP_TCP */
  LWIP_ERROR("netconn_recv: invalid recvmbox", sys_mbox_valid(&conn->recvmbox), return ERR_CONN;);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3310      	adds	r3, #16
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f00b fda1 	bl	8012b28 <sys_mbox_valid>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d109      	bne.n	8007000 <netconn_recv_data+0xa4>
 8006fec:	4b42      	ldr	r3, [pc, #264]	; (80070f8 <netconn_recv_data+0x19c>)
 8006fee:	f240 12f5 	movw	r2, #501	; 0x1f5
 8006ff2:	4945      	ldr	r1, [pc, #276]	; (8007108 <netconn_recv_data+0x1ac>)
 8006ff4:	4842      	ldr	r0, [pc, #264]	; (8007100 <netconn_recv_data+0x1a4>)
 8006ff6:	f00e feed 	bl	8015dd4 <iprintf>
 8006ffa:	f06f 030a 	mvn.w	r3, #10
 8006ffe:	e076      	b.n	80070ee <netconn_recv_data+0x192>

  if (ERR_IS_FATAL(conn->last_err)) {
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007006:	f113 0f0c 	cmn.w	r3, #12
 800700a:	da03      	bge.n	8007014 <netconn_recv_data+0xb8>
    /* don't recv on fatal errors: this might block the application task
       waiting on recvmbox forever! */
    /* @todo: this does not allow us to fetch data that has been put into recvmbox
       before the fatal error occurred - is that a problem? */
    return conn->last_err;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007012:	e06c      	b.n	80070ee <netconn_recv_data+0x192>
    API_MSG_VAR_ALLOC(msg);
  }
#endif /* LWIP_TCP */

#if LWIP_SO_RCVTIMEO
  if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	f103 0010 	add.w	r0, r3, #16
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	69db      	ldr	r3, [r3, #28]
 800701e:	461a      	mov	r2, r3
 8007020:	f107 0320 	add.w	r3, r7, #32
 8007024:	4619      	mov	r1, r3
 8007026:	f00b fd24 	bl	8012a72 <sys_arch_mbox_fetch>
 800702a:	4603      	mov	r3, r0
 800702c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007030:	d102      	bne.n	8007038 <netconn_recv_data+0xdc>
#endif /* (LWIP_UDP || LWIP_RAW) */
    {
      API_MSG_VAR_FREE(msg);
    }
#endif /* LWIP_TCP */
    return ERR_TIMEOUT;
 8007032:	f06f 0302 	mvn.w	r3, #2
 8007036:	e05a      	b.n	80070ee <netconn_recv_data+0x192>
  sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
#endif /* LWIP_SO_RCVTIMEO*/

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007040:	2b10      	cmp	r3, #16
 8007042:	d138      	bne.n	80070b6 <netconn_recv_data+0x15a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    /* Let the stack know that we have taken the data. */
    /* @todo: Speedup: Don't block and wait for the answer here
       (to prevent multiple thread-switches). */
    API_MSG_VAR_REF(msg).conn = conn;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	60fb      	str	r3, [r7, #12]
    if (buf != NULL) {
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d003      	beq.n	8007056 <netconn_recv_data+0xfa>
      API_MSG_VAR_REF(msg).msg.r.len = ((struct pbuf *)buf)->tot_len;
 800704e:	6a3b      	ldr	r3, [r7, #32]
 8007050:	891b      	ldrh	r3, [r3, #8]
 8007052:	617b      	str	r3, [r7, #20]
 8007054:	e001      	b.n	800705a <netconn_recv_data+0xfe>
    } else {
      API_MSG_VAR_REF(msg).msg.r.len = 1;
 8007056:	2301      	movs	r3, #1
 8007058:	617b      	str	r3, [r7, #20]
    }

    /* don't care for the return value of lwip_netconn_do_recv */
    netconn_apimsg(lwip_netconn_do_recv, &API_MSG_VAR_REF(msg));
 800705a:	f107 030c 	add.w	r3, r7, #12
 800705e:	4619      	mov	r1, r3
 8007060:	482a      	ldr	r0, [pc, #168]	; (800710c <netconn_recv_data+0x1b0>)
 8007062:	f7ff fdd3 	bl	8006c0c <netconn_apimsg>
    API_MSG_VAR_FREE(msg);

    /* If we are closed, we indicate that we no longer wish to use the socket */
    if (buf == NULL) {
 8007066:	6a3b      	ldr	r3, [r7, #32]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d120      	bne.n	80070ae <netconn_recv_data+0x152>
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007070:	2b00      	cmp	r3, #0
 8007072:	d005      	beq.n	8007080 <netconn_recv_data+0x124>
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007078:	2200      	movs	r2, #0
 800707a:	2101      	movs	r1, #1
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	685b      	ldr	r3, [r3, #4]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d10b      	bne.n	80070a0 <netconn_recv_data+0x144>
        /* race condition: RST during recv */
        return conn->last_err == ERR_OK ? ERR_RST : conn->last_err;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <netconn_recv_data+0x13e>
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007098:	e029      	b.n	80070ee <netconn_recv_data+0x192>
 800709a:	f06f 030d 	mvn.w	r3, #13
 800709e:	e026      	b.n	80070ee <netconn_recv_data+0x192>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80070a0:	2101      	movs	r1, #1
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 f926 	bl	80072f4 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80070a8:	f06f 030e 	mvn.w	r3, #14
 80070ac:	e01f      	b.n	80070ee <netconn_recv_data+0x192>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80070ae:	6a3b      	ldr	r3, [r7, #32]
 80070b0:	891b      	ldrh	r3, [r3, #8]
 80070b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80070b4:	e00d      	b.n	80070d2 <netconn_recv_data+0x176>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80070b6:	6a3b      	ldr	r3, [r7, #32]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d106      	bne.n	80070ca <netconn_recv_data+0x16e>
 80070bc:	4b0e      	ldr	r3, [pc, #56]	; (80070f8 <netconn_recv_data+0x19c>)
 80070be:	f240 223e 	movw	r2, #574	; 0x23e
 80070c2:	4913      	ldr	r1, [pc, #76]	; (8007110 <netconn_recv_data+0x1b4>)
 80070c4:	480e      	ldr	r0, [pc, #56]	; (8007100 <netconn_recv_data+0x1a4>)
 80070c6:	f00e fe85 	bl	8015dd4 <iprintf>
    len = netbuf_len((struct netbuf*)buf);
 80070ca:	6a3b      	ldr	r3, [r7, #32]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	891b      	ldrh	r3, [r3, #8]
 80070d0:	84fb      	strh	r3, [r7, #38]	; 0x26

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d005      	beq.n	80070e6 <netconn_recv_data+0x18a>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80070e0:	2101      	movs	r1, #1
 80070e2:	6878      	ldr	r0, [r7, #4]
 80070e4:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 80070e6:	6a3a      	ldr	r2, [r7, #32]
 80070e8:	683b      	ldr	r3, [r7, #0]
 80070ea:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 80070ec:	2300      	movs	r3, #0
}
 80070ee:	4618      	mov	r0, r3
 80070f0:	3728      	adds	r7, #40	; 0x28
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}
 80070f6:	bf00      	nop
 80070f8:	08017cc0 	.word	0x08017cc0
 80070fc:	08017eb8 	.word	0x08017eb8
 8007100:	08017d18 	.word	0x08017d18
 8007104:	08017ed8 	.word	0x08017ed8
 8007108:	08017ef4 	.word	0x08017ef4
 800710c:	08008559 	.word	0x08008559
 8007110:	08017f14 	.word	0x08017f14

08007114 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	b086      	sub	sp, #24
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
 800711c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 800711e:	2300      	movs	r3, #0
 8007120:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8007122:	683b      	ldr	r3, [r7, #0]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d109      	bne.n	800713c <netconn_recv+0x28>
 8007128:	4b31      	ldr	r3, [pc, #196]	; (80071f0 <netconn_recv+0xdc>)
 800712a:	f44f 721d 	mov.w	r2, #628	; 0x274
 800712e:	4931      	ldr	r1, [pc, #196]	; (80071f4 <netconn_recv+0xe0>)
 8007130:	4831      	ldr	r0, [pc, #196]	; (80071f8 <netconn_recv+0xe4>)
 8007132:	f00e fe4f 	bl	8015dd4 <iprintf>
 8007136:	f06f 030f 	mvn.w	r3, #15
 800713a:	e054      	b.n	80071e6 <netconn_recv+0xd2>
  *new_buf = NULL;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	2200      	movs	r2, #0
 8007140:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d109      	bne.n	800715c <netconn_recv+0x48>
 8007148:	4b29      	ldr	r3, [pc, #164]	; (80071f0 <netconn_recv+0xdc>)
 800714a:	f240 2276 	movw	r2, #630	; 0x276
 800714e:	492b      	ldr	r1, [pc, #172]	; (80071fc <netconn_recv+0xe8>)
 8007150:	4829      	ldr	r0, [pc, #164]	; (80071f8 <netconn_recv+0xe4>)
 8007152:	f00e fe3f 	bl	8015dd4 <iprintf>
 8007156:	f06f 030f 	mvn.w	r3, #15
 800715a:	e044      	b.n	80071e6 <netconn_recv+0xd2>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007164:	2b10      	cmp	r3, #16
 8007166:	d139      	bne.n	80071dc <netconn_recv+0xc8>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8007168:	2300      	movs	r3, #0
 800716a:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800716c:	2006      	movs	r0, #6
 800716e:	f004 fc57 	bl	800ba20 <memp_malloc>
 8007172:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d102      	bne.n	8007180 <netconn_recv+0x6c>
      return ERR_MEM;
 800717a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800717e:	e032      	b.n	80071e6 <netconn_recv+0xd2>
    }

    err = netconn_recv_data(conn, (void **)&p);
 8007180:	f107 030c 	add.w	r3, r7, #12
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fee8 	bl	8006f5c <netconn_recv_data>
 800718c:	4603      	mov	r3, r0
 800718e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8007190:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d006      	beq.n	80071a6 <netconn_recv+0x92>
      memp_free(MEMP_NETBUF, buf);
 8007198:	6979      	ldr	r1, [r7, #20]
 800719a:	2006      	movs	r0, #6
 800719c:	f004 fc92 	bl	800bac4 <memp_free>
      return err;
 80071a0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80071a4:	e01f      	b.n	80071e6 <netconn_recv+0xd2>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d106      	bne.n	80071ba <netconn_recv+0xa6>
 80071ac:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <netconn_recv+0xdc>)
 80071ae:	f240 228a 	movw	r2, #650	; 0x28a
 80071b2:	4913      	ldr	r1, [pc, #76]	; (8007200 <netconn_recv+0xec>)
 80071b4:	4810      	ldr	r0, [pc, #64]	; (80071f8 <netconn_recv+0xe4>)
 80071b6:	f00e fe0d 	bl	8015dd4 <iprintf>

    buf->p = p;
 80071ba:	68fa      	ldr	r2, [r7, #12]
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80071c0:	68fa      	ldr	r2, [r7, #12]
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80071c6:	697b      	ldr	r3, [r7, #20]
 80071c8:	2200      	movs	r2, #0
 80071ca:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80071cc:	697b      	ldr	r3, [r7, #20]
 80071ce:	2200      	movs	r2, #0
 80071d0:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	697a      	ldr	r2, [r7, #20]
 80071d6:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80071d8:	2300      	movs	r3, #0
 80071da:	e004      	b.n	80071e6 <netconn_recv+0xd2>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f7ff febc 	bl	8006f5c <netconn_recv_data>
 80071e4:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	3718      	adds	r7, #24
 80071ea:	46bd      	mov	sp, r7
 80071ec:	bd80      	pop	{r7, pc}
 80071ee:	bf00      	nop
 80071f0:	08017cc0 	.word	0x08017cc0
 80071f4:	08017eb8 	.word	0x08017eb8
 80071f8:	08017d18 	.word	0x08017d18
 80071fc:	08017ed8 	.word	0x08017ed8
 8007200:	08017f20 	.word	0x08017f20

08007204 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b08a      	sub	sp, #40	; 0x28
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]
 8007210:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  u8_t dontblock;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d109      	bne.n	800722c <netconn_write_partly+0x28>
 8007218:	4b31      	ldr	r3, [pc, #196]	; (80072e0 <netconn_write_partly+0xdc>)
 800721a:	f240 22e6 	movw	r2, #742	; 0x2e6
 800721e:	4931      	ldr	r1, [pc, #196]	; (80072e4 <netconn_write_partly+0xe0>)
 8007220:	4831      	ldr	r0, [pc, #196]	; (80072e8 <netconn_write_partly+0xe4>)
 8007222:	f00e fdd7 	bl	8015dd4 <iprintf>
 8007226:	f06f 030f 	mvn.w	r3, #15
 800722a:	e055      	b.n	80072d8 <netconn_write_partly+0xd4>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type)== NETCONN_TCP), return ERR_VAL;);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	781b      	ldrb	r3, [r3, #0]
 8007230:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007234:	2b10      	cmp	r3, #16
 8007236:	d009      	beq.n	800724c <netconn_write_partly+0x48>
 8007238:	4b29      	ldr	r3, [pc, #164]	; (80072e0 <netconn_write_partly+0xdc>)
 800723a:	f240 22e7 	movw	r2, #743	; 0x2e7
 800723e:	492b      	ldr	r1, [pc, #172]	; (80072ec <netconn_write_partly+0xe8>)
 8007240:	4829      	ldr	r0, [pc, #164]	; (80072e8 <netconn_write_partly+0xe4>)
 8007242:	f00e fdc7 	bl	8015dd4 <iprintf>
 8007246:	f06f 0305 	mvn.w	r3, #5
 800724a:	e045      	b.n	80072d8 <netconn_write_partly+0xd4>
  if (size == 0) {
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2b00      	cmp	r3, #0
 8007250:	d101      	bne.n	8007256 <netconn_write_partly+0x52>
    return ERR_OK;
 8007252:	2300      	movs	r3, #0
 8007254:	e040      	b.n	80072d8 <netconn_write_partly+0xd4>
  }
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800725c:	f003 0302 	and.w	r3, r3, #2
 8007260:	2b00      	cmp	r3, #0
 8007262:	d104      	bne.n	800726e <netconn_write_partly+0x6a>
 8007264:	78fb      	ldrb	r3, [r7, #3]
 8007266:	f003 0304 	and.w	r3, r3, #4
 800726a:	2b00      	cmp	r3, #0
 800726c:	d001      	beq.n	8007272 <netconn_write_partly+0x6e>
 800726e:	2301      	movs	r3, #1
 8007270:	e000      	b.n	8007274 <netconn_write_partly+0x70>
 8007272:	2300      	movs	r3, #0
 8007274:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8007278:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800727c:	2b00      	cmp	r3, #0
 800727e:	d005      	beq.n	800728c <netconn_write_partly+0x88>
 8007280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007282:	2b00      	cmp	r3, #0
 8007284:	d102      	bne.n	800728c <netconn_write_partly+0x88>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8007286:	f06f 0305 	mvn.w	r3, #5
 800728a:	e025      	b.n	80072d8 <netconn_write_partly+0xd4>
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	613b      	str	r3, [r7, #16]
  API_MSG_VAR_REF(msg).msg.w.dataptr = dataptr;
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	61bb      	str	r3, [r7, #24]
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8007294:	78fb      	ldrb	r3, [r7, #3]
 8007296:	f887 3020 	strb.w	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.len = size;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	61fb      	str	r3, [r7, #28]
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 800729e:	f107 0310 	add.w	r3, r7, #16
 80072a2:	4619      	mov	r1, r3
 80072a4:	4812      	ldr	r0, [pc, #72]	; (80072f0 <netconn_write_partly+0xec>)
 80072a6:	f7ff fcb1 	bl	8006c0c <netconn_apimsg>
 80072aa:	4603      	mov	r3, r0
 80072ac:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  if ((err == ERR_OK) && (bytes_written != NULL)) {
 80072b0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d10d      	bne.n	80072d4 <netconn_write_partly+0xd0>
 80072b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <netconn_write_partly+0xd0>
    if (dontblock) {
 80072be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d003      	beq.n	80072ce <netconn_write_partly+0xca>
      /* nonblocking write: maybe the data has been sent partly */
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.len;
 80072c6:	69fa      	ldr	r2, [r7, #28]
 80072c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072ca:	601a      	str	r2, [r3, #0]
 80072cc:	e002      	b.n	80072d4 <netconn_write_partly+0xd0>
    } else {
      /* blocking call succeeded: all data has been sent if it */
      *bytes_written = size;
 80072ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80072d4:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
}
 80072d8:	4618      	mov	r0, r3
 80072da:	3728      	adds	r7, #40	; 0x28
 80072dc:	46bd      	mov	sp, r7
 80072de:	bd80      	pop	{r7, pc}
 80072e0:	08017cc0 	.word	0x08017cc0
 80072e4:	08017f48 	.word	0x08017f48
 80072e8:	08017d18 	.word	0x08017d18
 80072ec:	08017f64 	.word	0x08017f64
 80072f0:	0800893d 	.word	0x0800893d

080072f4 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b088      	sub	sp, #32
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	460b      	mov	r3, r1
 80072fe:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d109      	bne.n	800731a <netconn_close_shutdown+0x26>
 8007306:	4b0f      	ldr	r3, [pc, #60]	; (8007344 <netconn_close_shutdown+0x50>)
 8007308:	f44f 724a 	mov.w	r2, #808	; 0x328
 800730c:	490e      	ldr	r1, [pc, #56]	; (8007348 <netconn_close_shutdown+0x54>)
 800730e:	480f      	ldr	r0, [pc, #60]	; (800734c <netconn_close_shutdown+0x58>)
 8007310:	f00e fd60 	bl	8015dd4 <iprintf>
 8007314:	f06f 030f 	mvn.w	r3, #15
 8007318:	e00f      	b.n	800733a <netconn_close_shutdown+0x46>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	60bb      	str	r3, [r7, #8]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 800731e:	78fb      	ldrb	r3, [r7, #3]
 8007320:	743b      	strb	r3, [r7, #16]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8007322:	2302      	movs	r3, #2
 8007324:	747b      	strb	r3, [r7, #17]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8007326:	f107 0308 	add.w	r3, r7, #8
 800732a:	4619      	mov	r1, r3
 800732c:	4808      	ldr	r0, [pc, #32]	; (8007350 <netconn_close_shutdown+0x5c>)
 800732e:	f7ff fc6d 	bl	8006c0c <netconn_apimsg>
 8007332:	4603      	mov	r3, r0
 8007334:	77fb      	strb	r3, [r7, #31]
  API_MSG_VAR_FREE(msg);

  return err;
 8007336:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3720      	adds	r7, #32
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	08017cc0 	.word	0x08017cc0
 8007348:	08017f88 	.word	0x08017f88
 800734c:	08017d18 	.word	0x08017d18
 8007350:	08008a9d 	.word	0x08008a9d

08007354 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 800735c:	2103      	movs	r1, #3
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ffc8 	bl	80072f4 <netconn_close_shutdown>
 8007364:	4603      	mov	r3, r0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3708      	adds	r7, #8
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}
	...

08007370 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
   const ip_addr_t *addr, u16_t port)
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b088      	sub	sp, #32
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 800737e:	68bb      	ldr	r3, [r7, #8]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d105      	bne.n	8007390 <recv_udp+0x20>
 8007384:	4b34      	ldr	r3, [pc, #208]	; (8007458 <recv_udp+0xe8>)
 8007386:	22b1      	movs	r2, #177	; 0xb1
 8007388:	4934      	ldr	r1, [pc, #208]	; (800745c <recv_udp+0xec>)
 800738a:	4835      	ldr	r0, [pc, #212]	; (8007460 <recv_udp+0xf0>)
 800738c:	f00e fd22 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d105      	bne.n	80073a2 <recv_udp+0x32>
 8007396:	4b30      	ldr	r3, [pc, #192]	; (8007458 <recv_udp+0xe8>)
 8007398:	22b2      	movs	r2, #178	; 0xb2
 800739a:	4932      	ldr	r1, [pc, #200]	; (8007464 <recv_udp+0xf4>)
 800739c:	4830      	ldr	r0, [pc, #192]	; (8007460 <recv_udp+0xf0>)
 800739e:	f00e fd19 	bl	8015dd4 <iprintf>
  conn = (struct netconn *)arg;
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80073a6:	69fb      	ldr	r3, [r7, #28]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d103      	bne.n	80073b4 <recv_udp+0x44>
    pbuf_free(p);
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f005 f8e3 	bl	800c578 <pbuf_free>
    return;
 80073b2:	e04d      	b.n	8007450 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80073b4:	69fb      	ldr	r3, [r7, #28]
 80073b6:	685a      	ldr	r2, [r3, #4]
 80073b8:	68bb      	ldr	r3, [r7, #8]
 80073ba:	429a      	cmp	r2, r3
 80073bc:	d005      	beq.n	80073ca <recv_udp+0x5a>
 80073be:	4b26      	ldr	r3, [pc, #152]	; (8007458 <recv_udp+0xe8>)
 80073c0:	22ba      	movs	r2, #186	; 0xba
 80073c2:	4929      	ldr	r1, [pc, #164]	; (8007468 <recv_udp+0xf8>)
 80073c4:	4826      	ldr	r0, [pc, #152]	; (8007460 <recv_udp+0xf0>)
 80073c6:	f00e fd05 	bl	8015dd4 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!sys_mbox_valid(&conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!sys_mbox_valid(&conn->recvmbox)) {
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	3310      	adds	r3, #16
 80073ce:	4618      	mov	r0, r3
 80073d0:	f00b fbaa 	bl	8012b28 <sys_mbox_valid>
 80073d4:	4603      	mov	r3, r0
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d103      	bne.n	80073e2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80073da:	6878      	ldr	r0, [r7, #4]
 80073dc:	f005 f8cc 	bl	800c578 <pbuf_free>
    return;
 80073e0:	e036      	b.n	8007450 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80073e2:	2006      	movs	r0, #6
 80073e4:	f004 fb1c 	bl	800ba20 <memp_malloc>
 80073e8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d103      	bne.n	80073f8 <recv_udp+0x88>
    pbuf_free(p);
 80073f0:	6878      	ldr	r0, [r7, #4]
 80073f2:	f005 f8c1 	bl	800c578 <pbuf_free>
    return;
 80073f6:	e02b      	b.n	8007450 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80073f8:	69bb      	ldr	r3, [r7, #24]
 80073fa:	687a      	ldr	r2, [r7, #4]
 80073fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80073fe:	69bb      	ldr	r3, [r7, #24]
 8007400:	687a      	ldr	r2, [r7, #4]
 8007402:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d002      	beq.n	8007410 <recv_udp+0xa0>
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	e000      	b.n	8007412 <recv_udp+0xa2>
 8007410:	2300      	movs	r3, #0
 8007412:	69ba      	ldr	r2, [r7, #24]
 8007414:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800741a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	891b      	ldrh	r3, [r3, #8]
 8007420:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8007422:	69fb      	ldr	r3, [r7, #28]
 8007424:	3310      	adds	r3, #16
 8007426:	69b9      	ldr	r1, [r7, #24]
 8007428:	4618      	mov	r0, r3
 800742a:	f00b fb08 	bl	8012a3e <sys_mbox_trypost>
 800742e:	4603      	mov	r3, r0
 8007430:	2b00      	cmp	r3, #0
 8007432:	d003      	beq.n	800743c <recv_udp+0xcc>
    netbuf_delete(buf);
 8007434:	69b8      	ldr	r0, [r7, #24]
 8007436:	f001 fbd9 	bl	8008bec <netbuf_delete>
    return;
 800743a:	e009      	b.n	8007450 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800743c:	69fb      	ldr	r3, [r7, #28]
 800743e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007440:	2b00      	cmp	r3, #0
 8007442:	d005      	beq.n	8007450 <recv_udp+0xe0>
 8007444:	69fb      	ldr	r3, [r7, #28]
 8007446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007448:	8afa      	ldrh	r2, [r7, #22]
 800744a:	2100      	movs	r1, #0
 800744c:	69f8      	ldr	r0, [r7, #28]
 800744e:	4798      	blx	r3
  }
}
 8007450:	3720      	adds	r7, #32
 8007452:	46bd      	mov	sp, r7
 8007454:	bd80      	pop	{r7, pc}
 8007456:	bf00      	nop
 8007458:	08017fa4 	.word	0x08017fa4
 800745c:	08017fd8 	.word	0x08017fd8
 8007460:	08017ffc 	.word	0x08017ffc
 8007464:	08018024 	.word	0x08018024
 8007468:	08018044 	.word	0x08018044

0800746c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b088      	sub	sp, #32
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
 8007478:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	2b00      	cmp	r3, #0
 800747e:	d105      	bne.n	800748c <recv_tcp+0x20>
 8007480:	4b39      	ldr	r3, [pc, #228]	; (8007568 <recv_tcp+0xfc>)
 8007482:	22f9      	movs	r2, #249	; 0xf9
 8007484:	4939      	ldr	r1, [pc, #228]	; (800756c <recv_tcp+0x100>)
 8007486:	483a      	ldr	r0, [pc, #232]	; (8007570 <recv_tcp+0x104>)
 8007488:	f00e fca4 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d105      	bne.n	800749e <recv_tcp+0x32>
 8007492:	4b35      	ldr	r3, [pc, #212]	; (8007568 <recv_tcp+0xfc>)
 8007494:	22fa      	movs	r2, #250	; 0xfa
 8007496:	4937      	ldr	r1, [pc, #220]	; (8007574 <recv_tcp+0x108>)
 8007498:	4835      	ldr	r0, [pc, #212]	; (8007570 <recv_tcp+0x104>)
 800749a:	f00e fc9b 	bl	8015dd4 <iprintf>
  conn = (struct netconn *)arg;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d102      	bne.n	80074ae <recv_tcp+0x42>
    return ERR_VAL;
 80074a8:	f06f 0305 	mvn.w	r3, #5
 80074ac:	e057      	b.n	800755e <recv_tcp+0xf2>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80074ae:	69bb      	ldr	r3, [r7, #24]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	429a      	cmp	r2, r3
 80074b6:	d006      	beq.n	80074c6 <recv_tcp+0x5a>
 80074b8:	4b2b      	ldr	r3, [pc, #172]	; (8007568 <recv_tcp+0xfc>)
 80074ba:	f44f 7280 	mov.w	r2, #256	; 0x100
 80074be:	492e      	ldr	r1, [pc, #184]	; (8007578 <recv_tcp+0x10c>)
 80074c0:	482b      	ldr	r0, [pc, #172]	; (8007570 <recv_tcp+0x104>)
 80074c2:	f00e fc87 	bl	8015dd4 <iprintf>

  if (!sys_mbox_valid(&conn->recvmbox)) {
 80074c6:	69bb      	ldr	r3, [r7, #24]
 80074c8:	3310      	adds	r3, #16
 80074ca:	4618      	mov	r0, r3
 80074cc:	f00b fb2c 	bl	8012b28 <sys_mbox_valid>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d10d      	bne.n	80074f2 <recv_tcp+0x86>
    /* recvmbox already deleted */
    if (p != NULL) {
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d008      	beq.n	80074ee <recv_tcp+0x82>
      tcp_recved(pcb, p->tot_len);
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	891b      	ldrh	r3, [r3, #8]
 80074e0:	4619      	mov	r1, r3
 80074e2:	68b8      	ldr	r0, [r7, #8]
 80074e4:	f005 ff5a 	bl	800d39c <tcp_recved>
      pbuf_free(p);
 80074e8:	6878      	ldr	r0, [r7, #4]
 80074ea:	f005 f845 	bl	800c578 <pbuf_free>
    }
    return ERR_OK;
 80074ee:	2300      	movs	r3, #0
 80074f0:	e035      	b.n	800755e <recv_tcp+0xf2>
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  /* don't overwrite fatal errors! */
  if (err != ERR_OK) {
 80074f2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d011      	beq.n	800751e <recv_tcp+0xb2>
    NETCONN_SET_SAFE_ERR(conn, err);
 80074fa:	69bb      	ldr	r3, [r7, #24]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d00e      	beq.n	800751e <recv_tcp+0xb2>
 8007500:	f00b fc22 	bl	8012d48 <sys_arch_protect>
 8007504:	6178      	str	r0, [r7, #20]
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800750c:	f113 0f0c 	cmn.w	r3, #12
 8007510:	db02      	blt.n	8007518 <recv_tcp+0xac>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	78fa      	ldrb	r2, [r7, #3]
 8007516:	721a      	strb	r2, [r3, #8]
 8007518:	6978      	ldr	r0, [r7, #20]
 800751a:	f00b fc23 	bl	8012d64 <sys_arch_unprotect>
  }

  if (p != NULL) {
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2b00      	cmp	r3, #0
 8007522:	d003      	beq.n	800752c <recv_tcp+0xc0>
    len = p->tot_len;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	891b      	ldrh	r3, [r3, #8]
 8007528:	83fb      	strh	r3, [r7, #30]
 800752a:	e001      	b.n	8007530 <recv_tcp+0xc4>
  } else {
    len = 0;
 800752c:	2300      	movs	r3, #0
 800752e:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, p) != ERR_OK) {
 8007530:	69bb      	ldr	r3, [r7, #24]
 8007532:	3310      	adds	r3, #16
 8007534:	6879      	ldr	r1, [r7, #4]
 8007536:	4618      	mov	r0, r3
 8007538:	f00b fa81 	bl	8012a3e <sys_mbox_trypost>
 800753c:	4603      	mov	r3, r0
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <recv_tcp+0xdc>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8007542:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007546:	e00a      	b.n	800755e <recv_tcp+0xf2>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 8007548:	69bb      	ldr	r3, [r7, #24]
 800754a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800754c:	2b00      	cmp	r3, #0
 800754e:	d005      	beq.n	800755c <recv_tcp+0xf0>
 8007550:	69bb      	ldr	r3, [r7, #24]
 8007552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007554:	8bfa      	ldrh	r2, [r7, #30]
 8007556:	2100      	movs	r1, #0
 8007558:	69b8      	ldr	r0, [r7, #24]
 800755a:	4798      	blx	r3
  }

  return ERR_OK;
 800755c:	2300      	movs	r3, #0
}
 800755e:	4618      	mov	r0, r3
 8007560:	3720      	adds	r7, #32
 8007562:	46bd      	mov	sp, r7
 8007564:	bd80      	pop	{r7, pc}
 8007566:	bf00      	nop
 8007568:	08017fa4 	.word	0x08017fa4
 800756c:	08018064 	.word	0x08018064
 8007570:	08017ffc 	.word	0x08017ffc
 8007574:	08018088 	.word	0x08018088
 8007578:	080180a8 	.word	0x080180a8

0800757c <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b084      	sub	sp, #16
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
 8007584:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d106      	bne.n	800759e <poll_tcp+0x22>
 8007590:	4b2b      	ldr	r3, [pc, #172]	; (8007640 <poll_tcp+0xc4>)
 8007592:	f44f 729c 	mov.w	r2, #312	; 0x138
 8007596:	492b      	ldr	r1, [pc, #172]	; (8007644 <poll_tcp+0xc8>)
 8007598:	482b      	ldr	r0, [pc, #172]	; (8007648 <poll_tcp+0xcc>)
 800759a:	f00e fc1b 	bl	8015dd4 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	785b      	ldrb	r3, [r3, #1]
 80075a2:	2b01      	cmp	r3, #1
 80075a4:	d104      	bne.n	80075b0 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80075a6:	2101      	movs	r1, #1
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f001 f821 	bl	80085f0 <lwip_netconn_do_writemore>
 80075ae:	e016      	b.n	80075de <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	785b      	ldrb	r3, [r3, #1]
 80075b4:	2b04      	cmp	r3, #4
 80075b6:	d112      	bne.n	80075de <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d00a      	beq.n	80075d6 <poll_tcp+0x5a>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075c4:	7a5b      	ldrb	r3, [r3, #9]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d005      	beq.n	80075d6 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ce:	7a5a      	ldrb	r2, [r3, #9]
 80075d0:	3a01      	subs	r2, #1
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80075d6:	2101      	movs	r1, #1
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fc1f 	bl	8007e1c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d023      	beq.n	8007634 <poll_tcp+0xb8>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	685b      	ldr	r3, [r3, #4]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d01f      	beq.n	8007634 <poll_tcp+0xb8>
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80075fc:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8007600:	d318      	bcc.n	8007634 <poll_tcp+0xb8>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800760a:	2b04      	cmp	r3, #4
 800760c:	d812      	bhi.n	8007634 <poll_tcp+0xb8>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007614:	f023 0310 	bic.w	r3, r3, #16
 8007618:	b2da      	uxtb	r2, r3
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007624:	2b00      	cmp	r3, #0
 8007626:	d005      	beq.n	8007634 <poll_tcp+0xb8>
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800762c:	2200      	movs	r2, #0
 800762e:	2102      	movs	r1, #2
 8007630:	68f8      	ldr	r0, [r7, #12]
 8007632:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
 800763e:	bf00      	nop
 8007640:	08017fa4 	.word	0x08017fa4
 8007644:	080180c8 	.word	0x080180c8
 8007648:	08017ffc 	.word	0x08017ffc

0800764c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b086      	sub	sp, #24
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	4613      	mov	r3, r2
 8007658:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d106      	bne.n	8007672 <sent_tcp+0x26>
 8007664:	4b21      	ldr	r3, [pc, #132]	; (80076ec <sent_tcp+0xa0>)
 8007666:	f240 1261 	movw	r2, #353	; 0x161
 800766a:	4921      	ldr	r1, [pc, #132]	; (80076f0 <sent_tcp+0xa4>)
 800766c:	4821      	ldr	r0, [pc, #132]	; (80076f4 <sent_tcp+0xa8>)
 800766e:	f00e fbb1 	bl	8015dd4 <iprintf>

  if (conn) {
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d034      	beq.n	80076e2 <sent_tcp+0x96>
    if (conn->state == NETCONN_WRITE) {
 8007678:	697b      	ldr	r3, [r7, #20]
 800767a:	785b      	ldrb	r3, [r3, #1]
 800767c:	2b01      	cmp	r3, #1
 800767e:	d104      	bne.n	800768a <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8007680:	2101      	movs	r1, #1
 8007682:	6978      	ldr	r0, [r7, #20]
 8007684:	f000 ffb4 	bl	80085f0 <lwip_netconn_do_writemore>
 8007688:	e007      	b.n	800769a <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800768a:	697b      	ldr	r3, [r7, #20]
 800768c:	785b      	ldrb	r3, [r3, #1]
 800768e:	2b04      	cmp	r3, #4
 8007690:	d103      	bne.n	800769a <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8007692:	2101      	movs	r1, #1
 8007694:	6978      	ldr	r0, [r7, #20]
 8007696:	f000 fbc1 	bl	8007e1c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800769a:	697b      	ldr	r3, [r7, #20]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d01f      	beq.n	80076e2 <sent_tcp+0x96>
 80076a2:	697b      	ldr	r3, [r7, #20]
 80076a4:	685b      	ldr	r3, [r3, #4]
 80076a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80076aa:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80076ae:	d318      	bcc.n	80076e2 <sent_tcp+0x96>
      (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	685b      	ldr	r3, [r3, #4]
 80076b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80076b8:	2b04      	cmp	r3, #4
 80076ba:	d812      	bhi.n	80076e2 <sent_tcp+0x96>
      conn->flags &= ~NETCONN_FLAG_CHECK_WRITESPACE;
 80076bc:	697b      	ldr	r3, [r7, #20]
 80076be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076c2:	f023 0310 	bic.w	r3, r3, #16
 80076c6:	b2da      	uxtb	r2, r3
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f883 2020 	strb.w	r2, [r3, #32]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 80076ce:	697b      	ldr	r3, [r7, #20]
 80076d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d005      	beq.n	80076e2 <sent_tcp+0x96>
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076da:	88fa      	ldrh	r2, [r7, #6]
 80076dc:	2102      	movs	r1, #2
 80076de:	6978      	ldr	r0, [r7, #20]
 80076e0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 80076e2:	2300      	movs	r3, #0
}
 80076e4:	4618      	mov	r0, r3
 80076e6:	3718      	adds	r7, #24
 80076e8:	46bd      	mov	sp, r7
 80076ea:	bd80      	pop	{r7, pc}
 80076ec:	08017fa4 	.word	0x08017fa4
 80076f0:	080180c8 	.word	0x080180c8
 80076f4:	08017ffc 	.word	0x08017ffc

080076f8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b08a      	sub	sp, #40	; 0x28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
 8007700:	460b      	mov	r3, r1
 8007702:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;

  conn = (struct netconn *)arg;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	627b      	str	r3, [r7, #36]	; 0x24
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8007708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800770a:	2b00      	cmp	r3, #0
 800770c:	d106      	bne.n	800771c <err_tcp+0x24>
 800770e:	4b6d      	ldr	r3, [pc, #436]	; (80078c4 <err_tcp+0x1cc>)
 8007710:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8007714:	496c      	ldr	r1, [pc, #432]	; (80078c8 <err_tcp+0x1d0>)
 8007716:	486d      	ldr	r0, [pc, #436]	; (80078cc <err_tcp+0x1d4>)
 8007718:	f00e fb5c 	bl	8015dd4 <iprintf>

  conn->pcb.tcp = NULL;
 800771c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771e:	2200      	movs	r2, #0
 8007720:	605a      	str	r2, [r3, #4]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8007722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007724:	785b      	ldrb	r3, [r3, #1]
 8007726:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  conn->state = NETCONN_NONE;
 800772a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800772c:	2200      	movs	r2, #0
 800772e:	705a      	strb	r2, [r3, #1]

  if (old_state == NETCONN_CLOSE) {
 8007730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007734:	2b04      	cmp	r3, #4
 8007736:	d114      	bne.n	8007762 <err_tcp+0x6a>
    /* RST during close: let close return success & dealloc the netconn */
    err = ERR_OK;
 8007738:	2300      	movs	r3, #0
 800773a:	70fb      	strb	r3, [r7, #3]
    NETCONN_SET_SAFE_ERR(conn, ERR_OK);
 800773c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773e:	2b00      	cmp	r3, #0
 8007740:	d018      	beq.n	8007774 <err_tcp+0x7c>
 8007742:	f00b fb01 	bl	8012d48 <sys_arch_protect>
 8007746:	61f8      	str	r0, [r7, #28]
 8007748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800774e:	f113 0f0c 	cmn.w	r3, #12
 8007752:	db02      	blt.n	800775a <err_tcp+0x62>
 8007754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007756:	2200      	movs	r2, #0
 8007758:	721a      	strb	r2, [r3, #8]
 800775a:	69f8      	ldr	r0, [r7, #28]
 800775c:	f00b fb02 	bl	8012d64 <sys_arch_unprotect>
 8007760:	e008      	b.n	8007774 <err_tcp+0x7c>
  } else {
    /* no check since this is always fatal! */
    SYS_ARCH_SET(conn->last_err, err);
 8007762:	f00b faf1 	bl	8012d48 <sys_arch_protect>
 8007766:	61b8      	str	r0, [r7, #24]
 8007768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800776a:	78fa      	ldrb	r2, [r7, #3]
 800776c:	721a      	strb	r2, [r3, #8]
 800776e:	69b8      	ldr	r0, [r7, #24]
 8007770:	f00b faf8 	bl	8012d64 <sys_arch_unprotect>
  }

  /* @todo: the type of NETCONN_EVT created should depend on 'old_state' */

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007776:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007778:	2b00      	cmp	r3, #0
 800777a:	d005      	beq.n	8007788 <err_tcp+0x90>
 800777c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800777e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007780:	2200      	movs	r2, #0
 8007782:	2104      	movs	r1, #4
 8007784:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007786:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800778a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778c:	2b00      	cmp	r3, #0
 800778e:	d005      	beq.n	800779c <err_tcp+0xa4>
 8007790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007794:	2200      	movs	r2, #0
 8007796:	2100      	movs	r1, #0
 8007798:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800779a:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800779c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800779e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d005      	beq.n	80077b0 <err_tcp+0xb8>
 80077a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077a8:	2200      	movs	r2, #0
 80077aa:	2102      	movs	r1, #2
 80077ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80077ae:	4798      	blx	r3

  /* pass NULL-message to recvmbox to wake up pending recv */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80077b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b2:	3310      	adds	r3, #16
 80077b4:	4618      	mov	r0, r3
 80077b6:	f00b f9b7 	bl	8012b28 <sys_mbox_valid>
 80077ba:	4603      	mov	r3, r0
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d005      	beq.n	80077cc <err_tcp+0xd4>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, NULL);
 80077c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077c2:	3310      	adds	r3, #16
 80077c4:	2100      	movs	r1, #0
 80077c6:	4618      	mov	r0, r3
 80077c8:	f00b f939 	bl	8012a3e <sys_mbox_trypost>
  }
  /* pass NULL-message to acceptmbox to wake up pending accept */
  if (sys_mbox_valid(&conn->acceptmbox)) {
 80077cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ce:	3314      	adds	r3, #20
 80077d0:	4618      	mov	r0, r3
 80077d2:	f00b f9a9 	bl	8012b28 <sys_mbox_valid>
 80077d6:	4603      	mov	r3, r0
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d005      	beq.n	80077e8 <err_tcp+0xf0>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, NULL);
 80077dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077de:	3314      	adds	r3, #20
 80077e0:	2100      	movs	r1, #0
 80077e2:	4618      	mov	r0, r3
 80077e4:	f00b f92b 	bl	8012a3e <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 80077e8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d007      	beq.n	8007800 <err_tcp+0x108>
 80077f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077f4:	2b04      	cmp	r3, #4
 80077f6:	d003      	beq.n	8007800 <err_tcp+0x108>
 80077f8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80077fc:	2b03      	cmp	r3, #3
 80077fe:	d150      	bne.n	80078a2 <err_tcp+0x1aa>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8007800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007802:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007806:	f003 0304 	and.w	r3, r3, #4
 800780a:	2b00      	cmp	r3, #0
 800780c:	bf14      	ite	ne
 800780e:	2301      	movne	r3, #1
 8007810:	2300      	moveq	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	617b      	str	r3, [r7, #20]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800781c:	f023 0304 	bic.w	r3, r3, #4
 8007820:	b2da      	uxtb	r2, r3
 8007822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007824:	f883 2020 	strb.w	r2, [r3, #32]

    if (!was_nonblocking_connect) {
 8007828:	697b      	ldr	r3, [r7, #20]
 800782a:	2b00      	cmp	r3, #0
 800782c:	d145      	bne.n	80078ba <err_tcp+0x1c2>
      sys_sem_t* op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007832:	2b00      	cmp	r3, #0
 8007834:	d106      	bne.n	8007844 <err_tcp+0x14c>
 8007836:	4b23      	ldr	r3, [pc, #140]	; (80078c4 <err_tcp+0x1cc>)
 8007838:	f240 12b3 	movw	r2, #435	; 0x1b3
 800783c:	4924      	ldr	r1, [pc, #144]	; (80078d0 <err_tcp+0x1d8>)
 800783e:	4823      	ldr	r0, [pc, #140]	; (80078cc <err_tcp+0x1d4>)
 8007840:	f00e fac8 	bl	8015dd4 <iprintf>
      conn->current_msg->err = err;
 8007844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	711a      	strb	r2, [r3, #4]
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	330c      	adds	r3, #12
 8007854:	613b      	str	r3, [r7, #16]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8007856:	6938      	ldr	r0, [r7, #16]
 8007858:	f00b f9f5 	bl	8012c46 <sys_sem_valid>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d106      	bne.n	8007870 <err_tcp+0x178>
 8007862:	4b18      	ldr	r3, [pc, #96]	; (80078c4 <err_tcp+0x1cc>)
 8007864:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8007868:	491a      	ldr	r1, [pc, #104]	; (80078d4 <err_tcp+0x1dc>)
 800786a:	4818      	ldr	r0, [pc, #96]	; (80078cc <err_tcp+0x1d4>)
 800786c:	f00e fab2 	bl	8015dd4 <iprintf>
      conn->current_msg = NULL;
 8007870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007872:	2200      	movs	r2, #0
 8007874:	629a      	str	r2, [r3, #40]	; 0x28
      /* wake up the waiting task */
      NETCONN_SET_SAFE_ERR(conn, err);
 8007876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00e      	beq.n	800789a <err_tcp+0x1a2>
 800787c:	f00b fa64 	bl	8012d48 <sys_arch_protect>
 8007880:	60f8      	str	r0, [r7, #12]
 8007882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007884:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007888:	f113 0f0c 	cmn.w	r3, #12
 800788c:	db02      	blt.n	8007894 <err_tcp+0x19c>
 800788e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007890:	78fa      	ldrb	r2, [r7, #3]
 8007892:	721a      	strb	r2, [r3, #8]
 8007894:	68f8      	ldr	r0, [r7, #12]
 8007896:	f00b fa65 	bl	8012d64 <sys_arch_unprotect>
      sys_sem_signal(op_completed_sem);
 800789a:	6938      	ldr	r0, [r7, #16]
 800789c:	f00b f9b9 	bl	8012c12 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 80078a0:	e00b      	b.n	80078ba <err_tcp+0x1c2>
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 80078a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d008      	beq.n	80078bc <err_tcp+0x1c4>
 80078aa:	4b06      	ldr	r3, [pc, #24]	; (80078c4 <err_tcp+0x1cc>)
 80078ac:	f240 12bd 	movw	r2, #445	; 0x1bd
 80078b0:	4909      	ldr	r1, [pc, #36]	; (80078d8 <err_tcp+0x1e0>)
 80078b2:	4806      	ldr	r0, [pc, #24]	; (80078cc <err_tcp+0x1d4>)
 80078b4:	f00e fa8e 	bl	8015dd4 <iprintf>
  }
}
 80078b8:	e000      	b.n	80078bc <err_tcp+0x1c4>
      (old_state == NETCONN_CONNECT)) {
 80078ba:	bf00      	nop
}
 80078bc:	bf00      	nop
 80078be:	3728      	adds	r7, #40	; 0x28
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	08017fa4 	.word	0x08017fa4
 80078c8:	080180c8 	.word	0x080180c8
 80078cc:	08017ffc 	.word	0x08017ffc
 80078d0:	080180d8 	.word	0x080180d8
 80078d4:	080180f4 	.word	0x080180f4
 80078d8:	08018110 	.word	0x08018110

080078dc <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 80078ea:	6879      	ldr	r1, [r7, #4]
 80078ec:	68f8      	ldr	r0, [r7, #12]
 80078ee:	f006 fb47 	bl	800df80 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 80078f2:	490a      	ldr	r1, [pc, #40]	; (800791c <setup_tcp+0x40>)
 80078f4:	68f8      	ldr	r0, [r7, #12]
 80078f6:	f006 fb55 	bl	800dfa4 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 80078fa:	4909      	ldr	r1, [pc, #36]	; (8007920 <setup_tcp+0x44>)
 80078fc:	68f8      	ldr	r0, [r7, #12]
 80078fe:	f006 fb73 	bl	800dfe8 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8007902:	2202      	movs	r2, #2
 8007904:	4907      	ldr	r1, [pc, #28]	; (8007924 <setup_tcp+0x48>)
 8007906:	68f8      	ldr	r0, [r7, #12]
 8007908:	f006 fbc8 	bl	800e09c <tcp_poll>
  tcp_err(pcb, err_tcp);
 800790c:	4906      	ldr	r1, [pc, #24]	; (8007928 <setup_tcp+0x4c>)
 800790e:	68f8      	ldr	r0, [r7, #12]
 8007910:	f006 fb8a 	bl	800e028 <tcp_err>
}
 8007914:	bf00      	nop
 8007916:	3710      	adds	r7, #16
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}
 800791c:	0800746d 	.word	0x0800746d
 8007920:	0800764d 	.word	0x0800764d
 8007924:	0800757d 	.word	0x0800757d
 8007928:	080076f9 	.word	0x080076f9

0800792c <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b088      	sub	sp, #32
 8007930:	af00      	add	r7, sp, #0
 8007932:	60f8      	str	r0, [r7, #12]
 8007934:	60b9      	str	r1, [r7, #8]
 8007936:	4613      	mov	r3, r2
 8007938:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 800793e:	69fb      	ldr	r3, [r7, #28]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d102      	bne.n	800794a <accept_function+0x1e>
    return ERR_VAL;
 8007944:	f06f 0305 	mvn.w	r3, #5
 8007948:	e08d      	b.n	8007a66 <accept_function+0x13a>
  }
  if (!sys_mbox_valid(&conn->acceptmbox)) {
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3314      	adds	r3, #20
 800794e:	4618      	mov	r0, r3
 8007950:	f00b f8ea 	bl	8012b28 <sys_mbox_valid>
 8007954:	4603      	mov	r3, r0
 8007956:	2b00      	cmp	r3, #0
 8007958:	d102      	bne.n	8007960 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 800795a:	f06f 0305 	mvn.w	r3, #5
 800795e:	e082      	b.n	8007a66 <accept_function+0x13a>
  }

  if (newpcb == NULL) {
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d115      	bne.n	8007992 <accept_function+0x66>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 8007966:	69fb      	ldr	r3, [r7, #28]
 8007968:	3314      	adds	r3, #20
 800796a:	4941      	ldr	r1, [pc, #260]	; (8007a70 <accept_function+0x144>)
 800796c:	4618      	mov	r0, r3
 800796e:	f00b f866 	bl	8012a3e <sys_mbox_trypost>
 8007972:	4603      	mov	r3, r0
 8007974:	2b00      	cmp	r3, #0
 8007976:	d109      	bne.n	800798c <accept_function+0x60>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800797c:	2b00      	cmp	r3, #0
 800797e:	d005      	beq.n	800798c <accept_function+0x60>
 8007980:	69fb      	ldr	r3, [r7, #28]
 8007982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007984:	2200      	movs	r2, #0
 8007986:	2100      	movs	r1, #0
 8007988:	69f8      	ldr	r0, [r7, #28]
 800798a:	4798      	blx	r3
    }
    return ERR_VAL;
 800798c:	f06f 0305 	mvn.w	r3, #5
 8007990:	e069      	b.n	8007a66 <accept_function+0x13a>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->tate: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8007992:	69fb      	ldr	r3, [r7, #28]
 8007994:	781a      	ldrb	r2, [r3, #0]
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800799a:	4619      	mov	r1, r3
 800799c:	4610      	mov	r0, r2
 800799e:	f000 f8ff 	bl	8007ba0 <netconn_alloc>
 80079a2:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 80079a4:	69bb      	ldr	r3, [r7, #24]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d115      	bne.n	80079d6 <accept_function+0xaa>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, &netconn_aborted) == ERR_OK) {
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	3314      	adds	r3, #20
 80079ae:	4930      	ldr	r1, [pc, #192]	; (8007a70 <accept_function+0x144>)
 80079b0:	4618      	mov	r0, r3
 80079b2:	f00b f844 	bl	8012a3e <sys_mbox_trypost>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d109      	bne.n	80079d0 <accept_function+0xa4>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80079bc:	69fb      	ldr	r3, [r7, #28]
 80079be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d005      	beq.n	80079d0 <accept_function+0xa4>
 80079c4:	69fb      	ldr	r3, [r7, #28]
 80079c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c8:	2200      	movs	r2, #0
 80079ca:	2100      	movs	r1, #0
 80079cc:	69f8      	ldr	r0, [r7, #28]
 80079ce:	4798      	blx	r3
    }
    return ERR_MEM;
 80079d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80079d4:	e047      	b.n	8007a66 <accept_function+0x13a>
  }
  newconn->pcb.tcp = newpcb;
 80079d6:	69bb      	ldr	r3, [r7, #24]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 80079dc:	69b8      	ldr	r0, [r7, #24]
 80079de:	f7ff ff7d 	bl	80078dc <setup_tcp>
  /* no protection: when creating the pcb, the netconn is not yet known
     to the application thread */
  newconn->last_err = err;
 80079e2:	69bb      	ldr	r3, [r7, #24]
 80079e4:	79fa      	ldrb	r2, [r7, #7]
 80079e6:	721a      	strb	r2, [r3, #8]

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 80079e8:	69fb      	ldr	r3, [r7, #28]
 80079ea:	3314      	adds	r3, #20
 80079ec:	69b9      	ldr	r1, [r7, #24]
 80079ee:	4618      	mov	r0, r3
 80079f0:	f00b f825 	bl	8012a3e <sys_mbox_trypost>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d02a      	beq.n	8007a50 <accept_function+0x124>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb* pcb = newconn->pcb.tcp;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	685b      	ldr	r3, [r3, #4]
 80079fe:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8007a00:	2100      	movs	r1, #0
 8007a02:	6978      	ldr	r0, [r7, #20]
 8007a04:	f006 fabc 	bl	800df80 <tcp_arg>
    tcp_recv(pcb, NULL);
 8007a08:	2100      	movs	r1, #0
 8007a0a:	6978      	ldr	r0, [r7, #20]
 8007a0c:	f006 faca 	bl	800dfa4 <tcp_recv>
    tcp_sent(pcb, NULL);
 8007a10:	2100      	movs	r1, #0
 8007a12:	6978      	ldr	r0, [r7, #20]
 8007a14:	f006 fae8 	bl	800dfe8 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2100      	movs	r1, #0
 8007a1c:	6978      	ldr	r0, [r7, #20]
 8007a1e:	f006 fb3d 	bl	800e09c <tcp_poll>
    tcp_err(pcb, NULL);
 8007a22:	2100      	movs	r1, #0
 8007a24:	6978      	ldr	r0, [r7, #20]
 8007a26:	f006 faff 	bl	800e028 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8007a2a:	69bb      	ldr	r3, [r7, #24]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	3310      	adds	r3, #16
 8007a34:	4618      	mov	r0, r3
 8007a36:	f00a ffdb 	bl	80129f0 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	3310      	adds	r3, #16
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f00b f883 	bl	8012b4a <sys_mbox_set_invalid>
    netconn_free(newconn);
 8007a44:	69b8      	ldr	r0, [r7, #24]
 8007a46:	f000 f91f 	bl	8007c88 <netconn_free>
    return ERR_MEM;
 8007a4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a4e:	e00a      	b.n	8007a66 <accept_function+0x13a>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8007a50:	69fb      	ldr	r3, [r7, #28]
 8007a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d005      	beq.n	8007a64 <accept_function+0x138>
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5c:	2200      	movs	r2, #0
 8007a5e:	2100      	movs	r1, #0
 8007a60:	69f8      	ldr	r0, [r7, #28]
 8007a62:	4798      	blx	r3
  }

  return ERR_OK;
 8007a64:	2300      	movs	r3, #0
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}
 8007a6e:	bf00      	nop
 8007a70:	200041e4 	.word	0x200041e4

08007a74 <pcb_new>:
 *
 * @param msg the api_msg_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8007a74:	b590      	push	{r4, r7, lr}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8007a7c:	2300      	movs	r3, #0
 8007a7e:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d006      	beq.n	8007a98 <pcb_new+0x24>
 8007a8a:	4b2b      	ldr	r3, [pc, #172]	; (8007b38 <pcb_new+0xc4>)
 8007a8c:	f44f 720b 	mov.w	r2, #556	; 0x22c
 8007a90:	492a      	ldr	r1, [pc, #168]	; (8007b3c <pcb_new+0xc8>)
 8007a92:	482b      	ldr	r0, [pc, #172]	; (8007b40 <pcb_new+0xcc>)
 8007a94:	f00e f99e 	bl	8015dd4 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif
  
  /* Allocate a PCB for this connection */
  switch(NETCONNTYPE_GROUP(msg->conn->type)) {
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	781b      	ldrb	r3, [r3, #0]
 8007a9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa2:	2b10      	cmp	r3, #16
 8007aa4:	d022      	beq.n	8007aec <pcb_new+0x78>
 8007aa6:	2b20      	cmp	r3, #32
 8007aa8:	d133      	bne.n	8007b12 <pcb_new+0x9e>
    }
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681c      	ldr	r4, [r3, #0]
 8007aae:	7bfb      	ldrb	r3, [r7, #15]
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f00a fe68 	bl	8012786 <udp_new_ip_type>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.udp != NULL) {
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d02a      	beq.n	8007b1a <pcb_new+0xa6>
#if LWIP_UDPLITE
      if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
      }
#endif /* LWIP_UDPLITE */
      if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	2b22      	cmp	r3, #34	; 0x22
 8007acc:	d104      	bne.n	8007ad8 <pcb_new+0x64>
        udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	685b      	ldr	r3, [r3, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	741a      	strb	r2, [r3, #16]
      }
      udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	6858      	ldr	r0, [r3, #4]
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	4917      	ldr	r1, [pc, #92]	; (8007b44 <pcb_new+0xd0>)
 8007ae6:	f00a fdf3 	bl	80126d0 <udp_recv>
    }
    break;
 8007aea:	e016      	b.n	8007b1a <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681c      	ldr	r4, [r3, #0]
 8007af0:	7bfb      	ldrb	r3, [r7, #15]
 8007af2:	4618      	mov	r0, r3
 8007af4:	f006 fa36 	bl	800df64 <tcp_new_ip_type>
 8007af8:	4603      	mov	r3, r0
 8007afa:	6063      	str	r3, [r4, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00b      	beq.n	8007b1e <pcb_new+0xaa>
      setup_tcp(msg->conn);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7ff fee6 	bl	80078dc <setup_tcp>
    }
    break;
 8007b10:	e005      	b.n	8007b1e <pcb_new+0xaa>
#endif /* LWIP_TCP */
  default:
    /* Unsupported netconn type, e.g. protocol disabled */
    msg->err = ERR_VAL;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	22fa      	movs	r2, #250	; 0xfa
 8007b16:	711a      	strb	r2, [r3, #4]
    return;
 8007b18:	e00a      	b.n	8007b30 <pcb_new+0xbc>
    break;
 8007b1a:	bf00      	nop
 8007b1c:	e000      	b.n	8007b20 <pcb_new+0xac>
    break;
 8007b1e:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d102      	bne.n	8007b30 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	22ff      	movs	r2, #255	; 0xff
 8007b2e:	711a      	strb	r2, [r3, #4]
  }
}
 8007b30:	3714      	adds	r7, #20
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd90      	pop	{r4, r7, pc}
 8007b36:	bf00      	nop
 8007b38:	08017fa4 	.word	0x08017fa4
 8007b3c:	0801812c 	.word	0x0801812c
 8007b40:	08017ffc 	.word	0x08017ffc
 8007b44:	08007371 	.word	0x08007371

08007b48 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8007b48:	b580      	push	{r7, lr}
 8007b4a:	b084      	sub	sp, #16
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2200      	movs	r2, #0
 8007b58:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685b      	ldr	r3, [r3, #4]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d102      	bne.n	8007b6a <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8007b64:	68f8      	ldr	r0, [r7, #12]
 8007b66:	f7ff ff85 	bl	8007a74 <pcb_new>
  }
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
 8007b6a:	68fb      	ldr	r3, [r7, #12]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d012      	beq.n	8007b98 <lwip_netconn_do_newconn+0x50>
 8007b72:	f00b f8e9 	bl	8012d48 <sys_arch_protect>
 8007b76:	60b8      	str	r0, [r7, #8]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8007b80:	f113 0f0c 	cmn.w	r3, #12
 8007b84:	db05      	blt.n	8007b92 <lwip_netconn_do_newconn+0x4a>
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	68fa      	ldr	r2, [r7, #12]
 8007b8c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8007b90:	721a      	strb	r2, [r3, #8]
 8007b92:	68b8      	ldr	r0, [r7, #8]
 8007b94:	f00b f8e6 	bl	8012d64 <sys_arch_unprotect>
}
 8007b98:	bf00      	nop
 8007b9a:	3710      	adds	r7, #16
 8007b9c:	46bd      	mov	sp, r7
 8007b9e:	bd80      	pop	{r7, pc}

08007ba0 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn*
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8007ba0:	b580      	push	{r7, lr}
 8007ba2:	b084      	sub	sp, #16
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	6039      	str	r1, [r7, #0]
 8007baa:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8007bac:	2007      	movs	r0, #7
 8007bae:	f003 ff37 	bl	800ba20 <memp_malloc>
 8007bb2:	60b8      	str	r0, [r7, #8]
  if (conn == NULL) {
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d101      	bne.n	8007bbe <netconn_alloc+0x1e>
    return NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	e059      	b.n	8007c72 <netconn_alloc+0xd2>
  }

  conn->last_err = ERR_OK;
 8007bbe:	68bb      	ldr	r3, [r7, #8]
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	79fa      	ldrb	r2, [r7, #7]
 8007bc8:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8007bca:	68bb      	ldr	r3, [r7, #8]
 8007bcc:	2200      	movs	r2, #0
 8007bce:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch(NETCONNTYPE_GROUP(t)) {
 8007bd0:	79fb      	ldrb	r3, [r7, #7]
 8007bd2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007bd6:	2b10      	cmp	r3, #16
 8007bd8:	d004      	beq.n	8007be4 <netconn_alloc+0x44>
 8007bda:	2b20      	cmp	r3, #32
 8007bdc:	d105      	bne.n	8007bea <netconn_alloc+0x4a>
    size = DEFAULT_RAW_RECVMBOX_SIZE;
    break;
#endif /* LWIP_RAW */
#if LWIP_UDP
  case NETCONN_UDP:
    size = DEFAULT_UDP_RECVMBOX_SIZE;
 8007bde:	2306      	movs	r3, #6
 8007be0:	60fb      	str	r3, [r7, #12]
    break;
 8007be2:	e00a      	b.n	8007bfa <netconn_alloc+0x5a>
#endif /* LWIP_UDP */
#if LWIP_TCP
  case NETCONN_TCP:
    size = DEFAULT_TCP_RECVMBOX_SIZE;
 8007be4:	2306      	movs	r3, #6
 8007be6:	60fb      	str	r3, [r7, #12]
    break;
 8007be8:	e007      	b.n	8007bfa <netconn_alloc+0x5a>
#endif /* LWIP_TCP */
  default:
    LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8007bea:	4b24      	ldr	r3, [pc, #144]	; (8007c7c <netconn_alloc+0xdc>)
 8007bec:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8007bf0:	4923      	ldr	r1, [pc, #140]	; (8007c80 <netconn_alloc+0xe0>)
 8007bf2:	4824      	ldr	r0, [pc, #144]	; (8007c84 <netconn_alloc+0xe4>)
 8007bf4:	f00e f8ee 	bl	8015dd4 <iprintf>
    goto free_and_return;
 8007bf8:	e036      	b.n	8007c68 <netconn_alloc+0xc8>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	3310      	adds	r3, #16
 8007bfe:	68f9      	ldr	r1, [r7, #12]
 8007c00:	4618      	mov	r0, r3
 8007c02:	f00a fed7 	bl	80129b4 <sys_mbox_new>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d12c      	bne.n	8007c66 <netconn_alloc+0xc6>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	2100      	movs	r1, #0
 8007c12:	4618      	mov	r0, r3
 8007c14:	f00a ffa6 	bl	8012b64 <sys_sem_new>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d005      	beq.n	8007c2a <netconn_alloc+0x8a>
    sys_mbox_free(&conn->recvmbox);
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	3310      	adds	r3, #16
 8007c22:	4618      	mov	r0, r3
 8007c24:	f00a fee4 	bl	80129f0 <sys_mbox_free>
    goto free_and_return;
 8007c28:	e01e      	b.n	8007c68 <netconn_alloc+0xc8>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	3314      	adds	r3, #20
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f00a ff8b 	bl	8012b4a <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8007c34:	68bb      	ldr	r3, [r7, #8]
 8007c36:	2200      	movs	r2, #0
 8007c38:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c40:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	683a      	ldr	r2, [r7, #0]
 8007c46:	62da      	str	r2, [r3, #44]	; 0x2c
#if LWIP_TCP
  conn->current_msg  = NULL;
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	629a      	str	r2, [r3, #40]	; 0x28
  conn->write_offset = 0;
 8007c4e:	68bb      	ldr	r3, [r7, #8]
 8007c50:	2200      	movs	r2, #0
 8007c52:	625a      	str	r2, [r3, #36]	; 0x24
#endif /* LWIP_TCP */
#if LWIP_SO_SNDTIMEO
  conn->send_timeout = 0;
#endif /* LWIP_SO_SNDTIMEO */
#if LWIP_SO_RCVTIMEO
  conn->recv_timeout = 0;
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	2200      	movs	r2, #0
 8007c58:	61da      	str	r2, [r3, #28]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = 0;
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f883 2020 	strb.w	r2, [r3, #32]
  return conn;
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	e005      	b.n	8007c72 <netconn_alloc+0xd2>
    goto free_and_return;
 8007c66:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 8007c68:	68b9      	ldr	r1, [r7, #8]
 8007c6a:	2007      	movs	r0, #7
 8007c6c:	f003 ff2a 	bl	800bac4 <memp_free>
  return NULL;
 8007c70:	2300      	movs	r3, #0
}
 8007c72:	4618      	mov	r0, r3
 8007c74:	3710      	adds	r7, #16
 8007c76:	46bd      	mov	sp, r7
 8007c78:	bd80      	pop	{r7, pc}
 8007c7a:	bf00      	nop
 8007c7c:	08017fa4 	.word	0x08017fa4
 8007c80:	0801814c 	.word	0x0801814c
 8007c84:	08017ffc 	.word	0x08017ffc

08007c88 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b082      	sub	sp, #8
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d006      	beq.n	8007ca6 <netconn_free+0x1e>
 8007c98:	4b1b      	ldr	r3, [pc, #108]	; (8007d08 <netconn_free+0x80>)
 8007c9a:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8007c9e:	491b      	ldr	r1, [pc, #108]	; (8007d0c <netconn_free+0x84>)
 8007ca0:	481b      	ldr	r0, [pc, #108]	; (8007d10 <netconn_free+0x88>)
 8007ca2:	f00e f897 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3310      	adds	r3, #16
 8007caa:	4618      	mov	r0, r3
 8007cac:	f00a ff3c 	bl	8012b28 <sys_mbox_valid>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d006      	beq.n	8007cc4 <netconn_free+0x3c>
 8007cb6:	4b14      	ldr	r3, [pc, #80]	; (8007d08 <netconn_free+0x80>)
 8007cb8:	f240 22e2 	movw	r2, #738	; 0x2e2
 8007cbc:	4915      	ldr	r1, [pc, #84]	; (8007d14 <netconn_free+0x8c>)
 8007cbe:	4814      	ldr	r0, [pc, #80]	; (8007d10 <netconn_free+0x88>)
 8007cc0:	f00e f888 	bl	8015dd4 <iprintf>
    !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	3314      	adds	r3, #20
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f00a ff2d 	bl	8012b28 <sys_mbox_valid>
 8007cce:	4603      	mov	r3, r0
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d006      	beq.n	8007ce2 <netconn_free+0x5a>
 8007cd4:	4b0c      	ldr	r3, [pc, #48]	; (8007d08 <netconn_free+0x80>)
 8007cd6:	f240 22e5 	movw	r2, #741	; 0x2e5
 8007cda:	490f      	ldr	r1, [pc, #60]	; (8007d18 <netconn_free+0x90>)
 8007cdc:	480c      	ldr	r0, [pc, #48]	; (8007d10 <netconn_free+0x88>)
 8007cde:	f00e f879 	bl	8015dd4 <iprintf>
    !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	330c      	adds	r3, #12
 8007ce6:	4618      	mov	r0, r3
 8007ce8:	f00a ffa0 	bl	8012c2c <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	330c      	adds	r3, #12
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	f00a ffb9 	bl	8012c68 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 8007cf6:	6879      	ldr	r1, [r7, #4]
 8007cf8:	2007      	movs	r0, #7
 8007cfa:	f003 fee3 	bl	800bac4 <memp_free>
}
 8007cfe:	bf00      	nop
 8007d00:	3708      	adds	r7, #8
 8007d02:	46bd      	mov	sp, r7
 8007d04:	bd80      	pop	{r7, pc}
 8007d06:	bf00      	nop
 8007d08:	08017fa4 	.word	0x08017fa4
 8007d0c:	08018174 	.word	0x08018174
 8007d10:	08017ffc 	.word	0x08017ffc
 8007d14:	080181a4 	.word	0x080181a4
 8007d18:	080181e0 	.word	0x080181e0

08007d1c <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b086      	sub	sp, #24
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
#endif /* LWIP_TCP */

  /* This runs in tcpip_thread, so we don't need to lock against rx packets */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	3310      	adds	r3, #16
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f00a fefd 	bl	8012b28 <sys_mbox_valid>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d035      	beq.n	8007da0 <netconn_drain+0x84>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007d34:	e01e      	b.n	8007d74 <netconn_drain+0x58>
#if LWIP_TCP
      if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	781b      	ldrb	r3, [r3, #0]
 8007d3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007d3e:	2b10      	cmp	r3, #16
 8007d40:	d114      	bne.n	8007d6c <netconn_drain+0x50>
        if (mem != NULL) {
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d015      	beq.n	8007d74 <netconn_drain+0x58>
          p = (struct pbuf*)mem;
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	617b      	str	r3, [r7, #20]
          /* pcb might be set to NULL already by err_tcp() */
          if (conn->pcb.tcp != NULL) {
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d007      	beq.n	8007d64 <netconn_drain+0x48>
            tcp_recved(conn->pcb.tcp, p->tot_len);
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	685a      	ldr	r2, [r3, #4]
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	891b      	ldrh	r3, [r3, #8]
 8007d5c:	4619      	mov	r1, r3
 8007d5e:	4610      	mov	r0, r2
 8007d60:	f005 fb1c 	bl	800d39c <tcp_recved>
          }
          pbuf_free(p);
 8007d64:	6978      	ldr	r0, [r7, #20]
 8007d66:	f004 fc07 	bl	800c578 <pbuf_free>
 8007d6a:	e003      	b.n	8007d74 <netconn_drain+0x58>
        }
      } else
#endif /* LWIP_TCP */
      {
        netbuf_delete((struct netbuf *)mem);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f000 ff3c 	bl	8008bec <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3310      	adds	r3, #16
 8007d78:	f107 020c 	add.w	r2, r7, #12
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f00a feb6 	bl	8012af0 <sys_arch_mbox_tryfetch>
 8007d84:	4603      	mov	r3, r0
 8007d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007d8a:	d1d4      	bne.n	8007d36 <netconn_drain+0x1a>
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	3310      	adds	r3, #16
 8007d90:	4618      	mov	r0, r3
 8007d92:	f00a fe2d 	bl	80129f0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3310      	adds	r3, #16
 8007d9a:	4618      	mov	r0, r3
 8007d9c:	f00a fed5 	bl	8012b4a <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	3314      	adds	r3, #20
 8007da4:	4618      	mov	r0, r3
 8007da6:	f00a febf 	bl	8012b28 <sys_mbox_valid>
 8007daa:	4603      	mov	r3, r0
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d02e      	beq.n	8007e0e <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007db0:	e017      	b.n	8007de2 <netconn_drain+0xc6>
      if (mem != &netconn_aborted) {
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	4a18      	ldr	r2, [pc, #96]	; (8007e18 <netconn_drain+0xfc>)
 8007db6:	4293      	cmp	r3, r2
 8007db8:	d013      	beq.n	8007de2 <netconn_drain+0xc6>
        struct netconn *newconn = (struct netconn *)mem;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	613b      	str	r3, [r7, #16]
        /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
        /* pcb might be set to NULL already by err_tcp() */
        /* drain recvmbox */
        netconn_drain(newconn);
 8007dbe:	6938      	ldr	r0, [r7, #16]
 8007dc0:	f7ff ffac 	bl	8007d1c <netconn_drain>
        if (newconn->pcb.tcp != NULL) {
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d007      	beq.n	8007ddc <netconn_drain+0xc0>
          tcp_abort(newconn->pcb.tcp);
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	685b      	ldr	r3, [r3, #4]
 8007dd0:	4618      	mov	r0, r3
 8007dd2:	f005 f917 	bl	800d004 <tcp_abort>
          newconn->pcb.tcp = NULL;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	2200      	movs	r2, #0
 8007dda:	605a      	str	r2, [r3, #4]
        }
        netconn_free(newconn);
 8007ddc:	6938      	ldr	r0, [r7, #16]
 8007dde:	f7ff ff53 	bl	8007c88 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	3314      	adds	r3, #20
 8007de6:	f107 020c 	add.w	r2, r7, #12
 8007dea:	4611      	mov	r1, r2
 8007dec:	4618      	mov	r0, r3
 8007dee:	f00a fe7f 	bl	8012af0 <sys_arch_mbox_tryfetch>
 8007df2:	4603      	mov	r3, r0
 8007df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007df8:	d1db      	bne.n	8007db2 <netconn_drain+0x96>
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	3314      	adds	r3, #20
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f00a fdf6 	bl	80129f0 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	3314      	adds	r3, #20
 8007e08:	4618      	mov	r0, r3
 8007e0a:	f00a fe9e 	bl	8012b4a <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 8007e0e:	bf00      	nop
 8007e10:	3718      	adds	r7, #24
 8007e12:	46bd      	mov	sp, r7
 8007e14:	bd80      	pop	{r7, pc}
 8007e16:	bf00      	nop
 8007e18:	200041e4 	.word	0x200041e4

08007e1c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8007e1c:	b580      	push	{r7, lr}
 8007e1e:	b088      	sub	sp, #32
 8007e20:	af00      	add	r7, sp, #0
 8007e22:	6078      	str	r0, [r7, #4]
 8007e24:	460b      	mov	r3, r1
 8007e26:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, close;
  u8_t close_finished = 0;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	777b      	strb	r3, [r7, #29]
  struct tcp_pcb* tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d106      	bne.n	8007e40 <lwip_netconn_do_close_internal+0x24>
 8007e32:	4baa      	ldr	r3, [pc, #680]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8007e34:	f240 3243 	movw	r2, #835	; 0x343
 8007e38:	49a9      	ldr	r1, [pc, #676]	; (80080e0 <lwip_netconn_do_close_internal+0x2c4>)
 8007e3a:	48aa      	ldr	r0, [pc, #680]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 8007e3c:	f00d ffca 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	781b      	ldrb	r3, [r3, #0]
 8007e44:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007e48:	2b10      	cmp	r3, #16
 8007e4a:	d006      	beq.n	8007e5a <lwip_netconn_do_close_internal+0x3e>
 8007e4c:	4ba3      	ldr	r3, [pc, #652]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8007e4e:	f44f 7251 	mov.w	r2, #836	; 0x344
 8007e52:	49a5      	ldr	r1, [pc, #660]	; (80080e8 <lwip_netconn_do_close_internal+0x2cc>)
 8007e54:	48a3      	ldr	r0, [pc, #652]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 8007e56:	f00d ffbd 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	785b      	ldrb	r3, [r3, #1]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d006      	beq.n	8007e70 <lwip_netconn_do_close_internal+0x54>
 8007e62:	4b9e      	ldr	r3, [pc, #632]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8007e64:	f240 3245 	movw	r2, #837	; 0x345
 8007e68:	49a0      	ldr	r1, [pc, #640]	; (80080ec <lwip_netconn_do_close_internal+0x2d0>)
 8007e6a:	489e      	ldr	r0, [pc, #632]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 8007e6c:	f00d ffb2 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d106      	bne.n	8007e86 <lwip_netconn_do_close_internal+0x6a>
 8007e78:	4b98      	ldr	r3, [pc, #608]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8007e7a:	f240 3246 	movw	r2, #838	; 0x346
 8007e7e:	499c      	ldr	r1, [pc, #624]	; (80080f0 <lwip_netconn_do_close_internal+0x2d4>)
 8007e80:	4898      	ldr	r0, [pc, #608]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 8007e82:	f00d ffa7 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d106      	bne.n	8007e9c <lwip_netconn_do_close_internal+0x80>
 8007e8e:	4b93      	ldr	r3, [pc, #588]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8007e90:	f240 3247 	movw	r2, #839	; 0x347
 8007e94:	4997      	ldr	r1, [pc, #604]	; (80080f4 <lwip_netconn_do_close_internal+0x2d8>)
 8007e96:	4893      	ldr	r0, [pc, #588]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 8007e98:	f00d ff9c 	bl	8015dd4 <iprintf>

  tpcb = conn->pcb.tcp;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	685b      	ldr	r3, [r3, #4]
 8007ea0:	61bb      	str	r3, [r7, #24]
  shut = conn->current_msg->msg.sd.shut;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ea6:	7a1b      	ldrb	r3, [r3, #8]
 8007ea8:	75fb      	strb	r3, [r7, #23]
  shut_rx = shut & NETCONN_SHUT_RD;
 8007eaa:	7dfb      	ldrb	r3, [r7, #23]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	75bb      	strb	r3, [r7, #22]
  shut_tx = shut & NETCONN_SHUT_WR;
 8007eb2:	7dfb      	ldrb	r3, [r7, #23]
 8007eb4:	f003 0302 	and.w	r3, r3, #2
 8007eb8:	757b      	strb	r3, [r7, #21]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8007eba:	7dfb      	ldrb	r3, [r7, #23]
 8007ebc:	2b03      	cmp	r3, #3
 8007ebe:	d102      	bne.n	8007ec6 <lwip_netconn_do_close_internal+0xaa>
    close = 1;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	77bb      	strb	r3, [r7, #30]
 8007ec4:	e01f      	b.n	8007f06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8007ec6:	7dbb      	ldrb	r3, [r7, #22]
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d00e      	beq.n	8007eea <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 8007ed0:	2b05      	cmp	r3, #5
 8007ed2:	d007      	beq.n	8007ee4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8007ed8:	2b06      	cmp	r3, #6
 8007eda:	d003      	beq.n	8007ee4 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8007edc:	69bb      	ldr	r3, [r7, #24]
 8007ede:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d102      	bne.n	8007eea <lwip_netconn_do_close_internal+0xce>
    close = 1;
 8007ee4:	2301      	movs	r3, #1
 8007ee6:	77bb      	strb	r3, [r7, #30]
 8007ee8:	e00d      	b.n	8007f06 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8007eea:	7d7b      	ldrb	r3, [r7, #21]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d008      	beq.n	8007f02 <lwip_netconn_do_close_internal+0xe6>
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	7e9b      	ldrb	r3, [r3, #26]
 8007ef4:	f003 0310 	and.w	r3, r3, #16
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d002      	beq.n	8007f02 <lwip_netconn_do_close_internal+0xe6>
    close = 1;
 8007efc:	2301      	movs	r3, #1
 8007efe:	77bb      	strb	r3, [r7, #30]
 8007f00:	e001      	b.n	8007f06 <lwip_netconn_do_close_internal+0xea>
  } else {
    close = 0;
 8007f02:	2300      	movs	r3, #0
 8007f04:	77bb      	strb	r3, [r7, #30]
  }

  /* Set back some callback pointers */
  if (close) {
 8007f06:	7fbb      	ldrb	r3, [r7, #30]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d003      	beq.n	8007f14 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 8007f0c:	2100      	movs	r1, #0
 8007f0e:	69b8      	ldr	r0, [r7, #24]
 8007f10:	f006 f836 	bl	800df80 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 8007f14:	69bb      	ldr	r3, [r7, #24]
 8007f16:	7d1b      	ldrb	r3, [r3, #20]
 8007f18:	2b01      	cmp	r3, #1
 8007f1a:	d104      	bne.n	8007f26 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 8007f1c:	2100      	movs	r1, #0
 8007f1e:	69b8      	ldr	r0, [r7, #24]
 8007f20:	f006 f8a4 	bl	800e06c <tcp_accept>
 8007f24:	e01d      	b.n	8007f62 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 8007f26:	7dbb      	ldrb	r3, [r7, #22]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d007      	beq.n	8007f3c <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 8007f2c:	2100      	movs	r1, #0
 8007f2e:	69b8      	ldr	r0, [r7, #24]
 8007f30:	f006 f838 	bl	800dfa4 <tcp_recv>
      tcp_accept(tpcb, NULL);
 8007f34:	2100      	movs	r1, #0
 8007f36:	69b8      	ldr	r0, [r7, #24]
 8007f38:	f006 f898 	bl	800e06c <tcp_accept>
    }
    if (shut_tx) {
 8007f3c:	7d7b      	ldrb	r3, [r7, #21]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d003      	beq.n	8007f4a <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 8007f42:	2100      	movs	r1, #0
 8007f44:	69b8      	ldr	r0, [r7, #24]
 8007f46:	f006 f84f 	bl	800dfe8 <tcp_sent>
    }
    if (close) {
 8007f4a:	7fbb      	ldrb	r3, [r7, #30]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d008      	beq.n	8007f62 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 8007f50:	2200      	movs	r2, #0
 8007f52:	2100      	movs	r1, #0
 8007f54:	69b8      	ldr	r0, [r7, #24]
 8007f56:	f006 f8a1 	bl	800e09c <tcp_poll>
      tcp_err(tpcb, NULL);
 8007f5a:	2100      	movs	r1, #0
 8007f5c:	69b8      	ldr	r0, [r7, #24]
 8007f5e:	f006 f863 	bl	800e028 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (close) {
 8007f62:	7fbb      	ldrb	r3, [r7, #30]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d005      	beq.n	8007f74 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8007f68:	69b8      	ldr	r0, [r7, #24]
 8007f6a:	f004 ff39 	bl	800cde0 <tcp_close>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	77fb      	strb	r3, [r7, #31]
 8007f72:	e007      	b.n	8007f84 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8007f74:	7dbb      	ldrb	r3, [r7, #22]
 8007f76:	7d7a      	ldrb	r2, [r7, #21]
 8007f78:	4619      	mov	r1, r3
 8007f7a:	69b8      	ldr	r0, [r7, #24]
 8007f7c:	f004 ff48 	bl	800ce10 <tcp_shutdown>
 8007f80:	4603      	mov	r3, r0
 8007f82:	77fb      	strb	r3, [r7, #31]
  }
  if (err == ERR_OK) {
 8007f84:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d102      	bne.n	8007f92 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	777b      	strb	r3, [r7, #29]
 8007f90:	e016      	b.n	8007fc0 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 8007f92:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007f96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f9a:	d10f      	bne.n	8007fbc <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fa0:	7a5b      	ldrb	r3, [r3, #9]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10c      	bne.n	8007fc0 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	777b      	strb	r3, [r7, #29]
        if (close) {
 8007faa:	7fbb      	ldrb	r3, [r7, #30]
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d007      	beq.n	8007fc0 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 8007fb0:	69b8      	ldr	r0, [r7, #24]
 8007fb2:	f005 f827 	bl	800d004 <tcp_abort>
          err = ERR_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	77fb      	strb	r3, [r7, #31]
 8007fba:	e001      	b.n	8007fc0 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	777b      	strb	r3, [r7, #29]
    }
  }
  if (close_finished) {
 8007fc0:	7f7b      	ldrb	r3, [r7, #29]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d056      	beq.n	8008074 <lwip_netconn_do_close_internal+0x258>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	330c      	adds	r3, #12
 8007fce:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fd4:	7ffa      	ldrb	r2, [r7, #31]
 8007fd6:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	629a      	str	r2, [r3, #40]	; 0x28
    conn->state = NETCONN_NONE;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8007fe4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d129      	bne.n	8008040 <lwip_netconn_do_close_internal+0x224>
      if (close) {
 8007fec:	7fbb      	ldrb	r3, [r7, #30]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d00c      	beq.n	800800c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d005      	beq.n	800800c <lwip_netconn_do_close_internal+0x1f0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008004:	2200      	movs	r2, #0
 8008006:	2104      	movs	r1, #4
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	4798      	blx	r3
      }
      if (shut_rx) {
 800800c:	7dbb      	ldrb	r3, [r7, #22]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d009      	beq.n	8008026 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d005      	beq.n	8008026 <lwip_netconn_do_close_internal+0x20a>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800801e:	2200      	movs	r2, #0
 8008020:	2100      	movs	r1, #0
 8008022:	6878      	ldr	r0, [r7, #4]
 8008024:	4798      	blx	r3
      }
      if (shut_tx) {
 8008026:	7d7b      	ldrb	r3, [r7, #21]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d009      	beq.n	8008040 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008030:	2b00      	cmp	r3, #0
 8008032:	d005      	beq.n	8008040 <lwip_netconn_do_close_internal+0x224>
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008038:	2200      	movs	r2, #0
 800803a:	2102      	movs	r1, #2
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	4798      	blx	r3
      }
    }
    NETCONN_SET_SAFE_ERR(conn, err);
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00e      	beq.n	8008064 <lwip_netconn_do_close_internal+0x248>
 8008046:	f00a fe7f 	bl	8012d48 <sys_arch_protect>
 800804a:	60f8      	str	r0, [r7, #12]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008052:	f113 0f0c 	cmn.w	r3, #12
 8008056:	db02      	blt.n	800805e <lwip_netconn_do_close_internal+0x242>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	7ffa      	ldrb	r2, [r7, #31]
 800805c:	721a      	strb	r2, [r3, #8]
 800805e:	68f8      	ldr	r0, [r7, #12]
 8008060:	f00a fe80 	bl	8012d64 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d002      	beq.n	8008070 <lwip_netconn_do_close_internal+0x254>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800806a:	6938      	ldr	r0, [r7, #16]
 800806c:	f00a fdd1 	bl	8012c12 <sys_sem_signal>
    }
    return ERR_OK;
 8008070:	2300      	movs	r3, #0
 8008072:	e02e      	b.n	80080d2 <lwip_netconn_do_close_internal+0x2b6>
  }
  if (!close_finished) {
 8008074:	7f7b      	ldrb	r3, [r7, #29]
 8008076:	2b00      	cmp	r3, #0
 8008078:	d11e      	bne.n	80080b8 <lwip_netconn_do_close_internal+0x29c>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800807a:	69bb      	ldr	r3, [r7, #24]
 800807c:	7d1b      	ldrb	r3, [r3, #20]
 800807e:	2b01      	cmp	r3, #1
 8008080:	d106      	bne.n	8008090 <lwip_netconn_do_close_internal+0x274>
 8008082:	4b16      	ldr	r3, [pc, #88]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 8008084:	f240 32e3 	movw	r2, #995	; 0x3e3
 8008088:	491b      	ldr	r1, [pc, #108]	; (80080f8 <lwip_netconn_do_close_internal+0x2dc>)
 800808a:	4816      	ldr	r0, [pc, #88]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 800808c:	f00d fea2 	bl	8015dd4 <iprintf>
    if (shut_tx) {
 8008090:	7d7b      	ldrb	r3, [r7, #21]
 8008092:	2b00      	cmp	r3, #0
 8008094:	d003      	beq.n	800809e <lwip_netconn_do_close_internal+0x282>
      tcp_sent(tpcb, sent_tcp);
 8008096:	4919      	ldr	r1, [pc, #100]	; (80080fc <lwip_netconn_do_close_internal+0x2e0>)
 8008098:	69b8      	ldr	r0, [r7, #24]
 800809a:	f005 ffa5 	bl	800dfe8 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800809e:	2201      	movs	r2, #1
 80080a0:	4917      	ldr	r1, [pc, #92]	; (8008100 <lwip_netconn_do_close_internal+0x2e4>)
 80080a2:	69b8      	ldr	r0, [r7, #24]
 80080a4:	f005 fffa 	bl	800e09c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 80080a8:	4916      	ldr	r1, [pc, #88]	; (8008104 <lwip_netconn_do_close_internal+0x2e8>)
 80080aa:	69b8      	ldr	r0, [r7, #24]
 80080ac:	f005 ffbc 	bl	800e028 <tcp_err>
    tcp_arg(tpcb, conn);
 80080b0:	6879      	ldr	r1, [r7, #4]
 80080b2:	69b8      	ldr	r0, [r7, #24]
 80080b4:	f005 ff64 	bl	800df80 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 80080b8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d106      	bne.n	80080ce <lwip_netconn_do_close_internal+0x2b2>
 80080c0:	4b06      	ldr	r3, [pc, #24]	; (80080dc <lwip_netconn_do_close_internal+0x2c0>)
 80080c2:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80080c6:	4910      	ldr	r1, [pc, #64]	; (8008108 <lwip_netconn_do_close_internal+0x2ec>)
 80080c8:	4806      	ldr	r0, [pc, #24]	; (80080e4 <lwip_netconn_do_close_internal+0x2c8>)
 80080ca:	f00d fe83 	bl	8015dd4 <iprintf>
  return err;
 80080ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80080d2:	4618      	mov	r0, r3
 80080d4:	3720      	adds	r7, #32
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	08017fa4 	.word	0x08017fa4
 80080e0:	0801821c 	.word	0x0801821c
 80080e4:	08017ffc 	.word	0x08017ffc
 80080e8:	0801822c 	.word	0x0801822c
 80080ec:	0801824c 	.word	0x0801824c
 80080f0:	08018270 	.word	0x08018270
 80080f4:	080180d8 	.word	0x080180d8
 80080f8:	08018284 	.word	0x08018284
 80080fc:	0800764d 	.word	0x0800764d
 8008100:	0800757d 	.word	0x0800757d
 8008104:	080076f9 	.word	0x080076f9
 8008108:	080182a8 	.word	0x080182a8

0800810c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b086      	sub	sp, #24
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	617b      	str	r3, [r7, #20]

  enum netconn_state state = msg->conn->state;
 8008118:	697b      	ldr	r3, [r7, #20]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	785b      	ldrb	r3, [r3, #1]
 800811e:	74fb      	strb	r3, [r7, #19]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 8008120:	7cfb      	ldrb	r3, [r7, #19]
 8008122:	2b00      	cmp	r3, #0
 8008124:	d00d      	beq.n	8008142 <lwip_netconn_do_delconn+0x36>
 8008126:	697b      	ldr	r3, [r7, #20]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008130:	2b10      	cmp	r3, #16
 8008132:	d006      	beq.n	8008142 <lwip_netconn_do_delconn+0x36>
 8008134:	4b70      	ldr	r3, [pc, #448]	; (80082f8 <lwip_netconn_do_delconn+0x1ec>)
 8008136:	f240 4201 	movw	r2, #1025	; 0x401
 800813a:	4970      	ldr	r1, [pc, #448]	; (80082fc <lwip_netconn_do_delconn+0x1f0>)
 800813c:	4870      	ldr	r0, [pc, #448]	; (8008300 <lwip_netconn_do_delconn+0x1f4>)
 800813e:	f00d fe49 	bl	8015dd4 <iprintf>
      NETCONN_SET_SAFE_ERR(msg->conn, ERR_CLSD);
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 8008142:	7cfb      	ldrb	r3, [r7, #19]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d005      	beq.n	8008154 <lwip_netconn_do_delconn+0x48>
 8008148:	7cfb      	ldrb	r3, [r7, #19]
 800814a:	2b02      	cmp	r3, #2
 800814c:	d002      	beq.n	8008154 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800814e:	7cfb      	ldrb	r3, [r7, #19]
 8008150:	2b03      	cmp	r3, #3
 8008152:	d10a      	bne.n	800816a <lwip_netconn_do_delconn+0x5e>
       (state != NETCONN_CONNECT)) ||
 8008154:	7cfb      	ldrb	r3, [r7, #19]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d10b      	bne.n	8008172 <lwip_netconn_do_delconn+0x66>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800815a:	697b      	ldr	r3, [r7, #20]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008162:	f003 0304 	and.w	r3, r3, #4
 8008166:	2b00      	cmp	r3, #0
 8008168:	d103      	bne.n	8008172 <lwip_netconn_do_delconn+0x66>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	22fb      	movs	r2, #251	; 0xfb
 800816e:	711a      	strb	r2, [r3, #4]
 8008170:	e09d      	b.n	80082ae <lwip_netconn_do_delconn+0x1a2>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8008172:	7cfb      	ldrb	r3, [r7, #19]
 8008174:	2b03      	cmp	r3, #3
 8008176:	d10e      	bne.n	8008196 <lwip_netconn_do_delconn+0x8a>
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008180:	f003 0304 	and.w	r3, r3, #4
 8008184:	2b00      	cmp	r3, #0
 8008186:	d106      	bne.n	8008196 <lwip_netconn_do_delconn+0x8a>
 8008188:	4b5b      	ldr	r3, [pc, #364]	; (80082f8 <lwip_netconn_do_delconn+0x1ec>)
 800818a:	f240 421f 	movw	r2, #1055	; 0x41f
 800818e:	495d      	ldr	r1, [pc, #372]	; (8008304 <lwip_netconn_do_delconn+0x1f8>)
 8008190:	485b      	ldr	r0, [pc, #364]	; (8008300 <lwip_netconn_do_delconn+0x1f4>)
 8008192:	f00d fe1f 	bl	8015dd4 <iprintf>
      (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	2200      	movs	r2, #0
 800819a:	711a      	strb	r2, [r3, #4]
    /* Drain and delete mboxes */
    netconn_drain(msg->conn);
 800819c:	697b      	ldr	r3, [r7, #20]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f7ff fdbb 	bl	8007d1c <netconn_drain>

    if (msg->conn->pcb.tcp != NULL) {
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d064      	beq.n	800827a <lwip_netconn_do_delconn+0x16e>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 80081b0:	697b      	ldr	r3, [r7, #20]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	781b      	ldrb	r3, [r3, #0]
 80081b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80081ba:	2b10      	cmp	r3, #16
 80081bc:	d00e      	beq.n	80081dc <lwip_netconn_do_delconn+0xd0>
 80081be:	2b20      	cmp	r3, #32
 80081c0:	d000      	beq.n	80081c4 <lwip_netconn_do_delconn+0xb8>
        /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
           the application thread, so we can return at this point! */
        return;
#endif /* LWIP_TCP */
      default:
        break;
 80081c2:	e056      	b.n	8008272 <lwip_netconn_do_delconn+0x166>
        msg->conn->pcb.udp->recv_arg = NULL;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	2200      	movs	r2, #0
 80081cc:	61da      	str	r2, [r3, #28]
        udp_remove(msg->conn->pcb.udp);
 80081ce:	697b      	ldr	r3, [r7, #20]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	4618      	mov	r0, r3
 80081d6:	f00a fa8d 	bl	80126f4 <udp_remove>
        break;
 80081da:	e04a      	b.n	8008272 <lwip_netconn_do_delconn+0x166>
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <lwip_netconn_do_delconn+0xe4>
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d006      	beq.n	80081fe <lwip_netconn_do_delconn+0xf2>
 80081f0:	4b41      	ldr	r3, [pc, #260]	; (80082f8 <lwip_netconn_do_delconn+0x1ec>)
 80081f2:	f240 4235 	movw	r2, #1077	; 0x435
 80081f6:	4944      	ldr	r1, [pc, #272]	; (8008308 <lwip_netconn_do_delconn+0x1fc>)
 80081f8:	4841      	ldr	r0, [pc, #260]	; (8008300 <lwip_netconn_do_delconn+0x1f4>)
 80081fa:	f00d fdeb 	bl	8015dd4 <iprintf>
        msg->conn->state = NETCONN_CLOSE;
 80081fe:	697b      	ldr	r3, [r7, #20]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2204      	movs	r2, #4
 8008204:	705a      	strb	r2, [r3, #1]
        msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8008206:	697b      	ldr	r3, [r7, #20]
 8008208:	2203      	movs	r2, #3
 800820a:	721a      	strb	r2, [r3, #8]
        msg->conn->current_msg = msg;
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	697a      	ldr	r2, [r7, #20]
 8008212:	629a      	str	r2, [r3, #40]	; 0x28
        if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008214:	697b      	ldr	r3, [r7, #20]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2100      	movs	r1, #0
 800821a:	4618      	mov	r0, r3
 800821c:	f7ff fdfe 	bl	8007e1c <lwip_netconn_do_close_internal>
 8008220:	4603      	mov	r3, r0
 8008222:	2b00      	cmp	r3, #0
 8008224:	d064      	beq.n	80082f0 <lwip_netconn_do_delconn+0x1e4>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008226:	697b      	ldr	r3, [r7, #20]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	2b04      	cmp	r3, #4
 800822e:	d006      	beq.n	800823e <lwip_netconn_do_delconn+0x132>
 8008230:	4b31      	ldr	r3, [pc, #196]	; (80082f8 <lwip_netconn_do_delconn+0x1ec>)
 8008232:	f240 423b 	movw	r2, #1083	; 0x43b
 8008236:	4935      	ldr	r1, [pc, #212]	; (800830c <lwip_netconn_do_delconn+0x200>)
 8008238:	4831      	ldr	r0, [pc, #196]	; (8008300 <lwip_netconn_do_delconn+0x1f4>)
 800823a:	f00d fdcb 	bl	8015dd4 <iprintf>
          UNLOCK_TCPIP_CORE();
 800823e:	4834      	ldr	r0, [pc, #208]	; (8008310 <lwip_netconn_do_delconn+0x204>)
 8008240:	f00a fd57 	bl	8012cf2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	330c      	adds	r3, #12
 800824a:	2100      	movs	r1, #0
 800824c:	4618      	mov	r0, r3
 800824e:	f00a fcaf 	bl	8012bb0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008252:	482f      	ldr	r0, [pc, #188]	; (8008310 <lwip_netconn_do_delconn+0x204>)
 8008254:	f00a fd3e 	bl	8012cd4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008258:	697b      	ldr	r3, [r7, #20]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	785b      	ldrb	r3, [r3, #1]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d046      	beq.n	80082f0 <lwip_netconn_do_delconn+0x1e4>
 8008262:	4b25      	ldr	r3, [pc, #148]	; (80082f8 <lwip_netconn_do_delconn+0x1ec>)
 8008264:	f240 423f 	movw	r2, #1087	; 0x43f
 8008268:	4928      	ldr	r1, [pc, #160]	; (800830c <lwip_netconn_do_delconn+0x200>)
 800826a:	4825      	ldr	r0, [pc, #148]	; (8008300 <lwip_netconn_do_delconn+0x1f4>)
 800826c:	f00d fdb2 	bl	8015dd4 <iprintf>
        return;
 8008270:	e03e      	b.n	80082f0 <lwip_netconn_do_delconn+0x1e4>
      }
      msg->conn->pcb.tcp = NULL;
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	2200      	movs	r2, #0
 8008278:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008280:	2b00      	cmp	r3, #0
 8008282:	d007      	beq.n	8008294 <lwip_netconn_do_delconn+0x188>
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800828a:	697a      	ldr	r2, [r7, #20]
 800828c:	6810      	ldr	r0, [r2, #0]
 800828e:	2200      	movs	r2, #0
 8008290:	2100      	movs	r1, #0
 8008292:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800829a:	2b00      	cmp	r3, #0
 800829c:	d007      	beq.n	80082ae <lwip_netconn_do_delconn+0x1a2>
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082a4:	697a      	ldr	r2, [r7, #20]
 80082a6:	6810      	ldr	r0, [r2, #0]
 80082a8:	2200      	movs	r2, #0
 80082aa:	2102      	movs	r1, #2
 80082ac:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	330c      	adds	r3, #12
 80082b4:	4618      	mov	r0, r3
 80082b6:	f00a fcc6 	bl	8012c46 <sys_sem_valid>
 80082ba:	4603      	mov	r3, r0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d018      	beq.n	80082f2 <lwip_netconn_do_delconn+0x1e6>
    TCPIP_APIMSG_ACK(msg);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d014      	beq.n	80082f2 <lwip_netconn_do_delconn+0x1e6>
 80082c8:	f00a fd3e 	bl	8012d48 <sys_arch_protect>
 80082cc:	60f8      	str	r0, [r7, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80082d6:	f113 0f0c 	cmn.w	r3, #12
 80082da:	db05      	blt.n	80082e8 <lwip_netconn_do_delconn+0x1dc>
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	697a      	ldr	r2, [r7, #20]
 80082e2:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80082e6:	721a      	strb	r2, [r3, #8]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f00a fd3b 	bl	8012d64 <sys_arch_unprotect>
 80082ee:	e000      	b.n	80082f2 <lwip_netconn_do_delconn+0x1e6>
        return;
 80082f0:	bf00      	nop
  }
}
 80082f2:	3718      	adds	r7, #24
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	08017fa4 	.word	0x08017fa4
 80082fc:	080182b8 	.word	0x080182b8
 8008300:	08017ffc 	.word	0x08017ffc
 8008304:	080182cc 	.word	0x080182cc
 8008308:	080182ec 	.word	0x080182ec
 800830c:	08018308 	.word	0x08018308
 8008310:	200041e8 	.word	0x200041e8

08008314 <lwip_netconn_do_bind>:
 * @param m the api_msg_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8008314:	b580      	push	{r7, lr}
 8008316:	b084      	sub	sp, #16
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008328:	f113 0f0c 	cmn.w	r3, #12
 800832c:	da06      	bge.n	800833c <lwip_netconn_do_bind+0x28>
    msg->err = msg->conn->last_err;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f993 2008 	ldrsb.w	r2, [r3, #8]
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	711a      	strb	r2, [r3, #4]
 800833a:	e02f      	b.n	800839c <lwip_netconn_do_bind+0x88>
  } else {
    msg->err = ERR_VAL;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	22fa      	movs	r2, #250	; 0xfa
 8008340:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	685b      	ldr	r3, [r3, #4]
 8008348:	2b00      	cmp	r3, #0
 800834a:	d027      	beq.n	800839c <lwip_netconn_do_bind+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	781b      	ldrb	r3, [r3, #0]
 8008352:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008356:	2b10      	cmp	r3, #16
 8008358:	d011      	beq.n	800837e <lwip_netconn_do_bind+0x6a>
 800835a:	2b20      	cmp	r3, #32
 800835c:	d000      	beq.n	8008360 <lwip_netconn_do_bind+0x4c>
      case NETCONN_TCP:
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
        break;
#endif /* LWIP_TCP */
      default:
        break;
 800835e:	e01d      	b.n	800839c <lwip_netconn_do_bind+0x88>
        msg->err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	6858      	ldr	r0, [r3, #4]
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6899      	ldr	r1, [r3, #8]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	899b      	ldrh	r3, [r3, #12]
 800836e:	461a      	mov	r2, r3
 8008370:	f00a f932 	bl	80125d8 <udp_bind>
 8008374:	4603      	mov	r3, r0
 8008376:	461a      	mov	r2, r3
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	711a      	strb	r2, [r3, #4]
        break;
 800837c:	e00e      	b.n	800839c <lwip_netconn_do_bind+0x88>
        msg->err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	6858      	ldr	r0, [r3, #4]
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	6899      	ldr	r1, [r3, #8]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	899b      	ldrh	r3, [r3, #12]
 800838c:	461a      	mov	r2, r3
 800838e:	f004 fe45 	bl	800d01c <tcp_bind>
 8008392:	4603      	mov	r3, r0
 8008394:	461a      	mov	r2, r3
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	711a      	strb	r2, [r3, #4]
        break;
 800839a:	bf00      	nop
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d012      	beq.n	80083ca <lwip_netconn_do_bind+0xb6>
 80083a4:	f00a fcd0 	bl	8012d48 <sys_arch_protect>
 80083a8:	60b8      	str	r0, [r7, #8]
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80083b2:	f113 0f0c 	cmn.w	r3, #12
 80083b6:	db05      	blt.n	80083c4 <lwip_netconn_do_bind+0xb0>
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68fa      	ldr	r2, [r7, #12]
 80083be:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80083c2:	721a      	strb	r2, [r3, #8]
 80083c4:	68b8      	ldr	r0, [r7, #8]
 80083c6:	f00a fccd 	bl	8012d64 <sys_arch_unprotect>
}
 80083ca:	bf00      	nop
 80083cc:	3710      	adds	r7, #16
 80083ce:	46bd      	mov	sp, r7
 80083d0:	bd80      	pop	{r7, pc}
	...

080083d4 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b088      	sub	sp, #32
 80083d8:	af00      	add	r7, sp, #0
 80083da:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	61fb      	str	r3, [r7, #28]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 80083e0:	69fb      	ldr	r3, [r7, #28]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80083e8:	f113 0f0c 	cmn.w	r3, #12
 80083ec:	da06      	bge.n	80083fc <lwip_netconn_do_listen+0x28>
    msg->err = msg->conn->last_err;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f993 2008 	ldrsb.w	r2, [r3, #8]
 80083f6:	69fb      	ldr	r3, [r7, #28]
 80083f8:	711a      	strb	r2, [r3, #4]
 80083fa:	e090      	b.n	800851e <lwip_netconn_do_listen+0x14a>
  } else {
    msg->err = ERR_CONN;
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	22f5      	movs	r2, #245	; 0xf5
 8008400:	711a      	strb	r2, [r3, #4]
    if (msg->conn->pcb.tcp != NULL) {
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f000 8088 	beq.w	800851e <lwip_netconn_do_listen+0x14a>
      if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800840e:	69fb      	ldr	r3, [r7, #28]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008418:	2b10      	cmp	r3, #16
 800841a:	d17d      	bne.n	8008518 <lwip_netconn_do_listen+0x144>
        if (msg->conn->state == NETCONN_NONE) {
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	785b      	ldrb	r3, [r3, #1]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d16f      	bne.n	8008506 <lwip_netconn_do_listen+0x132>
          struct tcp_pcb* lpcb;
          if (msg->conn->pcb.tcp->state != CLOSED) {
 8008426:	69fb      	ldr	r3, [r7, #28]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	685b      	ldr	r3, [r3, #4]
 800842c:	7d1b      	ldrb	r3, [r3, #20]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d003      	beq.n	800843a <lwip_netconn_do_listen+0x66>
            /* connection is not closed, cannot listen */
            msg->err = ERR_VAL;
 8008432:	69fb      	ldr	r3, [r7, #28]
 8008434:	22fa      	movs	r2, #250	; 0xfa
 8008436:	711a      	strb	r2, [r3, #4]
 8008438:	e071      	b.n	800851e <lwip_netconn_do_listen+0x14a>
            err_t err;
            u8_t backlog;
#if TCP_LISTEN_BACKLOG
            backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
            backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 800843a:	23ff      	movs	r3, #255	; 0xff
 800843c:	76fb      	strb	r3, [r7, #27]
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
              IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
            }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

            lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 800843e:	69fb      	ldr	r3, [r7, #28]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	685b      	ldr	r3, [r3, #4]
 8008444:	f107 020f 	add.w	r2, r7, #15
 8008448:	7ef9      	ldrb	r1, [r7, #27]
 800844a:	4618      	mov	r0, r3
 800844c:	f004 fe9c 	bl	800d188 <tcp_listen_with_backlog_and_err>
 8008450:	6178      	str	r0, [r7, #20]

            if (lpcb == NULL) {
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d104      	bne.n	8008462 <lwip_netconn_do_listen+0x8e>
              /* in this case, the old pcb is still allocated */
              msg->err = err;
 8008458:	f997 200f 	ldrsb.w	r2, [r7, #15]
 800845c:	69fb      	ldr	r3, [r7, #28]
 800845e:	711a      	strb	r2, [r3, #4]
 8008460:	e05d      	b.n	800851e <lwip_netconn_do_listen+0x14a>
            } else {
              /* delete the recvmbox and allocate the acceptmbox */
              if (sys_mbox_valid(&msg->conn->recvmbox)) {
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	3310      	adds	r3, #16
 8008468:	4618      	mov	r0, r3
 800846a:	f00a fb5d 	bl	8012b28 <sys_mbox_valid>
 800846e:	4603      	mov	r3, r0
 8008470:	2b00      	cmp	r3, #0
 8008472:	d00b      	beq.n	800848c <lwip_netconn_do_listen+0xb8>
                /** @todo: should we drain the recvmbox here? */
                sys_mbox_free(&msg->conn->recvmbox);
 8008474:	69fb      	ldr	r3, [r7, #28]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	3310      	adds	r3, #16
 800847a:	4618      	mov	r0, r3
 800847c:	f00a fab8 	bl	80129f0 <sys_mbox_free>
                sys_mbox_set_invalid(&msg->conn->recvmbox);
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	3310      	adds	r3, #16
 8008486:	4618      	mov	r0, r3
 8008488:	f00a fb5f 	bl	8012b4a <sys_mbox_set_invalid>
              }
              msg->err = ERR_OK;
 800848c:	69fb      	ldr	r3, [r7, #28]
 800848e:	2200      	movs	r2, #0
 8008490:	711a      	strb	r2, [r3, #4]
              if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8008492:	69fb      	ldr	r3, [r7, #28]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3314      	adds	r3, #20
 8008498:	4618      	mov	r0, r3
 800849a:	f00a fb45 	bl	8012b28 <sys_mbox_valid>
 800849e:	4603      	mov	r3, r0
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d10a      	bne.n	80084ba <lwip_netconn_do_listen+0xe6>
                msg->err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 80084a4:	69fb      	ldr	r3, [r7, #28]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	3314      	adds	r3, #20
 80084aa:	2106      	movs	r1, #6
 80084ac:	4618      	mov	r0, r3
 80084ae:	f00a fa81 	bl	80129b4 <sys_mbox_new>
 80084b2:	4603      	mov	r3, r0
 80084b4:	461a      	mov	r2, r3
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	711a      	strb	r2, [r3, #4]
              }
              if (msg->err == ERR_OK) {
 80084ba:	69fb      	ldr	r3, [r7, #28]
 80084bc:	f993 3004 	ldrsb.w	r3, [r3, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d118      	bne.n	80084f6 <lwip_netconn_do_listen+0x122>
                msg->conn->state = NETCONN_LISTEN;
 80084c4:	69fb      	ldr	r3, [r7, #28]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2202      	movs	r2, #2
 80084ca:	705a      	strb	r2, [r3, #1]
                msg->conn->pcb.tcp = lpcb;
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	605a      	str	r2, [r3, #4]
                tcp_arg(msg->conn->pcb.tcp, msg->conn);
 80084d4:	69fb      	ldr	r3, [r7, #28]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	685a      	ldr	r2, [r3, #4]
 80084da:	69fb      	ldr	r3, [r7, #28]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f005 fd4d 	bl	800df80 <tcp_arg>
                tcp_accept(msg->conn->pcb.tcp, accept_function);
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	4919      	ldr	r1, [pc, #100]	; (8008554 <lwip_netconn_do_listen+0x180>)
 80084ee:	4618      	mov	r0, r3
 80084f0:	f005 fdbc 	bl	800e06c <tcp_accept>
 80084f4:	e013      	b.n	800851e <lwip_netconn_do_listen+0x14a>
              } else {
                /* since the old pcb is already deallocated, free lpcb now */
                tcp_close(lpcb);
 80084f6:	6978      	ldr	r0, [r7, #20]
 80084f8:	f004 fc72 	bl	800cde0 <tcp_close>
                msg->conn->pcb.tcp = NULL;
 80084fc:	69fb      	ldr	r3, [r7, #28]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2200      	movs	r2, #0
 8008502:	605a      	str	r2, [r3, #4]
 8008504:	e00b      	b.n	800851e <lwip_netconn_do_listen+0x14a>
              }
            }
          }
        } else if (msg->conn->state == NETCONN_LISTEN) {
 8008506:	69fb      	ldr	r3, [r7, #28]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	785b      	ldrb	r3, [r3, #1]
 800850c:	2b02      	cmp	r3, #2
 800850e:	d106      	bne.n	800851e <lwip_netconn_do_listen+0x14a>
          /* already listening, allow updating of the backlog */
          msg->err = ERR_OK;
 8008510:	69fb      	ldr	r3, [r7, #28]
 8008512:	2200      	movs	r2, #0
 8008514:	711a      	strb	r2, [r3, #4]
 8008516:	e002      	b.n	800851e <lwip_netconn_do_listen+0x14a>
          tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
        }
      } else {
        msg->err = ERR_ARG;
 8008518:	69fb      	ldr	r3, [r7, #28]
 800851a:	22f0      	movs	r2, #240	; 0xf0
 800851c:	711a      	strb	r2, [r3, #4]
      }
    }
  }
  TCPIP_APIMSG_ACK(msg);
 800851e:	69fb      	ldr	r3, [r7, #28]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d012      	beq.n	800854c <lwip_netconn_do_listen+0x178>
 8008526:	f00a fc0f 	bl	8012d48 <sys_arch_protect>
 800852a:	6138      	str	r0, [r7, #16]
 800852c:	69fb      	ldr	r3, [r7, #28]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008534:	f113 0f0c 	cmn.w	r3, #12
 8008538:	db05      	blt.n	8008546 <lwip_netconn_do_listen+0x172>
 800853a:	69fb      	ldr	r3, [r7, #28]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	69fa      	ldr	r2, [r7, #28]
 8008540:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008544:	721a      	strb	r2, [r3, #8]
 8008546:	6938      	ldr	r0, [r7, #16]
 8008548:	f00a fc0c 	bl	8012d64 <sys_arch_unprotect>
}
 800854c:	bf00      	nop
 800854e:	3720      	adds	r7, #32
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	0800792d 	.word	0x0800792d

08008558 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b086      	sub	sp, #24
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8008564:	693b      	ldr	r3, [r7, #16]
 8008566:	2200      	movs	r2, #0
 8008568:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	2b00      	cmp	r3, #0
 8008572:	d022      	beq.n	80085ba <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008574:	693b      	ldr	r3, [r7, #16]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800857e:	2b10      	cmp	r3, #16
 8008580:	d11b      	bne.n	80085ba <lwip_netconn_do_recv+0x62>
      u32_t remaining = msg->msg.r.len;
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	689b      	ldr	r3, [r3, #8]
 8008586:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (remaining > 0xffff) ? 0xffff : (u16_t)remaining;
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800858e:	d202      	bcs.n	8008596 <lwip_netconn_do_recv+0x3e>
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	b29b      	uxth	r3, r3
 8008594:	e001      	b.n	800859a <lwip_netconn_do_recv+0x42>
 8008596:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800859a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800859c:	693b      	ldr	r3, [r7, #16]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	89fa      	ldrh	r2, [r7, #14]
 80085a4:	4611      	mov	r1, r2
 80085a6:	4618      	mov	r0, r3
 80085a8:	f004 fef8 	bl	800d39c <tcp_recved>
        remaining -= recved;
 80085ac:	89fb      	ldrh	r3, [r7, #14]
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d1e6      	bne.n	8008588 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
 80085ba:	693b      	ldr	r3, [r7, #16]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d012      	beq.n	80085e8 <lwip_netconn_do_recv+0x90>
 80085c2:	f00a fbc1 	bl	8012d48 <sys_arch_protect>
 80085c6:	60b8      	str	r0, [r7, #8]
 80085c8:	693b      	ldr	r3, [r7, #16]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80085d0:	f113 0f0c 	cmn.w	r3, #12
 80085d4:	db05      	blt.n	80085e2 <lwip_netconn_do_recv+0x8a>
 80085d6:	693b      	ldr	r3, [r7, #16]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	693a      	ldr	r2, [r7, #16]
 80085dc:	f992 2004 	ldrsb.w	r2, [r2, #4]
 80085e0:	721a      	strb	r2, [r3, #8]
 80085e2:	68b8      	ldr	r0, [r7, #8]
 80085e4:	f00a fbbe 	bl	8012d64 <sys_arch_unprotect>
}
 80085e8:	bf00      	nop
 80085ea:	3718      	adds	r7, #24
 80085ec:	46bd      	mov	sp, r7
 80085ee:	bd80      	pop	{r7, pc}

080085f0 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b08a      	sub	sp, #40	; 0x28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 80085fc:	2300      	movs	r3, #0
 80085fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d106      	bne.n	8008616 <lwip_netconn_do_writemore+0x26>
 8008608:	4ba4      	ldr	r3, [pc, #656]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 800860a:	f240 52e3 	movw	r2, #1507	; 0x5e3
 800860e:	49a4      	ldr	r1, [pc, #656]	; (80088a0 <lwip_netconn_do_writemore+0x2b0>)
 8008610:	48a4      	ldr	r0, [pc, #656]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 8008612:	f00d fbdf 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	785b      	ldrb	r3, [r3, #1]
 800861a:	2b01      	cmp	r3, #1
 800861c:	d006      	beq.n	800862c <lwip_netconn_do_writemore+0x3c>
 800861e:	4b9f      	ldr	r3, [pc, #636]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 8008620:	f240 52e4 	movw	r2, #1508	; 0x5e4
 8008624:	49a0      	ldr	r1, [pc, #640]	; (80088a8 <lwip_netconn_do_writemore+0x2b8>)
 8008626:	489f      	ldr	r0, [pc, #636]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 8008628:	f00d fbd4 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	2b00      	cmp	r3, #0
 8008632:	d106      	bne.n	8008642 <lwip_netconn_do_writemore+0x52>
 8008634:	4b99      	ldr	r3, [pc, #612]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 8008636:	f240 52e5 	movw	r2, #1509	; 0x5e5
 800863a:	499c      	ldr	r1, [pc, #624]	; (80088ac <lwip_netconn_do_writemore+0x2bc>)
 800863c:	4899      	ldr	r0, [pc, #612]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 800863e:	f00d fbc9 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d106      	bne.n	8008658 <lwip_netconn_do_writemore+0x68>
 800864a:	4b94      	ldr	r3, [pc, #592]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 800864c:	f240 52e6 	movw	r2, #1510	; 0x5e6
 8008650:	4997      	ldr	r1, [pc, #604]	; (80088b0 <lwip_netconn_do_writemore+0x2c0>)
 8008652:	4894      	ldr	r0, [pc, #592]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 8008654:	f00d fbbe 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("conn->write_offset < conn->current_msg->msg.w.len",
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	429a      	cmp	r2, r3
 8008664:	d306      	bcc.n	8008674 <lwip_netconn_do_writemore+0x84>
 8008666:	4b8d      	ldr	r3, [pc, #564]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 8008668:	f44f 62bd 	mov.w	r2, #1512	; 0x5e8
 800866c:	4991      	ldr	r1, [pc, #580]	; (80088b4 <lwip_netconn_do_writemore+0x2c4>)
 800866e:	488d      	ldr	r0, [pc, #564]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 8008670:	f00d fbb0 	bl	8015dd4 <iprintf>
    conn->write_offset < conn->current_msg->msg.w.len);

  apiflags = conn->current_msg->msg.w.apiflags;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	7c1b      	ldrb	r3, [r3, #16]
 800867a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008684:	f003 0302 	and.w	r3, r3, #2
 8008688:	2b00      	cmp	r3, #0
 800868a:	d105      	bne.n	8008698 <lwip_netconn_do_writemore+0xa8>
 800868c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8008690:	f003 0304 	and.w	r3, r3, #4
 8008694:	2b00      	cmp	r3, #0
 8008696:	d001      	beq.n	800869c <lwip_netconn_do_writemore+0xac>
 8008698:	2301      	movs	r3, #1
 800869a:	e000      	b.n	800869e <lwip_netconn_do_writemore+0xae>
 800869c:	2300      	movs	r3, #0
 800869e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
      conn->write_offset = 0;
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    dataptr = (const u8_t*)conn->current_msg->msg.w.dataptr + conn->write_offset;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	689a      	ldr	r2, [r3, #8]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ac:	4413      	add	r3, r2
 80086ae:	61fb      	str	r3, [r7, #28]
    diff = conn->current_msg->msg.w.len - conn->write_offset;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b4:	68da      	ldr	r2, [r3, #12]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ba:	1ad3      	subs	r3, r2, r3
 80086bc:	61bb      	str	r3, [r7, #24]
    if (diff > 0xffffUL) { /* max_u16_t */
 80086be:	69bb      	ldr	r3, [r7, #24]
 80086c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086c4:	d309      	bcc.n	80086da <lwip_netconn_do_writemore+0xea>
      len = 0xffff;
 80086c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086ca:	84bb      	strh	r3, [r7, #36]	; 0x24
      apiflags |= TCP_WRITE_FLAG_MORE;
 80086cc:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80086d0:	f043 0302 	orr.w	r3, r3, #2
 80086d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80086d8:	e001      	b.n	80086de <lwip_netconn_do_writemore+0xee>
    } else {
      len = (u16_t)diff;
 80086da:	69bb      	ldr	r3, [r7, #24]
 80086dc:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    available = tcp_sndbuf(conn->pcb.tcp);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	685b      	ldr	r3, [r3, #4]
 80086e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80086e6:	82fb      	strh	r3, [r7, #22]
    if (available < len) {
 80086e8:	8afa      	ldrh	r2, [r7, #22]
 80086ea:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d212      	bcs.n	8008716 <lwip_netconn_do_writemore+0x126>
      /* don't try to write more than sendbuf */
      len = available;
 80086f0:	8afb      	ldrh	r3, [r7, #22]
 80086f2:	84bb      	strh	r3, [r7, #36]	; 0x24
      if (dontblock) {
 80086f4:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d006      	beq.n	800870a <lwip_netconn_do_writemore+0x11a>
        if (!len) {
 80086fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d109      	bne.n	8008716 <lwip_netconn_do_writemore+0x126>
          err = ERR_WOULDBLOCK;
 8008702:	23f9      	movs	r3, #249	; 0xf9
 8008704:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto err_mem;
 8008708:	e029      	b.n	800875e <lwip_netconn_do_writemore+0x16e>
        }
      } else {
        apiflags |= TCP_WRITE_FLAG_MORE;
 800870a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800870e:	f043 0302 	orr.w	r3, r3, #2
 8008712:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      }
    }
    LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!", ((conn->write_offset + len) <= conn->current_msg->msg.w.len));
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800871a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800871c:	441a      	add	r2, r3
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008722:	68db      	ldr	r3, [r3, #12]
 8008724:	429a      	cmp	r2, r3
 8008726:	d906      	bls.n	8008736 <lwip_netconn_do_writemore+0x146>
 8008728:	4b5c      	ldr	r3, [pc, #368]	; (800889c <lwip_netconn_do_writemore+0x2ac>)
 800872a:	f240 6213 	movw	r2, #1555	; 0x613
 800872e:	4962      	ldr	r1, [pc, #392]	; (80088b8 <lwip_netconn_do_writemore+0x2c8>)
 8008730:	485c      	ldr	r0, [pc, #368]	; (80088a4 <lwip_netconn_do_writemore+0x2b4>)
 8008732:	f00d fb4f 	bl	8015dd4 <iprintf>
    err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6858      	ldr	r0, [r3, #4]
 800873a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800873e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008740:	69f9      	ldr	r1, [r7, #28]
 8008742:	f008 fa67 	bl	8010c14 <tcp_write>
 8008746:	4603      	mov	r3, r0
 8008748:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800874c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008750:	2b00      	cmp	r3, #0
 8008752:	d004      	beq.n	800875e <lwip_netconn_do_writemore+0x16e>
 8008754:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8008758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800875c:	d134      	bne.n	80087c8 <lwip_netconn_do_writemore+0x1d8>
err_mem:
      if (dontblock && (len < conn->current_msg->msg.w.len)) {
 800875e:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008762:	2b00      	cmp	r3, #0
 8008764:	d019      	beq.n	800879a <lwip_netconn_do_writemore+0x1aa>
 8008766:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	429a      	cmp	r2, r3
 8008770:	d213      	bcs.n	800879a <lwip_netconn_do_writemore+0x1aa>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008776:	2b00      	cmp	r3, #0
 8008778:	d005      	beq.n	8008786 <lwip_netconn_do_writemore+0x196>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800877e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8008780:	2103      	movs	r1, #3
 8008782:	6878      	ldr	r0, [r7, #4]
 8008784:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	f893 3020 	ldrb.w	r3, [r3, #32]
 800878c:	f043 0310 	orr.w	r3, r3, #16
 8008790:	b2da      	uxtb	r2, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	f883 2020 	strb.w	r2, [r3, #32]
 8008798:	e016      	b.n	80087c8 <lwip_netconn_do_writemore+0x1d8>
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80087a2:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80087a6:	d305      	bcc.n	80087b4 <lwip_netconn_do_writemore+0x1c4>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	685b      	ldr	r3, [r3, #4]
 80087ac:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 80087b0:	2b04      	cmp	r3, #4
 80087b2:	d909      	bls.n	80087c8 <lwip_netconn_do_writemore+0x1d8>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, len);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d005      	beq.n	80087c8 <lwip_netconn_do_writemore+0x1d8>
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80087c0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80087c2:	2103      	movs	r1, #3
 80087c4:	6878      	ldr	r0, [r7, #4]
 80087c6:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 80087c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d134      	bne.n	800883a <lwip_netconn_do_writemore+0x24a>
      err_t out_err;
      conn->write_offset += len;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80087d6:	441a      	add	r2, r3
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	625a      	str	r2, [r3, #36]	; 0x24
      if ((conn->write_offset == conn->current_msg->msg.w.len) || dontblock) {
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	68db      	ldr	r3, [r3, #12]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d003      	beq.n	80087f2 <lwip_netconn_do_writemore+0x202>
 80087ea:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d007      	beq.n	8008802 <lwip_netconn_do_writemore+0x212>
        /* return sent length */
        conn->current_msg->msg.w.len = conn->write_offset;
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80087fa:	60da      	str	r2, [r3, #12]
        /* everything was written */
        write_finished = 1;
 80087fc:	2301      	movs	r3, #1
 80087fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
      out_err = tcp_output(conn->pcb.tcp);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	685b      	ldr	r3, [r3, #4]
 8008806:	4618      	mov	r0, r3
 8008808:	f008 feba 	bl	8011580 <tcp_output>
 800880c:	4603      	mov	r3, r0
 800880e:	757b      	strb	r3, [r7, #21]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008810:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8008814:	f113 0f0c 	cmn.w	r3, #12
 8008818:	db04      	blt.n	8008824 <lwip_netconn_do_writemore+0x234>
 800881a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800881e:	f113 0f04 	cmn.w	r3, #4
 8008822:	d152      	bne.n	80088ca <lwip_netconn_do_writemore+0x2da>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008824:	7d7b      	ldrb	r3, [r7, #21]
 8008826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800882a:	2301      	movs	r3, #1
 800882c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008834:	2200      	movs	r2, #0
 8008836:	60da      	str	r2, [r3, #12]
 8008838:	e047      	b.n	80088ca <lwip_netconn_do_writemore+0x2da>
      }
    } else if (err == ERR_MEM) {
 800883a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800883e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008842:	d13b      	bne.n	80088bc <lwip_netconn_do_writemore+0x2cc>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	685b      	ldr	r3, [r3, #4]
 8008848:	4618      	mov	r0, r3
 800884a:	f008 fe99 	bl	8011580 <tcp_output>
 800884e:	4603      	mov	r3, r0
 8008850:	753b      	strb	r3, [r7, #20]
      if (ERR_IS_FATAL(out_err) || (out_err == ERR_RTE)) {
 8008852:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008856:	f113 0f0c 	cmn.w	r3, #12
 800885a:	db04      	blt.n	8008866 <lwip_netconn_do_writemore+0x276>
 800885c:	f997 3014 	ldrsb.w	r3, [r7, #20]
 8008860:	f113 0f04 	cmn.w	r3, #4
 8008864:	d10a      	bne.n	800887c <lwip_netconn_do_writemore+0x28c>
        /* If tcp_output fails with fatal error or no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8008866:	7d3b      	ldrb	r3, [r7, #20]
 8008868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800886c:	2301      	movs	r3, #1
 800886e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008876:	2200      	movs	r2, #0
 8008878:	60da      	str	r2, [r3, #12]
 800887a:	e026      	b.n	80088ca <lwip_netconn_do_writemore+0x2da>
      } else if (dontblock) {
 800887c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8008880:	2b00      	cmp	r3, #0
 8008882:	d022      	beq.n	80088ca <lwip_netconn_do_writemore+0x2da>
        /* non-blocking write is done on ERR_MEM */
        err = ERR_WOULDBLOCK;
 8008884:	23f9      	movs	r3, #249	; 0xf9
 8008886:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        write_finished = 1;
 800888a:	2301      	movs	r3, #1
 800888c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        conn->current_msg->msg.w.len = 0;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008894:	2200      	movs	r2, #0
 8008896:	60da      	str	r2, [r3, #12]
 8008898:	e017      	b.n	80088ca <lwip_netconn_do_writemore+0x2da>
 800889a:	bf00      	nop
 800889c:	08017fa4 	.word	0x08017fa4
 80088a0:	080180c8 	.word	0x080180c8
 80088a4:	08017ffc 	.word	0x08017ffc
 80088a8:	080183a8 	.word	0x080183a8
 80088ac:	080180d8 	.word	0x080180d8
 80088b0:	080183c8 	.word	0x080183c8
 80088b4:	080183e0 	.word	0x080183e0
 80088b8:	08018414 	.word	0x08018414
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 80088bc:	2301      	movs	r3, #1
 80088be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      conn->current_msg->msg.w.len = 0;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088c6:	2200      	movs	r2, #0
 80088c8:	60da      	str	r2, [r3, #12]
    }
  }
  if (write_finished) {
 80088ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d02c      	beq.n	800892c <lwip_netconn_do_writemore+0x33c>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t* op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	330c      	adds	r3, #12
 80088da:	613b      	str	r3, [r7, #16]
    conn->current_msg->err = err;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80088e0:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80088e4:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	2200      	movs	r2, #0
 80088ea:	629a      	str	r2, [r3, #40]	; 0x28
    conn->write_offset = 0;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2200      	movs	r2, #0
 80088f0:	625a      	str	r2, [r3, #36]	; 0x24
    conn->state = NETCONN_NONE;
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	2200      	movs	r2, #0
 80088f6:	705a      	strb	r2, [r3, #1]
    NETCONN_SET_SAFE_ERR(conn, err);
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d00f      	beq.n	800891e <lwip_netconn_do_writemore+0x32e>
 80088fe:	f00a fa23 	bl	8012d48 <sys_arch_protect>
 8008902:	60f8      	str	r0, [r7, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800890a:	f113 0f0c 	cmn.w	r3, #12
 800890e:	db03      	blt.n	8008918 <lwip_netconn_do_writemore+0x328>
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8008916:	721a      	strb	r2, [r3, #8]
 8008918:	68f8      	ldr	r0, [r7, #12]
 800891a:	f00a fa23 	bl	8012d64 <sys_arch_unprotect>
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800891e:	78fb      	ldrb	r3, [r7, #3]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d006      	beq.n	8008932 <lwip_netconn_do_writemore+0x342>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8008924:	6938      	ldr	r0, [r7, #16]
 8008926:	f00a f974 	bl	8012c12 <sys_sem_signal>
 800892a:	e002      	b.n	8008932 <lwip_netconn_do_writemore+0x342>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800892c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008930:	e000      	b.n	8008934 <lwip_netconn_do_writemore+0x344>
  }
#endif
  return ERR_OK;
 8008932:	2300      	movs	r3, #0
}
 8008934:	4618      	mov	r0, r3
 8008936:	3728      	adds	r7, #40	; 0x28
 8008938:	46bd      	mov	sp, r7
 800893a:	bd80      	pop	{r7, pc}

0800893c <lwip_netconn_do_write>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800893c:	b580      	push	{r7, lr}
 800893e:	b084      	sub	sp, #16
 8008940:	af00      	add	r7, sp, #0
 8008942:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	60fb      	str	r3, [r7, #12]

  if (ERR_IS_FATAL(msg->conn->last_err)) {
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008950:	f113 0f0c 	cmn.w	r3, #12
 8008954:	da06      	bge.n	8008964 <lwip_netconn_do_write+0x28>
    msg->err = msg->conn->last_err;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f993 2008 	ldrsb.w	r2, [r3, #8]
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	711a      	strb	r2, [r3, #4]
 8008962:	e072      	b.n	8008a4a <lwip_netconn_do_write+0x10e>
  } else {
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	781b      	ldrb	r3, [r3, #0]
 800896a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800896e:	2b10      	cmp	r3, #16
 8008970:	d168      	bne.n	8008a44 <lwip_netconn_do_write+0x108>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	785b      	ldrb	r3, [r3, #1]
 8008978:	2b00      	cmp	r3, #0
 800897a:	d003      	beq.n	8008984 <lwip_netconn_do_write+0x48>
        /* netconn is connecting, closing or in blocking write */
        msg->err = ERR_INPROGRESS;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	22fb      	movs	r2, #251	; 0xfb
 8008980:	711a      	strb	r2, [r3, #4]
 8008982:	e062      	b.n	8008a4a <lwip_netconn_do_write+0x10e>
      } else if (msg->conn->pcb.tcp != NULL) {
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d056      	beq.n	8008a3c <lwip_netconn_do_write+0x100>
        msg->conn->state = NETCONN_WRITE;
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	2201      	movs	r2, #1
 8008994:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800899c:	2b00      	cmp	r3, #0
 800899e:	d104      	bne.n	80089aa <lwip_netconn_do_write+0x6e>
 80089a0:	68fb      	ldr	r3, [r7, #12]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d006      	beq.n	80089b8 <lwip_netconn_do_write+0x7c>
 80089aa:	4b36      	ldr	r3, [pc, #216]	; (8008a84 <lwip_netconn_do_write+0x148>)
 80089ac:	f240 6283 	movw	r2, #1667	; 0x683
 80089b0:	4935      	ldr	r1, [pc, #212]	; (8008a88 <lwip_netconn_do_write+0x14c>)
 80089b2:	4836      	ldr	r0, [pc, #216]	; (8008a8c <lwip_netconn_do_write+0x150>)
 80089b4:	f00d fa0e 	bl	8015dd4 <iprintf>
          msg->conn->write_offset == 0);
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	68db      	ldr	r3, [r3, #12]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d106      	bne.n	80089ce <lwip_netconn_do_write+0x92>
 80089c0:	4b30      	ldr	r3, [pc, #192]	; (8008a84 <lwip_netconn_do_write+0x148>)
 80089c2:	f240 6284 	movw	r2, #1668	; 0x684
 80089c6:	4932      	ldr	r1, [pc, #200]	; (8008a90 <lwip_netconn_do_write+0x154>)
 80089c8:	4830      	ldr	r0, [pc, #192]	; (8008a8c <lwip_netconn_do_write+0x150>)
 80089ca:	f00d fa03 	bl	8015dd4 <iprintf>
        msg->conn->current_msg = msg;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	68fa      	ldr	r2, [r7, #12]
 80089d4:	629a      	str	r2, [r3, #40]	; 0x28
        msg->conn->write_offset = 0;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	2200      	movs	r2, #0
 80089dc:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	2100      	movs	r1, #0
 80089e4:	4618      	mov	r0, r3
 80089e6:	f7ff fe03 	bl	80085f0 <lwip_netconn_do_writemore>
 80089ea:	4603      	mov	r3, r0
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d044      	beq.n	8008a7a <lwip_netconn_do_write+0x13e>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	785b      	ldrb	r3, [r3, #1]
 80089f6:	2b01      	cmp	r3, #1
 80089f8:	d006      	beq.n	8008a08 <lwip_netconn_do_write+0xcc>
 80089fa:	4b22      	ldr	r3, [pc, #136]	; (8008a84 <lwip_netconn_do_write+0x148>)
 80089fc:	f240 6289 	movw	r2, #1673	; 0x689
 8008a00:	4924      	ldr	r1, [pc, #144]	; (8008a94 <lwip_netconn_do_write+0x158>)
 8008a02:	4822      	ldr	r0, [pc, #136]	; (8008a8c <lwip_netconn_do_write+0x150>)
 8008a04:	f00d f9e6 	bl	8015dd4 <iprintf>
          UNLOCK_TCPIP_CORE();
 8008a08:	4823      	ldr	r0, [pc, #140]	; (8008a98 <lwip_netconn_do_write+0x15c>)
 8008a0a:	f00a f972 	bl	8012cf2 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	330c      	adds	r3, #12
 8008a14:	2100      	movs	r1, #0
 8008a16:	4618      	mov	r0, r3
 8008a18:	f00a f8ca 	bl	8012bb0 <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8008a1c:	481e      	ldr	r0, [pc, #120]	; (8008a98 <lwip_netconn_do_write+0x15c>)
 8008a1e:	f00a f959 	bl	8012cd4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	785b      	ldrb	r3, [r3, #1]
 8008a28:	2b01      	cmp	r3, #1
 8008a2a:	d126      	bne.n	8008a7a <lwip_netconn_do_write+0x13e>
 8008a2c:	4b15      	ldr	r3, [pc, #84]	; (8008a84 <lwip_netconn_do_write+0x148>)
 8008a2e:	f240 628d 	movw	r2, #1677	; 0x68d
 8008a32:	4918      	ldr	r1, [pc, #96]	; (8008a94 <lwip_netconn_do_write+0x158>)
 8008a34:	4815      	ldr	r0, [pc, #84]	; (8008a8c <lwip_netconn_do_write+0x150>)
 8008a36:	f00d f9cd 	bl	8015dd4 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8008a3a:	e01e      	b.n	8008a7a <lwip_netconn_do_write+0x13e>
      } else {
        msg->err = ERR_CONN;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	22f5      	movs	r2, #245	; 0xf5
 8008a40:	711a      	strb	r2, [r3, #4]
 8008a42:	e002      	b.n	8008a4a <lwip_netconn_do_write+0x10e>
#else /* LWIP_TCP */
      msg->err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      msg->err = ERR_VAL;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	22fa      	movs	r2, #250	; 0xfa
 8008a48:	711a      	strb	r2, [r3, #4]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  TCPIP_APIMSG_ACK(msg);
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d014      	beq.n	8008a7c <lwip_netconn_do_write+0x140>
 8008a52:	f00a f979 	bl	8012d48 <sys_arch_protect>
 8008a56:	60b8      	str	r0, [r7, #8]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008a60:	f113 0f0c 	cmn.w	r3, #12
 8008a64:	db05      	blt.n	8008a72 <lwip_netconn_do_write+0x136>
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	68fa      	ldr	r2, [r7, #12]
 8008a6c:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008a70:	721a      	strb	r2, [r3, #8]
 8008a72:	68b8      	ldr	r0, [r7, #8]
 8008a74:	f00a f976 	bl	8012d64 <sys_arch_unprotect>
 8008a78:	e000      	b.n	8008a7c <lwip_netconn_do_write+0x140>
        return;
 8008a7a:	bf00      	nop
}
 8008a7c:	3710      	adds	r7, #16
 8008a7e:	46bd      	mov	sp, r7
 8008a80:	bd80      	pop	{r7, pc}
 8008a82:	bf00      	nop
 8008a84:	08017fa4 	.word	0x08017fa4
 8008a88:	080182ec 	.word	0x080182ec
 8008a8c:	08017ffc 	.word	0x08017ffc
 8008a90:	08018440 	.word	0x08018440
 8008a94:	08018308 	.word	0x08018308
 8008a98:	200041e8 	.word	0x200041e8

08008a9c <lwip_netconn_do_close>:
 *
 * @param m the api_msg_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b086      	sub	sp, #24
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg*)m;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	617b      	str	r3, [r7, #20]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8008aa8:	697b      	ldr	r3, [r7, #20]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	785b      	ldrb	r3, [r3, #1]
 8008aae:	74fb      	strb	r3, [r7, #19]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d06e      	beq.n	8008b98 <lwip_netconn_do_close+0xfc>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008aba:	697b      	ldr	r3, [r7, #20]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	781b      	ldrb	r3, [r3, #0]
 8008ac0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8008ac4:	2b10      	cmp	r3, #16
 8008ac6:	d167      	bne.n	8008b98 <lwip_netconn_do_close+0xfc>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8008acc:	2b03      	cmp	r3, #3
 8008ace:	d002      	beq.n	8008ad6 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8008ad0:	7cfb      	ldrb	r3, [r7, #19]
 8008ad2:	2b02      	cmp	r3, #2
 8008ad4:	d060      	beq.n	8008b98 <lwip_netconn_do_close+0xfc>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8008ad6:	7cfb      	ldrb	r3, [r7, #19]
 8008ad8:	2b03      	cmp	r3, #3
 8008ada:	d103      	bne.n	8008ae4 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	22f5      	movs	r2, #245	; 0xf5
 8008ae0:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008ae2:	e05c      	b.n	8008b9e <lwip_netconn_do_close+0x102>
    } else if (state == NETCONN_WRITE) {
 8008ae4:	7cfb      	ldrb	r3, [r7, #19]
 8008ae6:	2b01      	cmp	r3, #1
 8008ae8:	d103      	bne.n	8008af2 <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 8008aea:	697b      	ldr	r3, [r7, #20]
 8008aec:	22fb      	movs	r2, #251	; 0xfb
 8008aee:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 8008af0:	e055      	b.n	8008b9e <lwip_netconn_do_close+0x102>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	7a1b      	ldrb	r3, [r3, #8]
 8008af6:	f003 0301 	and.w	r3, r3, #1
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d004      	beq.n	8008b08 <lwip_netconn_do_close+0x6c>
        /* Drain and delete mboxes */
        netconn_drain(msg->conn);
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7ff f90a 	bl	8007d1c <netconn_drain>
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL &&
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d104      	bne.n	8008b1c <lwip_netconn_do_close+0x80>
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d006      	beq.n	8008b2a <lwip_netconn_do_close+0x8e>
 8008b1c:	4b2e      	ldr	r3, [pc, #184]	; (8008bd8 <lwip_netconn_do_close+0x13c>)
 8008b1e:	f240 721c 	movw	r2, #1820	; 0x71c
 8008b22:	492e      	ldr	r1, [pc, #184]	; (8008bdc <lwip_netconn_do_close+0x140>)
 8008b24:	482e      	ldr	r0, [pc, #184]	; (8008be0 <lwip_netconn_do_close+0x144>)
 8008b26:	f00d f955 	bl	8015dd4 <iprintf>
        msg->conn->write_offset == 0);
      msg->conn->state = NETCONN_CLOSE;
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	2204      	movs	r2, #4
 8008b30:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	697a      	ldr	r2, [r7, #20]
 8008b38:	629a      	str	r2, [r3, #40]	; 0x28
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	2100      	movs	r1, #0
 8008b40:	4618      	mov	r0, r3
 8008b42:	f7ff f96b 	bl	8007e1c <lwip_netconn_do_close_internal>
 8008b46:	4603      	mov	r3, r0
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d040      	beq.n	8008bce <lwip_netconn_do_close+0x132>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	785b      	ldrb	r3, [r3, #1]
 8008b52:	2b04      	cmp	r3, #4
 8008b54:	d006      	beq.n	8008b64 <lwip_netconn_do_close+0xc8>
 8008b56:	4b20      	ldr	r3, [pc, #128]	; (8008bd8 <lwip_netconn_do_close+0x13c>)
 8008b58:	f240 7221 	movw	r2, #1825	; 0x721
 8008b5c:	4921      	ldr	r1, [pc, #132]	; (8008be4 <lwip_netconn_do_close+0x148>)
 8008b5e:	4820      	ldr	r0, [pc, #128]	; (8008be0 <lwip_netconn_do_close+0x144>)
 8008b60:	f00d f938 	bl	8015dd4 <iprintf>
        UNLOCK_TCPIP_CORE();
 8008b64:	4820      	ldr	r0, [pc, #128]	; (8008be8 <lwip_netconn_do_close+0x14c>)
 8008b66:	f00a f8c4 	bl	8012cf2 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8008b6a:	697b      	ldr	r3, [r7, #20]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	330c      	adds	r3, #12
 8008b70:	2100      	movs	r1, #0
 8008b72:	4618      	mov	r0, r3
 8008b74:	f00a f81c 	bl	8012bb0 <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 8008b78:	481b      	ldr	r0, [pc, #108]	; (8008be8 <lwip_netconn_do_close+0x14c>)
 8008b7a:	f00a f8ab 	bl	8012cd4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8008b7e:	697b      	ldr	r3, [r7, #20]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	785b      	ldrb	r3, [r3, #1]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d022      	beq.n	8008bce <lwip_netconn_do_close+0x132>
 8008b88:	4b13      	ldr	r3, [pc, #76]	; (8008bd8 <lwip_netconn_do_close+0x13c>)
 8008b8a:	f240 7225 	movw	r2, #1829	; 0x725
 8008b8e:	4915      	ldr	r1, [pc, #84]	; (8008be4 <lwip_netconn_do_close+0x148>)
 8008b90:	4813      	ldr	r0, [pc, #76]	; (8008be0 <lwip_netconn_do_close+0x144>)
 8008b92:	f00d f91f 	bl	8015dd4 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8008b96:	e01a      	b.n	8008bce <lwip_netconn_do_close+0x132>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	22f5      	movs	r2, #245	; 0xf5
 8008b9c:	711a      	strb	r2, [r3, #4]
  }
  TCPIP_APIMSG_ACK(msg);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	681b      	ldr	r3, [r3, #0]
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d014      	beq.n	8008bd0 <lwip_netconn_do_close+0x134>
 8008ba6:	f00a f8cf 	bl	8012d48 <sys_arch_protect>
 8008baa:	60f8      	str	r0, [r7, #12]
 8008bac:	697b      	ldr	r3, [r7, #20]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8008bb4:	f113 0f0c 	cmn.w	r3, #12
 8008bb8:	db05      	blt.n	8008bc6 <lwip_netconn_do_close+0x12a>
 8008bba:	697b      	ldr	r3, [r7, #20]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	697a      	ldr	r2, [r7, #20]
 8008bc0:	f992 2004 	ldrsb.w	r2, [r2, #4]
 8008bc4:	721a      	strb	r2, [r3, #8]
 8008bc6:	68f8      	ldr	r0, [r7, #12]
 8008bc8:	f00a f8cc 	bl	8012d64 <sys_arch_unprotect>
 8008bcc:	e000      	b.n	8008bd0 <lwip_netconn_do_close+0x134>
      return;
 8008bce:	bf00      	nop
}
 8008bd0:	3718      	adds	r7, #24
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	08017fa4 	.word	0x08017fa4
 8008bdc:	080182ec 	.word	0x080182ec
 8008be0:	08017ffc 	.word	0x08017ffc
 8008be4:	08018308 	.word	0x08018308
 8008be8:	200041e8 	.word	0x200041e8

08008bec <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8008bec:	b580      	push	{r7, lr}
 8008bee:	b082      	sub	sp, #8
 8008bf0:	af00      	add	r7, sp, #0
 8008bf2:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d013      	beq.n	8008c22 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d00b      	beq.n	8008c1a <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f003 fcb6 	bl	800c578 <pbuf_free>
      buf->p = buf->ptr = NULL;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	605a      	str	r2, [r3, #4]
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 8008c1a:	6879      	ldr	r1, [r7, #4]
 8008c1c:	2006      	movs	r0, #6
 8008c1e:	f002 ff51 	bl	800bac4 <memp_free>
  }
}
 8008c22:	bf00      	nop
 8008c24:	3708      	adds	r7, #8
 8008c26:	46bd      	mov	sp, r7
 8008c28:	bd80      	pop	{r7, pc}
	...

08008c2c <netbuf_data>:
 * @return ERR_OK if the information was retrieved,
 *         ERR_BUF on error.
 */
err_t
netbuf_data(struct netbuf *buf, void **dataptr, u16_t *len)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b084      	sub	sp, #16
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netbuf_data: invalid buf", (buf != NULL), return ERR_ARG;);
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d108      	bne.n	8008c50 <netbuf_data+0x24>
 8008c3e:	4b1b      	ldr	r3, [pc, #108]	; (8008cac <netbuf_data+0x80>)
 8008c40:	22c2      	movs	r2, #194	; 0xc2
 8008c42:	491b      	ldr	r1, [pc, #108]	; (8008cb0 <netbuf_data+0x84>)
 8008c44:	481b      	ldr	r0, [pc, #108]	; (8008cb4 <netbuf_data+0x88>)
 8008c46:	f00d f8c5 	bl	8015dd4 <iprintf>
 8008c4a:	f06f 030f 	mvn.w	r3, #15
 8008c4e:	e029      	b.n	8008ca4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d108      	bne.n	8008c68 <netbuf_data+0x3c>
 8008c56:	4b15      	ldr	r3, [pc, #84]	; (8008cac <netbuf_data+0x80>)
 8008c58:	22c3      	movs	r2, #195	; 0xc3
 8008c5a:	4917      	ldr	r1, [pc, #92]	; (8008cb8 <netbuf_data+0x8c>)
 8008c5c:	4815      	ldr	r0, [pc, #84]	; (8008cb4 <netbuf_data+0x88>)
 8008c5e:	f00d f8b9 	bl	8015dd4 <iprintf>
 8008c62:	f06f 030f 	mvn.w	r3, #15
 8008c66:	e01d      	b.n	8008ca4 <netbuf_data+0x78>
  LWIP_ERROR("netbuf_data: invalid len", (len != NULL), return ERR_ARG;);
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d108      	bne.n	8008c80 <netbuf_data+0x54>
 8008c6e:	4b0f      	ldr	r3, [pc, #60]	; (8008cac <netbuf_data+0x80>)
 8008c70:	22c4      	movs	r2, #196	; 0xc4
 8008c72:	4912      	ldr	r1, [pc, #72]	; (8008cbc <netbuf_data+0x90>)
 8008c74:	480f      	ldr	r0, [pc, #60]	; (8008cb4 <netbuf_data+0x88>)
 8008c76:	f00d f8ad 	bl	8015dd4 <iprintf>
 8008c7a:	f06f 030f 	mvn.w	r3, #15
 8008c7e:	e011      	b.n	8008ca4 <netbuf_data+0x78>

  if (buf->ptr == NULL) {
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	685b      	ldr	r3, [r3, #4]
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d102      	bne.n	8008c8e <netbuf_data+0x62>
    return ERR_BUF;
 8008c88:	f06f 0301 	mvn.w	r3, #1
 8008c8c:	e00a      	b.n	8008ca4 <netbuf_data+0x78>
  }
  *dataptr = buf->ptr->payload;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	685b      	ldr	r3, [r3, #4]
 8008c92:	685a      	ldr	r2, [r3, #4]
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	601a      	str	r2, [r3, #0]
  *len = buf->ptr->len;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	895a      	ldrh	r2, [r3, #10]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	801a      	strh	r2, [r3, #0]
  return ERR_OK;
 8008ca2:	2300      	movs	r3, #0
}
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3710      	adds	r7, #16
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}
 8008cac:	0801846c 	.word	0x0801846c
 8008cb0:	08018574 	.word	0x08018574
 8008cb4:	080184bc 	.word	0x080184bc
 8008cb8:	08018590 	.word	0x08018590
 8008cbc:	080185b0 	.word	0x080185b0

08008cc0 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8008cc0:	b580      	push	{r7, lr}
 8008cc2:	b084      	sub	sp, #16
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  if (tcpip_init_done != NULL) {
 8008cc8:	4b3d      	ldr	r3, [pc, #244]	; (8008dc0 <tcpip_thread+0x100>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d005      	beq.n	8008cdc <tcpip_thread+0x1c>
    tcpip_init_done(tcpip_init_done_arg);
 8008cd0:	4b3b      	ldr	r3, [pc, #236]	; (8008dc0 <tcpip_thread+0x100>)
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	4a3b      	ldr	r2, [pc, #236]	; (8008dc4 <tcpip_thread+0x104>)
 8008cd6:	6812      	ldr	r2, [r2, #0]
 8008cd8:	4610      	mov	r0, r2
 8008cda:	4798      	blx	r3
  }

  LOCK_TCPIP_CORE();
 8008cdc:	483a      	ldr	r0, [pc, #232]	; (8008dc8 <tcpip_thread+0x108>)
 8008cde:	f009 fff9 	bl	8012cd4 <sys_mutex_lock>
  while (1) {                          /* MAIN Loop */
    UNLOCK_TCPIP_CORE();
 8008ce2:	4839      	ldr	r0, [pc, #228]	; (8008dc8 <tcpip_thread+0x108>)
 8008ce4:	f00a f805 	bl	8012cf2 <sys_mutex_unlock>
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&mbox, (void **)&msg);
 8008ce8:	f107 030c 	add.w	r3, r7, #12
 8008cec:	4619      	mov	r1, r3
 8008cee:	4837      	ldr	r0, [pc, #220]	; (8008dcc <tcpip_thread+0x10c>)
 8008cf0:	f009 fae2 	bl	80122b8 <sys_timeouts_mbox_fetch>
    LOCK_TCPIP_CORE();
 8008cf4:	4834      	ldr	r0, [pc, #208]	; (8008dc8 <tcpip_thread+0x108>)
 8008cf6:	f009 ffed 	bl	8012cd4 <sys_mutex_lock>
    if (msg == NULL) {
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d106      	bne.n	8008d0e <tcpip_thread+0x4e>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008d00:	4b33      	ldr	r3, [pc, #204]	; (8008dd0 <tcpip_thread+0x110>)
 8008d02:	2269      	movs	r2, #105	; 0x69
 8008d04:	4933      	ldr	r1, [pc, #204]	; (8008dd4 <tcpip_thread+0x114>)
 8008d06:	4834      	ldr	r0, [pc, #208]	; (8008dd8 <tcpip_thread+0x118>)
 8008d08:	f00d f864 	bl	8015dd4 <iprintf>
      continue;
 8008d0c:	e057      	b.n	8008dbe <tcpip_thread+0xfe>
    }
    switch (msg->type) {
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	781b      	ldrb	r3, [r3, #0]
 8008d12:	3b02      	subs	r3, #2
 8008d14:	2b04      	cmp	r3, #4
 8008d16:	d84b      	bhi.n	8008db0 <tcpip_thread+0xf0>
 8008d18:	a201      	add	r2, pc, #4	; (adr r2, 8008d20 <tcpip_thread+0x60>)
 8008d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d1e:	bf00      	nop
 8008d20:	08008d35 	.word	0x08008d35
 8008d24:	08008d51 	.word	0x08008d51
 8008d28:	08008d6f 	.word	0x08008d6f
 8008d2c:	08008d8b 	.word	0x08008d8b
 8008d30:	08008da3 	.word	0x08008da3
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif);
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	68db      	ldr	r3, [r3, #12]
 8008d38:	68fa      	ldr	r2, [r7, #12]
 8008d3a:	6850      	ldr	r0, [r2, #4]
 8008d3c:	68fa      	ldr	r2, [r7, #12]
 8008d3e:	6892      	ldr	r2, [r2, #8]
 8008d40:	4611      	mov	r1, r2
 8008d42:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	4619      	mov	r1, r3
 8008d48:	2009      	movs	r0, #9
 8008d4a:	f002 febb 	bl	800bac4 <memp_free>
      break;
 8008d4e:	e036      	b.n	8008dbe <tcpip_thread+0xfe>
#endif /* !LWIP_TCPIP_CORE_LOCKING_INPUT */

#if LWIP_TCPIP_TIMEOUT && LWIP_TIMERS
    case TCPIP_MSG_TIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: TIMEOUT %p\n", (void *)msg));
      sys_timeout(msg->msg.tmo.msecs, msg->msg.tmo.h, msg->msg.tmo.arg);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	6858      	ldr	r0, [r3, #4]
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	6899      	ldr	r1, [r3, #8]
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	68db      	ldr	r3, [r3, #12]
 8008d5c:	461a      	mov	r2, r3
 8008d5e:	f009 f947 	bl	8011ff0 <sys_timeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	4619      	mov	r1, r3
 8008d66:	2008      	movs	r0, #8
 8008d68:	f002 feac 	bl	800bac4 <memp_free>
      break;
 8008d6c:	e027      	b.n	8008dbe <tcpip_thread+0xfe>
    case TCPIP_MSG_UNTIMEOUT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: UNTIMEOUT %p\n", (void *)msg));
      sys_untimeout(msg->msg.tmo.h, msg->msg.tmo.arg);
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	689a      	ldr	r2, [r3, #8]
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	4619      	mov	r1, r3
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f009 f9dd 	bl	8012138 <sys_untimeout>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	4619      	mov	r1, r3
 8008d82:	2008      	movs	r0, #8
 8008d84:	f002 fe9e 	bl	800bac4 <memp_free>
      break;
 8008d88:	e019      	b.n	8008dbe <tcpip_thread+0xfe>
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008d8a:	68fb      	ldr	r3, [r7, #12]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	6892      	ldr	r2, [r2, #8]
 8008d92:	4610      	mov	r0, r2
 8008d94:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	4619      	mov	r1, r3
 8008d9a:	2008      	movs	r0, #8
 8008d9c:	f002 fe92 	bl	800bac4 <memp_free>
      break;
 8008da0:	e00d      	b.n	8008dbe <tcpip_thread+0xfe>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68fa      	ldr	r2, [r7, #12]
 8008da8:	6892      	ldr	r2, [r2, #8]
 8008daa:	4610      	mov	r0, r2
 8008dac:	4798      	blx	r3
      break;
 8008dae:	e006      	b.n	8008dbe <tcpip_thread+0xfe>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8008db0:	4b07      	ldr	r3, [pc, #28]	; (8008dd0 <tcpip_thread+0x110>)
 8008db2:	229b      	movs	r2, #155	; 0x9b
 8008db4:	4907      	ldr	r1, [pc, #28]	; (8008dd4 <tcpip_thread+0x114>)
 8008db6:	4808      	ldr	r0, [pc, #32]	; (8008dd8 <tcpip_thread+0x118>)
 8008db8:	f00d f80c 	bl	8015dd4 <iprintf>
      break;
 8008dbc:	bf00      	nop
    UNLOCK_TCPIP_CORE();
 8008dbe:	e790      	b.n	8008ce2 <tcpip_thread+0x22>
 8008dc0:	20003fc4 	.word	0x20003fc4
 8008dc4:	20003fc8 	.word	0x20003fc8
 8008dc8:	200041e8 	.word	0x200041e8
 8008dcc:	20003fcc 	.word	0x20003fcc
 8008dd0:	08018604 	.word	0x08018604
 8008dd4:	08018634 	.word	0x08018634
 8008dd8:	08018654 	.word	0x08018654

08008ddc <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b086      	sub	sp, #24
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	60f8      	str	r0, [r7, #12]
 8008de4:	60b9      	str	r1, [r7, #8]
 8008de6:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008de8:	481a      	ldr	r0, [pc, #104]	; (8008e54 <tcpip_inpkt+0x78>)
 8008dea:	f009 fe9d 	bl	8012b28 <sys_mbox_valid>
 8008dee:	4603      	mov	r3, r0
 8008df0:	2b00      	cmp	r3, #0
 8008df2:	d105      	bne.n	8008e00 <tcpip_inpkt+0x24>
 8008df4:	4b18      	ldr	r3, [pc, #96]	; (8008e58 <tcpip_inpkt+0x7c>)
 8008df6:	22b5      	movs	r2, #181	; 0xb5
 8008df8:	4918      	ldr	r1, [pc, #96]	; (8008e5c <tcpip_inpkt+0x80>)
 8008dfa:	4819      	ldr	r0, [pc, #100]	; (8008e60 <tcpip_inpkt+0x84>)
 8008dfc:	f00c ffea 	bl	8015dd4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008e00:	2009      	movs	r0, #9
 8008e02:	f002 fe0d 	bl	800ba20 <memp_malloc>
 8008e06:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008e08:	697b      	ldr	r3, [r7, #20]
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d102      	bne.n	8008e14 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e12:	e01a      	b.n	8008e4a <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	2202      	movs	r2, #2
 8008e18:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	68fa      	ldr	r2, [r7, #12]
 8008e1e:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	68ba      	ldr	r2, [r7, #8]
 8008e24:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008e26:	697b      	ldr	r3, [r7, #20]
 8008e28:	687a      	ldr	r2, [r7, #4]
 8008e2a:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008e2c:	6979      	ldr	r1, [r7, #20]
 8008e2e:	4809      	ldr	r0, [pc, #36]	; (8008e54 <tcpip_inpkt+0x78>)
 8008e30:	f009 fe05 	bl	8012a3e <sys_mbox_trypost>
 8008e34:	4603      	mov	r3, r0
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d006      	beq.n	8008e48 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008e3a:	6979      	ldr	r1, [r7, #20]
 8008e3c:	2009      	movs	r0, #9
 8008e3e:	f002 fe41 	bl	800bac4 <memp_free>
    return ERR_MEM;
 8008e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008e46:	e000      	b.n	8008e4a <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008e48:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008e4a:	4618      	mov	r0, r3
 8008e4c:	3718      	adds	r7, #24
 8008e4e:	46bd      	mov	sp, r7
 8008e50:	bd80      	pop	{r7, pc}
 8008e52:	bf00      	nop
 8008e54:	20003fcc 	.word	0x20003fcc
 8008e58:	08018604 	.word	0x08018604
 8008e5c:	0801867c 	.word	0x0801867c
 8008e60:	08018654 	.word	0x08018654

08008e64 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b082      	sub	sp, #8
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8008e74:	f003 0318 	and.w	r3, r3, #24
 8008e78:	2b00      	cmp	r3, #0
 8008e7a:	d006      	beq.n	8008e8a <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008e7c:	4a08      	ldr	r2, [pc, #32]	; (8008ea0 <tcpip_input+0x3c>)
 8008e7e:	6839      	ldr	r1, [r7, #0]
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f7ff ffab 	bl	8008ddc <tcpip_inpkt>
 8008e86:	4603      	mov	r3, r0
 8008e88:	e005      	b.n	8008e96 <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
  return tcpip_inpkt(p, inp, ip_input);
 8008e8a:	4a06      	ldr	r2, [pc, #24]	; (8008ea4 <tcpip_input+0x40>)
 8008e8c:	6839      	ldr	r1, [r7, #0]
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f7ff ffa4 	bl	8008ddc <tcpip_inpkt>
 8008e94:	4603      	mov	r3, r0
}
 8008e96:	4618      	mov	r0, r3
 8008e98:	3708      	adds	r7, #8
 8008e9a:	46bd      	mov	sp, r7
 8008e9c:	bd80      	pop	{r7, pc}
 8008e9e:	bf00      	nop
 8008ea0:	08012801 	.word	0x08012801
 8008ea4:	0800a291 	.word	0x0800a291

08008ea8 <tcpip_callback_with_block>:
 * @param block 1 to block until the request is posted, 0 to non-blocking mode
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_callback_with_block(tcpip_callback_fn function, void *ctx, u8_t block)
{
 8008ea8:	b580      	push	{r7, lr}
 8008eaa:	b086      	sub	sp, #24
 8008eac:	af00      	add	r7, sp, #0
 8008eae:	60f8      	str	r0, [r7, #12]
 8008eb0:	60b9      	str	r1, [r7, #8]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	71fb      	strb	r3, [r7, #7]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(mbox));
 8008eb6:	481d      	ldr	r0, [pc, #116]	; (8008f2c <tcpip_callback_with_block+0x84>)
 8008eb8:	f009 fe36 	bl	8012b28 <sys_mbox_valid>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	2b00      	cmp	r3, #0
 8008ec0:	d105      	bne.n	8008ece <tcpip_callback_with_block+0x26>
 8008ec2:	4b1b      	ldr	r3, [pc, #108]	; (8008f30 <tcpip_callback_with_block+0x88>)
 8008ec4:	22ee      	movs	r2, #238	; 0xee
 8008ec6:	491b      	ldr	r1, [pc, #108]	; (8008f34 <tcpip_callback_with_block+0x8c>)
 8008ec8:	481b      	ldr	r0, [pc, #108]	; (8008f38 <tcpip_callback_with_block+0x90>)
 8008eca:	f00c ff83 	bl	8015dd4 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008ece:	2008      	movs	r0, #8
 8008ed0:	f002 fda6 	bl	800ba20 <memp_malloc>
 8008ed4:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d102      	bne.n	8008ee2 <tcpip_callback_with_block+0x3a>
    return ERR_MEM;
 8008edc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008ee0:	e01f      	b.n	8008f22 <tcpip_callback_with_block+0x7a>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008ee2:	697b      	ldr	r3, [r7, #20]
 8008ee4:	2205      	movs	r2, #5
 8008ee6:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008ee8:	697b      	ldr	r3, [r7, #20]
 8008eea:	68fa      	ldr	r2, [r7, #12]
 8008eec:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008eee:	697b      	ldr	r3, [r7, #20]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	609a      	str	r2, [r3, #8]
  if (block) {
 8008ef4:	79fb      	ldrb	r3, [r7, #7]
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d004      	beq.n	8008f04 <tcpip_callback_with_block+0x5c>
    sys_mbox_post(&mbox, msg);
 8008efa:	6979      	ldr	r1, [r7, #20]
 8008efc:	480b      	ldr	r0, [pc, #44]	; (8008f2c <tcpip_callback_with_block+0x84>)
 8008efe:	f009 fd89 	bl	8012a14 <sys_mbox_post>
 8008f02:	e00d      	b.n	8008f20 <tcpip_callback_with_block+0x78>
  } else {
    if (sys_mbox_trypost(&mbox, msg) != ERR_OK) {
 8008f04:	6979      	ldr	r1, [r7, #20]
 8008f06:	4809      	ldr	r0, [pc, #36]	; (8008f2c <tcpip_callback_with_block+0x84>)
 8008f08:	f009 fd99 	bl	8012a3e <sys_mbox_trypost>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d006      	beq.n	8008f20 <tcpip_callback_with_block+0x78>
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8008f12:	6979      	ldr	r1, [r7, #20]
 8008f14:	2008      	movs	r0, #8
 8008f16:	f002 fdd5 	bl	800bac4 <memp_free>
      return ERR_MEM;
 8008f1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008f1e:	e000      	b.n	8008f22 <tcpip_callback_with_block+0x7a>
    }
  }
  return ERR_OK;
 8008f20:	2300      	movs	r3, #0
}
 8008f22:	4618      	mov	r0, r3
 8008f24:	3718      	adds	r7, #24
 8008f26:	46bd      	mov	sp, r7
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	bf00      	nop
 8008f2c:	20003fcc 	.word	0x20003fcc
 8008f30:	08018604 	.word	0x08018604
 8008f34:	0801867c 	.word	0x0801867c
 8008f38:	08018654 	.word	0x08018654

08008f3c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t* sem)
{
 8008f3c:	b580      	push	{r7, lr}
 8008f3e:	b084      	sub	sp, #16
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	60f8      	str	r0, [r7, #12]
 8008f44:	60b9      	str	r1, [r7, #8]
 8008f46:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8008f48:	4806      	ldr	r0, [pc, #24]	; (8008f64 <tcpip_send_msg_wait_sem+0x28>)
 8008f4a:	f009 fec3 	bl	8012cd4 <sys_mutex_lock>
  fn(apimsg);
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	68b8      	ldr	r0, [r7, #8]
 8008f52:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8008f54:	4803      	ldr	r0, [pc, #12]	; (8008f64 <tcpip_send_msg_wait_sem+0x28>)
 8008f56:	f009 fecc 	bl	8012cf2 <sys_mutex_unlock>
  return ERR_OK;
 8008f5a:	2300      	movs	r3, #0
  sys_mbox_post(&mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	200041e8 	.word	0x200041e8

08008f68 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b084      	sub	sp, #16
 8008f6c:	af02      	add	r7, sp, #8
 8008f6e:	6078      	str	r0, [r7, #4]
 8008f70:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008f72:	f000 f86a 	bl	800904a <lwip_init>

  tcpip_init_done = initfunc;
 8008f76:	4a17      	ldr	r2, [pc, #92]	; (8008fd4 <tcpip_init+0x6c>)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008f7c:	4a16      	ldr	r2, [pc, #88]	; (8008fd8 <tcpip_init+0x70>)
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008f82:	2106      	movs	r1, #6
 8008f84:	4815      	ldr	r0, [pc, #84]	; (8008fdc <tcpip_init+0x74>)
 8008f86:	f009 fd15 	bl	80129b4 <sys_mbox_new>
 8008f8a:	4603      	mov	r3, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d006      	beq.n	8008f9e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008f90:	4b13      	ldr	r3, [pc, #76]	; (8008fe0 <tcpip_init+0x78>)
 8008f92:	f240 12d5 	movw	r2, #469	; 0x1d5
 8008f96:	4913      	ldr	r1, [pc, #76]	; (8008fe4 <tcpip_init+0x7c>)
 8008f98:	4813      	ldr	r0, [pc, #76]	; (8008fe8 <tcpip_init+0x80>)
 8008f9a:	f00c ff1b 	bl	8015dd4 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008f9e:	4813      	ldr	r0, [pc, #76]	; (8008fec <tcpip_init+0x84>)
 8008fa0:	f009 fe7e 	bl	8012ca0 <sys_mutex_new>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d006      	beq.n	8008fb8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008faa:	4b0d      	ldr	r3, [pc, #52]	; (8008fe0 <tcpip_init+0x78>)
 8008fac:	f240 12d9 	movw	r2, #473	; 0x1d9
 8008fb0:	490f      	ldr	r1, [pc, #60]	; (8008ff0 <tcpip_init+0x88>)
 8008fb2:	480d      	ldr	r0, [pc, #52]	; (8008fe8 <tcpip_init+0x80>)
 8008fb4:	f00c ff0e 	bl	8015dd4 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008fb8:	2303      	movs	r3, #3
 8008fba:	9300      	str	r3, [sp, #0]
 8008fbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	490c      	ldr	r1, [pc, #48]	; (8008ff4 <tcpip_init+0x8c>)
 8008fc4:	480c      	ldr	r0, [pc, #48]	; (8008ff8 <tcpip_init+0x90>)
 8008fc6:	f009 fea1 	bl	8012d0c <sys_thread_new>
}
 8008fca:	bf00      	nop
 8008fcc:	3708      	adds	r7, #8
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	bd80      	pop	{r7, pc}
 8008fd2:	bf00      	nop
 8008fd4:	20003fc4 	.word	0x20003fc4
 8008fd8:	20003fc8 	.word	0x20003fc8
 8008fdc:	20003fcc 	.word	0x20003fcc
 8008fe0:	08018604 	.word	0x08018604
 8008fe4:	0801868c 	.word	0x0801868c
 8008fe8:	08018654 	.word	0x08018654
 8008fec:	200041e8 	.word	0x200041e8
 8008ff0:	080186b0 	.word	0x080186b0
 8008ff4:	08008cc1 	.word	0x08008cc1
 8008ff8:	080186d4 	.word	0x080186d4

08008ffc <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8008ffc:	b480      	push	{r7}
 8008ffe:	b083      	sub	sp, #12
 8009000:	af00      	add	r7, sp, #0
 8009002:	4603      	mov	r3, r0
 8009004:	80fb      	strh	r3, [r7, #6]
  return (u16_t)PP_HTONS(n);
 8009006:	88fb      	ldrh	r3, [r7, #6]
 8009008:	ba5b      	rev16	r3, r3
 800900a:	b29b      	uxth	r3, r3
}
 800900c:	4618      	mov	r0, r3
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  return (u32_t)PP_HTONL(n);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	061a      	lsls	r2, r3, #24
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	021b      	lsls	r3, r3, #8
 8009028:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800902c:	431a      	orrs	r2, r3
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	0a1b      	lsrs	r3, r3, #8
 8009032:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8009036:	431a      	orrs	r2, r3
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	0e1b      	lsrs	r3, r3, #24
 800903c:	4313      	orrs	r3, r2
}
 800903e:	4618      	mov	r0, r3
 8009040:	370c      	adds	r7, #12
 8009042:	46bd      	mov	sp, r7
 8009044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009048:	4770      	bx	lr

0800904a <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800904a:	b580      	push	{r7, lr}
 800904c:	b082      	sub	sp, #8
 800904e:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8009050:	2300      	movs	r3, #0
 8009052:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8009054:	f009 fe16 	bl	8012c84 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8009058:	f002 f9ca 	bl	800b3f0 <mem_init>
  memp_init();
 800905c:	f002 fc94 	bl	800b988 <memp_init>
  pbuf_init();
  netif_init();
 8009060:	f002 fd5a 	bl	800bb18 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8009064:	f009 f94e 	bl	8012304 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8009068:	f003 fcfc 	bl	800ca64 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif
 
#if LWIP_TIMERS
  sys_timeouts_init();
 800906c:	f008 ff98 	bl	8011fa0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8009070:	bf00      	nop
 8009072:	3708      	adds	r7, #8
 8009074:	46bd      	mov	sp, r7
 8009076:	bd80      	pop	{r7, pc}

08009078 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b082      	sub	sp, #8
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8009080:	4915      	ldr	r1, [pc, #84]	; (80090d8 <etharp_free_entry+0x60>)
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	4613      	mov	r3, r2
 8009086:	005b      	lsls	r3, r3, #1
 8009088:	4413      	add	r3, r2
 800908a:	00db      	lsls	r3, r3, #3
 800908c:	440b      	add	r3, r1
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	2b00      	cmp	r3, #0
 8009092:	d013      	beq.n	80090bc <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8009094:	4910      	ldr	r1, [pc, #64]	; (80090d8 <etharp_free_entry+0x60>)
 8009096:	687a      	ldr	r2, [r7, #4]
 8009098:	4613      	mov	r3, r2
 800909a:	005b      	lsls	r3, r3, #1
 800909c:	4413      	add	r3, r2
 800909e:	00db      	lsls	r3, r3, #3
 80090a0:	440b      	add	r3, r1
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	4618      	mov	r0, r3
 80090a6:	f003 fa67 	bl	800c578 <pbuf_free>
    arp_table[i].q = NULL;
 80090aa:	490b      	ldr	r1, [pc, #44]	; (80090d8 <etharp_free_entry+0x60>)
 80090ac:	687a      	ldr	r2, [r7, #4]
 80090ae:	4613      	mov	r3, r2
 80090b0:	005b      	lsls	r3, r3, #1
 80090b2:	4413      	add	r3, r2
 80090b4:	00db      	lsls	r3, r3, #3
 80090b6:	440b      	add	r3, r1
 80090b8:	2200      	movs	r2, #0
 80090ba:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80090bc:	4906      	ldr	r1, [pc, #24]	; (80090d8 <etharp_free_entry+0x60>)
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	4613      	mov	r3, r2
 80090c2:	005b      	lsls	r3, r3, #1
 80090c4:	4413      	add	r3, r2
 80090c6:	00db      	lsls	r3, r3, #3
 80090c8:	440b      	add	r3, r1
 80090ca:	3314      	adds	r3, #20
 80090cc:	2200      	movs	r2, #0
 80090ce:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80090d0:	bf00      	nop
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	20003fd0 	.word	0x20003fd0

080090dc <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
  u8_t i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80090e2:	2300      	movs	r3, #0
 80090e4:	71fb      	strb	r3, [r7, #7]
 80090e6:	e096      	b.n	8009216 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80090e8:	79fa      	ldrb	r2, [r7, #7]
 80090ea:	494f      	ldr	r1, [pc, #316]	; (8009228 <etharp_tmr+0x14c>)
 80090ec:	4613      	mov	r3, r2
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	4413      	add	r3, r2
 80090f2:	00db      	lsls	r3, r3, #3
 80090f4:	440b      	add	r3, r1
 80090f6:	3314      	adds	r3, #20
 80090f8:	781b      	ldrb	r3, [r3, #0]
 80090fa:	71bb      	strb	r3, [r7, #6]
    if (state != ETHARP_STATE_EMPTY
 80090fc:	79bb      	ldrb	r3, [r7, #6]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	f000 8086 	beq.w	8009210 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
      && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
      ) {
      arp_table[i].ctime++;
 8009104:	79fa      	ldrb	r2, [r7, #7]
 8009106:	4948      	ldr	r1, [pc, #288]	; (8009228 <etharp_tmr+0x14c>)
 8009108:	4613      	mov	r3, r2
 800910a:	005b      	lsls	r3, r3, #1
 800910c:	4413      	add	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	440b      	add	r3, r1
 8009112:	3312      	adds	r3, #18
 8009114:	881b      	ldrh	r3, [r3, #0]
 8009116:	3301      	adds	r3, #1
 8009118:	b298      	uxth	r0, r3
 800911a:	4943      	ldr	r1, [pc, #268]	; (8009228 <etharp_tmr+0x14c>)
 800911c:	4613      	mov	r3, r2
 800911e:	005b      	lsls	r3, r3, #1
 8009120:	4413      	add	r3, r2
 8009122:	00db      	lsls	r3, r3, #3
 8009124:	440b      	add	r3, r1
 8009126:	3312      	adds	r3, #18
 8009128:	4602      	mov	r2, r0
 800912a:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 800912c:	79fa      	ldrb	r2, [r7, #7]
 800912e:	493e      	ldr	r1, [pc, #248]	; (8009228 <etharp_tmr+0x14c>)
 8009130:	4613      	mov	r3, r2
 8009132:	005b      	lsls	r3, r3, #1
 8009134:	4413      	add	r3, r2
 8009136:	00db      	lsls	r3, r3, #3
 8009138:	440b      	add	r3, r1
 800913a:	3312      	adds	r3, #18
 800913c:	881b      	ldrh	r3, [r3, #0]
 800913e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8009142:	d215      	bcs.n	8009170 <etharp_tmr+0x94>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8009144:	79fa      	ldrb	r2, [r7, #7]
 8009146:	4938      	ldr	r1, [pc, #224]	; (8009228 <etharp_tmr+0x14c>)
 8009148:	4613      	mov	r3, r2
 800914a:	005b      	lsls	r3, r3, #1
 800914c:	4413      	add	r3, r2
 800914e:	00db      	lsls	r3, r3, #3
 8009150:	440b      	add	r3, r1
 8009152:	3314      	adds	r3, #20
 8009154:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8009156:	2b01      	cmp	r3, #1
 8009158:	d10f      	bne.n	800917a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 800915a:	79fa      	ldrb	r2, [r7, #7]
 800915c:	4932      	ldr	r1, [pc, #200]	; (8009228 <etharp_tmr+0x14c>)
 800915e:	4613      	mov	r3, r2
 8009160:	005b      	lsls	r3, r3, #1
 8009162:	4413      	add	r3, r2
 8009164:	00db      	lsls	r3, r3, #3
 8009166:	440b      	add	r3, r1
 8009168:	3312      	adds	r3, #18
 800916a:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 800916c:	2b04      	cmp	r3, #4
 800916e:	d904      	bls.n	800917a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %"U16_F".\n",
             arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", (u16_t)i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8009170:	79fb      	ldrb	r3, [r7, #7]
 8009172:	4618      	mov	r0, r3
 8009174:	f7ff ff80 	bl	8009078 <etharp_free_entry>
 8009178:	e04a      	b.n	8009210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 800917a:	79fa      	ldrb	r2, [r7, #7]
 800917c:	492a      	ldr	r1, [pc, #168]	; (8009228 <etharp_tmr+0x14c>)
 800917e:	4613      	mov	r3, r2
 8009180:	005b      	lsls	r3, r3, #1
 8009182:	4413      	add	r3, r2
 8009184:	00db      	lsls	r3, r3, #3
 8009186:	440b      	add	r3, r1
 8009188:	3314      	adds	r3, #20
 800918a:	781b      	ldrb	r3, [r3, #0]
 800918c:	2b03      	cmp	r3, #3
 800918e:	d10a      	bne.n	80091a6 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8009190:	79fa      	ldrb	r2, [r7, #7]
 8009192:	4925      	ldr	r1, [pc, #148]	; (8009228 <etharp_tmr+0x14c>)
 8009194:	4613      	mov	r3, r2
 8009196:	005b      	lsls	r3, r3, #1
 8009198:	4413      	add	r3, r2
 800919a:	00db      	lsls	r3, r3, #3
 800919c:	440b      	add	r3, r1
 800919e:	3314      	adds	r3, #20
 80091a0:	2204      	movs	r2, #4
 80091a2:	701a      	strb	r2, [r3, #0]
 80091a4:	e034      	b.n	8009210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80091a6:	79fa      	ldrb	r2, [r7, #7]
 80091a8:	491f      	ldr	r1, [pc, #124]	; (8009228 <etharp_tmr+0x14c>)
 80091aa:	4613      	mov	r3, r2
 80091ac:	005b      	lsls	r3, r3, #1
 80091ae:	4413      	add	r3, r2
 80091b0:	00db      	lsls	r3, r3, #3
 80091b2:	440b      	add	r3, r1
 80091b4:	3314      	adds	r3, #20
 80091b6:	781b      	ldrb	r3, [r3, #0]
 80091b8:	2b04      	cmp	r3, #4
 80091ba:	d10a      	bne.n	80091d2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80091bc:	79fa      	ldrb	r2, [r7, #7]
 80091be:	491a      	ldr	r1, [pc, #104]	; (8009228 <etharp_tmr+0x14c>)
 80091c0:	4613      	mov	r3, r2
 80091c2:	005b      	lsls	r3, r3, #1
 80091c4:	4413      	add	r3, r2
 80091c6:	00db      	lsls	r3, r3, #3
 80091c8:	440b      	add	r3, r1
 80091ca:	3314      	adds	r3, #20
 80091cc:	2202      	movs	r2, #2
 80091ce:	701a      	strb	r2, [r3, #0]
 80091d0:	e01e      	b.n	8009210 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80091d2:	79fa      	ldrb	r2, [r7, #7]
 80091d4:	4914      	ldr	r1, [pc, #80]	; (8009228 <etharp_tmr+0x14c>)
 80091d6:	4613      	mov	r3, r2
 80091d8:	005b      	lsls	r3, r3, #1
 80091da:	4413      	add	r3, r2
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	440b      	add	r3, r1
 80091e0:	3314      	adds	r3, #20
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d113      	bne.n	8009210 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80091e8:	79fa      	ldrb	r2, [r7, #7]
 80091ea:	490f      	ldr	r1, [pc, #60]	; (8009228 <etharp_tmr+0x14c>)
 80091ec:	4613      	mov	r3, r2
 80091ee:	005b      	lsls	r3, r3, #1
 80091f0:	4413      	add	r3, r2
 80091f2:	00db      	lsls	r3, r3, #3
 80091f4:	440b      	add	r3, r1
 80091f6:	3308      	adds	r3, #8
 80091f8:	6818      	ldr	r0, [r3, #0]
 80091fa:	79fa      	ldrb	r2, [r7, #7]
 80091fc:	4613      	mov	r3, r2
 80091fe:	005b      	lsls	r3, r3, #1
 8009200:	4413      	add	r3, r2
 8009202:	00db      	lsls	r3, r3, #3
 8009204:	4a08      	ldr	r2, [pc, #32]	; (8009228 <etharp_tmr+0x14c>)
 8009206:	4413      	add	r3, r2
 8009208:	3304      	adds	r3, #4
 800920a:	4619      	mov	r1, r3
 800920c:	f000 fe38 	bl	8009e80 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009210:	79fb      	ldrb	r3, [r7, #7]
 8009212:	3301      	adds	r3, #1
 8009214:	71fb      	strb	r3, [r7, #7]
 8009216:	79fb      	ldrb	r3, [r7, #7]
 8009218:	2b09      	cmp	r3, #9
 800921a:	f67f af65 	bls.w	80090e8 <etharp_tmr+0xc>
      }
    }
  }
}
 800921e:	bf00      	nop
 8009220:	3708      	adds	r7, #8
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}
 8009226:	bf00      	nop
 8009228:	20003fd0 	.word	0x20003fd0

0800922c <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s8_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif* netif)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	60f8      	str	r0, [r7, #12]
 8009234:	460b      	mov	r3, r1
 8009236:	607a      	str	r2, [r7, #4]
 8009238:	72fb      	strb	r3, [r7, #11]
  s8_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 800923a:	230a      	movs	r3, #10
 800923c:	77fb      	strb	r3, [r7, #31]
 800923e:	230a      	movs	r3, #10
 8009240:	77bb      	strb	r3, [r7, #30]
  s8_t empty = ARP_TABLE_SIZE;
 8009242:	230a      	movs	r3, #10
 8009244:	777b      	strb	r3, [r7, #29]
  u8_t i = 0;
 8009246:	2300      	movs	r3, #0
 8009248:	773b      	strb	r3, [r7, #28]
  /* oldest entry with packets on queue */
  s8_t old_queue = ARP_TABLE_SIZE;
 800924a:	230a      	movs	r3, #10
 800924c:	76fb      	strb	r3, [r7, #27]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 800924e:	2300      	movs	r3, #0
 8009250:	833b      	strh	r3, [r7, #24]
 8009252:	2300      	movs	r3, #0
 8009254:	82fb      	strh	r3, [r7, #22]
 8009256:	2300      	movs	r3, #0
 8009258:	82bb      	strh	r3, [r7, #20]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 800925a:	2300      	movs	r3, #0
 800925c:	773b      	strb	r3, [r7, #28]
 800925e:	e093      	b.n	8009388 <etharp_find_entry+0x15c>
    u8_t state = arp_table[i].state;
 8009260:	7f3a      	ldrb	r2, [r7, #28]
 8009262:	4990      	ldr	r1, [pc, #576]	; (80094a4 <etharp_find_entry+0x278>)
 8009264:	4613      	mov	r3, r2
 8009266:	005b      	lsls	r3, r3, #1
 8009268:	4413      	add	r3, r2
 800926a:	00db      	lsls	r3, r3, #3
 800926c:	440b      	add	r3, r1
 800926e:	3314      	adds	r3, #20
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	74fb      	strb	r3, [r7, #19]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8009274:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009278:	2b0a      	cmp	r3, #10
 800927a:	d105      	bne.n	8009288 <etharp_find_entry+0x5c>
 800927c:	7cfb      	ldrb	r3, [r7, #19]
 800927e:	2b00      	cmp	r3, #0
 8009280:	d102      	bne.n	8009288 <etharp_find_entry+0x5c>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %"U16_F"\n", (u16_t)i));
      /* remember first empty entry */
      empty = i;
 8009282:	7f3b      	ldrb	r3, [r7, #28]
 8009284:	777b      	strb	r3, [r7, #29]
 8009286:	e07c      	b.n	8009382 <etharp_find_entry+0x156>
    } else if (state != ETHARP_STATE_EMPTY) {
 8009288:	7cfb      	ldrb	r3, [r7, #19]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d079      	beq.n	8009382 <etharp_find_entry+0x156>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 800928e:	7cfb      	ldrb	r3, [r7, #19]
 8009290:	2b01      	cmp	r3, #1
 8009292:	d009      	beq.n	80092a8 <etharp_find_entry+0x7c>
 8009294:	7cfb      	ldrb	r3, [r7, #19]
 8009296:	2b01      	cmp	r3, #1
 8009298:	d806      	bhi.n	80092a8 <etharp_find_entry+0x7c>
 800929a:	4b83      	ldr	r3, [pc, #524]	; (80094a8 <etharp_find_entry+0x27c>)
 800929c:	f44f 7293 	mov.w	r2, #294	; 0x126
 80092a0:	4982      	ldr	r1, [pc, #520]	; (80094ac <etharp_find_entry+0x280>)
 80092a2:	4883      	ldr	r0, [pc, #524]	; (80094b0 <etharp_find_entry+0x284>)
 80092a4:	f00c fd96 	bl	8015dd4 <iprintf>
        state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00f      	beq.n	80092ce <etharp_find_entry+0xa2>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6819      	ldr	r1, [r3, #0]
 80092b2:	7f3a      	ldrb	r2, [r7, #28]
 80092b4:	487b      	ldr	r0, [pc, #492]	; (80094a4 <etharp_find_entry+0x278>)
 80092b6:	4613      	mov	r3, r2
 80092b8:	005b      	lsls	r3, r3, #1
 80092ba:	4413      	add	r3, r2
 80092bc:	00db      	lsls	r3, r3, #3
 80092be:	4403      	add	r3, r0
 80092c0:	3304      	adds	r3, #4
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4299      	cmp	r1, r3
 80092c6:	d102      	bne.n	80092ce <etharp_find_entry+0xa2>
          && ((netif == NULL) || (netif == arp_table[i].netif))
#endif /* ETHARP_TABLE_MATCH_NETIF */
        ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %"U16_F"\n", (u16_t)i));
        /* found exact IP address match, simply bail out */
        return i;
 80092c8:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80092cc:	e0e5      	b.n	800949a <etharp_find_entry+0x26e>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80092ce:	7cfb      	ldrb	r3, [r7, #19]
 80092d0:	2b01      	cmp	r3, #1
 80092d2:	d13b      	bne.n	800934c <etharp_find_entry+0x120>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80092d4:	7f3a      	ldrb	r2, [r7, #28]
 80092d6:	4973      	ldr	r1, [pc, #460]	; (80094a4 <etharp_find_entry+0x278>)
 80092d8:	4613      	mov	r3, r2
 80092da:	005b      	lsls	r3, r3, #1
 80092dc:	4413      	add	r3, r2
 80092de:	00db      	lsls	r3, r3, #3
 80092e0:	440b      	add	r3, r1
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d018      	beq.n	800931a <etharp_find_entry+0xee>
          if (arp_table[i].ctime >= age_queue) {
 80092e8:	7f3a      	ldrb	r2, [r7, #28]
 80092ea:	496e      	ldr	r1, [pc, #440]	; (80094a4 <etharp_find_entry+0x278>)
 80092ec:	4613      	mov	r3, r2
 80092ee:	005b      	lsls	r3, r3, #1
 80092f0:	4413      	add	r3, r2
 80092f2:	00db      	lsls	r3, r3, #3
 80092f4:	440b      	add	r3, r1
 80092f6:	3312      	adds	r3, #18
 80092f8:	881b      	ldrh	r3, [r3, #0]
 80092fa:	8b3a      	ldrh	r2, [r7, #24]
 80092fc:	429a      	cmp	r2, r3
 80092fe:	d840      	bhi.n	8009382 <etharp_find_entry+0x156>
            old_queue = i;
 8009300:	7f3b      	ldrb	r3, [r7, #28]
 8009302:	76fb      	strb	r3, [r7, #27]
            age_queue = arp_table[i].ctime;
 8009304:	7f3a      	ldrb	r2, [r7, #28]
 8009306:	4967      	ldr	r1, [pc, #412]	; (80094a4 <etharp_find_entry+0x278>)
 8009308:	4613      	mov	r3, r2
 800930a:	005b      	lsls	r3, r3, #1
 800930c:	4413      	add	r3, r2
 800930e:	00db      	lsls	r3, r3, #3
 8009310:	440b      	add	r3, r1
 8009312:	3312      	adds	r3, #18
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	833b      	strh	r3, [r7, #24]
 8009318:	e033      	b.n	8009382 <etharp_find_entry+0x156>
          }
        } else
        /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 800931a:	7f3a      	ldrb	r2, [r7, #28]
 800931c:	4961      	ldr	r1, [pc, #388]	; (80094a4 <etharp_find_entry+0x278>)
 800931e:	4613      	mov	r3, r2
 8009320:	005b      	lsls	r3, r3, #1
 8009322:	4413      	add	r3, r2
 8009324:	00db      	lsls	r3, r3, #3
 8009326:	440b      	add	r3, r1
 8009328:	3312      	adds	r3, #18
 800932a:	881b      	ldrh	r3, [r3, #0]
 800932c:	8afa      	ldrh	r2, [r7, #22]
 800932e:	429a      	cmp	r2, r3
 8009330:	d827      	bhi.n	8009382 <etharp_find_entry+0x156>
            old_pending = i;
 8009332:	7f3b      	ldrb	r3, [r7, #28]
 8009334:	77fb      	strb	r3, [r7, #31]
            age_pending = arp_table[i].ctime;
 8009336:	7f3a      	ldrb	r2, [r7, #28]
 8009338:	495a      	ldr	r1, [pc, #360]	; (80094a4 <etharp_find_entry+0x278>)
 800933a:	4613      	mov	r3, r2
 800933c:	005b      	lsls	r3, r3, #1
 800933e:	4413      	add	r3, r2
 8009340:	00db      	lsls	r3, r3, #3
 8009342:	440b      	add	r3, r1
 8009344:	3312      	adds	r3, #18
 8009346:	881b      	ldrh	r3, [r3, #0]
 8009348:	82fb      	strh	r3, [r7, #22]
 800934a:	e01a      	b.n	8009382 <etharp_find_entry+0x156>
          }
        }
      /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 800934c:	7cfb      	ldrb	r3, [r7, #19]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d917      	bls.n	8009382 <etharp_find_entry+0x156>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8009352:	7f3a      	ldrb	r2, [r7, #28]
 8009354:	4953      	ldr	r1, [pc, #332]	; (80094a4 <etharp_find_entry+0x278>)
 8009356:	4613      	mov	r3, r2
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	4413      	add	r3, r2
 800935c:	00db      	lsls	r3, r3, #3
 800935e:	440b      	add	r3, r1
 8009360:	3312      	adds	r3, #18
 8009362:	881b      	ldrh	r3, [r3, #0]
 8009364:	8aba      	ldrh	r2, [r7, #20]
 8009366:	429a      	cmp	r2, r3
 8009368:	d80b      	bhi.n	8009382 <etharp_find_entry+0x156>
            old_stable = i;
 800936a:	7f3b      	ldrb	r3, [r7, #28]
 800936c:	77bb      	strb	r3, [r7, #30]
            age_stable = arp_table[i].ctime;
 800936e:	7f3a      	ldrb	r2, [r7, #28]
 8009370:	494c      	ldr	r1, [pc, #304]	; (80094a4 <etharp_find_entry+0x278>)
 8009372:	4613      	mov	r3, r2
 8009374:	005b      	lsls	r3, r3, #1
 8009376:	4413      	add	r3, r2
 8009378:	00db      	lsls	r3, r3, #3
 800937a:	440b      	add	r3, r1
 800937c:	3312      	adds	r3, #18
 800937e:	881b      	ldrh	r3, [r3, #0]
 8009380:	82bb      	strh	r3, [r7, #20]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009382:	7f3b      	ldrb	r3, [r7, #28]
 8009384:	3301      	adds	r3, #1
 8009386:	773b      	strb	r3, [r7, #28]
 8009388:	7f3b      	ldrb	r3, [r7, #28]
 800938a:	2b09      	cmp	r3, #9
 800938c:	f67f af68 	bls.w	8009260 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8009390:	7afb      	ldrb	r3, [r7, #11]
 8009392:	f003 0302 	and.w	r3, r3, #2
 8009396:	2b00      	cmp	r3, #0
 8009398:	d108      	bne.n	80093ac <etharp_find_entry+0x180>
 800939a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800939e:	2b0a      	cmp	r3, #10
 80093a0:	d107      	bne.n	80093b2 <etharp_find_entry+0x186>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80093a2:	7afb      	ldrb	r3, [r7, #11]
 80093a4:	f003 0301 	and.w	r3, r3, #1
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d102      	bne.n	80093b2 <etharp_find_entry+0x186>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s8_t)ERR_MEM;
 80093ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80093b0:	e073      	b.n	800949a <etharp_find_entry+0x26e>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80093b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80093b6:	2b09      	cmp	r3, #9
 80093b8:	dc02      	bgt.n	80093c0 <etharp_find_entry+0x194>
    i = empty;
 80093ba:	7f7b      	ldrb	r3, [r7, #29]
 80093bc:	773b      	strb	r3, [r7, #28]
 80093be:	e036      	b.n	800942e <etharp_find_entry+0x202>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %"U16_F"\n", (u16_t)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80093c0:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80093c4:	2b09      	cmp	r3, #9
 80093c6:	dc13      	bgt.n	80093f0 <etharp_find_entry+0x1c4>
      /* recycle oldest stable*/
      i = old_stable;
 80093c8:	7fbb      	ldrb	r3, [r7, #30]
 80093ca:	773b      	strb	r3, [r7, #28]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %"U16_F"\n", (u16_t)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80093cc:	7f3a      	ldrb	r2, [r7, #28]
 80093ce:	4935      	ldr	r1, [pc, #212]	; (80094a4 <etharp_find_entry+0x278>)
 80093d0:	4613      	mov	r3, r2
 80093d2:	005b      	lsls	r3, r3, #1
 80093d4:	4413      	add	r3, r2
 80093d6:	00db      	lsls	r3, r3, #3
 80093d8:	440b      	add	r3, r1
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d018      	beq.n	8009412 <etharp_find_entry+0x1e6>
 80093e0:	4b31      	ldr	r3, [pc, #196]	; (80094a8 <etharp_find_entry+0x27c>)
 80093e2:	f240 126f 	movw	r2, #367	; 0x16f
 80093e6:	4933      	ldr	r1, [pc, #204]	; (80094b4 <etharp_find_entry+0x288>)
 80093e8:	4831      	ldr	r0, [pc, #196]	; (80094b0 <etharp_find_entry+0x284>)
 80093ea:	f00c fcf3 	bl	8015dd4 <iprintf>
 80093ee:	e010      	b.n	8009412 <etharp_find_entry+0x1e6>
    /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80093f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80093f4:	2b09      	cmp	r3, #9
 80093f6:	dc02      	bgt.n	80093fe <etharp_find_entry+0x1d2>
      /* recycle oldest pending */
      i = old_pending;
 80093f8:	7ffb      	ldrb	r3, [r7, #31]
 80093fa:	773b      	strb	r3, [r7, #28]
 80093fc:	e009      	b.n	8009412 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F" (without queue)\n", (u16_t)i));
    /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80093fe:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8009402:	2b09      	cmp	r3, #9
 8009404:	dc02      	bgt.n	800940c <etharp_find_entry+0x1e0>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8009406:	7efb      	ldrb	r3, [r7, #27]
 8009408:	773b      	strb	r3, [r7, #28]
 800940a:	e002      	b.n	8009412 <etharp_find_entry+0x1e6>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %"U16_F", freeing packet queue %p\n", (u16_t)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s8_t)ERR_MEM;
 800940c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009410:	e043      	b.n	800949a <etharp_find_entry+0x26e>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8009412:	7f3b      	ldrb	r3, [r7, #28]
 8009414:	2b09      	cmp	r3, #9
 8009416:	d906      	bls.n	8009426 <etharp_find_entry+0x1fa>
 8009418:	4b23      	ldr	r3, [pc, #140]	; (80094a8 <etharp_find_entry+0x27c>)
 800941a:	f240 1281 	movw	r2, #385	; 0x181
 800941e:	4926      	ldr	r1, [pc, #152]	; (80094b8 <etharp_find_entry+0x28c>)
 8009420:	4823      	ldr	r0, [pc, #140]	; (80094b0 <etharp_find_entry+0x284>)
 8009422:	f00c fcd7 	bl	8015dd4 <iprintf>
    etharp_free_entry(i);
 8009426:	7f3b      	ldrb	r3, [r7, #28]
 8009428:	4618      	mov	r0, r3
 800942a:	f7ff fe25 	bl	8009078 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 800942e:	7f3b      	ldrb	r3, [r7, #28]
 8009430:	2b09      	cmp	r3, #9
 8009432:	d906      	bls.n	8009442 <etharp_find_entry+0x216>
 8009434:	4b1c      	ldr	r3, [pc, #112]	; (80094a8 <etharp_find_entry+0x27c>)
 8009436:	f240 1285 	movw	r2, #389	; 0x185
 800943a:	491f      	ldr	r1, [pc, #124]	; (80094b8 <etharp_find_entry+0x28c>)
 800943c:	481c      	ldr	r0, [pc, #112]	; (80094b0 <etharp_find_entry+0x284>)
 800943e:	f00c fcc9 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8009442:	7f3a      	ldrb	r2, [r7, #28]
 8009444:	4917      	ldr	r1, [pc, #92]	; (80094a4 <etharp_find_entry+0x278>)
 8009446:	4613      	mov	r3, r2
 8009448:	005b      	lsls	r3, r3, #1
 800944a:	4413      	add	r3, r2
 800944c:	00db      	lsls	r3, r3, #3
 800944e:	440b      	add	r3, r1
 8009450:	3314      	adds	r3, #20
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	2b00      	cmp	r3, #0
 8009456:	d006      	beq.n	8009466 <etharp_find_entry+0x23a>
 8009458:	4b13      	ldr	r3, [pc, #76]	; (80094a8 <etharp_find_entry+0x27c>)
 800945a:	f240 1287 	movw	r2, #391	; 0x187
 800945e:	4917      	ldr	r1, [pc, #92]	; (80094bc <etharp_find_entry+0x290>)
 8009460:	4813      	ldr	r0, [pc, #76]	; (80094b0 <etharp_find_entry+0x284>)
 8009462:	f00c fcb7 	bl	8015dd4 <iprintf>
    arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2b00      	cmp	r3, #0
 800946a:	d00a      	beq.n	8009482 <etharp_find_entry+0x256>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 800946c:	7f3a      	ldrb	r2, [r7, #28]
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	6819      	ldr	r1, [r3, #0]
 8009472:	480c      	ldr	r0, [pc, #48]	; (80094a4 <etharp_find_entry+0x278>)
 8009474:	4613      	mov	r3, r2
 8009476:	005b      	lsls	r3, r3, #1
 8009478:	4413      	add	r3, r2
 800947a:	00db      	lsls	r3, r3, #3
 800947c:	4403      	add	r3, r0
 800947e:	3304      	adds	r3, #4
 8009480:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8009482:	7f3a      	ldrb	r2, [r7, #28]
 8009484:	4907      	ldr	r1, [pc, #28]	; (80094a4 <etharp_find_entry+0x278>)
 8009486:	4613      	mov	r3, r2
 8009488:	005b      	lsls	r3, r3, #1
 800948a:	4413      	add	r3, r2
 800948c:	00db      	lsls	r3, r3, #3
 800948e:	440b      	add	r3, r1
 8009490:	3312      	adds	r3, #18
 8009492:	2200      	movs	r2, #0
 8009494:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
#endif /* ETHARP_TABLE_MATCH_NETIF*/
  return (err_t)i;
 8009496:	f997 301c 	ldrsb.w	r3, [r7, #28]
}
 800949a:	4618      	mov	r0, r3
 800949c:	3720      	adds	r7, #32
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}
 80094a2:	bf00      	nop
 80094a4:	20003fd0 	.word	0x20003fd0
 80094a8:	080186e4 	.word	0x080186e4
 80094ac:	0801871c 	.word	0x0801871c
 80094b0:	0801875c 	.word	0x0801875c
 80094b4:	08018784 	.word	0x08018784
 80094b8:	0801879c 	.word	0x0801879c
 80094bc:	080187b0 	.word	0x080187b0

080094c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80094c0:	b580      	push	{r7, lr}
 80094c2:	b088      	sub	sp, #32
 80094c4:	af02      	add	r7, sp, #8
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	70fb      	strb	r3, [r7, #3]
  s8_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80094d4:	2b06      	cmp	r3, #6
 80094d6:	d006      	beq.n	80094e6 <etharp_update_arp_entry+0x26>
 80094d8:	4b48      	ldr	r3, [pc, #288]	; (80095fc <etharp_update_arp_entry+0x13c>)
 80094da:	f240 12ab 	movw	r2, #427	; 0x1ab
 80094de:	4948      	ldr	r1, [pc, #288]	; (8009600 <etharp_update_arp_entry+0x140>)
 80094e0:	4848      	ldr	r0, [pc, #288]	; (8009604 <etharp_update_arp_entry+0x144>)
 80094e2:	f00c fc77 	bl	8015dd4 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
    ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
    (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
    (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d012      	beq.n	8009512 <etharp_update_arp_entry+0x52>
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	68f9      	ldr	r1, [r7, #12]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 f8d6 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 8009500:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8009502:	2b00      	cmp	r3, #0
 8009504:	d105      	bne.n	8009512 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 800950e:	2be0      	cmp	r3, #224	; 0xe0
 8009510:	d102      	bne.n	8009518 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009512:	f06f 030f 	mvn.w	r3, #15
 8009516:	e06c      	b.n	80095f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	68fa      	ldr	r2, [r7, #12]
 800951c:	4619      	mov	r1, r3
 800951e:	68b8      	ldr	r0, [r7, #8]
 8009520:	f7ff fe84 	bl	800922c <etharp_find_entry>
 8009524:	4603      	mov	r3, r0
 8009526:	75fb      	strb	r3, [r7, #23]
  /* bail out if no entry could be found */
  if (i < 0) {
 8009528:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800952c:	2b00      	cmp	r3, #0
 800952e:	da02      	bge.n	8009536 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8009530:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009534:	e05d      	b.n	80095f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8009536:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800953a:	4933      	ldr	r1, [pc, #204]	; (8009608 <etharp_update_arp_entry+0x148>)
 800953c:	4613      	mov	r3, r2
 800953e:	005b      	lsls	r3, r3, #1
 8009540:	4413      	add	r3, r2
 8009542:	00db      	lsls	r3, r3, #3
 8009544:	440b      	add	r3, r1
 8009546:	3314      	adds	r3, #20
 8009548:	2202      	movs	r2, #2
 800954a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 800954c:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009550:	492d      	ldr	r1, [pc, #180]	; (8009608 <etharp_update_arp_entry+0x148>)
 8009552:	4613      	mov	r3, r2
 8009554:	005b      	lsls	r3, r3, #1
 8009556:	4413      	add	r3, r2
 8009558:	00db      	lsls	r3, r3, #3
 800955a:	440b      	add	r3, r1
 800955c:	3308      	adds	r3, #8
 800955e:	68fa      	ldr	r2, [r7, #12]
 8009560:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", (s16_t)i));
  /* update address */
  ETHADDR32_COPY(&arp_table[i].ethaddr, ethaddr);
 8009562:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009566:	4613      	mov	r3, r2
 8009568:	005b      	lsls	r3, r3, #1
 800956a:	4413      	add	r3, r2
 800956c:	00db      	lsls	r3, r3, #3
 800956e:	3308      	adds	r3, #8
 8009570:	4a25      	ldr	r2, [pc, #148]	; (8009608 <etharp_update_arp_entry+0x148>)
 8009572:	4413      	add	r3, r2
 8009574:	3304      	adds	r3, #4
 8009576:	2206      	movs	r2, #6
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4618      	mov	r0, r3
 800957c:	f00c fc17 	bl	8015dae <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8009580:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009584:	4920      	ldr	r1, [pc, #128]	; (8009608 <etharp_update_arp_entry+0x148>)
 8009586:	4613      	mov	r3, r2
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	4413      	add	r3, r2
 800958c:	00db      	lsls	r3, r3, #3
 800958e:	440b      	add	r3, r1
 8009590:	3312      	adds	r3, #18
 8009592:	2200      	movs	r2, #0
 8009594:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8009596:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800959a:	491b      	ldr	r1, [pc, #108]	; (8009608 <etharp_update_arp_entry+0x148>)
 800959c:	4613      	mov	r3, r2
 800959e:	005b      	lsls	r3, r3, #1
 80095a0:	4413      	add	r3, r2
 80095a2:	00db      	lsls	r3, r3, #3
 80095a4:	440b      	add	r3, r1
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d021      	beq.n	80095f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80095ac:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80095b0:	4915      	ldr	r1, [pc, #84]	; (8009608 <etharp_update_arp_entry+0x148>)
 80095b2:	4613      	mov	r3, r2
 80095b4:	005b      	lsls	r3, r3, #1
 80095b6:	4413      	add	r3, r2
 80095b8:	00db      	lsls	r3, r3, #3
 80095ba:	440b      	add	r3, r1
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80095c0:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80095c4:	4910      	ldr	r1, [pc, #64]	; (8009608 <etharp_update_arp_entry+0x148>)
 80095c6:	4613      	mov	r3, r2
 80095c8:	005b      	lsls	r3, r3, #1
 80095ca:	4413      	add	r3, r2
 80095cc:	00db      	lsls	r3, r3, #3
 80095ce:	440b      	add	r3, r1
 80095d0:	2200      	movs	r2, #0
 80095d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr*)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f103 0225 	add.w	r2, r3, #37	; 0x25
 80095da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80095de:	9300      	str	r3, [sp, #0]
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6939      	ldr	r1, [r7, #16]
 80095e4:	68f8      	ldr	r0, [r7, #12]
 80095e6:	f009 f99d 	bl	8012924 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80095ea:	6938      	ldr	r0, [r7, #16]
 80095ec:	f002 ffc4 	bl	800c578 <pbuf_free>
  }
  return ERR_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3718      	adds	r7, #24
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	080186e4 	.word	0x080186e4
 8009600:	080187dc 	.word	0x080187dc
 8009604:	0801875c 	.word	0x0801875c
 8009608:	20003fd0 	.word	0x20003fd0

0800960c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
  u8_t i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009614:	2300      	movs	r3, #0
 8009616:	73fb      	strb	r3, [r7, #15]
 8009618:	e01f      	b.n	800965a <etharp_cleanup_netif+0x4e>
    u8_t state = arp_table[i].state;
 800961a:	7bfa      	ldrb	r2, [r7, #15]
 800961c:	4912      	ldr	r1, [pc, #72]	; (8009668 <etharp_cleanup_netif+0x5c>)
 800961e:	4613      	mov	r3, r2
 8009620:	005b      	lsls	r3, r3, #1
 8009622:	4413      	add	r3, r2
 8009624:	00db      	lsls	r3, r3, #3
 8009626:	440b      	add	r3, r1
 8009628:	3314      	adds	r3, #20
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	73bb      	strb	r3, [r7, #14]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 800962e:	7bbb      	ldrb	r3, [r7, #14]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d00f      	beq.n	8009654 <etharp_cleanup_netif+0x48>
 8009634:	7bfa      	ldrb	r2, [r7, #15]
 8009636:	490c      	ldr	r1, [pc, #48]	; (8009668 <etharp_cleanup_netif+0x5c>)
 8009638:	4613      	mov	r3, r2
 800963a:	005b      	lsls	r3, r3, #1
 800963c:	4413      	add	r3, r2
 800963e:	00db      	lsls	r3, r3, #3
 8009640:	440b      	add	r3, r1
 8009642:	3308      	adds	r3, #8
 8009644:	681a      	ldr	r2, [r3, #0]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	429a      	cmp	r2, r3
 800964a:	d103      	bne.n	8009654 <etharp_cleanup_netif+0x48>
      etharp_free_entry(i);
 800964c:	7bfb      	ldrb	r3, [r7, #15]
 800964e:	4618      	mov	r0, r3
 8009650:	f7ff fd12 	bl	8009078 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	3301      	adds	r3, #1
 8009658:	73fb      	strb	r3, [r7, #15]
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	2b09      	cmp	r3, #9
 800965e:	d9dc      	bls.n	800961a <etharp_cleanup_netif+0xe>
    }
  }
}
 8009660:	bf00      	nop
 8009662:	3710      	adds	r7, #16
 8009664:	46bd      	mov	sp, r7
 8009666:	bd80      	pop	{r7, pc}
 8009668:	20003fd0 	.word	0x20003fd0

0800966c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 800966c:	b5b0      	push	{r4, r5, r7, lr}
 800966e:	b08a      	sub	sp, #40	; 0x28
 8009670:	af04      	add	r7, sp, #16
 8009672:	6078      	str	r0, [r7, #4]
 8009674:	6039      	str	r1, [r7, #0]
  struct etharp_hdr *hdr;
  /* these are aligned properly, whereas the ARP header fields might not be */
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8009676:	683b      	ldr	r3, [r7, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d107      	bne.n	800968c <etharp_input+0x20>
 800967c:	4b3d      	ldr	r3, [pc, #244]	; (8009774 <etharp_input+0x108>)
 800967e:	f44f 7222 	mov.w	r2, #648	; 0x288
 8009682:	493d      	ldr	r1, [pc, #244]	; (8009778 <etharp_input+0x10c>)
 8009684:	483d      	ldr	r0, [pc, #244]	; (800977c <etharp_input+0x110>)
 8009686:	f00c fba5 	bl	8015dd4 <iprintf>
 800968a:	e06f      	b.n	800976c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 8009692:	693b      	ldr	r3, [r7, #16]
 8009694:	881b      	ldrh	r3, [r3, #0]
 8009696:	b29b      	uxth	r3, r3
 8009698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969c:	d10c      	bne.n	80096b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 800969e:	693b      	ldr	r3, [r7, #16]
 80096a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(HWTYPE_ETHERNET)) ||
 80096a2:	2b06      	cmp	r3, #6
 80096a4:	d108      	bne.n	80096b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80096aa:	2b04      	cmp	r3, #4
 80096ac:	d104      	bne.n	80096b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	885b      	ldrh	r3, [r3, #2]
 80096b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80096b4:	2b08      	cmp	r3, #8
 80096b6:	d003      	beq.n	80096c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
      ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
      hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80096b8:	6878      	ldr	r0, [r7, #4]
 80096ba:	f002 ff5d 	bl	800c578 <pbuf_free>
    return;
 80096be:	e055      	b.n	800976c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR2_COPY(&sipaddr, &hdr->sipaddr);
 80096c0:	693b      	ldr	r3, [r7, #16]
 80096c2:	330e      	adds	r3, #14
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	60fb      	str	r3, [r7, #12]
  IPADDR2_COPY(&dipaddr, &hdr->dipaddr);
 80096c8:	693b      	ldr	r3, [r7, #16]
 80096ca:	3318      	adds	r3, #24
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	3304      	adds	r3, #4
 80096d4:	681b      	ldr	r3, [r3, #0]
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d102      	bne.n	80096e0 <etharp_input+0x74>
    for_us = 0;
 80096da:	2300      	movs	r3, #0
 80096dc:	75fb      	strb	r3, [r7, #23]
 80096de:	e009      	b.n	80096f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80096e0:	68ba      	ldr	r2, [r7, #8]
 80096e2:	683b      	ldr	r3, [r7, #0]
 80096e4:	3304      	adds	r3, #4
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	429a      	cmp	r2, r3
 80096ea:	bf0c      	ite	eq
 80096ec:	2301      	moveq	r3, #1
 80096ee:	2300      	movne	r3, #0
 80096f0:	b2db      	uxtb	r3, r3
 80096f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	f103 0208 	add.w	r2, r3, #8
 80096fa:	7dfb      	ldrb	r3, [r7, #23]
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d001      	beq.n	8009704 <etharp_input+0x98>
 8009700:	2301      	movs	r3, #1
 8009702:	e000      	b.n	8009706 <etharp_input+0x9a>
 8009704:	2302      	movs	r3, #2
 8009706:	f107 010c 	add.w	r1, r7, #12
 800970a:	6838      	ldr	r0, [r7, #0]
 800970c:	f7ff fed8 	bl	80094c0 <etharp_update_arp_entry>
                   for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	88db      	ldrh	r3, [r3, #6]
 8009714:	b29b      	uxth	r3, r3
 8009716:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800971a:	d003      	beq.n	8009724 <etharp_input+0xb8>
 800971c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009720:	d01e      	beq.n	8009760 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
    break;
  default:
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
    ETHARP_STATS_INC(etharp.err);
    break;
 8009722:	e020      	b.n	8009766 <etharp_input+0xfa>
    if (for_us) {
 8009724:	7dfb      	ldrb	r3, [r7, #23]
 8009726:	2b00      	cmp	r3, #0
 8009728:	d01c      	beq.n	8009764 <etharp_input+0xf8>
                 (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	f103 0408 	add.w	r4, r3, #8
                 (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	f103 0525 	add.w	r5, r3, #37	; 0x25
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	3304      	adds	r3, #4
                 &hdr->shwaddr, &sipaddr,
 8009740:	693a      	ldr	r2, [r7, #16]
 8009742:	3208      	adds	r2, #8
      etharp_raw(netif,
 8009744:	2102      	movs	r1, #2
 8009746:	9103      	str	r1, [sp, #12]
 8009748:	f107 010c 	add.w	r1, r7, #12
 800974c:	9102      	str	r1, [sp, #8]
 800974e:	9201      	str	r2, [sp, #4]
 8009750:	9300      	str	r3, [sp, #0]
 8009752:	462b      	mov	r3, r5
 8009754:	4622      	mov	r2, r4
 8009756:	4601      	mov	r1, r0
 8009758:	6838      	ldr	r0, [r7, #0]
 800975a:	f000 fae3 	bl	8009d24 <etharp_raw>
    break;
 800975e:	e001      	b.n	8009764 <etharp_input+0xf8>
    break;
 8009760:	bf00      	nop
 8009762:	e000      	b.n	8009766 <etharp_input+0xfa>
    break;
 8009764:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	f002 ff06 	bl	800c578 <pbuf_free>
}
 800976c:	3718      	adds	r7, #24
 800976e:	46bd      	mov	sp, r7
 8009770:	bdb0      	pop	{r4, r5, r7, pc}
 8009772:	bf00      	nop
 8009774:	080186e4 	.word	0x080186e4
 8009778:	08018834 	.word	0x08018834
 800977c:	0801875c 	.word	0x0801875c

08009780 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, u8_t arp_idx)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b086      	sub	sp, #24
 8009784:	af02      	add	r7, sp, #8
 8009786:	60f8      	str	r0, [r7, #12]
 8009788:	60b9      	str	r1, [r7, #8]
 800978a:	4613      	mov	r3, r2
 800978c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 800978e:	79fa      	ldrb	r2, [r7, #7]
 8009790:	4944      	ldr	r1, [pc, #272]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009792:	4613      	mov	r3, r2
 8009794:	005b      	lsls	r3, r3, #1
 8009796:	4413      	add	r3, r2
 8009798:	00db      	lsls	r3, r3, #3
 800979a:	440b      	add	r3, r1
 800979c:	3314      	adds	r3, #20
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b01      	cmp	r3, #1
 80097a2:	d806      	bhi.n	80097b2 <etharp_output_to_arp_index+0x32>
 80097a4:	4b40      	ldr	r3, [pc, #256]	; (80098a8 <etharp_output_to_arp_index+0x128>)
 80097a6:	f240 22ed 	movw	r2, #749	; 0x2ed
 80097aa:	4940      	ldr	r1, [pc, #256]	; (80098ac <etharp_output_to_arp_index+0x12c>)
 80097ac:	4840      	ldr	r0, [pc, #256]	; (80098b0 <etharp_output_to_arp_index+0x130>)
 80097ae:	f00c fb11 	bl	8015dd4 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80097b2:	79fa      	ldrb	r2, [r7, #7]
 80097b4:	493b      	ldr	r1, [pc, #236]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 80097b6:	4613      	mov	r3, r2
 80097b8:	005b      	lsls	r3, r3, #1
 80097ba:	4413      	add	r3, r2
 80097bc:	00db      	lsls	r3, r3, #3
 80097be:	440b      	add	r3, r1
 80097c0:	3314      	adds	r3, #20
 80097c2:	781b      	ldrb	r3, [r3, #0]
 80097c4:	2b02      	cmp	r3, #2
 80097c6:	d153      	bne.n	8009870 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80097c8:	79fa      	ldrb	r2, [r7, #7]
 80097ca:	4936      	ldr	r1, [pc, #216]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 80097cc:	4613      	mov	r3, r2
 80097ce:	005b      	lsls	r3, r3, #1
 80097d0:	4413      	add	r3, r2
 80097d2:	00db      	lsls	r3, r3, #3
 80097d4:	440b      	add	r3, r1
 80097d6:	3312      	adds	r3, #18
 80097d8:	881b      	ldrh	r3, [r3, #0]
 80097da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80097de:	d919      	bls.n	8009814 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80097e0:	79fa      	ldrb	r2, [r7, #7]
 80097e2:	4613      	mov	r3, r2
 80097e4:	005b      	lsls	r3, r3, #1
 80097e6:	4413      	add	r3, r2
 80097e8:	00db      	lsls	r3, r3, #3
 80097ea:	4a2e      	ldr	r2, [pc, #184]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 80097ec:	4413      	add	r3, r2
 80097ee:	3304      	adds	r3, #4
 80097f0:	4619      	mov	r1, r3
 80097f2:	68f8      	ldr	r0, [r7, #12]
 80097f4:	f000 fb44 	bl	8009e80 <etharp_request>
 80097f8:	4603      	mov	r3, r0
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d138      	bne.n	8009870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	4928      	ldr	r1, [pc, #160]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009802:	4613      	mov	r3, r2
 8009804:	005b      	lsls	r3, r3, #1
 8009806:	4413      	add	r3, r2
 8009808:	00db      	lsls	r3, r3, #3
 800980a:	440b      	add	r3, r1
 800980c:	3314      	adds	r3, #20
 800980e:	2203      	movs	r2, #3
 8009810:	701a      	strb	r2, [r3, #0]
 8009812:	e02d      	b.n	8009870 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8009814:	79fa      	ldrb	r2, [r7, #7]
 8009816:	4923      	ldr	r1, [pc, #140]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009818:	4613      	mov	r3, r2
 800981a:	005b      	lsls	r3, r3, #1
 800981c:	4413      	add	r3, r2
 800981e:	00db      	lsls	r3, r3, #3
 8009820:	440b      	add	r3, r1
 8009822:	3312      	adds	r3, #18
 8009824:	881b      	ldrh	r3, [r3, #0]
 8009826:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800982a:	d321      	bcc.n	8009870 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 800982c:	79fa      	ldrb	r2, [r7, #7]
 800982e:	4613      	mov	r3, r2
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	4413      	add	r3, r2
 8009834:	00db      	lsls	r3, r3, #3
 8009836:	4a1b      	ldr	r2, [pc, #108]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009838:	4413      	add	r3, r2
 800983a:	1d19      	adds	r1, r3, #4
 800983c:	79fa      	ldrb	r2, [r7, #7]
 800983e:	4613      	mov	r3, r2
 8009840:	005b      	lsls	r3, r3, #1
 8009842:	4413      	add	r3, r2
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	3308      	adds	r3, #8
 8009848:	4a16      	ldr	r2, [pc, #88]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 800984a:	4413      	add	r3, r2
 800984c:	3304      	adds	r3, #4
 800984e:	461a      	mov	r2, r3
 8009850:	68f8      	ldr	r0, [r7, #12]
 8009852:	f000 faf3 	bl	8009e3c <etharp_request_dst>
 8009856:	4603      	mov	r3, r0
 8009858:	2b00      	cmp	r3, #0
 800985a:	d109      	bne.n	8009870 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 800985c:	79fa      	ldrb	r2, [r7, #7]
 800985e:	4911      	ldr	r1, [pc, #68]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009860:	4613      	mov	r3, r2
 8009862:	005b      	lsls	r3, r3, #1
 8009864:	4413      	add	r3, r2
 8009866:	00db      	lsls	r3, r3, #3
 8009868:	440b      	add	r3, r1
 800986a:	3314      	adds	r3, #20
 800986c:	2203      	movs	r2, #3
 800986e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	f103 0125 	add.w	r1, r3, #37	; 0x25
 8009876:	79fa      	ldrb	r2, [r7, #7]
 8009878:	4613      	mov	r3, r2
 800987a:	005b      	lsls	r3, r3, #1
 800987c:	4413      	add	r3, r2
 800987e:	00db      	lsls	r3, r3, #3
 8009880:	3308      	adds	r3, #8
 8009882:	4a08      	ldr	r2, [pc, #32]	; (80098a4 <etharp_output_to_arp_index+0x124>)
 8009884:	4413      	add	r3, r2
 8009886:	1d1a      	adds	r2, r3, #4
 8009888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4613      	mov	r3, r2
 8009890:	460a      	mov	r2, r1
 8009892:	68b9      	ldr	r1, [r7, #8]
 8009894:	68f8      	ldr	r0, [r7, #12]
 8009896:	f009 f845 	bl	8012924 <ethernet_output>
 800989a:	4603      	mov	r3, r0
}
 800989c:	4618      	mov	r0, r3
 800989e:	3710      	adds	r7, #16
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd80      	pop	{r7, pc}
 80098a4:	20003fd0 	.word	0x20003fd0
 80098a8:	080186e4 	.word	0x080186e4
 80098ac:	08018854 	.word	0x08018854
 80098b0:	0801875c 	.word	0x0801875c

080098b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80098b4:	b580      	push	{r7, lr}
 80098b6:	b08a      	sub	sp, #40	; 0x28
 80098b8:	af02      	add	r7, sp, #8
 80098ba:	60f8      	str	r0, [r7, #12]
 80098bc:	60b9      	str	r1, [r7, #8]
 80098be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d106      	bne.n	80098d8 <etharp_output+0x24>
 80098ca:	4b69      	ldr	r3, [pc, #420]	; (8009a70 <etharp_output+0x1bc>)
 80098cc:	f240 321b 	movw	r2, #795	; 0x31b
 80098d0:	4968      	ldr	r1, [pc, #416]	; (8009a74 <etharp_output+0x1c0>)
 80098d2:	4869      	ldr	r0, [pc, #420]	; (8009a78 <etharp_output+0x1c4>)
 80098d4:	f00c fa7e 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80098d8:	68bb      	ldr	r3, [r7, #8]
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d106      	bne.n	80098ec <etharp_output+0x38>
 80098de:	4b64      	ldr	r3, [pc, #400]	; (8009a70 <etharp_output+0x1bc>)
 80098e0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80098e4:	4965      	ldr	r1, [pc, #404]	; (8009a7c <etharp_output+0x1c8>)
 80098e6:	4864      	ldr	r0, [pc, #400]	; (8009a78 <etharp_output+0x1c4>)
 80098e8:	f00c fa74 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d106      	bne.n	8009900 <etharp_output+0x4c>
 80098f2:	4b5f      	ldr	r3, [pc, #380]	; (8009a70 <etharp_output+0x1bc>)
 80098f4:	f240 321d 	movw	r2, #797	; 0x31d
 80098f8:	4961      	ldr	r1, [pc, #388]	; (8009a80 <etharp_output+0x1cc>)
 80098fa:	485f      	ldr	r0, [pc, #380]	; (8009a78 <etharp_output+0x1c4>)
 80098fc:	f00c fa6a 	bl	8015dd4 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	681b      	ldr	r3, [r3, #0]
 8009904:	68f9      	ldr	r1, [r7, #12]
 8009906:	4618      	mov	r0, r3
 8009908:	f000 fed0 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 800990c:	4603      	mov	r3, r0
 800990e:	2b00      	cmp	r3, #0
 8009910:	d002      	beq.n	8009918 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8009912:	4b5c      	ldr	r3, [pc, #368]	; (8009a84 <etharp_output+0x1d0>)
 8009914:	61fb      	str	r3, [r7, #28]
 8009916:	e09b      	b.n	8009a50 <etharp_output+0x19c>
  /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009920:	2be0      	cmp	r3, #224	; 0xe0
 8009922:	d118      	bne.n	8009956 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8009924:	2301      	movs	r3, #1
 8009926:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8009928:	2300      	movs	r3, #0
 800992a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 800992c:	235e      	movs	r3, #94	; 0x5e
 800992e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	3301      	adds	r3, #1
 8009934:	781b      	ldrb	r3, [r3, #0]
 8009936:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800993a:	b2db      	uxtb	r3, r3
 800993c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	3302      	adds	r3, #2
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3303      	adds	r3, #3
 800994a:	781b      	ldrb	r3, [r3, #0]
 800994c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 800994e:	f107 0310 	add.w	r3, r7, #16
 8009952:	61fb      	str	r3, [r7, #28]
 8009954:	e07c      	b.n	8009a50 <etharp_output+0x19c>
  /* unicast destination IP address? */
  } else {
    s8_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681a      	ldr	r2, [r3, #0]
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	3304      	adds	r3, #4
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	405a      	eors	r2, r3
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	3308      	adds	r3, #8
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4013      	ands	r3, r2
 800996a:	2b00      	cmp	r3, #0
 800996c:	d012      	beq.n	8009994 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8009974:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8009978:	4293      	cmp	r3, r2
 800997a:	d00b      	beq.n	8009994 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 800997c:	68fb      	ldr	r3, [r7, #12]
 800997e:	330c      	adds	r3, #12
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	2b00      	cmp	r3, #0
 8009984:	d003      	beq.n	800998e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	330c      	adds	r3, #12
 800998a:	61bb      	str	r3, [r7, #24]
 800998c:	e002      	b.n	8009994 <etharp_output+0xe0>
          /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 800998e:	f06f 0303 	mvn.w	r3, #3
 8009992:	e069      	b.n	8009a68 <etharp_output+0x1b4>
    if (netif->addr_hint != NULL) {
      /* per-pcb cached entry was given */
      u8_t etharp_cached_entry = *(netif->addr_hint);
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8009994:	4b3c      	ldr	r3, [pc, #240]	; (8009a88 <etharp_output+0x1d4>)
 8009996:	781b      	ldrb	r3, [r3, #0]
 8009998:	4619      	mov	r1, r3
 800999a:	4a3c      	ldr	r2, [pc, #240]	; (8009a8c <etharp_output+0x1d8>)
 800999c:	460b      	mov	r3, r1
 800999e:	005b      	lsls	r3, r3, #1
 80099a0:	440b      	add	r3, r1
 80099a2:	00db      	lsls	r3, r3, #3
 80099a4:	4413      	add	r3, r2
 80099a6:	3314      	adds	r3, #20
 80099a8:	781b      	ldrb	r3, [r3, #0]
 80099aa:	2b01      	cmp	r3, #1
 80099ac:	d917      	bls.n	80099de <etharp_output+0x12a>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80099ae:	69bb      	ldr	r3, [r7, #24]
 80099b0:	681a      	ldr	r2, [r3, #0]
 80099b2:	4b35      	ldr	r3, [pc, #212]	; (8009a88 <etharp_output+0x1d4>)
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	4934      	ldr	r1, [pc, #208]	; (8009a8c <etharp_output+0x1d8>)
 80099ba:	4603      	mov	r3, r0
 80099bc:	005b      	lsls	r3, r3, #1
 80099be:	4403      	add	r3, r0
 80099c0:	00db      	lsls	r3, r3, #3
 80099c2:	440b      	add	r3, r1
 80099c4:	3304      	adds	r3, #4
 80099c6:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80099c8:	429a      	cmp	r2, r3
 80099ca:	d108      	bne.n	80099de <etharp_output+0x12a>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80099cc:	4b2e      	ldr	r3, [pc, #184]	; (8009a88 <etharp_output+0x1d4>)
 80099ce:	781b      	ldrb	r3, [r3, #0]
 80099d0:	461a      	mov	r2, r3
 80099d2:	68b9      	ldr	r1, [r7, #8]
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f7ff fed3 	bl	8009780 <etharp_output_to_arp_index>
 80099da:	4603      	mov	r3, r0
 80099dc:	e044      	b.n	8009a68 <etharp_output+0x1b4>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80099de:	2300      	movs	r3, #0
 80099e0:	75fb      	strb	r3, [r7, #23]
 80099e2:	e02a      	b.n	8009a3a <etharp_output+0x186>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80099e4:	f997 2017 	ldrsb.w	r2, [r7, #23]
 80099e8:	4928      	ldr	r1, [pc, #160]	; (8009a8c <etharp_output+0x1d8>)
 80099ea:	4613      	mov	r3, r2
 80099ec:	005b      	lsls	r3, r3, #1
 80099ee:	4413      	add	r3, r2
 80099f0:	00db      	lsls	r3, r3, #3
 80099f2:	440b      	add	r3, r1
 80099f4:	3314      	adds	r3, #20
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	d918      	bls.n	8009a2e <etharp_output+0x17a>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80099fc:	69bb      	ldr	r3, [r7, #24]
 80099fe:	6819      	ldr	r1, [r3, #0]
 8009a00:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8009a04:	4821      	ldr	r0, [pc, #132]	; (8009a8c <etharp_output+0x1d8>)
 8009a06:	4613      	mov	r3, r2
 8009a08:	005b      	lsls	r3, r3, #1
 8009a0a:	4413      	add	r3, r2
 8009a0c:	00db      	lsls	r3, r3, #3
 8009a0e:	4403      	add	r3, r0
 8009a10:	3304      	adds	r3, #4
 8009a12:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8009a14:	4299      	cmp	r1, r3
 8009a16:	d10a      	bne.n	8009a2e <etharp_output+0x17a>
        /* found an existing, stable entry */
        ETHARP_SET_HINT(netif, i);
 8009a18:	7dfa      	ldrb	r2, [r7, #23]
 8009a1a:	4b1b      	ldr	r3, [pc, #108]	; (8009a88 <etharp_output+0x1d4>)
 8009a1c:	701a      	strb	r2, [r3, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8009a1e:	7dfb      	ldrb	r3, [r7, #23]
 8009a20:	461a      	mov	r2, r3
 8009a22:	68b9      	ldr	r1, [r7, #8]
 8009a24:	68f8      	ldr	r0, [r7, #12]
 8009a26:	f7ff feab 	bl	8009780 <etharp_output_to_arp_index>
 8009a2a:	4603      	mov	r3, r0
 8009a2c:	e01c      	b.n	8009a68 <etharp_output+0x1b4>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8009a2e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a32:	b2db      	uxtb	r3, r3
 8009a34:	3301      	adds	r3, #1
 8009a36:	b2db      	uxtb	r3, r3
 8009a38:	75fb      	strb	r3, [r7, #23]
 8009a3a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8009a3e:	2b09      	cmp	r3, #9
 8009a40:	ddd0      	ble.n	80099e4 <etharp_output+0x130>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8009a42:	68ba      	ldr	r2, [r7, #8]
 8009a44:	69b9      	ldr	r1, [r7, #24]
 8009a46:	68f8      	ldr	r0, [r7, #12]
 8009a48:	f000 f822 	bl	8009a90 <etharp_query>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	e00b      	b.n	8009a68 <etharp_output+0x1b4>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr*)(netif->hwaddr), dest, ETHTYPE_IP);
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	f103 0225 	add.w	r2, r3, #37	; 0x25
 8009a56:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009a5a:	9300      	str	r3, [sp, #0]
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	68b9      	ldr	r1, [r7, #8]
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f008 ff5f 	bl	8012924 <ethernet_output>
 8009a66:	4603      	mov	r3, r0
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3720      	adds	r7, #32
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	bd80      	pop	{r7, pc}
 8009a70:	080186e4 	.word	0x080186e4
 8009a74:	08018834 	.word	0x08018834
 8009a78:	0801875c 	.word	0x0801875c
 8009a7c:	08018884 	.word	0x08018884
 8009a80:	08018824 	.word	0x08018824
 8009a84:	0801a5cc 	.word	0x0801a5cc
 8009a88:	200040c0 	.word	0x200040c0
 8009a8c:	20003fd0 	.word	0x20003fd0

08009a90 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8009a90:	b580      	push	{r7, lr}
 8009a92:	b08c      	sub	sp, #48	; 0x30
 8009a94:	af02      	add	r7, sp, #8
 8009a96:	60f8      	str	r0, [r7, #12]
 8009a98:	60b9      	str	r1, [r7, #8]
 8009a9a:	607a      	str	r2, [r7, #4]
  struct eth_addr * srcaddr = (struct eth_addr *)netif->hwaddr;
 8009a9c:	68fb      	ldr	r3, [r7, #12]
 8009a9e:	3325      	adds	r3, #37	; 0x25
 8009aa0:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8009aa2:	23ff      	movs	r3, #255	; 0xff
 8009aa4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	623b      	str	r3, [r7, #32]
  s8_t i; /* ARP entry index */

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009aac:	68bb      	ldr	r3, [r7, #8]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	68f9      	ldr	r1, [r7, #12]
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	f000 fdfa 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 8009ab8:	4603      	mov	r3, r0
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d10c      	bne.n	8009ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8009ac6:	2be0      	cmp	r3, #224	; 0xe0
 8009ac8:	d006      	beq.n	8009ad8 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	2b00      	cmp	r3, #0
 8009ace:	d003      	beq.n	8009ad8 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d102      	bne.n	8009ade <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8009ad8:	f06f 030f 	mvn.w	r3, #15
 8009adc:	e10f      	b.n	8009cfe <etharp_query+0x26e>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8009ade:	68fa      	ldr	r2, [r7, #12]
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	68b8      	ldr	r0, [r7, #8]
 8009ae4:	f7ff fba2 	bl	800922c <etharp_find_entry>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	74fb      	strb	r3, [r7, #19]

  /* could not find or create entry? */
  if (i < 0) {
 8009aec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	da02      	bge.n	8009afa <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i;
 8009af4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009af8:	e101      	b.n	8009cfe <etharp_query+0x26e>
  }

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8009afa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009afe:	4982      	ldr	r1, [pc, #520]	; (8009d08 <etharp_query+0x278>)
 8009b00:	4613      	mov	r3, r2
 8009b02:	005b      	lsls	r3, r3, #1
 8009b04:	4413      	add	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	440b      	add	r3, r1
 8009b0a:	3314      	adds	r3, #20
 8009b0c:	781b      	ldrb	r3, [r3, #0]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d117      	bne.n	8009b42 <etharp_query+0xb2>
    is_new_entry = 1;
 8009b12:	2301      	movs	r3, #1
 8009b14:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8009b16:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009b1a:	497b      	ldr	r1, [pc, #492]	; (8009d08 <etharp_query+0x278>)
 8009b1c:	4613      	mov	r3, r2
 8009b1e:	005b      	lsls	r3, r3, #1
 8009b20:	4413      	add	r3, r2
 8009b22:	00db      	lsls	r3, r3, #3
 8009b24:	440b      	add	r3, r1
 8009b26:	3314      	adds	r3, #20
 8009b28:	2201      	movs	r2, #1
 8009b2a:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8009b2c:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009b30:	4975      	ldr	r1, [pc, #468]	; (8009d08 <etharp_query+0x278>)
 8009b32:	4613      	mov	r3, r2
 8009b34:	005b      	lsls	r3, r3, #1
 8009b36:	4413      	add	r3, r2
 8009b38:	00db      	lsls	r3, r3, #3
 8009b3a:	440b      	add	r3, r1
 8009b3c:	3308      	adds	r3, #8
 8009b3e:	68fa      	ldr	r2, [r7, #12]
 8009b40:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8009b42:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009b46:	4970      	ldr	r1, [pc, #448]	; (8009d08 <etharp_query+0x278>)
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	440b      	add	r3, r1
 8009b52:	3314      	adds	r3, #20
 8009b54:	781b      	ldrb	r3, [r3, #0]
 8009b56:	2b01      	cmp	r3, #1
 8009b58:	d012      	beq.n	8009b80 <etharp_query+0xf0>
 8009b5a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009b5e:	496a      	ldr	r1, [pc, #424]	; (8009d08 <etharp_query+0x278>)
 8009b60:	4613      	mov	r3, r2
 8009b62:	005b      	lsls	r3, r3, #1
 8009b64:	4413      	add	r3, r2
 8009b66:	00db      	lsls	r3, r3, #3
 8009b68:	440b      	add	r3, r1
 8009b6a:	3314      	adds	r3, #20
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	2b01      	cmp	r3, #1
 8009b70:	d806      	bhi.n	8009b80 <etharp_query+0xf0>
 8009b72:	4b66      	ldr	r3, [pc, #408]	; (8009d0c <etharp_query+0x27c>)
 8009b74:	f240 32c9 	movw	r2, #969	; 0x3c9
 8009b78:	4965      	ldr	r1, [pc, #404]	; (8009d10 <etharp_query+0x280>)
 8009b7a:	4866      	ldr	r0, [pc, #408]	; (8009d14 <etharp_query+0x284>)
 8009b7c:	f00c f92a 	bl	8015dd4 <iprintf>
  ((arp_table[i].state == ETHARP_STATE_PENDING) ||
   (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8009b80:	6a3b      	ldr	r3, [r7, #32]
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d102      	bne.n	8009b8c <etharp_query+0xfc>
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d10c      	bne.n	8009ba6 <etharp_query+0x116>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8009b8c:	68b9      	ldr	r1, [r7, #8]
 8009b8e:	68f8      	ldr	r0, [r7, #12]
 8009b90:	f000 f976 	bl	8009e80 <etharp_request>
 8009b94:	4603      	mov	r3, r0
 8009b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <etharp_query+0x116>
      return result;
 8009ba0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009ba4:	e0ab      	b.n	8009cfe <etharp_query+0x26e>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d106      	bne.n	8009bba <etharp_query+0x12a>
 8009bac:	4b57      	ldr	r3, [pc, #348]	; (8009d0c <etharp_query+0x27c>)
 8009bae:	f240 32db 	movw	r2, #987	; 0x3db
 8009bb2:	4959      	ldr	r1, [pc, #356]	; (8009d18 <etharp_query+0x288>)
 8009bb4:	4857      	ldr	r0, [pc, #348]	; (8009d14 <etharp_query+0x284>)
 8009bb6:	f00c f90d 	bl	8015dd4 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8009bba:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bbe:	4952      	ldr	r1, [pc, #328]	; (8009d08 <etharp_query+0x278>)
 8009bc0:	4613      	mov	r3, r2
 8009bc2:	005b      	lsls	r3, r3, #1
 8009bc4:	4413      	add	r3, r2
 8009bc6:	00db      	lsls	r3, r3, #3
 8009bc8:	440b      	add	r3, r1
 8009bca:	3314      	adds	r3, #20
 8009bcc:	781b      	ldrb	r3, [r3, #0]
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d919      	bls.n	8009c06 <etharp_query+0x176>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_HINT(netif, i);
 8009bd2:	7cfa      	ldrb	r2, [r7, #19]
 8009bd4:	4b51      	ldr	r3, [pc, #324]	; (8009d1c <etharp_query+0x28c>)
 8009bd6:	701a      	strb	r2, [r3, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8009bd8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009bdc:	4613      	mov	r3, r2
 8009bde:	005b      	lsls	r3, r3, #1
 8009be0:	4413      	add	r3, r2
 8009be2:	00db      	lsls	r3, r3, #3
 8009be4:	3308      	adds	r3, #8
 8009be6:	4a48      	ldr	r2, [pc, #288]	; (8009d08 <etharp_query+0x278>)
 8009be8:	4413      	add	r3, r2
 8009bea:	1d1a      	adds	r2, r3, #4
 8009bec:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009bf0:	9300      	str	r3, [sp, #0]
 8009bf2:	4613      	mov	r3, r2
 8009bf4:	697a      	ldr	r2, [r7, #20]
 8009bf6:	6879      	ldr	r1, [r7, #4]
 8009bf8:	68f8      	ldr	r0, [r7, #12]
 8009bfa:	f008 fe93 	bl	8012924 <ethernet_output>
 8009bfe:	4603      	mov	r3, r0
 8009c00:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009c04:	e079      	b.n	8009cfa <etharp_query+0x26a>
  /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8009c06:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009c0a:	493f      	ldr	r1, [pc, #252]	; (8009d08 <etharp_query+0x278>)
 8009c0c:	4613      	mov	r3, r2
 8009c0e:	005b      	lsls	r3, r3, #1
 8009c10:	4413      	add	r3, r2
 8009c12:	00db      	lsls	r3, r3, #3
 8009c14:	440b      	add	r3, r1
 8009c16:	3314      	adds	r3, #20
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d16d      	bne.n	8009cfa <etharp_query+0x26a>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	61bb      	str	r3, [r7, #24]
    /* IF q includes a PBUF_REF, PBUF_POOL or PBUF_RAM, we have no choice but
     * to copy the whole queue into a new PBUF_RAM (see bug #11400)
     * PBUF_ROMs can be left as they are, since ROM must not get changed. */
    p = q;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009c26:	e01a      	b.n	8009c5e <etharp_query+0x1ce>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8009c28:	69fb      	ldr	r3, [r7, #28]
 8009c2a:	895a      	ldrh	r2, [r3, #10]
 8009c2c:	69fb      	ldr	r3, [r7, #28]
 8009c2e:	891b      	ldrh	r3, [r3, #8]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d10a      	bne.n	8009c4a <etharp_query+0x1ba>
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d006      	beq.n	8009c4a <etharp_query+0x1ba>
 8009c3c:	4b33      	ldr	r3, [pc, #204]	; (8009d0c <etharp_query+0x27c>)
 8009c3e:	f44f 727b 	mov.w	r2, #1004	; 0x3ec
 8009c42:	4937      	ldr	r1, [pc, #220]	; (8009d20 <etharp_query+0x290>)
 8009c44:	4833      	ldr	r0, [pc, #204]	; (8009d14 <etharp_query+0x284>)
 8009c46:	f00c f8c5 	bl	8015dd4 <iprintf>
      if (p->type != PBUF_ROM) {
 8009c4a:	69fb      	ldr	r3, [r7, #28]
 8009c4c:	7b1b      	ldrb	r3, [r3, #12]
 8009c4e:	2b01      	cmp	r3, #1
 8009c50:	d002      	beq.n	8009c58 <etharp_query+0x1c8>
        copy_needed = 1;
 8009c52:	2301      	movs	r3, #1
 8009c54:	61bb      	str	r3, [r7, #24]
        break;
 8009c56:	e005      	b.n	8009c64 <etharp_query+0x1d4>
      }
      p = p->next;
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	61fb      	str	r3, [r7, #28]
    while (p) {
 8009c5e:	69fb      	ldr	r3, [r7, #28]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d1e1      	bne.n	8009c28 <etharp_query+0x198>
    }
    if (copy_needed) {
 8009c64:	69bb      	ldr	r3, [r7, #24]
 8009c66:	2b00      	cmp	r3, #0
 8009c68:	d017      	beq.n	8009c9a <etharp_query+0x20a>
      /* copy the whole packet into new pbufs */
      p = pbuf_alloc(PBUF_LINK, p->tot_len, PBUF_RAM);
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	891b      	ldrh	r3, [r3, #8]
 8009c6e:	2200      	movs	r2, #0
 8009c70:	4619      	mov	r1, r3
 8009c72:	2002      	movs	r0, #2
 8009c74:	f002 f90e 	bl	800be94 <pbuf_alloc>
 8009c78:	61f8      	str	r0, [r7, #28]
      if (p != NULL) {
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d011      	beq.n	8009ca4 <etharp_query+0x214>
        if (pbuf_copy(p, q) != ERR_OK) {
 8009c80:	6879      	ldr	r1, [r7, #4]
 8009c82:	69f8      	ldr	r0, [r7, #28]
 8009c84:	f002 fda8 	bl	800c7d8 <pbuf_copy>
 8009c88:	4603      	mov	r3, r0
 8009c8a:	2b00      	cmp	r3, #0
 8009c8c:	d00a      	beq.n	8009ca4 <etharp_query+0x214>
          pbuf_free(p);
 8009c8e:	69f8      	ldr	r0, [r7, #28]
 8009c90:	f002 fc72 	bl	800c578 <pbuf_free>
          p = NULL;
 8009c94:	2300      	movs	r3, #0
 8009c96:	61fb      	str	r3, [r7, #28]
 8009c98:	e004      	b.n	8009ca4 <etharp_query+0x214>
        }
      }
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8009c9e:	69f8      	ldr	r0, [r7, #28]
 8009ca0:	f002 fd1c 	bl	800c6dc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8009ca4:	69fb      	ldr	r3, [r7, #28]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d024      	beq.n	8009cf4 <etharp_query+0x264>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8009caa:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cae:	4916      	ldr	r1, [pc, #88]	; (8009d08 <etharp_query+0x278>)
 8009cb0:	4613      	mov	r3, r2
 8009cb2:	005b      	lsls	r3, r3, #1
 8009cb4:	4413      	add	r3, r2
 8009cb6:	00db      	lsls	r3, r3, #3
 8009cb8:	440b      	add	r3, r1
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d00b      	beq.n	8009cd8 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
        pbuf_free(arp_table[i].q);
 8009cc0:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cc4:	4910      	ldr	r1, [pc, #64]	; (8009d08 <etharp_query+0x278>)
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	005b      	lsls	r3, r3, #1
 8009cca:	4413      	add	r3, r2
 8009ccc:	00db      	lsls	r3, r3, #3
 8009cce:	440b      	add	r3, r1
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 fc50 	bl	800c578 <pbuf_free>
      }
      arp_table[i].q = p;
 8009cd8:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8009cdc:	490a      	ldr	r1, [pc, #40]	; (8009d08 <etharp_query+0x278>)
 8009cde:	4613      	mov	r3, r2
 8009ce0:	005b      	lsls	r3, r3, #1
 8009ce2:	4413      	add	r3, r2
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	440b      	add	r3, r1
 8009ce8:	69fa      	ldr	r2, [r7, #28]
 8009cea:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8009cec:	2300      	movs	r3, #0
 8009cee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8009cf2:	e002      	b.n	8009cfa <etharp_query+0x26a>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"S16_F"\n", (void *)q, (s16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8009cf4:	23ff      	movs	r3, #255	; 0xff
 8009cf6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8009cfa:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	3728      	adds	r7, #40	; 0x28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	bd80      	pop	{r7, pc}
 8009d06:	bf00      	nop
 8009d08:	20003fd0 	.word	0x20003fd0
 8009d0c:	080186e4 	.word	0x080186e4
 8009d10:	08018890 	.word	0x08018890
 8009d14:	0801875c 	.word	0x0801875c
 8009d18:	08018884 	.word	0x08018884
 8009d1c:	200040c0 	.word	0x200040c0
 8009d20:	080188b8 	.word	0x080188b8

08009d24 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8009d24:	b580      	push	{r7, lr}
 8009d26:	b08a      	sub	sp, #40	; 0x28
 8009d28:	af02      	add	r7, sp, #8
 8009d2a:	60f8      	str	r0, [r7, #12]
 8009d2c:	60b9      	str	r1, [r7, #8]
 8009d2e:	607a      	str	r2, [r7, #4]
 8009d30:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8009d32:	2300      	movs	r3, #0
 8009d34:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d106      	bne.n	8009d4a <etharp_raw+0x26>
 8009d3c:	4b3a      	ldr	r3, [pc, #232]	; (8009e28 <etharp_raw+0x104>)
 8009d3e:	f44f 628b 	mov.w	r2, #1112	; 0x458
 8009d42:	493a      	ldr	r1, [pc, #232]	; (8009e2c <etharp_raw+0x108>)
 8009d44:	483a      	ldr	r0, [pc, #232]	; (8009e30 <etharp_raw+0x10c>)
 8009d46:	f00c f845 	bl	8015dd4 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8009d4a:	2200      	movs	r2, #0
 8009d4c:	211c      	movs	r1, #28
 8009d4e:	2002      	movs	r0, #2
 8009d50:	f002 f8a0 	bl	800be94 <pbuf_alloc>
 8009d54:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8009d56:	69bb      	ldr	r3, [r7, #24]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d102      	bne.n	8009d62 <etharp_raw+0x3e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
      ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8009d5c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009d60:	e05d      	b.n	8009e1e <etharp_raw+0xfa>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	895b      	ldrh	r3, [r3, #10]
 8009d66:	2b1b      	cmp	r3, #27
 8009d68:	d806      	bhi.n	8009d78 <etharp_raw+0x54>
 8009d6a:	4b2f      	ldr	r3, [pc, #188]	; (8009e28 <etharp_raw+0x104>)
 8009d6c:	f240 4264 	movw	r2, #1124	; 0x464
 8009d70:	4930      	ldr	r1, [pc, #192]	; (8009e34 <etharp_raw+0x110>)
 8009d72:	482f      	ldr	r0, [pc, #188]	; (8009e30 <etharp_raw+0x10c>)
 8009d74:	f00c f82e 	bl	8015dd4 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8009d78:	69bb      	ldr	r3, [r7, #24]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8009d7e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff f93b 	bl	8008ffc <lwip_htons>
 8009d86:	4603      	mov	r3, r0
 8009d88:	461a      	mov	r2, r3
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009d94:	2b06      	cmp	r3, #6
 8009d96:	d006      	beq.n	8009da6 <etharp_raw+0x82>
 8009d98:	4b23      	ldr	r3, [pc, #140]	; (8009e28 <etharp_raw+0x104>)
 8009d9a:	f240 426b 	movw	r2, #1131	; 0x46b
 8009d9e:	4926      	ldr	r1, [pc, #152]	; (8009e38 <etharp_raw+0x114>)
 8009da0:	4823      	ldr	r0, [pc, #140]	; (8009e30 <etharp_raw+0x10c>)
 8009da2:	f00c f817 	bl	8015dd4 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  ETHADDR16_COPY(&hdr->shwaddr, hwsrc_addr);
 8009da6:	697b      	ldr	r3, [r7, #20]
 8009da8:	3308      	adds	r3, #8
 8009daa:	2206      	movs	r2, #6
 8009dac:	6839      	ldr	r1, [r7, #0]
 8009dae:	4618      	mov	r0, r3
 8009db0:	f00b fffd 	bl	8015dae <memcpy>
  ETHADDR16_COPY(&hdr->dhwaddr, hwdst_addr);
 8009db4:	697b      	ldr	r3, [r7, #20]
 8009db6:	3312      	adds	r3, #18
 8009db8:	2206      	movs	r2, #6
 8009dba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	f00b fff6 	bl	8015dae <memcpy>
  /* Copy struct ip4_addr2 to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR2_COPY(&hdr->sipaddr, ipsrc_addr);
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	330e      	adds	r3, #14
 8009dc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009dc8:	6812      	ldr	r2, [r2, #0]
 8009dca:	601a      	str	r2, [r3, #0]
  IPADDR2_COPY(&hdr->dipaddr, ipdst_addr);
 8009dcc:	697b      	ldr	r3, [r7, #20]
 8009dce:	3318      	adds	r3, #24
 8009dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009dd2:	6812      	ldr	r2, [r2, #0]
 8009dd4:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(HWTYPE_ETHERNET);
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	2200      	movs	r2, #0
 8009dda:	701a      	strb	r2, [r3, #0]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f042 0201 	orr.w	r2, r2, #1
 8009de2:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	2200      	movs	r2, #0
 8009de8:	f042 0208 	orr.w	r2, r2, #8
 8009dec:	709a      	strb	r2, [r3, #2]
 8009dee:	2200      	movs	r2, #0
 8009df0:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	2206      	movs	r2, #6
 8009df6:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8009df8:	697b      	ldr	r3, [r7, #20]
 8009dfa:	2204      	movs	r2, #4
 8009dfc:	715a      	strb	r2, [r3, #5]
  if(ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8009dfe:	f640 0306 	movw	r3, #2054	; 0x806
 8009e02:	9300      	str	r3, [sp, #0]
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	69b9      	ldr	r1, [r7, #24]
 8009e0a:	68f8      	ldr	r0, [r7, #12]
 8009e0c:	f008 fd8a 	bl	8012924 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8009e10:	69b8      	ldr	r0, [r7, #24]
 8009e12:	f002 fbb1 	bl	800c578 <pbuf_free>
  p = NULL;
 8009e16:	2300      	movs	r3, #0
 8009e18:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8009e1a:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3720      	adds	r7, #32
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
 8009e26:	bf00      	nop
 8009e28:	080186e4 	.word	0x080186e4
 8009e2c:	08018834 	.word	0x08018834
 8009e30:	0801875c 	.word	0x0801875c
 8009e34:	080188d4 	.word	0x080188d4
 8009e38:	08018908 	.word	0x08018908

08009e3c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr* hw_dst_addr)
{
 8009e3c:	b580      	push	{r7, lr}
 8009e3e:	b088      	sub	sp, #32
 8009e40:	af04      	add	r7, sp, #16
 8009e42:	60f8      	str	r0, [r7, #12]
 8009e44:	60b9      	str	r1, [r7, #8]
 8009e46:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	f103 0125 	add.w	r1, r3, #37	; 0x25
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	f103 0025 	add.w	r0, r3, #37	; 0x25
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8009e58:	2201      	movs	r2, #1
 8009e5a:	9203      	str	r2, [sp, #12]
 8009e5c:	68ba      	ldr	r2, [r7, #8]
 8009e5e:	9202      	str	r2, [sp, #8]
 8009e60:	4a06      	ldr	r2, [pc, #24]	; (8009e7c <etharp_request_dst+0x40>)
 8009e62:	9201      	str	r2, [sp, #4]
 8009e64:	9300      	str	r3, [sp, #0]
 8009e66:	4603      	mov	r3, r0
 8009e68:	687a      	ldr	r2, [r7, #4]
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7ff ff5a 	bl	8009d24 <etharp_raw>
 8009e70:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8009e72:	4618      	mov	r0, r3
 8009e74:	3710      	adds	r7, #16
 8009e76:	46bd      	mov	sp, r7
 8009e78:	bd80      	pop	{r7, pc}
 8009e7a:	bf00      	nop
 8009e7c:	0801a5d4 	.word	0x0801a5d4

08009e80 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
 8009e88:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8009e8a:	4a05      	ldr	r2, [pc, #20]	; (8009ea0 <etharp_request+0x20>)
 8009e8c:	6839      	ldr	r1, [r7, #0]
 8009e8e:	6878      	ldr	r0, [r7, #4]
 8009e90:	f7ff ffd4 	bl	8009e3c <etharp_request_dst>
 8009e94:	4603      	mov	r3, r0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}
 8009e9e:	bf00      	nop
 8009ea0:	0801a5cc 	.word	0x0801a5cc

08009ea4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8009ea4:	b580      	push	{r7, lr}
 8009ea6:	b08e      	sub	sp, #56	; 0x38
 8009ea8:	af04      	add	r7, sp, #16
 8009eaa:	6078      	str	r0, [r7, #4]
 8009eac:	6039      	str	r1, [r7, #0]
  const ip4_addr_t* src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8009eae:	4b7a      	ldr	r3, [pc, #488]	; (800a098 <icmp_input+0x1f4>)
 8009eb0:	689b      	ldr	r3, [r3, #8]
 8009eb2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL(iphdr_in) * 4;
 8009eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	b29b      	uxth	r3, r3
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	b29b      	uxth	r3, r3
 8009ec0:	009b      	lsls	r3, r3, #2
 8009ec2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8009ec4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ec6:	2b13      	cmp	r3, #19
 8009ec8:	f240 80d1 	bls.w	800a06e <icmp_input+0x1ca>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t)*2) {
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	895b      	ldrh	r3, [r3, #10]
 8009ed0:	2b03      	cmp	r3, #3
 8009ed2:	f240 80ce 	bls.w	800a072 <icmp_input+0x1ce>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	685b      	ldr	r3, [r3, #4]
 8009eda:	781b      	ldrb	r3, [r3, #0]
 8009edc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload)+1);
#endif /* LWIP_DEBUG */
  switch (type) {
 8009ee0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	f000 80bb 	beq.w	800a060 <icmp_input+0x1bc>
 8009eea:	2b08      	cmp	r3, #8
 8009eec:	f040 80bb 	bne.w	800a066 <icmp_input+0x1c2>
       (as obviously, an echo request has been sent, too). */
    MIB2_STATS_INC(mib2.icmpinechoreps);
    break;
  case ICMP_ECHO:
    MIB2_STATS_INC(mib2.icmpinechos);
    src = ip4_current_dest_addr();
 8009ef0:	4b6a      	ldr	r3, [pc, #424]	; (800a09c <icmp_input+0x1f8>)
 8009ef2:	61fb      	str	r3, [r7, #28]
    /* multicast destination address? */
    if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8009ef4:	4b68      	ldr	r3, [pc, #416]	; (800a098 <icmp_input+0x1f4>)
 8009ef6:	695b      	ldr	r3, [r3, #20]
 8009ef8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009efc:	2be0      	cmp	r3, #224	; 0xe0
 8009efe:	f000 80bf 	beq.w	800a080 <icmp_input+0x1dc>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
      goto icmperr;
#endif /* LWIP_MULTICAST_PING */
    }
    /* broadcast destination address? */
    if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8009f02:	4b65      	ldr	r3, [pc, #404]	; (800a098 <icmp_input+0x1f4>)
 8009f04:	695a      	ldr	r2, [r3, #20]
 8009f06:	4b64      	ldr	r3, [pc, #400]	; (800a098 <icmp_input+0x1f4>)
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	4619      	mov	r1, r3
 8009f0c:	4610      	mov	r0, r2
 8009f0e:	f000 fbcd 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	f040 80b5 	bne.w	800a084 <icmp_input+0x1e0>
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
      goto icmperr;
#endif /* LWIP_BROADCAST_PING */
    }
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
    if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	891b      	ldrh	r3, [r3, #8]
 8009f1e:	2b07      	cmp	r3, #7
 8009f20:	f240 80a9 	bls.w	800a076 <icmp_input+0x1d2>
        return;
      }
    }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
    if (pbuf_header(p, (s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009f24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f26:	330e      	adds	r3, #14
 8009f28:	b29b      	uxth	r3, r3
 8009f2a:	b21b      	sxth	r3, r3
 8009f2c:	4619      	mov	r1, r3
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f002 fafe 	bl	800c530 <pbuf_header>
 8009f34:	4603      	mov	r3, r0
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d046      	beq.n	8009fc8 <icmp_input+0x124>
      /* p is not big enough to contain link headers
       * allocate a new one and copy p into it
       */
      struct pbuf *r;
      /* allocate new packet buffer with space for link headers */
      r = pbuf_alloc(PBUF_LINK, p->tot_len + hlen, PBUF_RAM);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	891a      	ldrh	r2, [r3, #8]
 8009f3e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f40:	4413      	add	r3, r2
 8009f42:	b29b      	uxth	r3, r3
 8009f44:	2200      	movs	r2, #0
 8009f46:	4619      	mov	r1, r3
 8009f48:	2002      	movs	r0, #2
 8009f4a:	f001 ffa3 	bl	800be94 <pbuf_alloc>
 8009f4e:	61b8      	str	r0, [r7, #24]
      if (r == NULL) {
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	f000 8098 	beq.w	800a088 <icmp_input+0x1e4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
        goto icmperr;
      }
      if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8009f58:	69bb      	ldr	r3, [r7, #24]
 8009f5a:	895b      	ldrh	r3, [r3, #10]
 8009f5c:	461a      	mov	r2, r3
 8009f5e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f60:	3308      	adds	r3, #8
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d203      	bcs.n	8009f6e <icmp_input+0xca>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
        pbuf_free(r);
 8009f66:	69b8      	ldr	r0, [r7, #24]
 8009f68:	f002 fb06 	bl	800c578 <pbuf_free>
        goto icmperr;
 8009f6c:	e08d      	b.n	800a08a <icmp_input+0x1e6>
      }
      /* copy the ip header */
      MEMCPY(r->payload, iphdr_in, hlen);
 8009f6e:	69bb      	ldr	r3, [r7, #24]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8009f74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009f76:	4618      	mov	r0, r3
 8009f78:	f00b ff19 	bl	8015dae <memcpy>
      /* switch r->payload back to icmp header (cannot fail) */
      if (pbuf_header(r, (s16_t)-hlen)) {
 8009f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009f7e:	425b      	negs	r3, r3
 8009f80:	b29b      	uxth	r3, r3
 8009f82:	b21b      	sxth	r3, r3
 8009f84:	4619      	mov	r1, r3
 8009f86:	69b8      	ldr	r0, [r7, #24]
 8009f88:	f002 fad2 	bl	800c530 <pbuf_header>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d009      	beq.n	8009fa6 <icmp_input+0x102>
        LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8009f92:	4b43      	ldr	r3, [pc, #268]	; (800a0a0 <icmp_input+0x1fc>)
 8009f94:	22af      	movs	r2, #175	; 0xaf
 8009f96:	4943      	ldr	r1, [pc, #268]	; (800a0a4 <icmp_input+0x200>)
 8009f98:	4843      	ldr	r0, [pc, #268]	; (800a0a8 <icmp_input+0x204>)
 8009f9a:	f00b ff1b 	bl	8015dd4 <iprintf>
        pbuf_free(r);
 8009f9e:	69b8      	ldr	r0, [r7, #24]
 8009fa0:	f002 faea 	bl	800c578 <pbuf_free>
        goto icmperr;
 8009fa4:	e071      	b.n	800a08a <icmp_input+0x1e6>
      }
      /* copy the rest of the packet without ip header */
      if (pbuf_copy(r, p) != ERR_OK) {
 8009fa6:	6879      	ldr	r1, [r7, #4]
 8009fa8:	69b8      	ldr	r0, [r7, #24]
 8009faa:	f002 fc15 	bl	800c7d8 <pbuf_copy>
 8009fae:	4603      	mov	r3, r0
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d003      	beq.n	8009fbc <icmp_input+0x118>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
        pbuf_free(r);
 8009fb4:	69b8      	ldr	r0, [r7, #24]
 8009fb6:	f002 fadf 	bl	800c578 <pbuf_free>
        goto icmperr;
 8009fba:	e066      	b.n	800a08a <icmp_input+0x1e6>
      }
      /* free the original p */
      pbuf_free(p);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f002 fadb 	bl	800c578 <pbuf_free>
      /* we now have an identical copy of p that has room for link headers */
      p = r;
 8009fc2:	69bb      	ldr	r3, [r7, #24]
 8009fc4:	607b      	str	r3, [r7, #4]
 8009fc6:	e015      	b.n	8009ff4 <icmp_input+0x150>
    } else {
      /* restore p->payload to point to icmp header (cannot fail) */
      if (pbuf_header(p, -(s16_t)(hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN))) {
 8009fc8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009fca:	f1c3 23ff 	rsb	r3, r3, #4278255360	; 0xff00ff00
 8009fce:	f503 037f 	add.w	r3, r3, #16711680	; 0xff0000
 8009fd2:	33f2      	adds	r3, #242	; 0xf2
 8009fd4:	b29b      	uxth	r3, r3
 8009fd6:	b21b      	sxth	r3, r3
 8009fd8:	4619      	mov	r1, r3
 8009fda:	6878      	ldr	r0, [r7, #4]
 8009fdc:	f002 faa8 	bl	800c530 <pbuf_header>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d006      	beq.n	8009ff4 <icmp_input+0x150>
        LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8009fe6:	4b2e      	ldr	r3, [pc, #184]	; (800a0a0 <icmp_input+0x1fc>)
 8009fe8:	22c0      	movs	r2, #192	; 0xc0
 8009fea:	4930      	ldr	r1, [pc, #192]	; (800a0ac <icmp_input+0x208>)
 8009fec:	482e      	ldr	r0, [pc, #184]	; (800a0a8 <icmp_input+0x204>)
 8009fee:	f00b fef1 	bl	8015dd4 <iprintf>
        goto icmperr;
 8009ff2:	e04a      	b.n	800a08a <icmp_input+0x1e6>
    }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
    /* At this point, all checks are OK. */
    /* We generate an answer by switching the dest and src ip addresses,
     * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
    iecho = (struct icmp_echo_hdr *)p->payload;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	685b      	ldr	r3, [r3, #4]
 8009ff8:	617b      	str	r3, [r7, #20]
    if (pbuf_header(p, (s16_t)hlen)) {
 8009ffa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8009ffe:	4619      	mov	r1, r3
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	f002 fa95 	bl	800c530 <pbuf_header>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d12b      	bne.n	800a064 <icmp_input+0x1c0>
      LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
    } else {
      err_t ret;
      struct ip_hdr *iphdr = (struct ip_hdr*)p->payload;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	613b      	str	r3, [r7, #16]
      ip4_addr_copy(iphdr->src, *src);
 800a012:	69fb      	ldr	r3, [r7, #28]
 800a014:	681a      	ldr	r2, [r3, #0]
 800a016:	693b      	ldr	r3, [r7, #16]
 800a018:	60da      	str	r2, [r3, #12]
      ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 800a01a:	4b1f      	ldr	r3, [pc, #124]	; (800a098 <icmp_input+0x1f4>)
 800a01c:	691a      	ldr	r2, [r3, #16]
 800a01e:	693b      	ldr	r3, [r7, #16]
 800a020:	611a      	str	r2, [r3, #16]
      ICMPH_TYPE_SET(iecho, ICMP_ER);
 800a022:	697b      	ldr	r3, [r7, #20]
 800a024:	2200      	movs	r2, #0
 800a026:	701a      	strb	r2, [r3, #0]
      else {
        iecho->chksum = 0;
      }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
      iecho->chksum = 0;
 800a028:	697b      	ldr	r3, [r7, #20]
 800a02a:	2200      	movs	r2, #0
 800a02c:	709a      	strb	r2, [r3, #2]
 800a02e:	2200      	movs	r2, #0
 800a030:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

      /* Set the correct TTL and recalculate the header checksum. */
      IPH_TTL_SET(iphdr, ICMP_TTL);
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	22ff      	movs	r2, #255	; 0xff
 800a036:	721a      	strb	r2, [r3, #8]
      IPH_CHKSUM_SET(iphdr, 0);
 800a038:	693b      	ldr	r3, [r7, #16]
 800a03a:	2200      	movs	r2, #0
 800a03c:	729a      	strb	r2, [r3, #10]
 800a03e:	2200      	movs	r2, #0
 800a040:	72da      	strb	r2, [r3, #11]
      MIB2_STATS_INC(mib2.icmpoutmsgs);
      /* increase number of echo replies attempted to send */
      MIB2_STATS_INC(mib2.icmpoutechoreps);

      /* send an ICMP packet */
      ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	9302      	str	r3, [sp, #8]
 800a046:	2301      	movs	r3, #1
 800a048:	9301      	str	r3, [sp, #4]
 800a04a:	2300      	movs	r3, #0
 800a04c:	9300      	str	r3, [sp, #0]
 800a04e:	23ff      	movs	r3, #255	; 0xff
 800a050:	2200      	movs	r2, #0
 800a052:	69f9      	ldr	r1, [r7, #28]
 800a054:	6878      	ldr	r0, [r7, #4]
 800a056:	f000 fa57 	bl	800a508 <ip4_output_if>
 800a05a:	4603      	mov	r3, r0
 800a05c:	73fb      	strb	r3, [r7, #15]
                   ICMP_TTL, 0, IP_PROTO_ICMP, inp);
      if (ret != ERR_OK) {
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
      }
    }
    break;
 800a05e:	e001      	b.n	800a064 <icmp_input+0x1c0>
    break;
 800a060:	bf00      	nop
 800a062:	e000      	b.n	800a066 <icmp_input+0x1c2>
    break;
 800a064:	bf00      	nop
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                (s16_t)type, (s16_t)code));
    ICMP_STATS_INC(icmp.proterr);
    ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f002 fa86 	bl	800c578 <pbuf_free>
  return;
 800a06c:	e011      	b.n	800a092 <icmp_input+0x1ee>
    goto lenerr;
 800a06e:	bf00      	nop
 800a070:	e002      	b.n	800a078 <icmp_input+0x1d4>
    goto lenerr;
 800a072:	bf00      	nop
 800a074:	e000      	b.n	800a078 <icmp_input+0x1d4>
      goto lenerr;
 800a076:	bf00      	nop
lenerr:
  pbuf_free(p);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f002 fa7d 	bl	800c578 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a07e:	e008      	b.n	800a092 <icmp_input+0x1ee>
      goto icmperr;
 800a080:	bf00      	nop
 800a082:	e002      	b.n	800a08a <icmp_input+0x1e6>
      goto icmperr;
 800a084:	bf00      	nop
 800a086:	e000      	b.n	800a08a <icmp_input+0x1e6>
        goto icmperr;
 800a088:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 800a08a:	6878      	ldr	r0, [r7, #4]
 800a08c:	f002 fa74 	bl	800c578 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 800a090:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 800a092:	3728      	adds	r7, #40	; 0x28
 800a094:	46bd      	mov	sp, r7
 800a096:	bd80      	pop	{r7, pc}
 800a098:	200041ec 	.word	0x200041ec
 800a09c:	20004200 	.word	0x20004200
 800a0a0:	0801894c 	.word	0x0801894c
 800a0a4:	08018984 	.word	0x08018984
 800a0a8:	080189bc 	.word	0x080189bc
 800a0ac:	080189e4 	.word	0x080189e4

0800a0b0 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 800a0b0:	b580      	push	{r7, lr}
 800a0b2:	b082      	sub	sp, #8
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
 800a0b8:	460b      	mov	r3, r1
 800a0ba:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 800a0bc:	78fb      	ldrb	r3, [r7, #3]
 800a0be:	461a      	mov	r2, r3
 800a0c0:	2103      	movs	r1, #3
 800a0c2:	6878      	ldr	r0, [r7, #4]
 800a0c4:	f000 f814 	bl	800a0f0 <icmp_send_response>
}
 800a0c8:	bf00      	nop
 800a0ca:	3708      	adds	r7, #8
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	bd80      	pop	{r7, pc}

0800a0d0 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 800a0d0:	b580      	push	{r7, lr}
 800a0d2:	b082      	sub	sp, #8
 800a0d4:	af00      	add	r7, sp, #0
 800a0d6:	6078      	str	r0, [r7, #4]
 800a0d8:	460b      	mov	r3, r1
 800a0da:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	461a      	mov	r2, r3
 800a0e0:	210b      	movs	r1, #11
 800a0e2:	6878      	ldr	r0, [r7, #4]
 800a0e4:	f000 f804 	bl	800a0f0 <icmp_send_response>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b08c      	sub	sp, #48	; 0x30
 800a0f4:	af04      	add	r7, sp, #16
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	460b      	mov	r3, r1
 800a0fa:	70fb      	strb	r3, [r7, #3]
 800a0fc:	4613      	mov	r3, r2
 800a0fe:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 800a100:	2200      	movs	r2, #0
 800a102:	2124      	movs	r1, #36	; 0x24
 800a104:	2001      	movs	r0, #1
 800a106:	f001 fec5 	bl	800be94 <pbuf_alloc>
 800a10a:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d04c      	beq.n	800a1ac <icmp_send_response+0xbc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	895b      	ldrh	r3, [r3, #10]
 800a116:	2b23      	cmp	r3, #35	; 0x23
 800a118:	d806      	bhi.n	800a128 <icmp_send_response+0x38>
 800a11a:	4b26      	ldr	r3, [pc, #152]	; (800a1b4 <icmp_send_response+0xc4>)
 800a11c:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800a120:	4925      	ldr	r1, [pc, #148]	; (800a1b8 <icmp_send_response+0xc8>)
 800a122:	4826      	ldr	r0, [pc, #152]	; (800a1bc <icmp_send_response+0xcc>)
 800a124:	f00b fe56 	bl	8015dd4 <iprintf>
             (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 800a134:	697b      	ldr	r3, [r7, #20]
 800a136:	78fa      	ldrb	r2, [r7, #3]
 800a138:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 800a13a:	697b      	ldr	r3, [r7, #20]
 800a13c:	78ba      	ldrb	r2, [r7, #2]
 800a13e:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 800a140:	697b      	ldr	r3, [r7, #20]
 800a142:	2200      	movs	r2, #0
 800a144:	711a      	strb	r2, [r3, #4]
 800a146:	2200      	movs	r2, #0
 800a148:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 800a14a:	697b      	ldr	r3, [r7, #20]
 800a14c:	2200      	movs	r2, #0
 800a14e:	719a      	strb	r2, [r3, #6]
 800a150:	2200      	movs	r2, #0
 800a152:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 800a154:	69fb      	ldr	r3, [r7, #28]
 800a156:	685b      	ldr	r3, [r3, #4]
 800a158:	f103 0008 	add.w	r0, r3, #8
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	685b      	ldr	r3, [r3, #4]
 800a160:	221c      	movs	r2, #28
 800a162:	4619      	mov	r1, r3
 800a164:	f00b fe23 	bl	8015dae <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 800a168:	69bb      	ldr	r3, [r7, #24]
 800a16a:	68db      	ldr	r3, [r3, #12]
 800a16c:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_src, &iphdr_dst);
  }
#else
  netif = ip4_route(&iphdr_src);
 800a16e:	f107 030c 	add.w	r3, r7, #12
 800a172:	4618      	mov	r0, r3
 800a174:	f000 f824 	bl	800a1c0 <ip4_route>
 800a178:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d011      	beq.n	800a1a4 <icmp_send_response+0xb4>
    /* calculate checksum */
    icmphdr->chksum = 0;
 800a180:	697b      	ldr	r3, [r7, #20]
 800a182:	2200      	movs	r2, #0
 800a184:	709a      	strb	r2, [r3, #2]
 800a186:	2200      	movs	r2, #0
 800a188:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 800a18a:	f107 020c 	add.w	r2, r7, #12
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	9302      	str	r3, [sp, #8]
 800a192:	2301      	movs	r3, #1
 800a194:	9301      	str	r3, [sp, #4]
 800a196:	2300      	movs	r3, #0
 800a198:	9300      	str	r3, [sp, #0]
 800a19a:	23ff      	movs	r3, #255	; 0xff
 800a19c:	2100      	movs	r1, #0
 800a19e:	69f8      	ldr	r0, [r7, #28]
 800a1a0:	f000 f9b2 	bl	800a508 <ip4_output_if>
  }
  pbuf_free(q);
 800a1a4:	69f8      	ldr	r0, [r7, #28]
 800a1a6:	f002 f9e7 	bl	800c578 <pbuf_free>
 800a1aa:	e000      	b.n	800a1ae <icmp_send_response+0xbe>
    return;
 800a1ac:	bf00      	nop
}
 800a1ae:	3720      	adds	r7, #32
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	bd80      	pop	{r7, pc}
 800a1b4:	0801894c 	.word	0x0801894c
 800a1b8:	08018a18 	.word	0x08018a18
 800a1bc:	080189bc 	.word	0x080189bc

0800a1c0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b085      	sub	sp, #20
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
    return ip4_default_multicast_netif;
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */

  /* iterate through netifs */
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a1c8:	4b2f      	ldr	r3, [pc, #188]	; (800a288 <ip4_route+0xc8>)
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	60fb      	str	r3, [r7, #12]
 800a1ce:	e033      	b.n	800a238 <ip4_route+0x78>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d029      	beq.n	800a232 <ip4_route+0x72>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a1e4:	f003 0304 	and.w	r3, r3, #4
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	d022      	beq.n	800a232 <ip4_route+0x72>
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	3304      	adds	r3, #4
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d01d      	beq.n	800a232 <ip4_route+0x72>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	681a      	ldr	r2, [r3, #0]
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	3304      	adds	r3, #4
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	405a      	eors	r2, r3
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	3308      	adds	r3, #8
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4013      	ands	r3, r2
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d101      	bne.n	800a212 <ip4_route+0x52>
        /* return netif on which to forward IP packet */
        return netif;
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	e033      	b.n	800a27a <ip4_route+0xba>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a218:	f003 0302 	and.w	r3, r3, #2
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d108      	bne.n	800a232 <ip4_route+0x72>
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	681a      	ldr	r2, [r3, #0]
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	330c      	adds	r3, #12
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	429a      	cmp	r2, r3
 800a22c:	d101      	bne.n	800a232 <ip4_route+0x72>
        /* return netif on which to forward IP packet */
        return netif;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	e023      	b.n	800a27a <ip4_route+0xba>
  for (netif = netif_list; netif != NULL; netif = netif->next) {
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	60fb      	str	r3, [r7, #12]
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d1c8      	bne.n	800a1d0 <ip4_route+0x10>
  if (netif != NULL) {
    return netif;
  }
#endif

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a23e:	4b13      	ldr	r3, [pc, #76]	; (800a28c <ip4_route+0xcc>)
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	2b00      	cmp	r3, #0
 800a244:	d015      	beq.n	800a272 <ip4_route+0xb2>
 800a246:	4b11      	ldr	r3, [pc, #68]	; (800a28c <ip4_route+0xcc>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a24e:	f003 0301 	and.w	r3, r3, #1
 800a252:	2b00      	cmp	r3, #0
 800a254:	d00d      	beq.n	800a272 <ip4_route+0xb2>
 800a256:	4b0d      	ldr	r3, [pc, #52]	; (800a28c <ip4_route+0xcc>)
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a25e:	f003 0304 	and.w	r3, r3, #4
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <ip4_route+0xb2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default))) {
 800a266:	4b09      	ldr	r3, [pc, #36]	; (800a28c <ip4_route+0xcc>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3304      	adds	r3, #4
 800a26c:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <ip4_route+0xb6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
      ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 800a272:	2300      	movs	r3, #0
 800a274:	e001      	b.n	800a27a <ip4_route+0xba>
  }

  return netif_default;
 800a276:	4b05      	ldr	r3, [pc, #20]	; (800a28c <ip4_route+0xcc>)
 800a278:	681b      	ldr	r3, [r3, #0]
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	20007924 	.word	0x20007924
 800a28c:	20007928 	.word	0x20007928

0800a290 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 800a290:	b580      	push	{r7, lr}
 800a292:	b086      	sub	sp, #24
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	685b      	ldr	r3, [r3, #4]
 800a29e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 800a2a0:	697b      	ldr	r3, [r7, #20]
 800a2a2:	781b      	ldrb	r3, [r3, #0]
 800a2a4:	091b      	lsrs	r3, r3, #4
 800a2a6:	b2db      	uxtb	r3, r3
 800a2a8:	2b04      	cmp	r3, #4
 800a2aa:	d004      	beq.n	800a2b6 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 800a2ac:	6878      	ldr	r0, [r7, #4]
 800a2ae:	f002 f963 	bl	800c578 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	e120      	b.n	800a4f8 <ip4_input+0x268>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in number of 32-bit words */
  iphdr_hlen = IPH_HL(iphdr);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	781b      	ldrb	r3, [r3, #0]
 800a2ba:	b29b      	uxth	r3, r3
 800a2bc:	f003 030f 	and.w	r3, r3, #15
 800a2c0:	817b      	strh	r3, [r7, #10]
  /* calculate IP header length in bytes */
  iphdr_hlen *= 4;
 800a2c2:	897b      	ldrh	r3, [r7, #10]
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	817b      	strh	r3, [r7, #10]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 800a2c8:	697b      	ldr	r3, [r7, #20]
 800a2ca:	885b      	ldrh	r3, [r3, #2]
 800a2cc:	b29b      	uxth	r3, r3
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	f7fe fe94 	bl	8008ffc <lwip_htons>
 800a2d4:	4603      	mov	r3, r0
 800a2d6:	813b      	strh	r3, [r7, #8]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	891b      	ldrh	r3, [r3, #8]
 800a2dc:	893a      	ldrh	r2, [r7, #8]
 800a2de:	429a      	cmp	r2, r3
 800a2e0:	d204      	bcs.n	800a2ec <ip4_input+0x5c>
    pbuf_realloc(p, iphdr_len);
 800a2e2:	893b      	ldrh	r3, [r7, #8]
 800a2e4:	4619      	mov	r1, r3
 800a2e6:	6878      	ldr	r0, [r7, #4]
 800a2e8:	f001 ffd2 	bl	800c290 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	895b      	ldrh	r3, [r3, #10]
 800a2f0:	897a      	ldrh	r2, [r7, #10]
 800a2f2:	429a      	cmp	r2, r3
 800a2f4:	d807      	bhi.n	800a306 <ip4_input+0x76>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	891b      	ldrh	r3, [r3, #8]
 800a2fa:	893a      	ldrh	r2, [r7, #8]
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	d802      	bhi.n	800a306 <ip4_input+0x76>
 800a300:	897b      	ldrh	r3, [r7, #10]
 800a302:	2b13      	cmp	r3, #19
 800a304:	d804      	bhi.n	800a310 <ip4_input+0x80>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
        ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
        iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 800a306:	6878      	ldr	r0, [r7, #4]
 800a308:	f002 f936 	bl	800c578 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 800a30c:	2300      	movs	r3, #0
 800a30e:	e0f3      	b.n	800a4f8 <ip4_input+0x268>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 800a310:	697b      	ldr	r3, [r7, #20]
 800a312:	691b      	ldr	r3, [r3, #16]
 800a314:	4a7a      	ldr	r2, [pc, #488]	; (800a500 <ip4_input+0x270>)
 800a316:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	68db      	ldr	r3, [r3, #12]
 800a31c:	4a78      	ldr	r2, [pc, #480]	; (800a500 <ip4_input+0x270>)
 800a31e:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a320:	4b77      	ldr	r3, [pc, #476]	; (800a500 <ip4_input+0x270>)
 800a322:	695b      	ldr	r3, [r3, #20]
 800a324:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a328:	2be0      	cmp	r3, #224	; 0xe0
 800a32a:	d111      	bne.n	800a350 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a332:	f003 0301 	and.w	r3, r3, #1
 800a336:	2b00      	cmp	r3, #0
 800a338:	d007      	beq.n	800a34a <ip4_input+0xba>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	3304      	adds	r3, #4
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	2b00      	cmp	r3, #0
 800a342:	d002      	beq.n	800a34a <ip4_input+0xba>
      netif = inp;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	613b      	str	r3, [r7, #16]
 800a348:	e040      	b.n	800a3cc <ip4_input+0x13c>
    } else {
      netif = NULL;
 800a34a:	2300      	movs	r3, #0
 800a34c:	613b      	str	r3, [r7, #16]
 800a34e:	e03d      	b.n	800a3cc <ip4_input+0x13c>
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs.
       'first' is used as a boolean to mark whether we started walking the list */
    int first = 1;
 800a350:	2301      	movs	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]
    netif = inp;
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	613b      	str	r3, [r7, #16]
          ip4_addr_get_u32(&iphdr->dest) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
          ip4_addr_get_u32(&iphdr->dest) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

      /* interface is up and configured? */
      if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a35e:	f003 0301 	and.w	r3, r3, #1
 800a362:	2b00      	cmp	r3, #0
 800a364:	d014      	beq.n	800a390 <ip4_input+0x100>
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	3304      	adds	r3, #4
 800a36a:	681b      	ldr	r3, [r3, #0]
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d00f      	beq.n	800a390 <ip4_input+0x100>
        /* unicast to this interface address? */
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a370:	4b63      	ldr	r3, [pc, #396]	; (800a500 <ip4_input+0x270>)
 800a372:	695a      	ldr	r2, [r3, #20]
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	3304      	adds	r3, #4
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	429a      	cmp	r2, r3
 800a37c:	d026      	beq.n	800a3cc <ip4_input+0x13c>
            /* or broadcast on this interface network address? */
            ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 800a37e:	4b60      	ldr	r3, [pc, #384]	; (800a500 <ip4_input+0x270>)
 800a380:	695b      	ldr	r3, [r3, #20]
 800a382:	6939      	ldr	r1, [r7, #16]
 800a384:	4618      	mov	r0, r3
 800a386:	f000 f991 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 800a38a:	4603      	mov	r3, r0
        if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d11d      	bne.n	800a3cc <ip4_input+0x13c>
          /* break out of for loop */
          break;
        }
#endif /* LWIP_AUTOIP */
      }
      if (first) {
 800a390:	68fb      	ldr	r3, [r7, #12]
 800a392:	2b00      	cmp	r3, #0
 800a394:	d00d      	beq.n	800a3b2 <ip4_input+0x122>
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
        /* Packets sent to the loopback address must not be accepted on an
         * interface that does not have the loopback address assigned to it,
         * unless a non-loopback interface is used for loopback traffic. */
        if (ip4_addr_isloopback(ip4_current_dest_addr())) {
 800a396:	4b5a      	ldr	r3, [pc, #360]	; (800a500 <ip4_input+0x270>)
 800a398:	695b      	ldr	r3, [r3, #20]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b7f      	cmp	r3, #127	; 0x7f
 800a39e:	d102      	bne.n	800a3a6 <ip4_input+0x116>
          netif = NULL;
 800a3a0:	2300      	movs	r3, #0
 800a3a2:	613b      	str	r3, [r7, #16]
          break;
 800a3a4:	e012      	b.n	800a3cc <ip4_input+0x13c>
        }
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
        first = 0;
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	60fb      	str	r3, [r7, #12]
        netif = netif_list;
 800a3aa:	4b56      	ldr	r3, [pc, #344]	; (800a504 <ip4_input+0x274>)
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	613b      	str	r3, [r7, #16]
 800a3b0:	e002      	b.n	800a3b8 <ip4_input+0x128>
      } else {
        netif = netif->next;
 800a3b2:	693b      	ldr	r3, [r7, #16]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	613b      	str	r3, [r7, #16]
      }
      if (netif == inp) {
 800a3b8:	693a      	ldr	r2, [r7, #16]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	429a      	cmp	r2, r3
 800a3be:	d102      	bne.n	800a3c6 <ip4_input+0x136>
        netif = netif->next;
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	613b      	str	r3, [r7, #16]
      }
    } while (netif != NULL);
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d1c5      	bne.n	800a358 <ip4_input+0xc8>
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a3cc:	4b4c      	ldr	r3, [pc, #304]	; (800a500 <ip4_input+0x270>)
 800a3ce:	691b      	ldr	r3, [r3, #16]
 800a3d0:	6839      	ldr	r1, [r7, #0]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f000 f96a 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d105      	bne.n	800a3ea <ip4_input+0x15a>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 800a3de:	4b48      	ldr	r3, [pc, #288]	; (800a500 <ip4_input+0x270>)
 800a3e0:	691b      	ldr	r3, [r3, #16]
 800a3e2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 800a3e6:	2be0      	cmp	r3, #224	; 0xe0
 800a3e8:	d104      	bne.n	800a3f4 <ip4_input+0x164>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f002 f8c4 	bl	800c578 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 800a3f0:	2300      	movs	r3, #0
 800a3f2:	e081      	b.n	800a4f8 <ip4_input+0x268>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d104      	bne.n	800a404 <ip4_input+0x174>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f002 f8bc 	bl	800c578 <pbuf_free>
    return ERR_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e079      	b.n	800a4f8 <ip4_input+0x268>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 800a404:	697b      	ldr	r3, [r7, #20]
 800a406:	88db      	ldrh	r3, [r3, #6]
 800a408:	b29b      	uxth	r3, r3
 800a40a:	461a      	mov	r2, r3
 800a40c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 800a410:	4013      	ands	r3, r2
 800a412:	2b00      	cmp	r3, #0
 800a414:	d00b      	beq.n	800a42e <ip4_input+0x19e>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
      lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK)*8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 800a416:	6878      	ldr	r0, [r7, #4]
 800a418:	f000 fc8c 	bl	800ad34 <ip4_reass>
 800a41c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	2b00      	cmp	r3, #0
 800a422:	d101      	bne.n	800a428 <ip4_input+0x198>
      return ERR_OK;
 800a424:	2300      	movs	r3, #0
 800a426:	e067      	b.n	800a4f8 <ip4_input+0x268>
    }
    iphdr = (struct ip_hdr *)p->payload;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	685b      	ldr	r3, [r3, #4]
 800a42c:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 800a42e:	4a34      	ldr	r2, [pc, #208]	; (800a500 <ip4_input+0x270>)
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 800a434:	4a32      	ldr	r2, [pc, #200]	; (800a500 <ip4_input+0x270>)
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 800a43a:	4a31      	ldr	r2, [pc, #196]	; (800a500 <ip4_input+0x270>)
 800a43c:	697b      	ldr	r3, [r7, #20]
 800a43e:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL(iphdr) * 4;
 800a440:	697b      	ldr	r3, [r7, #20]
 800a442:	781b      	ldrb	r3, [r3, #0]
 800a444:	b29b      	uxth	r3, r3
 800a446:	f003 030f 	and.w	r3, r3, #15
 800a44a:	b29b      	uxth	r3, r3
 800a44c:	009b      	lsls	r3, r3, #2
 800a44e:	b29a      	uxth	r2, r3
 800a450:	4b2b      	ldr	r3, [pc, #172]	; (800a500 <ip4_input+0x270>)
 800a452:	819a      	strh	r2, [r3, #12]
#if LWIP_RAW
  /* raw input did not eat the packet? */
  if (raw_input(p, inp) == 0)
#endif /* LWIP_RAW */
  {
    pbuf_header(p, -(s16_t)iphdr_hlen); /* Move to payload, no check necessary. */
 800a454:	897b      	ldrh	r3, [r7, #10]
 800a456:	425b      	negs	r3, r3
 800a458:	b29b      	uxth	r3, r3
 800a45a:	b21b      	sxth	r3, r3
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f002 f866 	bl	800c530 <pbuf_header>

    switch (IPH_PROTO(iphdr)) {
 800a464:	697b      	ldr	r3, [r7, #20]
 800a466:	7a5b      	ldrb	r3, [r3, #9]
 800a468:	2b06      	cmp	r3, #6
 800a46a:	d009      	beq.n	800a480 <ip4_input+0x1f0>
 800a46c:	2b11      	cmp	r3, #17
 800a46e:	d002      	beq.n	800a476 <ip4_input+0x1e6>
 800a470:	2b01      	cmp	r3, #1
 800a472:	d00a      	beq.n	800a48a <ip4_input+0x1fa>
 800a474:	e00e      	b.n	800a494 <ip4_input+0x204>
    case IP_PROTO_UDP:
#if LWIP_UDPLITE
    case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
      MIB2_STATS_INC(mib2.ipindelivers);
      udp_input(p, inp);
 800a476:	6839      	ldr	r1, [r7, #0]
 800a478:	6878      	ldr	r0, [r7, #4]
 800a47a:	f007 ffbf 	bl	80123fc <udp_input>
      break;
 800a47e:	e028      	b.n	800a4d2 <ip4_input+0x242>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case IP_PROTO_TCP:
      MIB2_STATS_INC(mib2.ipindelivers);
      tcp_input(p, inp);
 800a480:	6839      	ldr	r1, [r7, #0]
 800a482:	6878      	ldr	r0, [r7, #4]
 800a484:	f003 ff8a 	bl	800e39c <tcp_input>
      break;
 800a488:	e023      	b.n	800a4d2 <ip4_input+0x242>
#endif /* LWIP_TCP */
#if LWIP_ICMP
    case IP_PROTO_ICMP:
      MIB2_STATS_INC(mib2.ipindelivers);
      icmp_input(p, inp);
 800a48a:	6839      	ldr	r1, [r7, #0]
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f7ff fd09 	bl	8009ea4 <icmp_input>
      break;
 800a492:	e01e      	b.n	800a4d2 <ip4_input+0x242>
      break;
#endif /* LWIP_IGMP */
    default:
#if LWIP_ICMP
      /* send ICMP destination protocol unreachable unless is was a broadcast */
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a494:	4b1a      	ldr	r3, [pc, #104]	; (800a500 <ip4_input+0x270>)
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	6939      	ldr	r1, [r7, #16]
 800a49a:	4618      	mov	r0, r3
 800a49c:	f000 f906 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d112      	bne.n	800a4cc <ip4_input+0x23c>
          !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 800a4a6:	4b16      	ldr	r3, [pc, #88]	; (800a500 <ip4_input+0x270>)
 800a4a8:	695b      	ldr	r3, [r3, #20]
 800a4aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 800a4ae:	2be0      	cmp	r3, #224	; 0xe0
 800a4b0:	d00c      	beq.n	800a4cc <ip4_input+0x23c>
        pbuf_header_force(p, iphdr_hlen); /* Move to ip header, no check necessary. */
 800a4b2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f002 f84b 	bl	800c554 <pbuf_header_force>
        p->payload = iphdr;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	697a      	ldr	r2, [r7, #20]
 800a4c2:	605a      	str	r2, [r3, #4]
        icmp_dest_unreach(p, ICMP_DUR_PROTO);
 800a4c4:	2102      	movs	r1, #2
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f7ff fdf2 	bl	800a0b0 <icmp_dest_unreach>
      }
#endif /* LWIP_ICMP */
      pbuf_free(p);
 800a4cc:	6878      	ldr	r0, [r7, #4]
 800a4ce:	f002 f853 	bl	800c578 <pbuf_free>
      MIB2_STATS_INC(mib2.ipinunknownprotos);
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 800a4d2:	4b0b      	ldr	r3, [pc, #44]	; (800a500 <ip4_input+0x270>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 800a4d8:	4b09      	ldr	r3, [pc, #36]	; (800a500 <ip4_input+0x270>)
 800a4da:	2200      	movs	r2, #0
 800a4dc:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 800a4de:	4b08      	ldr	r3, [pc, #32]	; (800a500 <ip4_input+0x270>)
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 800a4e4:	4b06      	ldr	r3, [pc, #24]	; (800a500 <ip4_input+0x270>)
 800a4e6:	2200      	movs	r2, #0
 800a4e8:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 800a4ea:	4b05      	ldr	r3, [pc, #20]	; (800a500 <ip4_input+0x270>)
 800a4ec:	2200      	movs	r2, #0
 800a4ee:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 800a4f0:	4b03      	ldr	r3, [pc, #12]	; (800a500 <ip4_input+0x270>)
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3718      	adds	r7, #24
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	bd80      	pop	{r7, pc}
 800a500:	200041ec 	.word	0x200041ec
 800a504:	20007924 	.word	0x20007924

0800a508 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a508:	b580      	push	{r7, lr}
 800a50a:	b08a      	sub	sp, #40	; 0x28
 800a50c:	af04      	add	r7, sp, #16
 800a50e:	60f8      	str	r0, [r7, #12]
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
       u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
       u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 800a516:	68bb      	ldr	r3, [r7, #8]
 800a518:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d009      	beq.n	800a534 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	2b00      	cmp	r3, #0
 800a524:	d003      	beq.n	800a52e <ip4_output_if+0x26>
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d102      	bne.n	800a534 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 800a52e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a530:	3304      	adds	r3, #4
 800a532:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
    ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 800a534:	78fa      	ldrb	r2, [r7, #3]
 800a536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a538:	9302      	str	r3, [sp, #8]
 800a53a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800a53e:	9301      	str	r3, [sp, #4]
 800a540:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a544:	9300      	str	r3, [sp, #0]
 800a546:	4613      	mov	r3, r2
 800a548:	687a      	ldr	r2, [r7, #4]
 800a54a:	6979      	ldr	r1, [r7, #20]
 800a54c:	68f8      	ldr	r0, [r7, #12]
 800a54e:	f000 f805 	bl	800a55c <ip4_output_if_src>
 800a552:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 800a554:	4618      	mov	r0, r3
 800a556:	3718      	adds	r7, #24
 800a558:	46bd      	mov	sp, r7
 800a55a:	bd80      	pop	{r7, pc}

0800a55c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
             u8_t ttl, u8_t tos,
             u8_t proto, struct netif *netif)
{
 800a55c:	b580      	push	{r7, lr}
 800a55e:	b088      	sub	sp, #32
 800a560:	af00      	add	r7, sp, #0
 800a562:	60f8      	str	r0, [r7, #12]
 800a564:	60b9      	str	r1, [r7, #8]
 800a566:	607a      	str	r2, [r7, #4]
 800a568:	70fb      	strb	r3, [r7, #3]
  ip4_addr_t dest_addr;
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	89db      	ldrh	r3, [r3, #14]
 800a56e:	2b01      	cmp	r3, #1
 800a570:	d006      	beq.n	800a580 <ip4_output_if_src+0x24>
 800a572:	4b48      	ldr	r3, [pc, #288]	; (800a694 <ip4_output_if_src+0x138>)
 800a574:	f240 3233 	movw	r2, #819	; 0x333
 800a578:	4947      	ldr	r1, [pc, #284]	; (800a698 <ip4_output_if_src+0x13c>)
 800a57a:	4848      	ldr	r0, [pc, #288]	; (800a69c <ip4_output_if_src+0x140>)
 800a57c:	f00b fc2a 	bl	8015dd4 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d060      	beq.n	800a648 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 800a586:	2314      	movs	r3, #20
 800a588:	83fb      	strh	r3, [r7, #30]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_header(p, IP_HLEN)) {
 800a58a:	2114      	movs	r1, #20
 800a58c:	68f8      	ldr	r0, [r7, #12]
 800a58e:	f001 ffcf 	bl	800c530 <pbuf_header>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d002      	beq.n	800a59e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 800a598:	f06f 0301 	mvn.w	r3, #1
 800a59c:	e075      	b.n	800a68a <ip4_output_if_src+0x12e>
    }

    iphdr = (struct ip_hdr *)p->payload;
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	685b      	ldr	r3, [r3, #4]
 800a5a2:	61bb      	str	r3, [r7, #24]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	895b      	ldrh	r3, [r3, #10]
 800a5a8:	2b13      	cmp	r3, #19
 800a5aa:	d806      	bhi.n	800a5ba <ip4_output_if_src+0x5e>
 800a5ac:	4b39      	ldr	r3, [pc, #228]	; (800a694 <ip4_output_if_src+0x138>)
 800a5ae:	f240 3261 	movw	r2, #865	; 0x361
 800a5b2:	493b      	ldr	r1, [pc, #236]	; (800a6a0 <ip4_output_if_src+0x144>)
 800a5b4:	4839      	ldr	r0, [pc, #228]	; (800a69c <ip4_output_if_src+0x140>)
 800a5b6:	f00b fc0d 	bl	8015dd4 <iprintf>
               (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 800a5ba:	69bb      	ldr	r3, [r7, #24]
 800a5bc:	78fa      	ldrb	r2, [r7, #3]
 800a5be:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800a5c6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	69bb      	ldr	r3, [r7, #24]
 800a5ce:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 800a5d0:	8bfb      	ldrh	r3, [r7, #30]
 800a5d2:	089b      	lsrs	r3, r3, #2
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a5dc:	b2da      	uxtb	r2, r3
 800a5de:	69bb      	ldr	r3, [r7, #24]
 800a5e0:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 800a5e2:	69bb      	ldr	r3, [r7, #24]
 800a5e4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800a5e8:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	891b      	ldrh	r3, [r3, #8]
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	f7fe fd04 	bl	8008ffc <lwip_htons>
 800a5f4:	4603      	mov	r3, r0
 800a5f6:	461a      	mov	r2, r3
 800a5f8:	69bb      	ldr	r3, [r7, #24]
 800a5fa:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 800a5fc:	69bb      	ldr	r3, [r7, #24]
 800a5fe:	2200      	movs	r2, #0
 800a600:	719a      	strb	r2, [r3, #6]
 800a602:	2200      	movs	r2, #0
 800a604:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 800a606:	4b27      	ldr	r3, [pc, #156]	; (800a6a4 <ip4_output_if_src+0x148>)
 800a608:	881b      	ldrh	r3, [r3, #0]
 800a60a:	4618      	mov	r0, r3
 800a60c:	f7fe fcf6 	bl	8008ffc <lwip_htons>
 800a610:	4603      	mov	r3, r0
 800a612:	461a      	mov	r2, r3
 800a614:	69bb      	ldr	r3, [r7, #24]
 800a616:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 800a618:	4b22      	ldr	r3, [pc, #136]	; (800a6a4 <ip4_output_if_src+0x148>)
 800a61a:	881b      	ldrh	r3, [r3, #0]
 800a61c:	3301      	adds	r3, #1
 800a61e:	b29a      	uxth	r2, r3
 800a620:	4b20      	ldr	r3, [pc, #128]	; (800a6a4 <ip4_output_if_src+0x148>)
 800a622:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d104      	bne.n	800a634 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 800a62a:	4b1f      	ldr	r3, [pc, #124]	; (800a6a8 <ip4_output_if_src+0x14c>)
 800a62c:	681a      	ldr	r2, [r3, #0]
 800a62e:	69bb      	ldr	r3, [r7, #24]
 800a630:	60da      	str	r2, [r3, #12]
 800a632:	e003      	b.n	800a63c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 800a634:	68bb      	ldr	r3, [r7, #8]
 800a636:	681a      	ldr	r2, [r3, #0]
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 800a63c:	69bb      	ldr	r3, [r7, #24]
 800a63e:	2200      	movs	r2, #0
 800a640:	729a      	strb	r2, [r3, #10]
 800a642:	2200      	movs	r2, #0
 800a644:	72da      	strb	r2, [r3, #11]
 800a646:	e008      	b.n	800a65a <ip4_output_if_src+0xfe>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    iphdr = (struct ip_hdr *)p->payload;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	685b      	ldr	r3, [r3, #4]
 800a64c:	61bb      	str	r3, [r7, #24]
    ip4_addr_copy(dest_addr, iphdr->dest);
 800a64e:	69bb      	ldr	r3, [r7, #24]
 800a650:	691b      	ldr	r3, [r3, #16]
 800a652:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 800a654:	f107 0314 	add.w	r3, r7, #20
 800a658:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 800a65a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a65c:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d00c      	beq.n	800a67c <ip4_output_if_src+0x120>
 800a662:	68fb      	ldr	r3, [r7, #12]
 800a664:	891a      	ldrh	r2, [r3, #8]
 800a666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a668:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800a66a:	429a      	cmp	r2, r3
 800a66c:	d906      	bls.n	800a67c <ip4_output_if_src+0x120>
    return ip4_frag(p, netif, dest);
 800a66e:	687a      	ldr	r2, [r7, #4]
 800a670:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a672:	68f8      	ldr	r0, [r7, #12]
 800a674:	f000 fd06 	bl	800b084 <ip4_frag>
 800a678:	4603      	mov	r3, r0
 800a67a:	e006      	b.n	800a68a <ip4_output_if_src+0x12e>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 800a67c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a67e:	695b      	ldr	r3, [r3, #20]
 800a680:	687a      	ldr	r2, [r7, #4]
 800a682:	68f9      	ldr	r1, [r7, #12]
 800a684:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a686:	4798      	blx	r3
 800a688:	4603      	mov	r3, r0
}
 800a68a:	4618      	mov	r0, r3
 800a68c:	3720      	adds	r7, #32
 800a68e:	46bd      	mov	sp, r7
 800a690:	bd80      	pop	{r7, pc}
 800a692:	bf00      	nop
 800a694:	08018a44 	.word	0x08018a44
 800a698:	08018a78 	.word	0x08018a78
 800a69c:	08018a84 	.word	0x08018a84
 800a6a0:	08018aac 	.word	0x08018aac
 800a6a4:	200040c2 	.word	0x200040c2
 800a6a8:	0801a4b8 	.word	0x0801a4b8

0800a6ac <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 800a6ac:	b480      	push	{r7}
 800a6ae:	b085      	sub	sp, #20
 800a6b0:	af00      	add	r7, sp, #0
 800a6b2:	6078      	str	r0, [r7, #4]
 800a6b4:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a6c0:	d002      	beq.n	800a6c8 <ip4_addr_isbroadcast_u32+0x1c>
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d101      	bne.n	800a6cc <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	e02a      	b.n	800a722 <ip4_addr_isbroadcast_u32+0x76>
  /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 800a6cc:	683b      	ldr	r3, [r7, #0]
 800a6ce:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800a6d2:	f003 0302 	and.w	r3, r3, #2
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d101      	bne.n	800a6de <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	e021      	b.n	800a722 <ip4_addr_isbroadcast_u32+0x76>
  /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 800a6de:	683b      	ldr	r3, [r7, #0]
 800a6e0:	3304      	adds	r3, #4
 800a6e2:	681a      	ldr	r2, [r3, #0]
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	429a      	cmp	r2, r3
 800a6e8:	d101      	bne.n	800a6ee <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	e019      	b.n	800a722 <ip4_addr_isbroadcast_u32+0x76>
  /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 800a6ee:	68fa      	ldr	r2, [r7, #12]
 800a6f0:	683b      	ldr	r3, [r7, #0]
 800a6f2:	3304      	adds	r3, #4
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	405a      	eors	r2, r3
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	3308      	adds	r3, #8
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	4013      	ands	r3, r2
 800a700:	2b00      	cmp	r3, #0
 800a702:	d10d      	bne.n	800a720 <ip4_addr_isbroadcast_u32+0x74>
         /* ...and host identifier bits are all ones? =>... */
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a704:	683b      	ldr	r3, [r7, #0]
 800a706:	3308      	adds	r3, #8
 800a708:	681b      	ldr	r3, [r3, #0]
 800a70a:	43da      	mvns	r2, r3
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	401a      	ands	r2, r3
           (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	3308      	adds	r3, #8
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	43db      	mvns	r3, r3
          && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 800a718:	429a      	cmp	r2, r3
 800a71a:	d101      	bne.n	800a720 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 800a71c:	2301      	movs	r3, #1
 800a71e:	e000      	b.n	800a722 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 800a720:	2300      	movs	r3, #0
  }
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
	...

0800a730 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b084      	sub	sp, #16
 800a734:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 800a736:	2300      	movs	r3, #0
 800a738:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 800a73a:	4b12      	ldr	r3, [pc, #72]	; (800a784 <ip_reass_tmr+0x54>)
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 800a740:	e018      	b.n	800a774 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	7fdb      	ldrb	r3, [r3, #31]
 800a746:	2b00      	cmp	r3, #0
 800a748:	d00b      	beq.n	800a762 <ip_reass_tmr+0x32>
      r->timer--;
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	7fdb      	ldrb	r3, [r3, #31]
 800a74e:	3b01      	subs	r3, #1
 800a750:	b2da      	uxtb	r2, r3
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n",(u16_t)r->timer));
      prev = r;
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	60bb      	str	r3, [r7, #8]
      r = r->next;
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	e008      	b.n	800a774 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 800a76c:	68b9      	ldr	r1, [r7, #8]
 800a76e:	6878      	ldr	r0, [r7, #4]
 800a770:	f000 f80a 	bl	800a788 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	2b00      	cmp	r3, #0
 800a778:	d1e3      	bne.n	800a742 <ip_reass_tmr+0x12>
     }
   }
}
 800a77a:	bf00      	nop
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	200040c4 	.word	0x200040c4

0800a788 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800a788:	b580      	push	{r7, lr}
 800a78a:	b088      	sub	sp, #32
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 800a792:	2300      	movs	r3, #0
 800a794:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 800a796:	683a      	ldr	r2, [r7, #0]
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	429a      	cmp	r2, r3
 800a79c:	d105      	bne.n	800a7aa <ip_reass_free_complete_datagram+0x22>
 800a79e:	4b45      	ldr	r3, [pc, #276]	; (800a8b4 <ip_reass_free_complete_datagram+0x12c>)
 800a7a0:	22ab      	movs	r2, #171	; 0xab
 800a7a2:	4945      	ldr	r1, [pc, #276]	; (800a8b8 <ip_reass_free_complete_datagram+0x130>)
 800a7a4:	4845      	ldr	r0, [pc, #276]	; (800a8bc <ip_reass_free_complete_datagram+0x134>)
 800a7a6:	f00b fb15 	bl	8015dd4 <iprintf>
  if (prev != NULL) {
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d00a      	beq.n	800a7c6 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 800a7b0:	683b      	ldr	r3, [r7, #0]
 800a7b2:	681a      	ldr	r2, [r3, #0]
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	429a      	cmp	r2, r3
 800a7b8:	d005      	beq.n	800a7c6 <ip_reass_free_complete_datagram+0x3e>
 800a7ba:	4b3e      	ldr	r3, [pc, #248]	; (800a8b4 <ip_reass_free_complete_datagram+0x12c>)
 800a7bc:	22ad      	movs	r2, #173	; 0xad
 800a7be:	4940      	ldr	r1, [pc, #256]	; (800a8c0 <ip_reass_free_complete_datagram+0x138>)
 800a7c0:	483e      	ldr	r0, [pc, #248]	; (800a8bc <ip_reass_free_complete_datagram+0x134>)
 800a7c2:	f00b fb07 	bl	8015dd4 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	685b      	ldr	r3, [r3, #4]
 800a7ca:	685b      	ldr	r3, [r3, #4]
 800a7cc:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	889b      	ldrh	r3, [r3, #4]
 800a7d2:	b29b      	uxth	r3, r3
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d12a      	bne.n	800a82e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	685b      	ldr	r3, [r3, #4]
 800a7dc:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	681a      	ldr	r2, [r3, #0]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 800a7e6:	69bb      	ldr	r3, [r7, #24]
 800a7e8:	6858      	ldr	r0, [r3, #4]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	3308      	adds	r3, #8
 800a7ee:	2214      	movs	r2, #20
 800a7f0:	4619      	mov	r1, r3
 800a7f2:	f00b fadc 	bl	8015dae <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 800a7f6:	2101      	movs	r1, #1
 800a7f8:	69b8      	ldr	r0, [r7, #24]
 800a7fa:	f7ff fc69 	bl	800a0d0 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 800a7fe:	69b8      	ldr	r0, [r7, #24]
 800a800:	f001 ff54 	bl	800c6ac <pbuf_clen>
 800a804:	4603      	mov	r3, r0
 800a806:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a808:	8bfa      	ldrh	r2, [r7, #30]
 800a80a:	8a7b      	ldrh	r3, [r7, #18]
 800a80c:	4413      	add	r3, r2
 800a80e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a812:	db05      	blt.n	800a820 <ip_reass_free_complete_datagram+0x98>
 800a814:	4b27      	ldr	r3, [pc, #156]	; (800a8b4 <ip_reass_free_complete_datagram+0x12c>)
 800a816:	22bc      	movs	r2, #188	; 0xbc
 800a818:	492a      	ldr	r1, [pc, #168]	; (800a8c4 <ip_reass_free_complete_datagram+0x13c>)
 800a81a:	4828      	ldr	r0, [pc, #160]	; (800a8bc <ip_reass_free_complete_datagram+0x134>)
 800a81c:	f00b fada 	bl	8015dd4 <iprintf>
    pbufs_freed += clen;
 800a820:	8bfa      	ldrh	r2, [r7, #30]
 800a822:	8a7b      	ldrh	r3, [r7, #18]
 800a824:	4413      	add	r3, r2
 800a826:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 800a828:	69b8      	ldr	r0, [r7, #24]
 800a82a:	f001 fea5 	bl	800c578 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	685b      	ldr	r3, [r3, #4]
 800a832:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 800a834:	e01f      	b.n	800a876 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 800a836:	69bb      	ldr	r3, [r7, #24]
 800a838:	685b      	ldr	r3, [r3, #4]
 800a83a:	617b      	str	r3, [r7, #20]
    pcur = p;
 800a83c:	69bb      	ldr	r3, [r7, #24]
 800a83e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 800a840:	697b      	ldr	r3, [r7, #20]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 800a846:	68f8      	ldr	r0, [r7, #12]
 800a848:	f001 ff30 	bl	800c6ac <pbuf_clen>
 800a84c:	4603      	mov	r3, r0
 800a84e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 800a850:	8bfa      	ldrh	r2, [r7, #30]
 800a852:	8a7b      	ldrh	r3, [r7, #18]
 800a854:	4413      	add	r3, r2
 800a856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a85a:	db05      	blt.n	800a868 <ip_reass_free_complete_datagram+0xe0>
 800a85c:	4b15      	ldr	r3, [pc, #84]	; (800a8b4 <ip_reass_free_complete_datagram+0x12c>)
 800a85e:	22cc      	movs	r2, #204	; 0xcc
 800a860:	4918      	ldr	r1, [pc, #96]	; (800a8c4 <ip_reass_free_complete_datagram+0x13c>)
 800a862:	4816      	ldr	r0, [pc, #88]	; (800a8bc <ip_reass_free_complete_datagram+0x134>)
 800a864:	f00b fab6 	bl	8015dd4 <iprintf>
    pbufs_freed += clen;
 800a868:	8bfa      	ldrh	r2, [r7, #30]
 800a86a:	8a7b      	ldrh	r3, [r7, #18]
 800a86c:	4413      	add	r3, r2
 800a86e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f001 fe81 	bl	800c578 <pbuf_free>
  while (p != NULL) {
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d1dc      	bne.n	800a836 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 800a87c:	6839      	ldr	r1, [r7, #0]
 800a87e:	6878      	ldr	r0, [r7, #4]
 800a880:	f000 f8c2 	bl	800aa08 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= pbufs_freed);
 800a884:	4b10      	ldr	r3, [pc, #64]	; (800a8c8 <ip_reass_free_complete_datagram+0x140>)
 800a886:	881b      	ldrh	r3, [r3, #0]
 800a888:	8bfa      	ldrh	r2, [r7, #30]
 800a88a:	429a      	cmp	r2, r3
 800a88c:	d905      	bls.n	800a89a <ip_reass_free_complete_datagram+0x112>
 800a88e:	4b09      	ldr	r3, [pc, #36]	; (800a8b4 <ip_reass_free_complete_datagram+0x12c>)
 800a890:	22d2      	movs	r2, #210	; 0xd2
 800a892:	490e      	ldr	r1, [pc, #56]	; (800a8cc <ip_reass_free_complete_datagram+0x144>)
 800a894:	4809      	ldr	r0, [pc, #36]	; (800a8bc <ip_reass_free_complete_datagram+0x134>)
 800a896:	f00b fa9d 	bl	8015dd4 <iprintf>
  ip_reass_pbufcount -= pbufs_freed;
 800a89a:	4b0b      	ldr	r3, [pc, #44]	; (800a8c8 <ip_reass_free_complete_datagram+0x140>)
 800a89c:	881a      	ldrh	r2, [r3, #0]
 800a89e:	8bfb      	ldrh	r3, [r7, #30]
 800a8a0:	1ad3      	subs	r3, r2, r3
 800a8a2:	b29a      	uxth	r2, r3
 800a8a4:	4b08      	ldr	r3, [pc, #32]	; (800a8c8 <ip_reass_free_complete_datagram+0x140>)
 800a8a6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 800a8a8:	8bfb      	ldrh	r3, [r7, #30]
}
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	3720      	adds	r7, #32
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}
 800a8b2:	bf00      	nop
 800a8b4:	08018adc 	.word	0x08018adc
 800a8b8:	08018b18 	.word	0x08018b18
 800a8bc:	08018b24 	.word	0x08018b24
 800a8c0:	08018b4c 	.word	0x08018b4c
 800a8c4:	08018b60 	.word	0x08018b60
 800a8c8:	200040c8 	.word	0x200040c8
 800a8cc:	08018b80 	.word	0x08018b80

0800a8d0 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b08a      	sub	sp, #40	; 0x28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
 800a8d8:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	623b      	str	r3, [r7, #32]
    prev = NULL;
 800a8e2:	2300      	movs	r3, #0
 800a8e4:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 800a8e6:	2300      	movs	r3, #0
 800a8e8:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 800a8ee:	4b28      	ldr	r3, [pc, #160]	; (800a990 <ip_reass_remove_oldest_datagram+0xc0>)
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a8f4:	e030      	b.n	800a958 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 800a8f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a8f8:	695a      	ldr	r2, [r3, #20]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	68db      	ldr	r3, [r3, #12]
 800a8fe:	429a      	cmp	r2, r3
 800a900:	d10c      	bne.n	800a91c <ip_reass_remove_oldest_datagram+0x4c>
 800a902:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a904:	699a      	ldr	r2, [r3, #24]
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d106      	bne.n	800a91c <ip_reass_remove_oldest_datagram+0x4c>
 800a90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a910:	899a      	ldrh	r2, [r3, #12]
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	889b      	ldrh	r3, [r3, #4]
 800a916:	b29b      	uxth	r3, r3
 800a918:	429a      	cmp	r2, r3
 800a91a:	d014      	beq.n	800a946 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 800a91c:	693b      	ldr	r3, [r7, #16]
 800a91e:	3301      	adds	r3, #1
 800a920:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 800a922:	6a3b      	ldr	r3, [r7, #32]
 800a924:	2b00      	cmp	r3, #0
 800a926:	d104      	bne.n	800a932 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 800a928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a92a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a92c:	69fb      	ldr	r3, [r7, #28]
 800a92e:	61bb      	str	r3, [r7, #24]
 800a930:	e009      	b.n	800a946 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 800a932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a934:	7fda      	ldrb	r2, [r3, #31]
 800a936:	6a3b      	ldr	r3, [r7, #32]
 800a938:	7fdb      	ldrb	r3, [r3, #31]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d803      	bhi.n	800a946 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 800a93e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a940:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 800a942:	69fb      	ldr	r3, [r7, #28]
 800a944:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 800a946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d001      	beq.n	800a952 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 800a94e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a950:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 800a952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 800a958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d1cb      	bne.n	800a8f6 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 800a95e:	6a3b      	ldr	r3, [r7, #32]
 800a960:	2b00      	cmp	r3, #0
 800a962:	d008      	beq.n	800a976 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 800a964:	69b9      	ldr	r1, [r7, #24]
 800a966:	6a38      	ldr	r0, [r7, #32]
 800a968:	f7ff ff0e 	bl	800a788 <ip_reass_free_complete_datagram>
 800a96c:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 800a96e:	697a      	ldr	r2, [r7, #20]
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	4413      	add	r3, r2
 800a974:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 800a976:	697a      	ldr	r2, [r7, #20]
 800a978:	683b      	ldr	r3, [r7, #0]
 800a97a:	429a      	cmp	r2, r3
 800a97c:	da02      	bge.n	800a984 <ip_reass_remove_oldest_datagram+0xb4>
 800a97e:	693b      	ldr	r3, [r7, #16]
 800a980:	2b01      	cmp	r3, #1
 800a982:	dcac      	bgt.n	800a8de <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 800a984:	697b      	ldr	r3, [r7, #20]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3728      	adds	r7, #40	; 0x28
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
 800a98e:	bf00      	nop
 800a990:	200040c4 	.word	0x200040c4

0800a994 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata*
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b084      	sub	sp, #16
 800a998:	af00      	add	r7, sp, #0
 800a99a:	6078      	str	r0, [r7, #4]
 800a99c:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a99e:	2004      	movs	r0, #4
 800a9a0:	f001 f83e 	bl	800ba20 <memp_malloc>
 800a9a4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d110      	bne.n	800a9ce <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 800a9ac:	6839      	ldr	r1, [r7, #0]
 800a9ae:	6878      	ldr	r0, [r7, #4]
 800a9b0:	f7ff ff8e 	bl	800a8d0 <ip_reass_remove_oldest_datagram>
 800a9b4:	4602      	mov	r2, r0
 800a9b6:	683b      	ldr	r3, [r7, #0]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	db03      	blt.n	800a9c4 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 800a9bc:	2004      	movs	r0, #4
 800a9be:	f001 f82f 	bl	800ba20 <memp_malloc>
 800a9c2:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d101      	bne.n	800a9ce <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG,("Failed to alloc reassdata struct\n"));
      return NULL;
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	e016      	b.n	800a9fc <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 800a9ce:	2220      	movs	r2, #32
 800a9d0:	2100      	movs	r1, #0
 800a9d2:	68f8      	ldr	r0, [r7, #12]
 800a9d4:	f00b f9f6 	bl	8015dc4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2203      	movs	r2, #3
 800a9dc:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 800a9de:	4b09      	ldr	r3, [pc, #36]	; (800aa04 <ip_reass_enqueue_new_datagram+0x70>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 800a9e6:	4a07      	ldr	r2, [pc, #28]	; (800aa04 <ip_reass_enqueue_new_datagram+0x70>)
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	3308      	adds	r3, #8
 800a9f0:	2214      	movs	r2, #20
 800a9f2:	6879      	ldr	r1, [r7, #4]
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f00b f9da 	bl	8015dae <memcpy>
  return ipr;
 800a9fa:	68fb      	ldr	r3, [r7, #12]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3710      	adds	r7, #16
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}
 800aa04:	200040c4 	.word	0x200040c4

0800aa08 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]
 800aa10:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 800aa12:	4b10      	ldr	r3, [pc, #64]	; (800aa54 <ip_reass_dequeue_datagram+0x4c>)
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d104      	bne.n	800aa26 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	4a0c      	ldr	r2, [pc, #48]	; (800aa54 <ip_reass_dequeue_datagram+0x4c>)
 800aa22:	6013      	str	r3, [r2, #0]
 800aa24:	e00d      	b.n	800aa42 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d106      	bne.n	800aa3a <ip_reass_dequeue_datagram+0x32>
 800aa2c:	4b0a      	ldr	r3, [pc, #40]	; (800aa58 <ip_reass_dequeue_datagram+0x50>)
 800aa2e:	f240 1245 	movw	r2, #325	; 0x145
 800aa32:	490a      	ldr	r1, [pc, #40]	; (800aa5c <ip_reass_dequeue_datagram+0x54>)
 800aa34:	480a      	ldr	r0, [pc, #40]	; (800aa60 <ip_reass_dequeue_datagram+0x58>)
 800aa36:	f00b f9cd 	bl	8015dd4 <iprintf>
    prev->next = ipr->next;
 800aa3a:	687b      	ldr	r3, [r7, #4]
 800aa3c:	681a      	ldr	r2, [r3, #0]
 800aa3e:	683b      	ldr	r3, [r7, #0]
 800aa40:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 800aa42:	6879      	ldr	r1, [r7, #4]
 800aa44:	2004      	movs	r0, #4
 800aa46:	f001 f83d 	bl	800bac4 <memp_free>
}
 800aa4a:	bf00      	nop
 800aa4c:	3708      	adds	r7, #8
 800aa4e:	46bd      	mov	sp, r7
 800aa50:	bd80      	pop	{r7, pc}
 800aa52:	bf00      	nop
 800aa54:	200040c4 	.word	0x200040c4
 800aa58:	08018adc 	.word	0x08018adc
 800aa5c:	08018b9c 	.word	0x08018b9c
 800aa60:	08018b24 	.word	0x08018b24

0800aa64 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 800aa64:	b580      	push	{r7, lr}
 800aa66:	b08c      	sub	sp, #48	; 0x30
 800aa68:	af00      	add	r7, sp, #0
 800aa6a:	60f8      	str	r0, [r7, #12]
 800aa6c:	60b9      	str	r1, [r7, #8]
 800aa6e:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev=NULL;
 800aa70:	2300      	movs	r3, #0
 800aa72:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  struct ip_hdr *fraghdr;
  int valid = 1;
 800aa74:	2301      	movs	r3, #1
 800aa76:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr*)new_p->payload;
 800aa78:	68bb      	ldr	r3, [r7, #8]
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800aa7e:	69fb      	ldr	r3, [r7, #28]
 800aa80:	885b      	ldrh	r3, [r3, #2]
 800aa82:	b29b      	uxth	r3, r3
 800aa84:	4618      	mov	r0, r3
 800aa86:	f7fe fab9 	bl	8008ffc <lwip_htons>
 800aa8a:	4603      	mov	r3, r0
 800aa8c:	461a      	mov	r2, r3
 800aa8e:	69fb      	ldr	r3, [r7, #28]
 800aa90:	781b      	ldrb	r3, [r3, #0]
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	f003 030f 	and.w	r3, r3, #15
 800aa98:	b29b      	uxth	r3, r3
 800aa9a:	009b      	lsls	r3, r3, #2
 800aa9c:	b29b      	uxth	r3, r3
 800aa9e:	1ad3      	subs	r3, r2, r3
 800aaa0:	837b      	strh	r3, [r7, #26]
  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800aaa2:	69fb      	ldr	r3, [r7, #28]
 800aaa4:	88db      	ldrh	r3, [r3, #6]
 800aaa6:	b29b      	uxth	r3, r3
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe faa7 	bl	8008ffc <lwip_htons>
 800aaae:	4603      	mov	r3, r0
 800aab0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aab4:	b29b      	uxth	r3, r3
 800aab6:	00db      	lsls	r3, r3, #3
 800aab8:	833b      	strh	r3, [r7, #24]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper*)new_p->payload;
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	685b      	ldr	r3, [r3, #4]
 800aabe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 800aac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aac2:	2200      	movs	r2, #0
 800aac4:	701a      	strb	r2, [r3, #0]
 800aac6:	2200      	movs	r2, #0
 800aac8:	705a      	strb	r2, [r3, #1]
 800aaca:	2200      	movs	r2, #0
 800aacc:	709a      	strb	r2, [r3, #2]
 800aace:	2200      	movs	r2, #0
 800aad0:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 800aad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad4:	8b3a      	ldrh	r2, [r7, #24]
 800aad6:	809a      	strh	r2, [r3, #4]
  iprh->end = offset + len;
 800aad8:	8b3a      	ldrh	r2, [r7, #24]
 800aada:	8b7b      	ldrh	r3, [r7, #26]
 800aadc:	4413      	add	r3, r2
 800aade:	b29a      	uxth	r2, r3
 800aae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae2:	80da      	strh	r2, [r3, #6]

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 800aae4:	68fb      	ldr	r3, [r7, #12]
 800aae6:	685b      	ldr	r3, [r3, #4]
 800aae8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaea:	e061      	b.n	800abb0 <ip_reass_chain_frag_into_datagram_and_validate+0x14c>
    iprh_tmp = (struct ip_reass_helper*)q->payload;
 800aaec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaee:	685b      	ldr	r3, [r3, #4]
 800aaf0:	617b      	str	r3, [r7, #20]
    if (iprh->start < iprh_tmp->start) {
 800aaf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf4:	889b      	ldrh	r3, [r3, #4]
 800aaf6:	b29a      	uxth	r2, r3
 800aaf8:	697b      	ldr	r3, [r7, #20]
 800aafa:	889b      	ldrh	r3, [r3, #4]
 800aafc:	b29b      	uxth	r3, r3
 800aafe:	429a      	cmp	r2, r3
 800ab00:	d232      	bcs.n	800ab68 <ip_reass_chain_frag_into_datagram_and_validate+0x104>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 800ab02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab06:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 800ab08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d01f      	beq.n	800ab4e <ip_reass_chain_frag_into_datagram_and_validate+0xea>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	889b      	ldrh	r3, [r3, #4]
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	88db      	ldrh	r3, [r3, #6]
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	429a      	cmp	r2, r3
 800ab1c:	f0c0 80e8 	bcc.w	800acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
 800ab20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab22:	88db      	ldrh	r3, [r3, #6]
 800ab24:	b29a      	uxth	r2, r3
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	889b      	ldrh	r3, [r3, #4]
 800ab2a:	b29b      	uxth	r3, r3
 800ab2c:	429a      	cmp	r2, r3
 800ab2e:	f200 80df 	bhi.w	800acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
          /* fragment overlaps with previous or following, throw away */
          goto freepbuf;
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	68ba      	ldr	r2, [r7, #8]
 800ab36:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 800ab38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab3a:	88db      	ldrh	r3, [r3, #6]
 800ab3c:	b29a      	uxth	r2, r3
 800ab3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab40:	889b      	ldrh	r3, [r3, #4]
 800ab42:	b29b      	uxth	r3, r3
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d037      	beq.n	800abb8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800ab48:	2300      	movs	r3, #0
 800ab4a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 800ab4c:	e034      	b.n	800abb8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
        if (iprh->end > iprh_tmp->start) {
 800ab4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab50:	88db      	ldrh	r3, [r3, #6]
 800ab52:	b29a      	uxth	r2, r3
 800ab54:	697b      	ldr	r3, [r7, #20]
 800ab56:	889b      	ldrh	r3, [r3, #4]
 800ab58:	b29b      	uxth	r3, r3
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	f200 80c3 	bhi.w	800ace6 <ip_reass_chain_frag_into_datagram_and_validate+0x282>
        ipr->p = new_p;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	68ba      	ldr	r2, [r7, #8]
 800ab64:	605a      	str	r2, [r3, #4]
      break;
 800ab66:	e027      	b.n	800abb8 <ip_reass_chain_frag_into_datagram_and_validate+0x154>
    } else if (iprh->start == iprh_tmp->start) {
 800ab68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6a:	889b      	ldrh	r3, [r3, #4]
 800ab6c:	b29a      	uxth	r2, r3
 800ab6e:	697b      	ldr	r3, [r7, #20]
 800ab70:	889b      	ldrh	r3, [r3, #4]
 800ab72:	b29b      	uxth	r3, r3
 800ab74:	429a      	cmp	r2, r3
 800ab76:	f000 80b8 	beq.w	800acea <ip_reass_chain_frag_into_datagram_and_validate+0x286>
      /* received the same datagram twice: no need to keep the datagram */
      goto freepbuf;
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 800ab7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7c:	889b      	ldrh	r3, [r3, #4]
 800ab7e:	b29a      	uxth	r2, r3
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	88db      	ldrh	r3, [r3, #6]
 800ab84:	b29b      	uxth	r3, r3
 800ab86:	429a      	cmp	r2, r3
 800ab88:	f0c0 80b1 	bcc.w	800acee <ip_reass_chain_frag_into_datagram_and_validate+0x28a>
      /* overlap: no need to keep the new datagram */
      goto freepbuf;
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 800ab8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d009      	beq.n	800aba6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
        if (iprh_prev->end != iprh_tmp->start) {
 800ab92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab94:	88db      	ldrh	r3, [r3, #6]
 800ab96:	b29a      	uxth	r2, r3
 800ab98:	697b      	ldr	r3, [r7, #20]
 800ab9a:	889b      	ldrh	r3, [r3, #4]
 800ab9c:	b29b      	uxth	r3, r3
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d001      	beq.n	800aba6 <ip_reass_chain_frag_into_datagram_and_validate+0x142>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 800aba2:	2300      	movs	r3, #0
 800aba4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 800aba6:	697b      	ldr	r3, [r7, #20]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 800abb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d19a      	bne.n	800aaec <ip_reass_chain_frag_into_datagram_and_validate+0x88>
 800abb6:	e000      	b.n	800abba <ip_reass_chain_frag_into_datagram_and_validate+0x156>
      break;
 800abb8:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 800abba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d12d      	bne.n	800ac1c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
    if (iprh_prev != NULL) {
 800abc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d01c      	beq.n	800ac00 <ip_reass_chain_frag_into_datagram_and_validate+0x19c>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 800abc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abc8:	88db      	ldrh	r3, [r3, #6]
 800abca:	b29a      	uxth	r2, r3
 800abcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abce:	889b      	ldrh	r3, [r3, #4]
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	429a      	cmp	r2, r3
 800abd4:	d906      	bls.n	800abe4 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
 800abd6:	4b50      	ldr	r3, [pc, #320]	; (800ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800abd8:	f240 12ab 	movw	r2, #427	; 0x1ab
 800abdc:	494f      	ldr	r1, [pc, #316]	; (800ad1c <ip_reass_chain_frag_into_datagram_and_validate+0x2b8>)
 800abde:	4850      	ldr	r0, [pc, #320]	; (800ad20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800abe0:	f00b f8f8 	bl	8015dd4 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	68ba      	ldr	r2, [r7, #8]
 800abe8:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 800abea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abec:	88db      	ldrh	r3, [r3, #6]
 800abee:	b29a      	uxth	r2, r3
 800abf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abf2:	889b      	ldrh	r3, [r3, #4]
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	429a      	cmp	r2, r3
 800abf8:	d010      	beq.n	800ac1c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
        valid = 0;
 800abfa:	2300      	movs	r3, #0
 800abfc:	623b      	str	r3, [r7, #32]
 800abfe:	e00d      	b.n	800ac1c <ip_reass_chain_frag_into_datagram_and_validate+0x1b8>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	685b      	ldr	r3, [r3, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d006      	beq.n	800ac16 <ip_reass_chain_frag_into_datagram_and_validate+0x1b2>
 800ac08:	4b43      	ldr	r3, [pc, #268]	; (800ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800ac0a:	f44f 72da 	mov.w	r2, #436	; 0x1b4
 800ac0e:	4945      	ldr	r1, [pc, #276]	; (800ad24 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 800ac10:	4843      	ldr	r0, [pc, #268]	; (800ad20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800ac12:	f00b f8df 	bl	8015dd4 <iprintf>
        ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	68ba      	ldr	r2, [r7, #8]
 800ac1a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d105      	bne.n	800ac2e <ip_reass_chain_frag_into_datagram_and_validate+0x1ca>
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	7f9b      	ldrb	r3, [r3, #30]
 800ac26:	f003 0301 	and.w	r3, r3, #1
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d059      	beq.n	800ace2 <ip_reass_chain_frag_into_datagram_and_validate+0x27e>
    /* and had no holes so far */
    if (valid) {
 800ac2e:	6a3b      	ldr	r3, [r7, #32]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d04f      	beq.n	800acd4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper*)ipr->p->payload)->start != 0)) {
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	685b      	ldr	r3, [r3, #4]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d006      	beq.n	800ac4a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	685b      	ldr	r3, [r3, #4]
 800ac40:	685b      	ldr	r3, [r3, #4]
 800ac42:	889b      	ldrh	r3, [r3, #4]
 800ac44:	b29b      	uxth	r3, r3
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d002      	beq.n	800ac50 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 800ac4a:	2300      	movs	r3, #0
 800ac4c:	623b      	str	r3, [r7, #32]
 800ac4e:	e041      	b.n	800acd4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 800ac50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac52:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ac5a:	e012      	b.n	800ac82 <ip_reass_chain_frag_into_datagram_and_validate+0x21e>
          iprh = (struct ip_reass_helper*)q->payload;
 800ac5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 800ac62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac64:	88db      	ldrh	r3, [r3, #6]
 800ac66:	b29a      	uxth	r2, r3
 800ac68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6a:	889b      	ldrh	r3, [r3, #4]
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	429a      	cmp	r2, r3
 800ac70:	d002      	beq.n	800ac78 <ip_reass_chain_frag_into_datagram_and_validate+0x214>
            valid = 0;
 800ac72:	2300      	movs	r3, #0
 800ac74:	623b      	str	r3, [r7, #32]
            break;
 800ac76:	e007      	b.n	800ac88 <ip_reass_chain_frag_into_datagram_and_validate+0x224>
          }
          iprh_prev = iprh;
 800ac78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 800ac7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 800ac82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d1e9      	bne.n	800ac5c <ip_reass_chain_frag_into_datagram_and_validate+0x1f8>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 800ac88:	6a3b      	ldr	r3, [r7, #32]
 800ac8a:	2b00      	cmp	r3, #0
 800ac8c:	d022      	beq.n	800acd4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 800ac8e:	68fb      	ldr	r3, [r7, #12]
 800ac90:	685b      	ldr	r3, [r3, #4]
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d106      	bne.n	800aca4 <ip_reass_chain_frag_into_datagram_and_validate+0x240>
 800ac96:	4b20      	ldr	r3, [pc, #128]	; (800ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800ac98:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
 800ac9c:	4922      	ldr	r1, [pc, #136]	; (800ad28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800ac9e:	4820      	ldr	r0, [pc, #128]	; (800ad20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800aca0:	f00b f898 	bl	8015dd4 <iprintf>
          LWIP_ASSERT("sanity check",
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	685b      	ldr	r3, [r3, #4]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acac:	429a      	cmp	r2, r3
 800acae:	d106      	bne.n	800acbe <ip_reass_chain_frag_into_datagram_and_validate+0x25a>
 800acb0:	4b19      	ldr	r3, [pc, #100]	; (800ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800acb2:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 800acb6:	491c      	ldr	r1, [pc, #112]	; (800ad28 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 800acb8:	4819      	ldr	r0, [pc, #100]	; (800ad20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800acba:	f00b f88b 	bl	8015dd4 <iprintf>
            ((struct ip_reass_helper*)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 800acbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acc0:	681b      	ldr	r3, [r3, #0]
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d006      	beq.n	800acd4 <ip_reass_chain_frag_into_datagram_and_validate+0x270>
 800acc6:	4b14      	ldr	r3, [pc, #80]	; (800ad18 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>)
 800acc8:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
 800accc:	4917      	ldr	r1, [pc, #92]	; (800ad2c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 800acce:	4814      	ldr	r0, [pc, #80]	; (800ad20 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 800acd0:	f00b f880 	bl	8015dd4 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 800acd4:	6a3b      	ldr	r3, [r7, #32]
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	bf14      	ite	ne
 800acda:	2301      	movne	r3, #1
 800acdc:	2300      	moveq	r3, #0
 800acde:	b2db      	uxtb	r3, r3
 800ace0:	e016      	b.n	800ad10 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 800ace2:	2300      	movs	r3, #0
 800ace4:	e014      	b.n	800ad10 <ip_reass_chain_frag_into_datagram_and_validate+0x2ac>
          goto freepbuf;
 800ace6:	bf00      	nop
 800ace8:	e002      	b.n	800acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800acea:	bf00      	nop
 800acec:	e000      	b.n	800acf0 <ip_reass_chain_frag_into_datagram_and_validate+0x28c>
      goto freepbuf;
 800acee:	bf00      	nop
#if IP_REASS_CHECK_OVERLAP
freepbuf:
  ip_reass_pbufcount -= pbuf_clen(new_p);
 800acf0:	68b8      	ldr	r0, [r7, #8]
 800acf2:	f001 fcdb 	bl	800c6ac <pbuf_clen>
 800acf6:	4603      	mov	r3, r0
 800acf8:	461a      	mov	r2, r3
 800acfa:	4b0d      	ldr	r3, [pc, #52]	; (800ad30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800acfc:	881b      	ldrh	r3, [r3, #0]
 800acfe:	1a9b      	subs	r3, r3, r2
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	4b0b      	ldr	r3, [pc, #44]	; (800ad30 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 800ad04:	801a      	strh	r2, [r3, #0]
  pbuf_free(new_p);
 800ad06:	68b8      	ldr	r0, [r7, #8]
 800ad08:	f001 fc36 	bl	800c578 <pbuf_free>
  return IP_REASS_VALIDATE_PBUF_DROPPED;
 800ad0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
#endif /* IP_REASS_CHECK_OVERLAP */
}
 800ad10:	4618      	mov	r0, r3
 800ad12:	3730      	adds	r7, #48	; 0x30
 800ad14:	46bd      	mov	sp, r7
 800ad16:	bd80      	pop	{r7, pc}
 800ad18:	08018adc 	.word	0x08018adc
 800ad1c:	08018bb8 	.word	0x08018bb8
 800ad20:	08018b24 	.word	0x08018b24
 800ad24:	08018bd8 	.word	0x08018bd8
 800ad28:	08018c10 	.word	0x08018c10
 800ad2c:	08018c20 	.word	0x08018c20
 800ad30:	200040c8 	.word	0x200040c8

0800ad34 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b08e      	sub	sp, #56	; 0x38
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr*)p->payload;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	685b      	ldr	r3, [r3, #4]
 800ad40:	62bb      	str	r3, [r7, #40]	; 0x28

  if ((IPH_HL(fraghdr) * 4) != IP_HLEN) {
 800ad42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad44:	781b      	ldrb	r3, [r3, #0]
 800ad46:	f003 030f 	and.w	r3, r3, #15
 800ad4a:	009b      	lsls	r3, r3, #2
 800ad4c:	2b14      	cmp	r3, #20
 800ad4e:	f040 8131 	bne.w	800afb4 <ip4_reass+0x280>
    LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = (lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) * 8;
 800ad52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad54:	88db      	ldrh	r3, [r3, #6]
 800ad56:	b29b      	uxth	r3, r3
 800ad58:	4618      	mov	r0, r3
 800ad5a:	f7fe f94f 	bl	8008ffc <lwip_htons>
 800ad5e:	4603      	mov	r3, r0
 800ad60:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	00db      	lsls	r3, r3, #3
 800ad68:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr)) - IPH_HL(fraghdr) * 4;
 800ad6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad6c:	885b      	ldrh	r3, [r3, #2]
 800ad6e:	b29b      	uxth	r3, r3
 800ad70:	4618      	mov	r0, r3
 800ad72:	f7fe f943 	bl	8008ffc <lwip_htons>
 800ad76:	4603      	mov	r3, r0
 800ad78:	461a      	mov	r2, r3
 800ad7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	f003 030f 	and.w	r3, r3, #15
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	b29b      	uxth	r3, r3
 800ad8a:	1ad3      	subs	r3, r2, r3
 800ad8c:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 800ad8e:	6878      	ldr	r0, [r7, #4]
 800ad90:	f001 fc8c 	bl	800c6ac <pbuf_clen>
 800ad94:	4603      	mov	r3, r0
 800ad96:	847b      	strh	r3, [r7, #34]	; 0x22
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 800ad98:	4b8c      	ldr	r3, [pc, #560]	; (800afcc <ip4_reass+0x298>)
 800ad9a:	881b      	ldrh	r3, [r3, #0]
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ada0:	4413      	add	r3, r2
 800ada2:	2b0a      	cmp	r3, #10
 800ada4:	dd10      	ble.n	800adc8 <ip4_reass+0x94>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800ada6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ada8:	4619      	mov	r1, r3
 800adaa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800adac:	f7ff fd90 	bl	800a8d0 <ip_reass_remove_oldest_datagram>
 800adb0:	4603      	mov	r3, r0
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	f000 8101 	beq.w	800afba <ip4_reass+0x286>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 800adb8:	4b84      	ldr	r3, [pc, #528]	; (800afcc <ip4_reass+0x298>)
 800adba:	881b      	ldrh	r3, [r3, #0]
 800adbc:	461a      	mov	r2, r3
 800adbe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800adc0:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 800adc2:	2b0a      	cmp	r3, #10
 800adc4:	f300 80f9 	bgt.w	800afba <ip4_reass+0x286>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800adc8:	4b81      	ldr	r3, [pc, #516]	; (800afd0 <ip4_reass+0x29c>)
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	633b      	str	r3, [r7, #48]	; 0x30
 800adce:	e015      	b.n	800adfc <ip4_reass+0xc8>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 800add0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800add2:	695a      	ldr	r2, [r3, #20]
 800add4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add6:	68db      	ldr	r3, [r3, #12]
 800add8:	429a      	cmp	r2, r3
 800adda:	d10c      	bne.n	800adf6 <ip4_reass+0xc2>
 800addc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adde:	699a      	ldr	r2, [r3, #24]
 800ade0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade2:	691b      	ldr	r3, [r3, #16]
 800ade4:	429a      	cmp	r2, r3
 800ade6:	d106      	bne.n	800adf6 <ip4_reass+0xc2>
 800ade8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adea:	899a      	ldrh	r2, [r3, #12]
 800adec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adee:	889b      	ldrh	r3, [r3, #4]
 800adf0:	b29b      	uxth	r3, r3
 800adf2:	429a      	cmp	r2, r3
 800adf4:	d006      	beq.n	800ae04 <ip4_reass+0xd0>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 800adf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	633b      	str	r3, [r7, #48]	; 0x30
 800adfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d1e6      	bne.n	800add0 <ip4_reass+0x9c>
 800ae02:	e000      	b.n	800ae06 <ip4_reass+0xd2>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
        lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 800ae04:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 800ae06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d109      	bne.n	800ae20 <ip4_reass+0xec>
  /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 800ae0c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ae0e:	4619      	mov	r1, r3
 800ae10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ae12:	f7ff fdbf 	bl	800a994 <ip_reass_enqueue_new_datagram>
 800ae16:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 800ae18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae1a:	2b00      	cmp	r3, #0
 800ae1c:	d11c      	bne.n	800ae58 <ip4_reass+0x124>
      goto nullreturn;
 800ae1e:	e0cc      	b.n	800afba <ip4_reass+0x286>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ae20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae22:	88db      	ldrh	r3, [r3, #6]
 800ae24:	b29b      	uxth	r3, r3
 800ae26:	4618      	mov	r0, r3
 800ae28:	f7fe f8e8 	bl	8008ffc <lwip_htons>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d110      	bne.n	800ae58 <ip4_reass+0x124>
      ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 800ae36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae38:	89db      	ldrh	r3, [r3, #14]
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	f7fe f8de 	bl	8008ffc <lwip_htons>
 800ae40:	4603      	mov	r3, r0
 800ae42:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <ip4_reass+0x124>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 800ae4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae4c:	3308      	adds	r3, #8
 800ae4e:	2214      	movs	r2, #20
 800ae50:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae52:	4618      	mov	r0, r3
 800ae54:	f00a ffab 	bl	8015dae <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 800ae58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae5a:	88db      	ldrh	r3, [r3, #6]
 800ae5c:	b29b      	uxth	r3, r3
 800ae5e:	f003 0320 	and.w	r3, r3, #32
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	bf0c      	ite	eq
 800ae66:	2301      	moveq	r3, #1
 800ae68:	2300      	movne	r3, #0
 800ae6a:	b2db      	uxtb	r3, r3
 800ae6c:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00e      	beq.n	800ae92 <ip4_reass+0x15e>
    u16_t datagram_len = (u16_t)(offset + len);
 800ae74:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800ae76:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ae78:	4413      	add	r3, r2
 800ae7a:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 800ae7c:	8b7a      	ldrh	r2, [r7, #26]
 800ae7e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800ae80:	429a      	cmp	r2, r3
 800ae82:	f0c0 809a 	bcc.w	800afba <ip4_reass+0x286>
 800ae86:	8b7b      	ldrh	r3, [r7, #26]
 800ae88:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 800ae8c:	4293      	cmp	r3, r2
 800ae8e:	f200 8094 	bhi.w	800afba <ip4_reass+0x286>
      goto nullreturn;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 800ae92:	69fa      	ldr	r2, [r7, #28]
 800ae94:	6879      	ldr	r1, [r7, #4]
 800ae96:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ae98:	f7ff fde4 	bl	800aa64 <ip_reass_chain_frag_into_datagram_and_validate>
 800ae9c:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 800ae9e:	697b      	ldr	r3, [r7, #20]
 800aea0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800aea4:	f000 8088 	beq.w	800afb8 <ip4_reass+0x284>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 800aea8:	4b48      	ldr	r3, [pc, #288]	; (800afcc <ip4_reass+0x298>)
 800aeaa:	881a      	ldrh	r2, [r3, #0]
 800aeac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800aeae:	4413      	add	r3, r2
 800aeb0:	b29a      	uxth	r2, r3
 800aeb2:	4b46      	ldr	r3, [pc, #280]	; (800afcc <ip4_reass+0x298>)
 800aeb4:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 800aeb6:	69fb      	ldr	r3, [r7, #28]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d00d      	beq.n	800aed8 <ip4_reass+0x1a4>
    u16_t datagram_len = (u16_t)(offset + len);
 800aebc:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800aebe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800aec0:	4413      	add	r3, r2
 800aec2:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 800aec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aec6:	8a7a      	ldrh	r2, [r7, #18]
 800aec8:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 800aeca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aecc:	7f9b      	ldrb	r3, [r3, #30]
 800aece:	f043 0301 	orr.w	r3, r3, #1
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aed6:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
     ("ip4_reass: last fragment seen, total len %"S16_F"\n",
      ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	2b01      	cmp	r3, #1
 800aedc:	d168      	bne.n	800afb0 <ip4_reass+0x27c>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    ipr->datagram_len += IP_HLEN;
 800aede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee0:	8b9b      	ldrh	r3, [r3, #28]
 800aee2:	3314      	adds	r3, #20
 800aee4:	b29a      	uxth	r2, r3
 800aee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aee8:	839a      	strh	r2, [r3, #28]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper*)ipr->p->payload)->next_pbuf;
 800aeea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aeec:	685b      	ldr	r3, [r3, #4]
 800aeee:	685b      	ldr	r3, [r3, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr*)(ipr->p->payload);
 800aef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aef6:	685b      	ldr	r3, [r3, #4]
 800aef8:	685b      	ldr	r3, [r3, #4]
 800aefa:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 800aefc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefe:	3308      	adds	r3, #8
 800af00:	2214      	movs	r2, #20
 800af02:	4619      	mov	r1, r3
 800af04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800af06:	f00a ff52 	bl	8015dae <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(ipr->datagram_len));
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	8b9b      	ldrh	r3, [r3, #28]
 800af0e:	4618      	mov	r0, r3
 800af10:	f7fe f874 	bl	8008ffc <lwip_htons>
 800af14:	4603      	mov	r3, r0
 800af16:	461a      	mov	r2, r3
 800af18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 800af1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af1e:	2200      	movs	r2, #0
 800af20:	719a      	strb	r2, [r3, #6]
 800af22:	2200      	movs	r2, #0
 800af24:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 800af26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af28:	2200      	movs	r2, #0
 800af2a:	729a      	strb	r2, [r3, #10]
 800af2c:	2200      	movs	r2, #0
 800af2e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 800af30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af32:	685b      	ldr	r3, [r3, #4]
 800af34:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 800af36:	e00e      	b.n	800af56 <ip4_reass+0x222>
      iprh = (struct ip_reass_helper*)r->payload;
 800af38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af3a:	685b      	ldr	r3, [r3, #4]
 800af3c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_header(r, -IP_HLEN);
 800af3e:	f06f 0113 	mvn.w	r1, #19
 800af42:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800af44:	f001 faf4 	bl	800c530 <pbuf_header>
      pbuf_cat(p, r);
 800af48:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f001 fbee 	bl	800c72c <pbuf_cat>
      r = iprh->next_pbuf;
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 800af56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d1ed      	bne.n	800af38 <ip4_reass+0x204>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 800af5c:	4b1c      	ldr	r3, [pc, #112]	; (800afd0 <ip4_reass+0x29c>)
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800af62:	429a      	cmp	r2, r3
 800af64:	d102      	bne.n	800af6c <ip4_reass+0x238>
      ipr_prev = NULL;
 800af66:	2300      	movs	r3, #0
 800af68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af6a:	e010      	b.n	800af8e <ip4_reass+0x25a>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800af6c:	4b18      	ldr	r3, [pc, #96]	; (800afd0 <ip4_reass+0x29c>)
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af72:	e007      	b.n	800af84 <ip4_reass+0x250>
        if (ipr_prev->next == ipr) {
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	681a      	ldr	r2, [r3, #0]
 800af78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af7a:	429a      	cmp	r2, r3
 800af7c:	d006      	beq.n	800af8c <ip4_reass+0x258>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 800af7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	62fb      	str	r3, [r7, #44]	; 0x2c
 800af84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1f4      	bne.n	800af74 <ip4_reass+0x240>
 800af8a:	e000      	b.n	800af8e <ip4_reass+0x25a>
          break;
 800af8c:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 800af8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800af90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800af92:	f7ff fd39 	bl	800aa08 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    ip_reass_pbufcount -= pbuf_clen(p);
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f001 fb88 	bl	800c6ac <pbuf_clen>
 800af9c:	4603      	mov	r3, r0
 800af9e:	461a      	mov	r2, r3
 800afa0:	4b0a      	ldr	r3, [pc, #40]	; (800afcc <ip4_reass+0x298>)
 800afa2:	881b      	ldrh	r3, [r3, #0]
 800afa4:	1a9b      	subs	r3, r3, r2
 800afa6:	b29a      	uxth	r2, r3
 800afa8:	4b08      	ldr	r3, [pc, #32]	; (800afcc <ip4_reass+0x298>)
 800afaa:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	e008      	b.n	800afc2 <ip4_reass+0x28e>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 800afb0:	2300      	movs	r3, #0
 800afb2:	e006      	b.n	800afc2 <ip4_reass+0x28e>
    goto nullreturn;
 800afb4:	bf00      	nop
 800afb6:	e000      	b.n	800afba <ip4_reass+0x286>
    goto nullreturn;
 800afb8:	bf00      	nop

nullreturn:
  LWIP_DEBUGF(IP_REASS_DEBUG,("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 fadc 	bl	800c578 <pbuf_free>
  return NULL;
 800afc0:	2300      	movs	r3, #0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3738      	adds	r7, #56	; 0x38
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}
 800afca:	bf00      	nop
 800afcc:	200040c8 	.word	0x200040c8
 800afd0:	200040c4 	.word	0x200040c4

0800afd4 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref*
ip_frag_alloc_pbuf_custom_ref(void)
{
 800afd4:	b580      	push	{r7, lr}
 800afd6:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref*)memp_malloc(MEMP_FRAG_PBUF);
 800afd8:	2005      	movs	r0, #5
 800afda:	f000 fd21 	bl	800ba20 <memp_malloc>
 800afde:	4603      	mov	r3, r0
}
 800afe0:	4618      	mov	r0, r3
 800afe2:	bd80      	pop	{r7, pc}

0800afe4 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref* p)
{
 800afe4:	b580      	push	{r7, lr}
 800afe6:	b082      	sub	sp, #8
 800afe8:	af00      	add	r7, sp, #0
 800afea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d106      	bne.n	800b000 <ip_frag_free_pbuf_custom_ref+0x1c>
 800aff2:	4b07      	ldr	r3, [pc, #28]	; (800b010 <ip_frag_free_pbuf_custom_ref+0x2c>)
 800aff4:	f240 22ae 	movw	r2, #686	; 0x2ae
 800aff8:	4906      	ldr	r1, [pc, #24]	; (800b014 <ip_frag_free_pbuf_custom_ref+0x30>)
 800affa:	4807      	ldr	r0, [pc, #28]	; (800b018 <ip_frag_free_pbuf_custom_ref+0x34>)
 800affc:	f00a feea 	bl	8015dd4 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 800b000:	6879      	ldr	r1, [r7, #4]
 800b002:	2005      	movs	r0, #5
 800b004:	f000 fd5e 	bl	800bac4 <memp_free>
}
 800b008:	bf00      	nop
 800b00a:	3708      	adds	r7, #8
 800b00c:	46bd      	mov	sp, r7
 800b00e:	bd80      	pop	{r7, pc}
 800b010:	08018adc 	.word	0x08018adc
 800b014:	08018c44 	.word	0x08018c44
 800b018:	08018b24 	.word	0x08018b24

0800b01c <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b084      	sub	sp, #16
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref*)p;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b00      	cmp	r3, #0
 800b02c:	d106      	bne.n	800b03c <ipfrag_free_pbuf_custom+0x20>
 800b02e:	4b11      	ldr	r3, [pc, #68]	; (800b074 <ipfrag_free_pbuf_custom+0x58>)
 800b030:	f44f 722e 	mov.w	r2, #696	; 0x2b8
 800b034:	4910      	ldr	r1, [pc, #64]	; (800b078 <ipfrag_free_pbuf_custom+0x5c>)
 800b036:	4811      	ldr	r0, [pc, #68]	; (800b07c <ipfrag_free_pbuf_custom+0x60>)
 800b038:	f00a fecc 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("pcr == p", (void*)pcr == (void*)p);
 800b03c:	68fa      	ldr	r2, [r7, #12]
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	429a      	cmp	r2, r3
 800b042:	d006      	beq.n	800b052 <ipfrag_free_pbuf_custom+0x36>
 800b044:	4b0b      	ldr	r3, [pc, #44]	; (800b074 <ipfrag_free_pbuf_custom+0x58>)
 800b046:	f240 22b9 	movw	r2, #697	; 0x2b9
 800b04a:	490d      	ldr	r1, [pc, #52]	; (800b080 <ipfrag_free_pbuf_custom+0x64>)
 800b04c:	480b      	ldr	r0, [pc, #44]	; (800b07c <ipfrag_free_pbuf_custom+0x60>)
 800b04e:	f00a fec1 	bl	8015dd4 <iprintf>
  if (pcr->original != NULL) {
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	695b      	ldr	r3, [r3, #20]
 800b056:	2b00      	cmp	r3, #0
 800b058:	d004      	beq.n	800b064 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	695b      	ldr	r3, [r3, #20]
 800b05e:	4618      	mov	r0, r3
 800b060:	f001 fa8a 	bl	800c578 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff ffbd 	bl	800afe4 <ip_frag_free_pbuf_custom_ref>
}
 800b06a:	bf00      	nop
 800b06c:	3710      	adds	r7, #16
 800b06e:	46bd      	mov	sp, r7
 800b070:	bd80      	pop	{r7, pc}
 800b072:	bf00      	nop
 800b074:	08018adc 	.word	0x08018adc
 800b078:	08018c50 	.word	0x08018c50
 800b07c:	08018b24 	.word	0x08018b24
 800b080:	08018c5c 	.word	0x08018c5c

0800b084 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 800b084:	b580      	push	{r7, lr}
 800b086:	b092      	sub	sp, #72	; 0x48
 800b088:	af02      	add	r7, sp, #8
 800b08a:	60f8      	str	r0, [r7, #12]
 800b08c:	60b9      	str	r1, [r7, #8]
 800b08e:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 800b090:	2300      	movs	r3, #0
 800b092:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (netif->mtu - IP_HLEN) / 8;
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b098:	3b14      	subs	r3, #20
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	da00      	bge.n	800b0a0 <ip4_frag+0x1c>
 800b09e:	3307      	adds	r3, #7
 800b0a0:	10db      	asrs	r3, r3, #3
 800b0a2:	867b      	strh	r3, [r7, #50]	; 0x32
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 800b0a4:	2314      	movs	r3, #20
 800b0a6:	86fb      	strh	r3, [r7, #54]	; 0x36
  u16_t tmp;

  original_iphdr = (struct ip_hdr *)p->payload;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	685b      	ldr	r3, [r3, #4]
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  iphdr = original_iphdr;
 800b0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0b0:	62bb      	str	r3, [r7, #40]	; 0x28
  LWIP_ERROR("ip4_frag() does not support IP options", IPH_HL(iphdr) * 4 == IP_HLEN, return ERR_VAL);
 800b0b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b4:	781b      	ldrb	r3, [r3, #0]
 800b0b6:	f003 030f 	and.w	r3, r3, #15
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	2b14      	cmp	r3, #20
 800b0be:	d009      	beq.n	800b0d4 <ip4_frag+0x50>
 800b0c0:	4b79      	ldr	r3, [pc, #484]	; (800b2a8 <ip4_frag+0x224>)
 800b0c2:	f240 22e1 	movw	r2, #737	; 0x2e1
 800b0c6:	4979      	ldr	r1, [pc, #484]	; (800b2ac <ip4_frag+0x228>)
 800b0c8:	4879      	ldr	r0, [pc, #484]	; (800b2b0 <ip4_frag+0x22c>)
 800b0ca:	f00a fe83 	bl	8015dd4 <iprintf>
 800b0ce:	f06f 0305 	mvn.w	r3, #5
 800b0d2:	e0e5      	b.n	800b2a0 <ip4_frag+0x21c>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 800b0d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0d6:	88db      	ldrh	r3, [r3, #6]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	4618      	mov	r0, r3
 800b0dc:	f7fd ff8e 	bl	8008ffc <lwip_htons>
 800b0e0:	4603      	mov	r3, r0
 800b0e2:	86bb      	strh	r3, [r7, #52]	; 0x34
  ofo = tmp & IP_OFFMASK;
 800b0e4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b0ea:	873b      	strh	r3, [r7, #56]	; 0x38
  LWIP_ERROR("ip_frag(): MF already set", (tmp & IP_MF) == 0, return ERR_VAL);
 800b0ec:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b0ee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d009      	beq.n	800b10a <ip4_frag+0x86>
 800b0f6:	4b6c      	ldr	r3, [pc, #432]	; (800b2a8 <ip4_frag+0x224>)
 800b0f8:	f240 22e6 	movw	r2, #742	; 0x2e6
 800b0fc:	496d      	ldr	r1, [pc, #436]	; (800b2b4 <ip4_frag+0x230>)
 800b0fe:	486c      	ldr	r0, [pc, #432]	; (800b2b0 <ip4_frag+0x22c>)
 800b100:	f00a fe68 	bl	8015dd4 <iprintf>
 800b104:	f06f 0305 	mvn.w	r3, #5
 800b108:	e0ca      	b.n	800b2a0 <ip4_frag+0x21c>

  left = p->tot_len - IP_HLEN;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	891b      	ldrh	r3, [r3, #8]
 800b10e:	3b14      	subs	r3, #20
 800b110:	877b      	strh	r3, [r7, #58]	; 0x3a

  while (left) {
 800b112:	e0bc      	b.n	800b28e <ip4_frag+0x20a>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, nfb * 8);
 800b114:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b116:	00da      	lsls	r2, r3, #3
 800b118:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b11a:	4293      	cmp	r3, r2
 800b11c:	bfa8      	it	ge
 800b11e:	4613      	movge	r3, r2
 800b120:	84fb      	strh	r3, [r7, #38]	; 0x26
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 800b122:	2200      	movs	r2, #0
 800b124:	2114      	movs	r1, #20
 800b126:	2002      	movs	r0, #2
 800b128:	f000 feb4 	bl	800be94 <pbuf_alloc>
 800b12c:	6238      	str	r0, [r7, #32]
    if (rambuf == NULL) {
 800b12e:	6a3b      	ldr	r3, [r7, #32]
 800b130:	2b00      	cmp	r3, #0
 800b132:	f000 80b2 	beq.w	800b29a <ip4_frag+0x216>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	895b      	ldrh	r3, [r3, #10]
 800b13a:	2b13      	cmp	r3, #19
 800b13c:	d806      	bhi.n	800b14c <ip4_frag+0xc8>
 800b13e:	4b5a      	ldr	r3, [pc, #360]	; (800b2a8 <ip4_frag+0x224>)
 800b140:	f240 3209 	movw	r2, #777	; 0x309
 800b144:	495c      	ldr	r1, [pc, #368]	; (800b2b8 <ip4_frag+0x234>)
 800b146:	485a      	ldr	r0, [pc, #360]	; (800b2b0 <ip4_frag+0x22c>)
 800b148:	f00a fe44 	bl	8015dd4 <iprintf>
                (p->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 800b14c:	6a3b      	ldr	r3, [r7, #32]
 800b14e:	685b      	ldr	r3, [r3, #4]
 800b150:	2214      	movs	r2, #20
 800b152:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b154:	4618      	mov	r0, r3
 800b156:	f00a fe2a 	bl	8015dae <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 800b15a:	6a3b      	ldr	r3, [r7, #32]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	62bb      	str	r3, [r7, #40]	; 0x28

    left_to_copy = fragsize;
 800b160:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b162:	87bb      	strh	r3, [r7, #60]	; 0x3c
    while (left_to_copy) {
 800b164:	e04f      	b.n	800b206 <ip4_frag+0x182>
      struct pbuf_custom_ref *pcr;
      u16_t plen = p->len - poff;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	895a      	ldrh	r2, [r3, #10]
 800b16a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b16c:	1ad3      	subs	r3, r2, r3
 800b16e:	83fb      	strh	r3, [r7, #30]
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 800b170:	8bfa      	ldrh	r2, [r7, #30]
 800b172:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b174:	4293      	cmp	r3, r2
 800b176:	bf28      	it	cs
 800b178:	4613      	movcs	r3, r2
 800b17a:	87fb      	strh	r3, [r7, #62]	; 0x3e
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 800b17c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d105      	bne.n	800b18e <ip4_frag+0x10a>
        poff = 0;
 800b182:	2300      	movs	r3, #0
 800b184:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	60fb      	str	r3, [r7, #12]
        continue;
 800b18c:	e03b      	b.n	800b206 <ip4_frag+0x182>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 800b18e:	f7ff ff21 	bl	800afd4 <ip_frag_alloc_pbuf_custom_ref>
 800b192:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	2b00      	cmp	r3, #0
 800b198:	d103      	bne.n	800b1a2 <ip4_frag+0x11e>
        pbuf_free(rambuf);
 800b19a:	6a38      	ldr	r0, [r7, #32]
 800b19c:	f001 f9ec 	bl	800c578 <pbuf_free>
        goto memerr;
 800b1a0:	e07c      	b.n	800b29c <ip4_frag+0x218>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b1a2:	69b8      	ldr	r0, [r7, #24]
        (u8_t*)p->payload + poff, newpbuflen);
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 800b1a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800b1aa:	4413      	add	r3, r2
 800b1ac:	8ff9      	ldrh	r1, [r7, #62]	; 0x3e
 800b1ae:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 800b1b0:	9201      	str	r2, [sp, #4]
 800b1b2:	9300      	str	r3, [sp, #0]
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	2202      	movs	r2, #2
 800b1b8:	2004      	movs	r0, #4
 800b1ba:	f000 ffff 	bl	800c1bc <pbuf_alloced_custom>
 800b1be:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 800b1c0:	697b      	ldr	r3, [r7, #20]
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d106      	bne.n	800b1d4 <ip4_frag+0x150>
        ip_frag_free_pbuf_custom_ref(pcr);
 800b1c6:	69b8      	ldr	r0, [r7, #24]
 800b1c8:	f7ff ff0c 	bl	800afe4 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 800b1cc:	6a38      	ldr	r0, [r7, #32]
 800b1ce:	f001 f9d3 	bl	800c578 <pbuf_free>
        goto memerr;
 800b1d2:	e063      	b.n	800b29c <ip4_frag+0x218>
      }
      pbuf_ref(p);
 800b1d4:	68f8      	ldr	r0, [r7, #12]
 800b1d6:	f001 fa81 	bl	800c6dc <pbuf_ref>
      pcr->original = p;
 800b1da:	69bb      	ldr	r3, [r7, #24]
 800b1dc:	68fa      	ldr	r2, [r7, #12]
 800b1de:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 800b1e0:	69bb      	ldr	r3, [r7, #24]
 800b1e2:	4a36      	ldr	r2, [pc, #216]	; (800b2bc <ip4_frag+0x238>)
 800b1e4:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 800b1e6:	6979      	ldr	r1, [r7, #20]
 800b1e8:	6a38      	ldr	r0, [r7, #32]
 800b1ea:	f001 fa9f 	bl	800c72c <pbuf_cat>
      left_to_copy -= newpbuflen;
 800b1ee:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800b1f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b1f2:	1ad3      	subs	r3, r2, r3
 800b1f4:	87bb      	strh	r3, [r7, #60]	; 0x3c
      if (left_to_copy) {
 800b1f6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d004      	beq.n	800b206 <ip4_frag+0x182>
        poff = 0;
 800b1fc:	2300      	movs	r3, #0
 800b1fe:	86fb      	strh	r3, [r7, #54]	; 0x36
        p = p->next;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 800b206:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1ac      	bne.n	800b166 <ip4_frag+0xe2>
      }
    }
    poff += newpbuflen;
 800b20c:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800b20e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 800b210:	4413      	add	r3, r2
 800b212:	86fb      	strh	r3, [r7, #54]	; 0x36
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 800b214:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b216:	68bb      	ldr	r3, [r7, #8]
 800b218:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800b21a:	3b14      	subs	r3, #20
 800b21c:	429a      	cmp	r2, r3
 800b21e:	bfd4      	ite	le
 800b220:	2301      	movle	r3, #1
 800b222:	2300      	movgt	r3, #0
 800b224:	b2db      	uxtb	r3, r3
 800b226:	613b      	str	r3, [r7, #16]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 800b228:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800b22a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b22e:	86bb      	strh	r3, [r7, #52]	; 0x34
    if (!last) {
 800b230:	693b      	ldr	r3, [r7, #16]
 800b232:	2b00      	cmp	r3, #0
 800b234:	d103      	bne.n	800b23e <ip4_frag+0x1ba>
      tmp = tmp | IP_MF;
 800b236:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b238:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800b23c:	86bb      	strh	r3, [r7, #52]	; 0x34
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 800b23e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800b240:	4618      	mov	r0, r3
 800b242:	f7fd fedb 	bl	8008ffc <lwip_htons>
 800b246:	4603      	mov	r3, r0
 800b248:	461a      	mov	r2, r3
 800b24a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b24c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons(fragsize + IP_HLEN));
 800b24e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b250:	3314      	adds	r3, #20
 800b252:	b29b      	uxth	r3, r3
 800b254:	4618      	mov	r0, r3
 800b256:	f7fd fed1 	bl	8008ffc <lwip_htons>
 800b25a:	4603      	mov	r3, r0
 800b25c:	461a      	mov	r2, r3
 800b25e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b260:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 800b262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b264:	2200      	movs	r2, #0
 800b266:	729a      	strb	r2, [r3, #10]
 800b268:	2200      	movs	r2, #0
 800b26a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	695b      	ldr	r3, [r3, #20]
 800b270:	687a      	ldr	r2, [r7, #4]
 800b272:	6a39      	ldr	r1, [r7, #32]
 800b274:	68b8      	ldr	r0, [r7, #8]
 800b276:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 800b278:	6a38      	ldr	r0, [r7, #32]
 800b27a:	f001 f97d 	bl	800c578 <pbuf_free>
    left -= fragsize;
 800b27e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800b280:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800b282:	1ad3      	subs	r3, r2, r3
 800b284:	877b      	strh	r3, [r7, #58]	; 0x3a
    ofo += nfb;
 800b286:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800b288:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800b28a:	4413      	add	r3, r2
 800b28c:	873b      	strh	r3, [r7, #56]	; 0x38
  while (left) {
 800b28e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800b290:	2b00      	cmp	r3, #0
 800b292:	f47f af3f 	bne.w	800b114 <ip4_frag+0x90>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 800b296:	2300      	movs	r3, #0
 800b298:	e002      	b.n	800b2a0 <ip4_frag+0x21c>
      goto memerr;
 800b29a:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 800b29c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3740      	adds	r7, #64	; 0x40
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	bd80      	pop	{r7, pc}
 800b2a8:	08018adc 	.word	0x08018adc
 800b2ac:	08018c68 	.word	0x08018c68
 800b2b0:	08018b24 	.word	0x08018b24
 800b2b4:	08018c90 	.word	0x08018c90
 800b2b8:	08018cac 	.word	0x08018cac
 800b2bc:	0800b01d 	.word	0x0800b01d

0800b2c0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800b2c0:	b580      	push	{r7, lr}
 800b2c2:	b084      	sub	sp, #16
 800b2c4:	af00      	add	r7, sp, #0
 800b2c6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800b2c8:	4b40      	ldr	r3, [pc, #256]	; (800b3cc <plug_holes+0x10c>)
 800b2ca:	681b      	ldr	r3, [r3, #0]
 800b2cc:	687a      	ldr	r2, [r7, #4]
 800b2ce:	429a      	cmp	r2, r3
 800b2d0:	d206      	bcs.n	800b2e0 <plug_holes+0x20>
 800b2d2:	4b3f      	ldr	r3, [pc, #252]	; (800b3d0 <plug_holes+0x110>)
 800b2d4:	f240 125d 	movw	r2, #349	; 0x15d
 800b2d8:	493e      	ldr	r1, [pc, #248]	; (800b3d4 <plug_holes+0x114>)
 800b2da:	483f      	ldr	r0, [pc, #252]	; (800b3d8 <plug_holes+0x118>)
 800b2dc:	f00a fd7a 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800b2e0:	4b3e      	ldr	r3, [pc, #248]	; (800b3dc <plug_holes+0x11c>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	687a      	ldr	r2, [r7, #4]
 800b2e6:	429a      	cmp	r2, r3
 800b2e8:	d306      	bcc.n	800b2f8 <plug_holes+0x38>
 800b2ea:	4b39      	ldr	r3, [pc, #228]	; (800b3d0 <plug_holes+0x110>)
 800b2ec:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800b2f0:	493b      	ldr	r1, [pc, #236]	; (800b3e0 <plug_holes+0x120>)
 800b2f2:	4839      	ldr	r0, [pc, #228]	; (800b3d8 <plug_holes+0x118>)
 800b2f4:	f00a fd6e 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	791b      	ldrb	r3, [r3, #4]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d006      	beq.n	800b30e <plug_holes+0x4e>
 800b300:	4b33      	ldr	r3, [pc, #204]	; (800b3d0 <plug_holes+0x110>)
 800b302:	f240 125f 	movw	r2, #351	; 0x15f
 800b306:	4937      	ldr	r1, [pc, #220]	; (800b3e4 <plug_holes+0x124>)
 800b308:	4833      	ldr	r0, [pc, #204]	; (800b3d8 <plug_holes+0x118>)
 800b30a:	f00a fd63 	bl	8015dd4 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	881b      	ldrh	r3, [r3, #0]
 800b312:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b316:	d906      	bls.n	800b326 <plug_holes+0x66>
 800b318:	4b2d      	ldr	r3, [pc, #180]	; (800b3d0 <plug_holes+0x110>)
 800b31a:	f44f 72b1 	mov.w	r2, #354	; 0x162
 800b31e:	4932      	ldr	r1, [pc, #200]	; (800b3e8 <plug_holes+0x128>)
 800b320:	482d      	ldr	r0, [pc, #180]	; (800b3d8 <plug_holes+0x118>)
 800b322:	f00a fd57 	bl	8015dd4 <iprintf>

  nmem = (struct mem *)(void *)&ram[mem->next];
 800b326:	4b29      	ldr	r3, [pc, #164]	; (800b3cc <plug_holes+0x10c>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	687a      	ldr	r2, [r7, #4]
 800b32c:	8812      	ldrh	r2, [r2, #0]
 800b32e:	4413      	add	r3, r2
 800b330:	60fb      	str	r3, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800b332:	687a      	ldr	r2, [r7, #4]
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	429a      	cmp	r2, r3
 800b338:	d01f      	beq.n	800b37a <plug_holes+0xba>
 800b33a:	68fb      	ldr	r3, [r7, #12]
 800b33c:	791b      	ldrb	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d11b      	bne.n	800b37a <plug_holes+0xba>
 800b342:	4b26      	ldr	r3, [pc, #152]	; (800b3dc <plug_holes+0x11c>)
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	68fa      	ldr	r2, [r7, #12]
 800b348:	429a      	cmp	r2, r3
 800b34a:	d016      	beq.n	800b37a <plug_holes+0xba>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800b34c:	4b27      	ldr	r3, [pc, #156]	; (800b3ec <plug_holes+0x12c>)
 800b34e:	681a      	ldr	r2, [r3, #0]
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	429a      	cmp	r2, r3
 800b354:	d102      	bne.n	800b35c <plug_holes+0x9c>
      lfree = mem;
 800b356:	4a25      	ldr	r2, [pc, #148]	; (800b3ec <plug_holes+0x12c>)
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800b35c:	68fb      	ldr	r3, [r7, #12]
 800b35e:	881a      	ldrh	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[nmem->next])->prev = (mem_size_t)((u8_t *)mem - ram);
 800b364:	4b19      	ldr	r3, [pc, #100]	; (800b3cc <plug_holes+0x10c>)
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	68fa      	ldr	r2, [r7, #12]
 800b36a:	8812      	ldrh	r2, [r2, #0]
 800b36c:	4413      	add	r3, r2
 800b36e:	687a      	ldr	r2, [r7, #4]
 800b370:	4916      	ldr	r1, [pc, #88]	; (800b3cc <plug_holes+0x10c>)
 800b372:	6809      	ldr	r1, [r1, #0]
 800b374:	1a52      	subs	r2, r2, r1
 800b376:	b292      	uxth	r2, r2
 800b378:	805a      	strh	r2, [r3, #2]
  }

  /* plug hole backward */
  pmem = (struct mem *)(void *)&ram[mem->prev];
 800b37a:	4b14      	ldr	r3, [pc, #80]	; (800b3cc <plug_holes+0x10c>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	687a      	ldr	r2, [r7, #4]
 800b380:	8852      	ldrh	r2, [r2, #2]
 800b382:	4413      	add	r3, r2
 800b384:	60bb      	str	r3, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800b386:	68ba      	ldr	r2, [r7, #8]
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d01a      	beq.n	800b3c4 <plug_holes+0x104>
 800b38e:	68bb      	ldr	r3, [r7, #8]
 800b390:	791b      	ldrb	r3, [r3, #4]
 800b392:	2b00      	cmp	r3, #0
 800b394:	d116      	bne.n	800b3c4 <plug_holes+0x104>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800b396:	4b15      	ldr	r3, [pc, #84]	; (800b3ec <plug_holes+0x12c>)
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	429a      	cmp	r2, r3
 800b39e:	d102      	bne.n	800b3a6 <plug_holes+0xe6>
      lfree = pmem;
 800b3a0:	4a12      	ldr	r2, [pc, #72]	; (800b3ec <plug_holes+0x12c>)
 800b3a2:	68bb      	ldr	r3, [r7, #8]
 800b3a4:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	881a      	ldrh	r2, [r3, #0]
 800b3aa:	68bb      	ldr	r3, [r7, #8]
 800b3ac:	801a      	strh	r2, [r3, #0]
    ((struct mem *)(void *)&ram[mem->next])->prev = (mem_size_t)((u8_t *)pmem - ram);
 800b3ae:	4b07      	ldr	r3, [pc, #28]	; (800b3cc <plug_holes+0x10c>)
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	687a      	ldr	r2, [r7, #4]
 800b3b4:	8812      	ldrh	r2, [r2, #0]
 800b3b6:	4413      	add	r3, r2
 800b3b8:	68ba      	ldr	r2, [r7, #8]
 800b3ba:	4904      	ldr	r1, [pc, #16]	; (800b3cc <plug_holes+0x10c>)
 800b3bc:	6809      	ldr	r1, [r1, #0]
 800b3be:	1a52      	subs	r2, r2, r1
 800b3c0:	b292      	uxth	r2, r2
 800b3c2:	805a      	strh	r2, [r3, #2]
  }
}
 800b3c4:	bf00      	nop
 800b3c6:	3710      	adds	r7, #16
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	200040cc 	.word	0x200040cc
 800b3d0:	08018ccc 	.word	0x08018ccc
 800b3d4:	08018cfc 	.word	0x08018cfc
 800b3d8:	08018d14 	.word	0x08018d14
 800b3dc:	200040d0 	.word	0x200040d0
 800b3e0:	08018d3c 	.word	0x08018d3c
 800b3e4:	08018d58 	.word	0x08018d58
 800b3e8:	08018d74 	.word	0x08018d74
 800b3ec:	200040d4 	.word	0x200040d4

0800b3f0 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b082      	sub	sp, #8
 800b3f4:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
    (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT-1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800b3f6:	4b1e      	ldr	r3, [pc, #120]	; (800b470 <mem_init+0x80>)
 800b3f8:	3303      	adds	r3, #3
 800b3fa:	f023 0303 	bic.w	r3, r3, #3
 800b3fe:	461a      	mov	r2, r3
 800b400:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <mem_init+0x84>)
 800b402:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800b404:	4b1b      	ldr	r3, [pc, #108]	; (800b474 <mem_init+0x84>)
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b410:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	2200      	movs	r2, #0
 800b41c:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = (struct mem *)(void *)&ram[MEM_SIZE_ALIGNED];
 800b41e:	4b15      	ldr	r3, [pc, #84]	; (800b474 <mem_init+0x84>)
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	f503 63c8 	add.w	r3, r3, #1600	; 0x640
 800b426:	4a14      	ldr	r2, [pc, #80]	; (800b478 <mem_init+0x88>)
 800b428:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800b42a:	4b13      	ldr	r3, [pc, #76]	; (800b478 <mem_init+0x88>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2201      	movs	r2, #1
 800b430:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800b432:	4b11      	ldr	r3, [pc, #68]	; (800b478 <mem_init+0x88>)
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b43a:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800b43c:	4b0e      	ldr	r3, [pc, #56]	; (800b478 <mem_init+0x88>)
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800b444:	805a      	strh	r2, [r3, #2]

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800b446:	4b0b      	ldr	r3, [pc, #44]	; (800b474 <mem_init+0x84>)
 800b448:	681b      	ldr	r3, [r3, #0]
 800b44a:	4a0c      	ldr	r2, [pc, #48]	; (800b47c <mem_init+0x8c>)
 800b44c:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800b44e:	480c      	ldr	r0, [pc, #48]	; (800b480 <mem_init+0x90>)
 800b450:	f007 fc26 	bl	8012ca0 <sys_mutex_new>
 800b454:	4603      	mov	r3, r0
 800b456:	2b00      	cmp	r3, #0
 800b458:	d006      	beq.n	800b468 <mem_init+0x78>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800b45a:	4b0a      	ldr	r3, [pc, #40]	; (800b484 <mem_init+0x94>)
 800b45c:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800b460:	4909      	ldr	r1, [pc, #36]	; (800b488 <mem_init+0x98>)
 800b462:	480a      	ldr	r0, [pc, #40]	; (800b48c <mem_init+0x9c>)
 800b464:	f00a fcb6 	bl	8015dd4 <iprintf>
  }
}
 800b468:	bf00      	nop
 800b46a:	3708      	adds	r7, #8
 800b46c:	46bd      	mov	sp, r7
 800b46e:	bd80      	pop	{r7, pc}
 800b470:	20004204 	.word	0x20004204
 800b474:	200040cc 	.word	0x200040cc
 800b478:	200040d0 	.word	0x200040d0
 800b47c:	200040d4 	.word	0x200040d4
 800b480:	200040d8 	.word	0x200040d8
 800b484:	08018ccc 	.word	0x08018ccc
 800b488:	08018da0 	.word	0x08018da0
 800b48c:	08018d14 	.word	0x08018d14

0800b490 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b084      	sub	sp, #16
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d050      	beq.n	800b540 <mem_free+0xb0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  LWIP_ASSERT("mem_free: sanity check alignment", (((mem_ptr_t)rmem) & (MEM_ALIGNMENT-1)) == 0);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f003 0303 	and.w	r3, r3, #3
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <mem_free+0x26>
 800b4a8:	4b27      	ldr	r3, [pc, #156]	; (800b548 <mem_free+0xb8>)
 800b4aa:	f44f 72d6 	mov.w	r2, #428	; 0x1ac
 800b4ae:	4927      	ldr	r1, [pc, #156]	; (800b54c <mem_free+0xbc>)
 800b4b0:	4827      	ldr	r0, [pc, #156]	; (800b550 <mem_free+0xc0>)
 800b4b2:	f00a fc8f 	bl	8015dd4 <iprintf>

  LWIP_ASSERT("mem_free: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b4b6:	4b27      	ldr	r3, [pc, #156]	; (800b554 <mem_free+0xc4>)
 800b4b8:	681b      	ldr	r3, [r3, #0]
 800b4ba:	687a      	ldr	r2, [r7, #4]
 800b4bc:	429a      	cmp	r2, r3
 800b4be:	d304      	bcc.n	800b4ca <mem_free+0x3a>
 800b4c0:	4b25      	ldr	r3, [pc, #148]	; (800b558 <mem_free+0xc8>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	687a      	ldr	r2, [r7, #4]
 800b4c6:	429a      	cmp	r2, r3
 800b4c8:	d306      	bcc.n	800b4d8 <mem_free+0x48>
 800b4ca:	4b1f      	ldr	r3, [pc, #124]	; (800b548 <mem_free+0xb8>)
 800b4cc:	f240 12af 	movw	r2, #431	; 0x1af
 800b4d0:	4922      	ldr	r1, [pc, #136]	; (800b55c <mem_free+0xcc>)
 800b4d2:	481f      	ldr	r0, [pc, #124]	; (800b550 <mem_free+0xc0>)
 800b4d4:	f00a fc7e 	bl	8015dd4 <iprintf>
    (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b4d8:	4b1e      	ldr	r3, [pc, #120]	; (800b554 <mem_free+0xc4>)
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	687a      	ldr	r2, [r7, #4]
 800b4de:	429a      	cmp	r2, r3
 800b4e0:	d304      	bcc.n	800b4ec <mem_free+0x5c>
 800b4e2:	4b1d      	ldr	r3, [pc, #116]	; (800b558 <mem_free+0xc8>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	687a      	ldr	r2, [r7, #4]
 800b4e8:	429a      	cmp	r2, r3
 800b4ea:	d306      	bcc.n	800b4fa <mem_free+0x6a>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b4ec:	f007 fc2c 	bl	8012d48 <sys_arch_protect>
 800b4f0:	60b8      	str	r0, [r7, #8]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b4f2:	68b8      	ldr	r0, [r7, #8]
 800b4f4:	f007 fc36 	bl	8012d64 <sys_arch_unprotect>
    return;
 800b4f8:	e023      	b.n	800b542 <mem_free+0xb2>
  }
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b4fa:	4819      	ldr	r0, [pc, #100]	; (800b560 <mem_free+0xd0>)
 800b4fc:	f007 fbea 	bl	8012cd4 <sys_mutex_lock>
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	3b08      	subs	r3, #8
 800b504:	60fb      	str	r3, [r7, #12]
  /* ... which has to be in a used state ... */
  LWIP_ASSERT("mem_free: mem->used", mem->used);
 800b506:	68fb      	ldr	r3, [r7, #12]
 800b508:	791b      	ldrb	r3, [r3, #4]
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d106      	bne.n	800b51c <mem_free+0x8c>
 800b50e:	4b0e      	ldr	r3, [pc, #56]	; (800b548 <mem_free+0xb8>)
 800b510:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
 800b514:	4913      	ldr	r1, [pc, #76]	; (800b564 <mem_free+0xd4>)
 800b516:	480e      	ldr	r0, [pc, #56]	; (800b550 <mem_free+0xc0>)
 800b518:	f00a fc5c 	bl	8015dd4 <iprintf>
  /* ... and is now unused. */
  mem->used = 0;
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	2200      	movs	r2, #0
 800b520:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800b522:	4b11      	ldr	r3, [pc, #68]	; (800b568 <mem_free+0xd8>)
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	68fa      	ldr	r2, [r7, #12]
 800b528:	429a      	cmp	r2, r3
 800b52a:	d202      	bcs.n	800b532 <mem_free+0xa2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800b52c:	4a0e      	ldr	r2, [pc, #56]	; (800b568 <mem_free+0xd8>)
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800b532:	68f8      	ldr	r0, [r7, #12]
 800b534:	f7ff fec4 	bl	800b2c0 <plug_holes>
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b538:	4809      	ldr	r0, [pc, #36]	; (800b560 <mem_free+0xd0>)
 800b53a:	f007 fbda 	bl	8012cf2 <sys_mutex_unlock>
 800b53e:	e000      	b.n	800b542 <mem_free+0xb2>
    return;
 800b540:	bf00      	nop
}
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}
 800b548:	08018ccc 	.word	0x08018ccc
 800b54c:	08018dbc 	.word	0x08018dbc
 800b550:	08018d14 	.word	0x08018d14
 800b554:	200040cc 	.word	0x200040cc
 800b558:	200040d0 	.word	0x200040d0
 800b55c:	08018de0 	.word	0x08018de0
 800b560:	200040d8 	.word	0x200040d8
 800b564:	08018df8 	.word	0x08018df8
 800b568:	200040d4 	.word	0x200040d4

0800b56c <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t newsize)
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b088      	sub	sp, #32
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	460b      	mov	r3, r1
 800b576:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = LWIP_MEM_ALIGN_SIZE(newsize);
 800b578:	887b      	ldrh	r3, [r7, #2]
 800b57a:	3303      	adds	r3, #3
 800b57c:	b29b      	uxth	r3, r3
 800b57e:	f023 0303 	bic.w	r3, r3, #3
 800b582:	807b      	strh	r3, [r7, #2]

  if (newsize < MIN_SIZE_ALIGNED) {
 800b584:	887b      	ldrh	r3, [r7, #2]
 800b586:	2b0b      	cmp	r3, #11
 800b588:	d801      	bhi.n	800b58e <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800b58a:	230c      	movs	r3, #12
 800b58c:	807b      	strh	r3, [r7, #2]
  }

  if (newsize > MEM_SIZE_ALIGNED) {
 800b58e:	887b      	ldrh	r3, [r7, #2]
 800b590:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b594:	d901      	bls.n	800b59a <mem_trim+0x2e>
    return NULL;
 800b596:	2300      	movs	r3, #0
 800b598:	e0bd      	b.n	800b716 <mem_trim+0x1aa>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800b59a:	4b61      	ldr	r3, [pc, #388]	; (800b720 <mem_trim+0x1b4>)
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	687a      	ldr	r2, [r7, #4]
 800b5a0:	429a      	cmp	r2, r3
 800b5a2:	d304      	bcc.n	800b5ae <mem_trim+0x42>
 800b5a4:	4b5f      	ldr	r3, [pc, #380]	; (800b724 <mem_trim+0x1b8>)
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	687a      	ldr	r2, [r7, #4]
 800b5aa:	429a      	cmp	r2, r3
 800b5ac:	d306      	bcc.n	800b5bc <mem_trim+0x50>
 800b5ae:	4b5e      	ldr	r3, [pc, #376]	; (800b728 <mem_trim+0x1bc>)
 800b5b0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800b5b4:	495d      	ldr	r1, [pc, #372]	; (800b72c <mem_trim+0x1c0>)
 800b5b6:	485e      	ldr	r0, [pc, #376]	; (800b730 <mem_trim+0x1c4>)
 800b5b8:	f00a fc0c 	bl	8015dd4 <iprintf>
   (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800b5bc:	4b58      	ldr	r3, [pc, #352]	; (800b720 <mem_trim+0x1b4>)
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	687a      	ldr	r2, [r7, #4]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	d304      	bcc.n	800b5d0 <mem_trim+0x64>
 800b5c6:	4b57      	ldr	r3, [pc, #348]	; (800b724 <mem_trim+0x1b8>)
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	687a      	ldr	r2, [r7, #4]
 800b5cc:	429a      	cmp	r2, r3
 800b5ce:	d307      	bcc.n	800b5e0 <mem_trim+0x74>
    SYS_ARCH_DECL_PROTECT(lev);
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    SYS_ARCH_PROTECT(lev);
 800b5d0:	f007 fbba 	bl	8012d48 <sys_arch_protect>
 800b5d4:	60f8      	str	r0, [r7, #12]
    MEM_STATS_INC(illegal);
    SYS_ARCH_UNPROTECT(lev);
 800b5d6:	68f8      	ldr	r0, [r7, #12]
 800b5d8:	f007 fbc4 	bl	8012d64 <sys_arch_unprotect>
    return rmem;
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	e09a      	b.n	800b716 <mem_trim+0x1aa>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - SIZEOF_STRUCT_MEM);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	3b08      	subs	r3, #8
 800b5e4:	61fb      	str	r3, [r7, #28]
  /* ... and its offset pointer */
  ptr = (mem_size_t)((u8_t *)mem - ram);
 800b5e6:	69fb      	ldr	r3, [r7, #28]
 800b5e8:	4a4d      	ldr	r2, [pc, #308]	; (800b720 <mem_trim+0x1b4>)
 800b5ea:	6812      	ldr	r2, [r2, #0]
 800b5ec:	1a9b      	subs	r3, r3, r2
 800b5ee:	837b      	strh	r3, [r7, #26]

  size = mem->next - ptr - SIZEOF_STRUCT_MEM;
 800b5f0:	69fb      	ldr	r3, [r7, #28]
 800b5f2:	881a      	ldrh	r2, [r3, #0]
 800b5f4:	8b7b      	ldrh	r3, [r7, #26]
 800b5f6:	1ad3      	subs	r3, r2, r3
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	3b08      	subs	r3, #8
 800b5fc:	833b      	strh	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800b5fe:	887a      	ldrh	r2, [r7, #2]
 800b600:	8b3b      	ldrh	r3, [r7, #24]
 800b602:	429a      	cmp	r2, r3
 800b604:	d906      	bls.n	800b614 <mem_trim+0xa8>
 800b606:	4b48      	ldr	r3, [pc, #288]	; (800b728 <mem_trim+0x1bc>)
 800b608:	f240 2206 	movw	r2, #518	; 0x206
 800b60c:	4949      	ldr	r1, [pc, #292]	; (800b734 <mem_trim+0x1c8>)
 800b60e:	4848      	ldr	r0, [pc, #288]	; (800b730 <mem_trim+0x1c4>)
 800b610:	f00a fbe0 	bl	8015dd4 <iprintf>
  if (newsize > size) {
 800b614:	887a      	ldrh	r2, [r7, #2]
 800b616:	8b3b      	ldrh	r3, [r7, #24]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d901      	bls.n	800b620 <mem_trim+0xb4>
    /* not supported */
    return NULL;
 800b61c:	2300      	movs	r3, #0
 800b61e:	e07a      	b.n	800b716 <mem_trim+0x1aa>
  }
  if (newsize == size) {
 800b620:	887a      	ldrh	r2, [r7, #2]
 800b622:	8b3b      	ldrh	r3, [r7, #24]
 800b624:	429a      	cmp	r2, r3
 800b626:	d101      	bne.n	800b62c <mem_trim+0xc0>
    /* No change in size, simply return */
    return rmem;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	e074      	b.n	800b716 <mem_trim+0x1aa>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800b62c:	4842      	ldr	r0, [pc, #264]	; (800b738 <mem_trim+0x1cc>)
 800b62e:	f007 fb51 	bl	8012cd4 <sys_mutex_lock>

  mem2 = (struct mem *)(void *)&ram[mem->next];
 800b632:	4b3b      	ldr	r3, [pc, #236]	; (800b720 <mem_trim+0x1b4>)
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	69fa      	ldr	r2, [r7, #28]
 800b638:	8812      	ldrh	r2, [r2, #0]
 800b63a:	4413      	add	r3, r2
 800b63c:	617b      	str	r3, [r7, #20]
  if (mem2->used == 0) {
 800b63e:	697b      	ldr	r3, [r7, #20]
 800b640:	791b      	ldrb	r3, [r3, #4]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d131      	bne.n	800b6aa <mem_trim+0x13e>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    /* remember the old next pointer */
    next = mem2->next;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	881b      	ldrh	r3, [r3, #0]
 800b64a:	827b      	strh	r3, [r7, #18]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b64c:	8b7a      	ldrh	r2, [r7, #26]
 800b64e:	887b      	ldrh	r3, [r7, #2]
 800b650:	4413      	add	r3, r2
 800b652:	b29b      	uxth	r3, r3
 800b654:	3308      	adds	r3, #8
 800b656:	823b      	strh	r3, [r7, #16]
    if (lfree == mem2) {
 800b658:	4b38      	ldr	r3, [pc, #224]	; (800b73c <mem_trim+0x1d0>)
 800b65a:	681a      	ldr	r2, [r3, #0]
 800b65c:	697b      	ldr	r3, [r7, #20]
 800b65e:	429a      	cmp	r2, r3
 800b660:	d105      	bne.n	800b66e <mem_trim+0x102>
      lfree = (struct mem *)(void *)&ram[ptr2];
 800b662:	4b2f      	ldr	r3, [pc, #188]	; (800b720 <mem_trim+0x1b4>)
 800b664:	681a      	ldr	r2, [r3, #0]
 800b666:	8a3b      	ldrh	r3, [r7, #16]
 800b668:	4413      	add	r3, r2
 800b66a:	4a34      	ldr	r2, [pc, #208]	; (800b73c <mem_trim+0x1d0>)
 800b66c:	6013      	str	r3, [r2, #0]
    }
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b66e:	4b2c      	ldr	r3, [pc, #176]	; (800b720 <mem_trim+0x1b4>)
 800b670:	681a      	ldr	r2, [r3, #0]
 800b672:	8a3b      	ldrh	r3, [r7, #16]
 800b674:	4413      	add	r3, r2
 800b676:	617b      	str	r3, [r7, #20]
    mem2->used = 0;
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	2200      	movs	r2, #0
 800b67c:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800b67e:	697b      	ldr	r3, [r7, #20]
 800b680:	8a7a      	ldrh	r2, [r7, #18]
 800b682:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800b684:	697b      	ldr	r3, [r7, #20]
 800b686:	8b7a      	ldrh	r2, [r7, #26]
 800b688:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800b68a:	69fb      	ldr	r3, [r7, #28]
 800b68c:	8a3a      	ldrh	r2, [r7, #16]
 800b68e:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b690:	697b      	ldr	r3, [r7, #20]
 800b692:	881b      	ldrh	r3, [r3, #0]
 800b694:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b698:	d039      	beq.n	800b70e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b69a:	4b21      	ldr	r3, [pc, #132]	; (800b720 <mem_trim+0x1b4>)
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	8812      	ldrh	r2, [r2, #0]
 800b6a2:	4413      	add	r3, r2
 800b6a4:	8a3a      	ldrh	r2, [r7, #16]
 800b6a6:	805a      	strh	r2, [r3, #2]
 800b6a8:	e031      	b.n	800b70e <mem_trim+0x1a2>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800b6aa:	887b      	ldrh	r3, [r7, #2]
 800b6ac:	f103 0214 	add.w	r2, r3, #20
 800b6b0:	8b3b      	ldrh	r3, [r7, #24]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d82b      	bhi.n	800b70e <mem_trim+0x1a2>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = ptr + SIZEOF_STRUCT_MEM + newsize;
 800b6b6:	8b7a      	ldrh	r2, [r7, #26]
 800b6b8:	887b      	ldrh	r3, [r7, #2]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	b29b      	uxth	r3, r3
 800b6be:	3308      	adds	r3, #8
 800b6c0:	823b      	strh	r3, [r7, #16]
    mem2 = (struct mem *)(void *)&ram[ptr2];
 800b6c2:	4b17      	ldr	r3, [pc, #92]	; (800b720 <mem_trim+0x1b4>)
 800b6c4:	681a      	ldr	r2, [r3, #0]
 800b6c6:	8a3b      	ldrh	r3, [r7, #16]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	617b      	str	r3, [r7, #20]
    if (mem2 < lfree) {
 800b6cc:	4b1b      	ldr	r3, [pc, #108]	; (800b73c <mem_trim+0x1d0>)
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	697a      	ldr	r2, [r7, #20]
 800b6d2:	429a      	cmp	r2, r3
 800b6d4:	d202      	bcs.n	800b6dc <mem_trim+0x170>
      lfree = mem2;
 800b6d6:	4a19      	ldr	r2, [pc, #100]	; (800b73c <mem_trim+0x1d0>)
 800b6d8:	697b      	ldr	r3, [r7, #20]
 800b6da:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800b6dc:	697b      	ldr	r3, [r7, #20]
 800b6de:	2200      	movs	r2, #0
 800b6e0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800b6e2:	69fb      	ldr	r3, [r7, #28]
 800b6e4:	881a      	ldrh	r2, [r3, #0]
 800b6e6:	697b      	ldr	r3, [r7, #20]
 800b6e8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800b6ea:	697b      	ldr	r3, [r7, #20]
 800b6ec:	8b7a      	ldrh	r2, [r7, #26]
 800b6ee:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	8a3a      	ldrh	r2, [r7, #16]
 800b6f4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b6f6:	697b      	ldr	r3, [r7, #20]
 800b6f8:	881b      	ldrh	r3, [r3, #0]
 800b6fa:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b6fe:	d006      	beq.n	800b70e <mem_trim+0x1a2>
      ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b700:	4b07      	ldr	r3, [pc, #28]	; (800b720 <mem_trim+0x1b4>)
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	697a      	ldr	r2, [r7, #20]
 800b706:	8812      	ldrh	r2, [r2, #0]
 800b708:	4413      	add	r3, r2
 800b70a:	8a3a      	ldrh	r2, [r7, #16]
 800b70c:	805a      	strh	r2, [r3, #2]
    -> the remaining space stays unused since it is too small
  } */
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b70e:	480a      	ldr	r0, [pc, #40]	; (800b738 <mem_trim+0x1cc>)
 800b710:	f007 faef 	bl	8012cf2 <sys_mutex_unlock>
  return rmem;
 800b714:	687b      	ldr	r3, [r7, #4]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3720      	adds	r7, #32
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}
 800b71e:	bf00      	nop
 800b720:	200040cc 	.word	0x200040cc
 800b724:	200040d0 	.word	0x200040d0
 800b728:	08018ccc 	.word	0x08018ccc
 800b72c:	08018e0c 	.word	0x08018e0c
 800b730:	08018d14 	.word	0x08018d14
 800b734:	08018e24 	.word	0x08018e24
 800b738:	200040d8 	.word	0x200040d8
 800b73c:	200040d4 	.word	0x200040d4

0800b740 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size)
{
 800b740:	b580      	push	{r7, lr}
 800b742:	b088      	sub	sp, #32
 800b744:	af00      	add	r7, sp, #0
 800b746:	4603      	mov	r3, r0
 800b748:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size == 0) {
 800b74a:	88fb      	ldrh	r3, [r7, #6]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	d101      	bne.n	800b754 <mem_malloc+0x14>
    return NULL;
 800b750:	2300      	movs	r3, #0
 800b752:	e0d1      	b.n	800b8f8 <mem_malloc+0x1b8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = LWIP_MEM_ALIGN_SIZE(size);
 800b754:	88fb      	ldrh	r3, [r7, #6]
 800b756:	3303      	adds	r3, #3
 800b758:	b29b      	uxth	r3, r3
 800b75a:	f023 0303 	bic.w	r3, r3, #3
 800b75e:	80fb      	strh	r3, [r7, #6]

  if (size < MIN_SIZE_ALIGNED) {
 800b760:	88fb      	ldrh	r3, [r7, #6]
 800b762:	2b0b      	cmp	r3, #11
 800b764:	d801      	bhi.n	800b76a <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b766:	230c      	movs	r3, #12
 800b768:	80fb      	strh	r3, [r7, #6]
  }

  if (size > MEM_SIZE_ALIGNED) {
 800b76a:	88fb      	ldrh	r3, [r7, #6]
 800b76c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b770:	d901      	bls.n	800b776 <mem_malloc+0x36>
    return NULL;
 800b772:	2300      	movs	r3, #0
 800b774:	e0c0      	b.n	800b8f8 <mem_malloc+0x1b8>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b776:	4862      	ldr	r0, [pc, #392]	; (800b900 <mem_malloc+0x1c0>)
 800b778:	f007 faac 	bl	8012cd4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b77c:	4b61      	ldr	r3, [pc, #388]	; (800b904 <mem_malloc+0x1c4>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	461a      	mov	r2, r3
 800b782:	4b61      	ldr	r3, [pc, #388]	; (800b908 <mem_malloc+0x1c8>)
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	1ad3      	subs	r3, r2, r3
 800b788:	83fb      	strh	r3, [r7, #30]
 800b78a:	e0aa      	b.n	800b8e2 <mem_malloc+0x1a2>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
      mem = (struct mem *)(void *)&ram[ptr];
 800b78c:	4b5e      	ldr	r3, [pc, #376]	; (800b908 <mem_malloc+0x1c8>)
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	8bfb      	ldrh	r3, [r7, #30]
 800b792:	4413      	add	r3, r2
 800b794:	617b      	str	r3, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	791b      	ldrb	r3, [r3, #4]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	f040 809b 	bne.w	800b8d6 <mem_malloc+0x196>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b7a0:	697b      	ldr	r3, [r7, #20]
 800b7a2:	881b      	ldrh	r3, [r3, #0]
 800b7a4:	461a      	mov	r2, r3
 800b7a6:	8bfb      	ldrh	r3, [r7, #30]
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	f1a3 0208 	sub.w	r2, r3, #8
 800b7ae:	88fb      	ldrh	r3, [r7, #6]
      if ((!mem->used) &&
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	f0c0 8090 	bcc.w	800b8d6 <mem_malloc+0x196>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b7b6:	697b      	ldr	r3, [r7, #20]
 800b7b8:	881b      	ldrh	r3, [r3, #0]
 800b7ba:	461a      	mov	r2, r3
 800b7bc:	8bfb      	ldrh	r3, [r7, #30]
 800b7be:	1ad3      	subs	r3, r2, r3
 800b7c0:	f1a3 0208 	sub.w	r2, r3, #8
 800b7c4:	88fb      	ldrh	r3, [r7, #6]
 800b7c6:	3314      	adds	r3, #20
 800b7c8:	429a      	cmp	r2, r3
 800b7ca:	d327      	bcc.n	800b81c <mem_malloc+0xdc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = ptr + SIZEOF_STRUCT_MEM + size;
 800b7cc:	8bfa      	ldrh	r2, [r7, #30]
 800b7ce:	88fb      	ldrh	r3, [r7, #6]
 800b7d0:	4413      	add	r3, r2
 800b7d2:	b29b      	uxth	r3, r3
 800b7d4:	3308      	adds	r3, #8
 800b7d6:	827b      	strh	r3, [r7, #18]
          /* create mem2 struct */
          mem2 = (struct mem *)(void *)&ram[ptr2];
 800b7d8:	4b4b      	ldr	r3, [pc, #300]	; (800b908 <mem_malloc+0x1c8>)
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	8a7b      	ldrh	r3, [r7, #18]
 800b7de:	4413      	add	r3, r2
 800b7e0:	60fb      	str	r3, [r7, #12]
          mem2->used = 0;
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b7e8:	697b      	ldr	r3, [r7, #20]
 800b7ea:	881a      	ldrh	r2, [r3, #0]
 800b7ec:	68fb      	ldr	r3, [r7, #12]
 800b7ee:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	8bfa      	ldrh	r2, [r7, #30]
 800b7f4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	8a7a      	ldrh	r2, [r7, #18]
 800b7fa:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2201      	movs	r2, #1
 800b800:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b802:	68fb      	ldr	r3, [r7, #12]
 800b804:	881b      	ldrh	r3, [r3, #0]
 800b806:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b80a:	d00a      	beq.n	800b822 <mem_malloc+0xe2>
            ((struct mem *)(void *)&ram[mem2->next])->prev = ptr2;
 800b80c:	4b3e      	ldr	r3, [pc, #248]	; (800b908 <mem_malloc+0x1c8>)
 800b80e:	681b      	ldr	r3, [r3, #0]
 800b810:	68fa      	ldr	r2, [r7, #12]
 800b812:	8812      	ldrh	r2, [r2, #0]
 800b814:	4413      	add	r3, r2
 800b816:	8a7a      	ldrh	r2, [r7, #18]
 800b818:	805a      	strh	r2, [r3, #2]
 800b81a:	e002      	b.n	800b822 <mem_malloc+0xe2>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	2201      	movs	r2, #1
 800b820:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - (mem_size_t)((u8_t *)mem - ram));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b822:	4b38      	ldr	r3, [pc, #224]	; (800b904 <mem_malloc+0x1c4>)
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	697a      	ldr	r2, [r7, #20]
 800b828:	429a      	cmp	r2, r3
 800b82a:	d127      	bne.n	800b87c <mem_malloc+0x13c>
          struct mem *cur = lfree;
 800b82c:	4b35      	ldr	r3, [pc, #212]	; (800b904 <mem_malloc+0x1c4>)
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b832:	e005      	b.n	800b840 <mem_malloc+0x100>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = (struct mem *)(void *)&ram[cur->next];
 800b834:	4b34      	ldr	r3, [pc, #208]	; (800b908 <mem_malloc+0x1c8>)
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	69ba      	ldr	r2, [r7, #24]
 800b83a:	8812      	ldrh	r2, [r2, #0]
 800b83c:	4413      	add	r3, r2
 800b83e:	61bb      	str	r3, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	791b      	ldrb	r3, [r3, #4]
 800b844:	2b00      	cmp	r3, #0
 800b846:	d004      	beq.n	800b852 <mem_malloc+0x112>
 800b848:	4b30      	ldr	r3, [pc, #192]	; (800b90c <mem_malloc+0x1cc>)
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	69ba      	ldr	r2, [r7, #24]
 800b84e:	429a      	cmp	r2, r3
 800b850:	d1f0      	bne.n	800b834 <mem_malloc+0xf4>
          }
          lfree = cur;
 800b852:	4a2c      	ldr	r2, [pc, #176]	; (800b904 <mem_malloc+0x1c4>)
 800b854:	69bb      	ldr	r3, [r7, #24]
 800b856:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b858:	4b2a      	ldr	r3, [pc, #168]	; (800b904 <mem_malloc+0x1c4>)
 800b85a:	681a      	ldr	r2, [r3, #0]
 800b85c:	4b2b      	ldr	r3, [pc, #172]	; (800b90c <mem_malloc+0x1cc>)
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	429a      	cmp	r2, r3
 800b862:	d00b      	beq.n	800b87c <mem_malloc+0x13c>
 800b864:	4b27      	ldr	r3, [pc, #156]	; (800b904 <mem_malloc+0x1c4>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	791b      	ldrb	r3, [r3, #4]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d006      	beq.n	800b87c <mem_malloc+0x13c>
 800b86e:	4b28      	ldr	r3, [pc, #160]	; (800b910 <mem_malloc+0x1d0>)
 800b870:	f240 22cf 	movw	r2, #719	; 0x2cf
 800b874:	4927      	ldr	r1, [pc, #156]	; (800b914 <mem_malloc+0x1d4>)
 800b876:	4828      	ldr	r0, [pc, #160]	; (800b918 <mem_malloc+0x1d8>)
 800b878:	f00a faac 	bl	8015dd4 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b87c:	4820      	ldr	r0, [pc, #128]	; (800b900 <mem_malloc+0x1c0>)
 800b87e:	f007 fa38 	bl	8012cf2 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b882:	88fa      	ldrh	r2, [r7, #6]
 800b884:	697b      	ldr	r3, [r7, #20]
 800b886:	4413      	add	r3, r2
 800b888:	3308      	adds	r3, #8
 800b88a:	4a20      	ldr	r2, [pc, #128]	; (800b90c <mem_malloc+0x1cc>)
 800b88c:	6812      	ldr	r2, [r2, #0]
 800b88e:	4293      	cmp	r3, r2
 800b890:	d906      	bls.n	800b8a0 <mem_malloc+0x160>
 800b892:	4b1f      	ldr	r3, [pc, #124]	; (800b910 <mem_malloc+0x1d0>)
 800b894:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 800b898:	4920      	ldr	r1, [pc, #128]	; (800b91c <mem_malloc+0x1dc>)
 800b89a:	481f      	ldr	r0, [pc, #124]	; (800b918 <mem_malloc+0x1d8>)
 800b89c:	f00a fa9a 	bl	8015dd4 <iprintf>
         (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	f003 0303 	and.w	r3, r3, #3
 800b8a6:	2b00      	cmp	r3, #0
 800b8a8:	d006      	beq.n	800b8b8 <mem_malloc+0x178>
 800b8aa:	4b19      	ldr	r3, [pc, #100]	; (800b910 <mem_malloc+0x1d0>)
 800b8ac:	f240 22d6 	movw	r2, #726	; 0x2d6
 800b8b0:	491b      	ldr	r1, [pc, #108]	; (800b920 <mem_malloc+0x1e0>)
 800b8b2:	4819      	ldr	r0, [pc, #100]	; (800b918 <mem_malloc+0x1d8>)
 800b8b4:	f00a fa8e 	bl	8015dd4 <iprintf>
         ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	f003 0303 	and.w	r3, r3, #3
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d006      	beq.n	800b8d0 <mem_malloc+0x190>
 800b8c2:	4b13      	ldr	r3, [pc, #76]	; (800b910 <mem_malloc+0x1d0>)
 800b8c4:	f44f 7236 	mov.w	r2, #728	; 0x2d8
 800b8c8:	4916      	ldr	r1, [pc, #88]	; (800b924 <mem_malloc+0x1e4>)
 800b8ca:	4813      	ldr	r0, [pc, #76]	; (800b918 <mem_malloc+0x1d8>)
 800b8cc:	f00a fa82 	bl	8015dd4 <iprintf>
          (((mem_ptr_t)mem) & (MEM_ALIGNMENT-1)) == 0);

        return (u8_t *)mem + SIZEOF_STRUCT_MEM;
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	3308      	adds	r3, #8
 800b8d4:	e010      	b.n	800b8f8 <mem_malloc+0x1b8>
         ptr = ((struct mem *)(void *)&ram[ptr])->next) {
 800b8d6:	4b0c      	ldr	r3, [pc, #48]	; (800b908 <mem_malloc+0x1c8>)
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	8bfb      	ldrh	r3, [r7, #30]
 800b8dc:	4413      	add	r3, r2
 800b8de:	881b      	ldrh	r3, [r3, #0]
 800b8e0:	83fb      	strh	r3, [r7, #30]
    for (ptr = (mem_size_t)((u8_t *)lfree - ram); ptr < MEM_SIZE_ALIGNED - size;
 800b8e2:	8bfa      	ldrh	r2, [r7, #30]
 800b8e4:	88fb      	ldrh	r3, [r7, #6]
 800b8e6:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b8ea:	429a      	cmp	r2, r3
 800b8ec:	f4ff af4e 	bcc.w	800b78c <mem_malloc+0x4c>
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b8f0:	4803      	ldr	r0, [pc, #12]	; (800b900 <mem_malloc+0x1c0>)
 800b8f2:	f007 f9fe 	bl	8012cf2 <sys_mutex_unlock>
  return NULL;
 800b8f6:	2300      	movs	r3, #0
}
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	3720      	adds	r7, #32
 800b8fc:	46bd      	mov	sp, r7
 800b8fe:	bd80      	pop	{r7, pc}
 800b900:	200040d8 	.word	0x200040d8
 800b904:	200040d4 	.word	0x200040d4
 800b908:	200040cc 	.word	0x200040cc
 800b90c:	200040d0 	.word	0x200040d0
 800b910:	08018ccc 	.word	0x08018ccc
 800b914:	08018e44 	.word	0x08018e44
 800b918:	08018d14 	.word	0x08018d14
 800b91c:	08018e60 	.word	0x08018e60
 800b920:	08018e90 	.word	0x08018e90
 800b924:	08018ec0 	.word	0x08018ec0

0800b928 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b928:	b480      	push	{r7}
 800b92a:	b085      	sub	sp, #20
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	689b      	ldr	r3, [r3, #8]
 800b934:	2200      	movs	r2, #0
 800b936:	601a      	str	r2, [r3, #0]
  memp = (struct memp*)LWIP_MEM_ALIGN(desc->base);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	685b      	ldr	r3, [r3, #4]
 800b93c:	3303      	adds	r3, #3
 800b93e:	f023 0303 	bic.w	r3, r3, #3
 800b942:	60bb      	str	r3, [r7, #8]
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b944:	2300      	movs	r3, #0
 800b946:	60fb      	str	r3, [r7, #12]
 800b948:	e011      	b.n	800b96e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	689b      	ldr	r3, [r3, #8]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	689b      	ldr	r3, [r3, #8]
 800b958:	68ba      	ldr	r2, [r7, #8]
 800b95a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
   /* cast through void* to get rid of alignment warnings */
   memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	881b      	ldrh	r3, [r3, #0]
 800b960:	461a      	mov	r2, r3
 800b962:	68bb      	ldr	r3, [r7, #8]
 800b964:	4413      	add	r3, r2
 800b966:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	3301      	adds	r3, #1
 800b96c:	60fb      	str	r3, [r7, #12]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	885b      	ldrh	r3, [r3, #2]
 800b972:	461a      	mov	r2, r3
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	429a      	cmp	r2, r3
 800b978:	dce7      	bgt.n	800b94a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b97a:	bf00      	nop
 800b97c:	3714      	adds	r7, #20
 800b97e:	46bd      	mov	sp, r7
 800b980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b984:	4770      	bx	lr
	...

0800b988 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b082      	sub	sp, #8
 800b98c:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b98e:	2300      	movs	r3, #0
 800b990:	80fb      	strh	r3, [r7, #6]
 800b992:	e009      	b.n	800b9a8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b994:	88fb      	ldrh	r3, [r7, #6]
 800b996:	4a08      	ldr	r2, [pc, #32]	; (800b9b8 <memp_init+0x30>)
 800b998:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b99c:	4618      	mov	r0, r3
 800b99e:	f7ff ffc3 	bl	800b928 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b9a2:	88fb      	ldrh	r3, [r7, #6]
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	80fb      	strh	r3, [r7, #6]
 800b9a8:	88fb      	ldrh	r3, [r7, #6]
 800b9aa:	2b0c      	cmp	r3, #12
 800b9ac:	d9f2      	bls.n	800b994 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b9ae:	bf00      	nop
 800b9b0:	3708      	adds	r7, #8
 800b9b2:	46bd      	mov	sp, r7
 800b9b4:	bd80      	pop	{r7, pc}
 800b9b6:	bf00      	nop
 800b9b8:	0801a558 	.word	0x0801a558

0800b9bc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char* file, const int line)
#endif
{
 800b9bc:	b580      	push	{r7, lr}
 800b9be:	b084      	sub	sp, #16
 800b9c0:	af00      	add	r7, sp, #0
 800b9c2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b9c4:	f007 f9c0 	bl	8012d48 <sys_arch_protect>
 800b9c8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	689b      	ldr	r3, [r3, #8]
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d015      	beq.n	800ba04 <do_memp_malloc_pool+0x48>
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element_overflow(memp, desc);
    memp_overflow_check_element_underflow(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	689b      	ldr	r3, [r3, #8]
 800b9dc:	68ba      	ldr	r2, [r7, #8]
 800b9de:	6812      	ldr	r2, [r2, #0]
 800b9e0:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f003 0303 	and.w	r3, r3, #3
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d006      	beq.n	800b9fa <do_memp_malloc_pool+0x3e>
 800b9ec:	4b09      	ldr	r3, [pc, #36]	; (800ba14 <do_memp_malloc_pool+0x58>)
 800b9ee:	f240 1249 	movw	r2, #329	; 0x149
 800b9f2:	4909      	ldr	r1, [pc, #36]	; (800ba18 <do_memp_malloc_pool+0x5c>)
 800b9f4:	4809      	ldr	r0, [pc, #36]	; (800ba1c <do_memp_malloc_pool+0x60>)
 800b9f6:	f00a f9ed 	bl	8015dd4 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b9fa:	68f8      	ldr	r0, [r7, #12]
 800b9fc:	f007 f9b2 	bl	8012d64 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t*)memp + MEMP_SIZE);
 800ba00:	68bb      	ldr	r3, [r7, #8]
 800ba02:	e003      	b.n	800ba0c <do_memp_malloc_pool+0x50>
#if MEMP_STATS
    desc->stats->err++;
#endif
  }

  SYS_ARCH_UNPROTECT(old_level);
 800ba04:	68f8      	ldr	r0, [r7, #12]
 800ba06:	f007 f9ad 	bl	8012d64 <sys_arch_unprotect>
  return NULL;
 800ba0a:	2300      	movs	r3, #0
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}
 800ba14:	08018ee4 	.word	0x08018ee4
 800ba18:	08018f14 	.word	0x08018f14
 800ba1c:	08018f38 	.word	0x08018f38

0800ba20 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char* file, const int line)
#endif
{
 800ba20:	b580      	push	{r7, lr}
 800ba22:	b084      	sub	sp, #16
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	4603      	mov	r3, r0
 800ba28:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ba2a:	79fb      	ldrb	r3, [r7, #7]
 800ba2c:	2b0c      	cmp	r3, #12
 800ba2e:	d908      	bls.n	800ba42 <memp_malloc+0x22>
 800ba30:	4b0a      	ldr	r3, [pc, #40]	; (800ba5c <memp_malloc+0x3c>)
 800ba32:	f240 1287 	movw	r2, #391	; 0x187
 800ba36:	490a      	ldr	r1, [pc, #40]	; (800ba60 <memp_malloc+0x40>)
 800ba38:	480a      	ldr	r0, [pc, #40]	; (800ba64 <memp_malloc+0x44>)
 800ba3a:	f00a f9cb 	bl	8015dd4 <iprintf>
 800ba3e:	2300      	movs	r3, #0
 800ba40:	e008      	b.n	800ba54 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ba42:	79fb      	ldrb	r3, [r7, #7]
 800ba44:	4a08      	ldr	r2, [pc, #32]	; (800ba68 <memp_malloc+0x48>)
 800ba46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba4a:	4618      	mov	r0, r3
 800ba4c:	f7ff ffb6 	bl	800b9bc <do_memp_malloc_pool>
 800ba50:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ba52:	68fb      	ldr	r3, [r7, #12]
}
 800ba54:	4618      	mov	r0, r3
 800ba56:	3710      	adds	r7, #16
 800ba58:	46bd      	mov	sp, r7
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	08018ee4 	.word	0x08018ee4
 800ba60:	08018f74 	.word	0x08018f74
 800ba64:	08018f38 	.word	0x08018f38
 800ba68:	0801a558 	.word	0x0801a558

0800ba6c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc* desc, void *mem)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b084      	sub	sp, #16
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
 800ba74:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ba76:	683b      	ldr	r3, [r7, #0]
 800ba78:	f003 0303 	and.w	r3, r3, #3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d006      	beq.n	800ba8e <do_memp_free_pool+0x22>
 800ba80:	4b0d      	ldr	r3, [pc, #52]	; (800bab8 <do_memp_free_pool+0x4c>)
 800ba82:	f240 129d 	movw	r2, #413	; 0x19d
 800ba86:	490d      	ldr	r1, [pc, #52]	; (800babc <do_memp_free_pool+0x50>)
 800ba88:	480d      	ldr	r0, [pc, #52]	; (800bac0 <do_memp_free_pool+0x54>)
 800ba8a:	f00a f9a3 	bl	8015dd4 <iprintf>
                ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t*)mem - MEMP_SIZE);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800ba92:	f007 f959 	bl	8012d48 <sys_arch_protect>
 800ba96:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	689b      	ldr	r3, [r3, #8]
 800ba9c:	681a      	ldr	r2, [r3, #0]
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	689b      	ldr	r3, [r3, #8]
 800baa6:	68fa      	ldr	r2, [r7, #12]
 800baa8:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800baaa:	68b8      	ldr	r0, [r7, #8]
 800baac:	f007 f95a 	bl	8012d64 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800bab0:	bf00      	nop
 800bab2:	3710      	adds	r7, #16
 800bab4:	46bd      	mov	sp, r7
 800bab6:	bd80      	pop	{r7, pc}
 800bab8:	08018ee4 	.word	0x08018ee4
 800babc:	08018f94 	.word	0x08018f94
 800bac0:	08018f38 	.word	0x08018f38

0800bac4 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	4603      	mov	r3, r0
 800bacc:	6039      	str	r1, [r7, #0]
 800bace:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800bad0:	79fb      	ldrb	r3, [r7, #7]
 800bad2:	2b0c      	cmp	r3, #12
 800bad4:	d907      	bls.n	800bae6 <memp_free+0x22>
 800bad6:	4b0c      	ldr	r3, [pc, #48]	; (800bb08 <memp_free+0x44>)
 800bad8:	f240 12db 	movw	r2, #475	; 0x1db
 800badc:	490b      	ldr	r1, [pc, #44]	; (800bb0c <memp_free+0x48>)
 800bade:	480c      	ldr	r0, [pc, #48]	; (800bb10 <memp_free+0x4c>)
 800bae0:	f00a f978 	bl	8015dd4 <iprintf>
 800bae4:	e00c      	b.n	800bb00 <memp_free+0x3c>

  if (mem == NULL) {
 800bae6:	683b      	ldr	r3, [r7, #0]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d008      	beq.n	800bafe <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800baec:	79fb      	ldrb	r3, [r7, #7]
 800baee:	4a09      	ldr	r2, [pc, #36]	; (800bb14 <memp_free+0x50>)
 800baf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7ff ffb8 	bl	800ba6c <do_memp_free_pool>
 800bafc:	e000      	b.n	800bb00 <memp_free+0x3c>
    return;
 800bafe:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800bb00:	3708      	adds	r7, #8
 800bb02:	46bd      	mov	sp, r7
 800bb04:	bd80      	pop	{r7, pc}
 800bb06:	bf00      	nop
 800bb08:	08018ee4 	.word	0x08018ee4
 800bb0c:	08018fb4 	.word	0x08018fb4
 800bb10:	08018f38 	.word	0x08018f38
 800bb14:	0801a558 	.word	0x0801a558

0800bb18 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800bb1c:	bf00      	nop
 800bb1e:	46bd      	mov	sp, r7
 800bb20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb24:	4770      	bx	lr
	...

0800bb28 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
#if LWIP_IPV6
  s8_t i;
#endif

  LWIP_ASSERT("No init function given", init != NULL);
 800bb36:	69fb      	ldr	r3, [r7, #28]
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d105      	bne.n	800bb48 <netif_add+0x20>
 800bb3c:	4b1f      	ldr	r3, [pc, #124]	; (800bbbc <netif_add+0x94>)
 800bb3e:	22fb      	movs	r2, #251	; 0xfb
 800bb40:	491f      	ldr	r1, [pc, #124]	; (800bbc0 <netif_add+0x98>)
 800bb42:	4820      	ldr	r0, [pc, #128]	; (800bbc4 <netif_add+0x9c>)
 800bb44:	f00a f946 	bl	8015dd4 <iprintf>

  /* reset new interface configuration state */
#if LWIP_IPV4
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	2200      	movs	r2, #0
 800bb52:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	2200      	movs	r2, #0
 800bb58:	60da      	str	r2, [r3, #12]
    netif->ip6_addr_state[i] = IP6_ADDR_INVALID;
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->flags = 0;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
#if LWIP_IPV6_AUTOCONFIG
  /* IPv6 address autoconfiguration not enabled by default */
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
#if LWIP_IPV6_SEND_ROUTER_SOLICIT
  netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2203      	movs	r2, #3
 800bb66:	f883 2020 	strb.w	r2, [r3, #32]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800bb6a:	68fb      	ldr	r3, [r7, #12]
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	61da      	str	r2, [r3, #28]
  netif->num = netif_num++;
 800bb70:	4b15      	ldr	r3, [pc, #84]	; (800bbc8 <netif_add+0xa0>)
 800bb72:	781b      	ldrb	r3, [r3, #0]
 800bb74:	1c5a      	adds	r2, r3, #1
 800bb76:	b2d1      	uxtb	r1, r2
 800bb78:	4a13      	ldr	r2, [pc, #76]	; (800bbc8 <netif_add+0xa0>)
 800bb7a:	7011      	strb	r1, [r2, #0]
 800bb7c:	68fa      	ldr	r2, [r7, #12]
 800bb7e:	f882 302e 	strb.w	r3, [r2, #46]	; 0x2e
  netif->input = input;
 800bb82:	68fb      	ldr	r3, [r7, #12]
 800bb84:	6a3a      	ldr	r2, [r7, #32]
 800bb86:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800bb88:	683b      	ldr	r3, [r7, #0]
 800bb8a:	687a      	ldr	r2, [r7, #4]
 800bb8c:	68b9      	ldr	r1, [r7, #8]
 800bb8e:	68f8      	ldr	r0, [r7, #12]
 800bb90:	f000 f81e 	bl	800bbd0 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800bb94:	69fb      	ldr	r3, [r7, #28]
 800bb96:	68f8      	ldr	r0, [r7, #12]
 800bb98:	4798      	blx	r3
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d001      	beq.n	800bba4 <netif_add+0x7c>
    return NULL;
 800bba0:	2300      	movs	r3, #0
 800bba2:	e007      	b.n	800bbb4 <netif_add+0x8c>
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800bba4:	4b09      	ldr	r3, [pc, #36]	; (800bbcc <netif_add+0xa4>)
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800bbac:	4a07      	ldr	r2, [pc, #28]	; (800bbcc <netif_add+0xa4>)
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	6013      	str	r3, [r2, #0]
  ip4_addr_debug_print(NETIF_DEBUG, netmask);
  LWIP_DEBUGF(NETIF_DEBUG, (" gw "));
  ip4_addr_debug_print(NETIF_DEBUG, gw);
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));
  return netif;
 800bbb2:	68fb      	ldr	r3, [r7, #12]
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	3710      	adds	r7, #16
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	bd80      	pop	{r7, pc}
 800bbbc:	08018fd0 	.word	0x08018fd0
 800bbc0:	08019004 	.word	0x08019004
 800bbc4:	0801901c 	.word	0x0801901c
 800bbc8:	20004110 	.word	0x20004110
 800bbcc:	20007924 	.word	0x20007924

0800bbd0 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
    const ip4_addr_t *gw)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	60f8      	str	r0, [r7, #12]
 800bbd8:	60b9      	str	r1, [r7, #8]
 800bbda:	607a      	str	r2, [r7, #4]
 800bbdc:	603b      	str	r3, [r7, #0]
  if (ip4_addr_isany(ipaddr)) {
 800bbde:	68bb      	ldr	r3, [r7, #8]
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	d003      	beq.n	800bbec <netif_set_addr+0x1c>
 800bbe4:	68bb      	ldr	r3, [r7, #8]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d10c      	bne.n	800bc06 <netif_set_addr+0x36>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    netif_set_ipaddr(netif, ipaddr);
 800bbec:	68b9      	ldr	r1, [r7, #8]
 800bbee:	68f8      	ldr	r0, [r7, #12]
 800bbf0:	f000 f81a 	bl	800bc28 <netif_set_ipaddr>
    netif_set_netmask(netif, netmask);
 800bbf4:	6879      	ldr	r1, [r7, #4]
 800bbf6:	68f8      	ldr	r0, [r7, #12]
 800bbf8:	f000 f862 	bl	800bcc0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bbfc:	6839      	ldr	r1, [r7, #0]
 800bbfe:	68f8      	ldr	r0, [r7, #12]
 800bc00:	f000 f84a 	bl	800bc98 <netif_set_gw>
 800bc04:	e00b      	b.n	800bc1e <netif_set_addr+0x4e>
  } else {
    netif_set_netmask(netif, netmask);
 800bc06:	6879      	ldr	r1, [r7, #4]
 800bc08:	68f8      	ldr	r0, [r7, #12]
 800bc0a:	f000 f859 	bl	800bcc0 <netif_set_netmask>
    netif_set_gw(netif, gw);
 800bc0e:	6839      	ldr	r1, [r7, #0]
 800bc10:	68f8      	ldr	r0, [r7, #12]
 800bc12:	f000 f841 	bl	800bc98 <netif_set_gw>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    netif_set_ipaddr(netif, ipaddr);
 800bc16:	68b9      	ldr	r1, [r7, #8]
 800bc18:	68f8      	ldr	r0, [r7, #12]
 800bc1a:	f000 f805 	bl	800bc28 <netif_set_ipaddr>
  }
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}
	...

0800bc28 <netif_set_ipaddr>:
 * @note call netif_set_addr() if you also want to change netmask and
 * default gateway
 */
void
netif_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
 800bc2e:	6078      	str	r0, [r7, #4]
 800bc30:	6039      	str	r1, [r7, #0]
  ip_addr_t new_addr;
  *ip_2_ip4(&new_addr) = (ipaddr ? *ipaddr : *IP4_ADDR_ANY4);
 800bc32:	683b      	ldr	r3, [r7, #0]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d003      	beq.n	800bc40 <netif_set_ipaddr+0x18>
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	60fb      	str	r3, [r7, #12]
 800bc3e:	e002      	b.n	800bc46 <netif_set_ipaddr+0x1e>
 800bc40:	4b14      	ldr	r3, [pc, #80]	; (800bc94 <netif_set_ipaddr+0x6c>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	60fb      	str	r3, [r7, #12]
  IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

  /* address is actually being changed? */
  if (ip4_addr_cmp(ip_2_ip4(&new_addr), netif_ip4_addr(netif)) == 0) {
 800bc46:	68fa      	ldr	r2, [r7, #12]
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	3304      	adds	r3, #4
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	d01c      	beq.n	800bc8c <netif_set_ipaddr+0x64>
    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
#if LWIP_TCP
    tcp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	3304      	adds	r3, #4
 800bc56:	f107 020c 	add.w	r2, r7, #12
 800bc5a:	4611      	mov	r1, r2
 800bc5c:	4618      	mov	r0, r3
 800bc5e:	f002 fb5d 	bl	800e31c <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
    udp_netif_ip_addr_changed(netif_ip_addr4(netif), &new_addr);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	3304      	adds	r3, #4
 800bc66:	f107 020c 	add.w	r2, r7, #12
 800bc6a:	4611      	mov	r1, r2
 800bc6c:	4618      	mov	r0, r3
 800bc6e:	f006 fd97 	bl	80127a0 <udp_netif_ip_addr_changed>
#endif /* LWIP_RAW */

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800bc72:	683b      	ldr	r3, [r7, #0]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d002      	beq.n	800bc7e <netif_set_ipaddr+0x56>
 800bc78:	683b      	ldr	r3, [r7, #0]
 800bc7a:	681b      	ldr	r3, [r3, #0]
 800bc7c:	e000      	b.n	800bc80 <netif_set_ipaddr+0x58>
 800bc7e:	2300      	movs	r3, #0
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800bc84:	2101      	movs	r1, #1
 800bc86:	6878      	ldr	r0, [r7, #4]
 800bc88:	f000 f861 	bl	800bd4e <netif_issue_reports>
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_addr(netif)),
    ip4_addr2_16(netif_ip4_addr(netif)),
    ip4_addr3_16(netif_ip4_addr(netif)),
    ip4_addr4_16(netif_ip4_addr(netif))));
}
 800bc8c:	bf00      	nop
 800bc8e:	3710      	adds	r7, #16
 800bc90:	46bd      	mov	sp, r7
 800bc92:	bd80      	pop	{r7, pc}
 800bc94:	0801a4b8 	.word	0x0801a4b8

0800bc98 <netif_set_gw>:
 *
 * @note call netif_set_addr() if you also want to change ip address and netmask
 */
void
netif_set_gw(struct netif *netif, const ip4_addr_t *gw)
{
 800bc98:	b480      	push	{r7}
 800bc9a:	b083      	sub	sp, #12
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
 800bca0:	6039      	str	r1, [r7, #0]
  ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800bca2:	683b      	ldr	r3, [r7, #0]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d002      	beq.n	800bcae <netif_set_gw+0x16>
 800bca8:	683b      	ldr	r3, [r7, #0]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	e000      	b.n	800bcb0 <netif_set_gw+0x18>
 800bcae:	2300      	movs	r3, #0
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	60d3      	str	r3, [r2, #12]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_gw(netif)),
    ip4_addr2_16(netif_ip4_gw(netif)),
    ip4_addr3_16(netif_ip4_gw(netif)),
    ip4_addr4_16(netif_ip4_gw(netif))));
}
 800bcb4:	bf00      	nop
 800bcb6:	370c      	adds	r7, #12
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcbe:	4770      	bx	lr

0800bcc0 <netif_set_netmask>:
 * @note call netif_set_addr() if you also want to change ip address and
 * default gateway
 */
void
netif_set_netmask(struct netif *netif, const ip4_addr_t *netmask)
{
 800bcc0:	b480      	push	{r7}
 800bcc2:	b083      	sub	sp, #12
 800bcc4:	af00      	add	r7, sp, #0
 800bcc6:	6078      	str	r0, [r7, #4]
 800bcc8:	6039      	str	r1, [r7, #0]
  mib2_remove_route_ip4(0, netif);
  /* set new netmask to netif */
  ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800bcca:	683b      	ldr	r3, [r7, #0]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <netif_set_netmask+0x16>
 800bcd0:	683b      	ldr	r3, [r7, #0]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	e000      	b.n	800bcd8 <netif_set_netmask+0x18>
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	687a      	ldr	r2, [r7, #4]
 800bcda:	6093      	str	r3, [r2, #8]
    netif->name[0], netif->name[1],
    ip4_addr1_16(netif_ip4_netmask(netif)),
    ip4_addr2_16(netif_ip4_netmask(netif)),
    ip4_addr3_16(netif_ip4_netmask(netif)),
    ip4_addr4_16(netif_ip4_netmask(netif))));
}
 800bcdc:	bf00      	nop
 800bcde:	370c      	adds	r7, #12
 800bce0:	46bd      	mov	sp, r7
 800bce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce6:	4770      	bx	lr

0800bce8 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800bce8:	b480      	push	{r7}
 800bcea:	b083      	sub	sp, #12
 800bcec:	af00      	add	r7, sp, #0
 800bcee:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800bcf0:	4a04      	ldr	r2, [pc, #16]	; (800bd04 <netif_set_default+0x1c>)
 800bcf2:	687b      	ldr	r3, [r7, #4]
 800bcf4:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
           netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800bcf6:	bf00      	nop
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr
 800bd02:	bf00      	nop
 800bd04:	20007928 	.word	0x20007928

0800bd08 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800bd08:	b580      	push	{r7, lr}
 800bd0a:	b082      	sub	sp, #8
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	6078      	str	r0, [r7, #4]
  if (!(netif->flags & NETIF_FLAG_UP)) {
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd16:	f003 0301 	and.w	r3, r3, #1
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d113      	bne.n	800bd46 <netif_set_up+0x3e>
    netif->flags |= NETIF_FLAG_UP;
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd24:	f043 0301 	orr.w	r3, r3, #1
 800bd28:	b2da      	uxtb	r2, r3
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);

    if (netif->flags & NETIF_FLAG_LINK_UP) {
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd36:	f003 0304 	and.w	r3, r3, #4
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <netif_set_up+0x3e>
      netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4|NETIF_REPORT_TYPE_IPV6);
 800bd3e:	2103      	movs	r1, #3
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f804 	bl	800bd4e <netif_issue_reports>
    }
  }
}
 800bd46:	bf00      	nop
 800bd48:	3708      	adds	r7, #8
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bd80      	pop	{r7, pc}

0800bd4e <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif* netif, u8_t report_type)
{
 800bd4e:	b580      	push	{r7, lr}
 800bd50:	b082      	sub	sp, #8
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	460b      	mov	r3, r1
 800bd58:	70fb      	strb	r3, [r7, #3]
#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd5a:	78fb      	ldrb	r3, [r7, #3]
 800bd5c:	f003 0301 	and.w	r3, r3, #1
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d011      	beq.n	800bd88 <netif_issue_reports+0x3a>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	3304      	adds	r3, #4
 800bd68:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <netif_issue_reports+0x3a>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd74:	f003 0308 	and.w	r3, r3, #8
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d005      	beq.n	800bd88 <netif_issue_reports+0x3a>
      etharp_gratuitous(netif);
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	3304      	adds	r3, #4
 800bd80:	4619      	mov	r1, r3
 800bd82:	6878      	ldr	r0, [r7, #4]
 800bd84:	f7fe f87c 	bl	8009e80 <etharp_request>
    /* Send Router Solicitation messages. */
    netif->rs_count = LWIP_ND6_MAX_MULTICAST_SOLICIT;
#endif /* LWIP_IPV6_SEND_ROUTER_SOLICIT */
  }
#endif /* LWIP_IPV6 */
}
 800bd88:	bf00      	nop
 800bd8a:	3708      	adds	r7, #8
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b082      	sub	sp, #8
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  if (netif->flags & NETIF_FLAG_UP) {
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bd9e:	f003 0301 	and.w	r3, r3, #1
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d012      	beq.n	800bdcc <netif_set_down+0x3c>
    netif->flags &= ~NETIF_FLAG_UP;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bdac:	f023 0301 	bic.w	r3, r3, #1
 800bdb0:	b2da      	uxtb	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 800bdbe:	f003 0308 	and.w	r3, r3, #8
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d002      	beq.n	800bdcc <netif_set_down+0x3c>
      etharp_cleanup_netif(netif);
 800bdc6:	6878      	ldr	r0, [r7, #4]
 800bdc8:	f7fd fc20 	bl	800960c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800bdcc:	bf00      	nop
 800bdce:	3708      	adds	r7, #8
 800bdd0:	46bd      	mov	sp, r7
 800bdd2:	bd80      	pop	{r7, pc}

0800bdd4 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bdd4:	b580      	push	{r7, lr}
 800bdd6:	b082      	sub	sp, #8
 800bdd8:	af00      	add	r7, sp, #0
  struct tcp_pcb* pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bdda:	f006 ffb5 	bl	8012d48 <sys_arch_protect>
 800bdde:	6038      	str	r0, [r7, #0]
 800bde0:	4b0f      	ldr	r3, [pc, #60]	; (800be20 <pbuf_free_ooseq+0x4c>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	6838      	ldr	r0, [r7, #0]
 800bde8:	f006 ffbc 	bl	8012d64 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bdec:	4b0d      	ldr	r3, [pc, #52]	; (800be24 <pbuf_free_ooseq+0x50>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	607b      	str	r3, [r7, #4]
 800bdf2:	e00f      	b.n	800be14 <pbuf_free_ooseq+0x40>
    if (NULL != pcb->ooseq) {
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d008      	beq.n	800be0e <pbuf_free_ooseq+0x3a>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_segs_free(pcb->ooseq);
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be00:	4618      	mov	r0, r3
 800be02:	f001 fefc 	bl	800dbfe <tcp_segs_free>
      pcb->ooseq = NULL;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	2200      	movs	r2, #0
 800be0a:	671a      	str	r2, [r3, #112]	; 0x70
      return;
 800be0c:	e005      	b.n	800be1a <pbuf_free_ooseq+0x46>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	68db      	ldr	r3, [r3, #12]
 800be12:	607b      	str	r3, [r7, #4]
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d1ec      	bne.n	800bdf4 <pbuf_free_ooseq+0x20>
    }
  }
}
 800be1a:	3708      	adds	r7, #8
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}
 800be20:	2000792c 	.word	0x2000792c
 800be24:	20007934 	.word	0x20007934

0800be28 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b082      	sub	sp, #8
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800be30:	f7ff ffd0 	bl	800bdd4 <pbuf_free_ooseq>
}
 800be34:	bf00      	nop
 800be36:	3708      	adds	r7, #8
 800be38:	46bd      	mov	sp, r7
 800be3a:	bd80      	pop	{r7, pc}

0800be3c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800be42:	f006 ff81 	bl	8012d48 <sys_arch_protect>
 800be46:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800be48:	4b10      	ldr	r3, [pc, #64]	; (800be8c <pbuf_pool_is_empty+0x50>)
 800be4a:	781b      	ldrb	r3, [r3, #0]
 800be4c:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800be4e:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <pbuf_pool_is_empty+0x50>)
 800be50:	2201      	movs	r2, #1
 800be52:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800be54:	6878      	ldr	r0, [r7, #4]
 800be56:	f006 ff85 	bl	8012d64 <sys_arch_unprotect>

  if (!queued) {
 800be5a:	78fb      	ldrb	r3, [r7, #3]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d110      	bne.n	800be82 <pbuf_pool_is_empty+0x46>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800be60:	2200      	movs	r2, #0
 800be62:	2100      	movs	r1, #0
 800be64:	480a      	ldr	r0, [pc, #40]	; (800be90 <pbuf_pool_is_empty+0x54>)
 800be66:	f7fd f81f 	bl	8008ea8 <tcpip_callback_with_block>
 800be6a:	4603      	mov	r3, r0
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <pbuf_pool_is_empty+0x46>
 800be70:	f006 ff6a 	bl	8012d48 <sys_arch_protect>
 800be74:	6078      	str	r0, [r7, #4]
 800be76:	4b05      	ldr	r3, [pc, #20]	; (800be8c <pbuf_pool_is_empty+0x50>)
 800be78:	2200      	movs	r2, #0
 800be7a:	701a      	strb	r2, [r3, #0]
 800be7c:	6878      	ldr	r0, [r7, #4]
 800be7e:	f006 ff71 	bl	8012d64 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800be82:	bf00      	nop
 800be84:	3708      	adds	r7, #8
 800be86:	46bd      	mov	sp, r7
 800be88:	bd80      	pop	{r7, pc}
 800be8a:	bf00      	nop
 800be8c:	2000792c 	.word	0x2000792c
 800be90:	0800be29 	.word	0x0800be29

0800be94 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800be94:	b580      	push	{r7, lr}
 800be96:	b088      	sub	sp, #32
 800be98:	af00      	add	r7, sp, #0
 800be9a:	4603      	mov	r3, r0
 800be9c:	71fb      	strb	r3, [r7, #7]
 800be9e:	460b      	mov	r3, r1
 800bea0:	80bb      	strh	r3, [r7, #4]
 800bea2:	4613      	mov	r3, r2
 800bea4:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  s32_t rem_len; /* remaining length */
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (layer) {
 800bea6:	79fb      	ldrb	r3, [r7, #7]
 800bea8:	2b04      	cmp	r3, #4
 800beaa:	d81c      	bhi.n	800bee6 <pbuf_alloc+0x52>
 800beac:	a201      	add	r2, pc, #4	; (adr r2, 800beb4 <pbuf_alloc+0x20>)
 800beae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beb2:	bf00      	nop
 800beb4:	0800bec9 	.word	0x0800bec9
 800beb8:	0800becf 	.word	0x0800becf
 800bebc:	0800bed5 	.word	0x0800bed5
 800bec0:	0800bedb 	.word	0x0800bedb
 800bec4:	0800bee1 	.word	0x0800bee1
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800bec8:	2336      	movs	r3, #54	; 0x36
 800beca:	82fb      	strh	r3, [r7, #22]
    break;
 800becc:	e014      	b.n	800bef8 <pbuf_alloc+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800bece:	2322      	movs	r3, #34	; 0x22
 800bed0:	82fb      	strh	r3, [r7, #22]
    break;
 800bed2:	e011      	b.n	800bef8 <pbuf_alloc+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800bed4:	230e      	movs	r3, #14
 800bed6:	82fb      	strh	r3, [r7, #22]
    break;
 800bed8:	e00e      	b.n	800bef8 <pbuf_alloc+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800beda:	2300      	movs	r3, #0
 800bedc:	82fb      	strh	r3, [r7, #22]
    break;
 800bede:	e00b      	b.n	800bef8 <pbuf_alloc+0x64>
  case PBUF_RAW:
    /* no offset (e.g. RX buffers or chain successors) */
    offset = 0;
 800bee0:	2300      	movs	r3, #0
 800bee2:	82fb      	strh	r3, [r7, #22]
    break;
 800bee4:	e008      	b.n	800bef8 <pbuf_alloc+0x64>
  default:
    LWIP_ASSERT("pbuf_alloc: bad pbuf layer", 0);
 800bee6:	4ba5      	ldr	r3, [pc, #660]	; (800c17c <pbuf_alloc+0x2e8>)
 800bee8:	f44f 728b 	mov.w	r2, #278	; 0x116
 800beec:	49a4      	ldr	r1, [pc, #656]	; (800c180 <pbuf_alloc+0x2ec>)
 800beee:	48a5      	ldr	r0, [pc, #660]	; (800c184 <pbuf_alloc+0x2f0>)
 800bef0:	f009 ff70 	bl	8015dd4 <iprintf>
    return NULL;
 800bef4:	2300      	movs	r3, #0
 800bef6:	e15d      	b.n	800c1b4 <pbuf_alloc+0x320>
  }

  switch (type) {
 800bef8:	79bb      	ldrb	r3, [r7, #6]
 800befa:	2b03      	cmp	r3, #3
 800befc:	f200 8134 	bhi.w	800c168 <pbuf_alloc+0x2d4>
 800bf00:	a201      	add	r2, pc, #4	; (adr r2, 800bf08 <pbuf_alloc+0x74>)
 800bf02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf06:	bf00      	nop
 800bf08:	0800c0a9 	.word	0x0800c0a9
 800bf0c:	0800c135 	.word	0x0800c135
 800bf10:	0800c135 	.word	0x0800c135
 800bf14:	0800bf19 	.word	0x0800bf19
  case PBUF_POOL:
    /* allocate head of pbuf chain into p */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bf18:	200c      	movs	r0, #12
 800bf1a:	f7ff fd81 	bl	800ba20 <memp_malloc>
 800bf1e:	61f8      	str	r0, [r7, #28]
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc: allocated pbuf %p\n", (void *)p));
    if (p == NULL) {
 800bf20:	69fb      	ldr	r3, [r7, #28]
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d103      	bne.n	800bf2e <pbuf_alloc+0x9a>
      PBUF_POOL_IS_EMPTY();
 800bf26:	f7ff ff89 	bl	800be3c <pbuf_pool_is_empty>
      return NULL;
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	e142      	b.n	800c1b4 <pbuf_alloc+0x320>
    }
    p->type = type;
 800bf2e:	69fb      	ldr	r3, [r7, #28]
 800bf30:	79ba      	ldrb	r2, [r7, #6]
 800bf32:	731a      	strb	r2, [r3, #12]
    p->next = NULL;
 800bf34:	69fb      	ldr	r3, [r7, #28]
 800bf36:	2200      	movs	r2, #0
 800bf38:	601a      	str	r2, [r3, #0]

    /* make the payload pointer point 'offset' bytes into pbuf data memory */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + (SIZEOF_STRUCT_PBUF + offset)));
 800bf3a:	8afb      	ldrh	r3, [r7, #22]
 800bf3c:	3310      	adds	r3, #16
 800bf3e:	69fa      	ldr	r2, [r7, #28]
 800bf40:	4413      	add	r3, r2
 800bf42:	3303      	adds	r3, #3
 800bf44:	f023 0303 	bic.w	r3, r3, #3
 800bf48:	461a      	mov	r2, r3
 800bf4a:	69fb      	ldr	r3, [r7, #28]
 800bf4c:	605a      	str	r2, [r3, #4]
    LWIP_ASSERT("pbuf_alloc: pbuf p->payload properly aligned",
 800bf4e:	69fb      	ldr	r3, [r7, #28]
 800bf50:	685b      	ldr	r3, [r3, #4]
 800bf52:	f003 0303 	and.w	r3, r3, #3
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d006      	beq.n	800bf68 <pbuf_alloc+0xd4>
 800bf5a:	4b88      	ldr	r3, [pc, #544]	; (800c17c <pbuf_alloc+0x2e8>)
 800bf5c:	f240 1229 	movw	r2, #297	; 0x129
 800bf60:	4989      	ldr	r1, [pc, #548]	; (800c188 <pbuf_alloc+0x2f4>)
 800bf62:	4888      	ldr	r0, [pc, #544]	; (800c184 <pbuf_alloc+0x2f0>)
 800bf64:	f009 ff36 	bl	8015dd4 <iprintf>
            ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    /* the total length of the pbuf chain is the requested size */
    p->tot_len = length;
 800bf68:	69fb      	ldr	r3, [r7, #28]
 800bf6a:	88ba      	ldrh	r2, [r7, #4]
 800bf6c:	811a      	strh	r2, [r3, #8]
    /* set the length of the first pbuf in the chain */
    p->len = LWIP_MIN(length, PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset));
 800bf6e:	8afb      	ldrh	r3, [r7, #22]
 800bf70:	3303      	adds	r3, #3
 800bf72:	f023 0303 	bic.w	r3, r3, #3
 800bf76:	f5c3 7214 	rsb	r2, r3, #592	; 0x250
 800bf7a:	88bb      	ldrh	r3, [r7, #4]
 800bf7c:	4293      	cmp	r3, r2
 800bf7e:	bf28      	it	cs
 800bf80:	4613      	movcs	r3, r2
 800bf82:	b29a      	uxth	r2, r3
 800bf84:	69fb      	ldr	r3, [r7, #28]
 800bf86:	815a      	strh	r2, [r3, #10]
    LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800bf88:	69fb      	ldr	r3, [r7, #28]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	69fa      	ldr	r2, [r7, #28]
 800bf8e:	8952      	ldrh	r2, [r2, #10]
 800bf90:	441a      	add	r2, r3
 800bf92:	69fb      	ldr	r3, [r7, #28]
 800bf94:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800bf98:	429a      	cmp	r2, r3
 800bf9a:	d906      	bls.n	800bfaa <pbuf_alloc+0x116>
 800bf9c:	4b77      	ldr	r3, [pc, #476]	; (800c17c <pbuf_alloc+0x2e8>)
 800bf9e:	f44f 7298 	mov.w	r2, #304	; 0x130
 800bfa2:	497a      	ldr	r1, [pc, #488]	; (800c18c <pbuf_alloc+0x2f8>)
 800bfa4:	4877      	ldr	r0, [pc, #476]	; (800c184 <pbuf_alloc+0x2f0>)
 800bfa6:	f009 ff15 	bl	8015dd4 <iprintf>
                ((u8_t*)p->payload + p->len <=
                 (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
    LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bfaa:	8afb      	ldrh	r3, [r7, #22]
 800bfac:	3303      	adds	r3, #3
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bfb6:	d106      	bne.n	800bfc6 <pbuf_alloc+0x132>
 800bfb8:	4b70      	ldr	r3, [pc, #448]	; (800c17c <pbuf_alloc+0x2e8>)
 800bfba:	f44f 7299 	mov.w	r2, #306	; 0x132
 800bfbe:	4974      	ldr	r1, [pc, #464]	; (800c190 <pbuf_alloc+0x2fc>)
 800bfc0:	4870      	ldr	r0, [pc, #448]	; (800c184 <pbuf_alloc+0x2f0>)
 800bfc2:	f009 ff07 	bl	8015dd4 <iprintf>
      (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
    /* set reference count (needed here in case we fail) */
    p->ref = 1;
 800bfc6:	69fb      	ldr	r3, [r7, #28]
 800bfc8:	2201      	movs	r2, #1
 800bfca:	81da      	strh	r2, [r3, #14]

    /* now allocate the tail of the pbuf chain */

    /* remember first pbuf for linkage in next iteration */
    r = p;
 800bfcc:	69fb      	ldr	r3, [r7, #28]
 800bfce:	61bb      	str	r3, [r7, #24]
    /* remaining length to be allocated */
    rem_len = length - p->len;
 800bfd0:	88bb      	ldrh	r3, [r7, #4]
 800bfd2:	69fa      	ldr	r2, [r7, #28]
 800bfd4:	8952      	ldrh	r2, [r2, #10]
 800bfd6:	1a9b      	subs	r3, r3, r2
 800bfd8:	613b      	str	r3, [r7, #16]
    /* any remaining pbufs to be allocated? */
    while (rem_len > 0) {
 800bfda:	e061      	b.n	800c0a0 <pbuf_alloc+0x20c>
      q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bfdc:	200c      	movs	r0, #12
 800bfde:	f7ff fd1f 	bl	800ba20 <memp_malloc>
 800bfe2:	60f8      	str	r0, [r7, #12]
      if (q == NULL) {
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d106      	bne.n	800bff8 <pbuf_alloc+0x164>
        PBUF_POOL_IS_EMPTY();
 800bfea:	f7ff ff27 	bl	800be3c <pbuf_pool_is_empty>
        /* free chain so far allocated */
        pbuf_free(p);
 800bfee:	69f8      	ldr	r0, [r7, #28]
 800bff0:	f000 fac2 	bl	800c578 <pbuf_free>
        /* bail out unsuccessfully */
        return NULL;
 800bff4:	2300      	movs	r3, #0
 800bff6:	e0dd      	b.n	800c1b4 <pbuf_alloc+0x320>
      }
      q->type = type;
 800bff8:	68fb      	ldr	r3, [r7, #12]
 800bffa:	79ba      	ldrb	r2, [r7, #6]
 800bffc:	731a      	strb	r2, [r3, #12]
      q->flags = 0;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	2200      	movs	r2, #0
 800c002:	735a      	strb	r2, [r3, #13]
      q->next = NULL;
 800c004:	68fb      	ldr	r3, [r7, #12]
 800c006:	2200      	movs	r2, #0
 800c008:	601a      	str	r2, [r3, #0]
      /* make previous pbuf point to this pbuf */
      r->next = q;
 800c00a:	69bb      	ldr	r3, [r7, #24]
 800c00c:	68fa      	ldr	r2, [r7, #12]
 800c00e:	601a      	str	r2, [r3, #0]
      /* set total length of this pbuf and next in chain */
      LWIP_ASSERT("rem_len < max_u16_t", rem_len < 0xffff);
 800c010:	693b      	ldr	r3, [r7, #16]
 800c012:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c016:	4293      	cmp	r3, r2
 800c018:	dd06      	ble.n	800c028 <pbuf_alloc+0x194>
 800c01a:	4b58      	ldr	r3, [pc, #352]	; (800c17c <pbuf_alloc+0x2e8>)
 800c01c:	f44f 72a6 	mov.w	r2, #332	; 0x14c
 800c020:	495c      	ldr	r1, [pc, #368]	; (800c194 <pbuf_alloc+0x300>)
 800c022:	4858      	ldr	r0, [pc, #352]	; (800c184 <pbuf_alloc+0x2f0>)
 800c024:	f009 fed6 	bl	8015dd4 <iprintf>
      q->tot_len = (u16_t)rem_len;
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	b29a      	uxth	r2, r3
 800c02c:	68fb      	ldr	r3, [r7, #12]
 800c02e:	811a      	strh	r2, [r3, #8]
      /* this pbuf length is pool size, unless smaller sized tail */
      q->len = LWIP_MIN((u16_t)rem_len, PBUF_POOL_BUFSIZE_ALIGNED);
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	b29b      	uxth	r3, r3
 800c034:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800c038:	bf28      	it	cs
 800c03a:	f44f 7314 	movcs.w	r3, #592	; 0x250
 800c03e:	b29a      	uxth	r2, r3
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	815a      	strh	r2, [r3, #10]
      q->payload = (void *)((u8_t *)q + SIZEOF_STRUCT_PBUF);
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	f103 0210 	add.w	r2, r3, #16
 800c04a:	68fb      	ldr	r3, [r7, #12]
 800c04c:	605a      	str	r2, [r3, #4]
      LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	f003 0303 	and.w	r3, r3, #3
 800c056:	2b00      	cmp	r3, #0
 800c058:	d006      	beq.n	800c068 <pbuf_alloc+0x1d4>
 800c05a:	4b48      	ldr	r3, [pc, #288]	; (800c17c <pbuf_alloc+0x2e8>)
 800c05c:	f44f 72a9 	mov.w	r2, #338	; 0x152
 800c060:	494d      	ldr	r1, [pc, #308]	; (800c198 <pbuf_alloc+0x304>)
 800c062:	4848      	ldr	r0, [pc, #288]	; (800c184 <pbuf_alloc+0x2f0>)
 800c064:	f009 feb6 	bl	8015dd4 <iprintf>
              ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
      LWIP_ASSERT("check p->payload + p->len does not overflow pbuf",
 800c068:	69fb      	ldr	r3, [r7, #28]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	69fa      	ldr	r2, [r7, #28]
 800c06e:	8952      	ldrh	r2, [r2, #10]
 800c070:	441a      	add	r2, r3
 800c072:	69fb      	ldr	r3, [r7, #28]
 800c074:	f503 7318 	add.w	r3, r3, #608	; 0x260
 800c078:	429a      	cmp	r2, r3
 800c07a:	d906      	bls.n	800c08a <pbuf_alloc+0x1f6>
 800c07c:	4b3f      	ldr	r3, [pc, #252]	; (800c17c <pbuf_alloc+0x2e8>)
 800c07e:	f240 1255 	movw	r2, #341	; 0x155
 800c082:	4942      	ldr	r1, [pc, #264]	; (800c18c <pbuf_alloc+0x2f8>)
 800c084:	483f      	ldr	r0, [pc, #252]	; (800c184 <pbuf_alloc+0x2f0>)
 800c086:	f009 fea5 	bl	8015dd4 <iprintf>
                  ((u8_t*)p->payload + p->len <=
                   (u8_t*)p + SIZEOF_STRUCT_PBUF + PBUF_POOL_BUFSIZE_ALIGNED));
      q->ref = 1;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2201      	movs	r2, #1
 800c08e:	81da      	strh	r2, [r3, #14]
      /* calculate remaining length to be allocated */
      rem_len -= q->len;
 800c090:	68fb      	ldr	r3, [r7, #12]
 800c092:	895b      	ldrh	r3, [r3, #10]
 800c094:	461a      	mov	r2, r3
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	1a9b      	subs	r3, r3, r2
 800c09a:	613b      	str	r3, [r7, #16]
      /* remember this pbuf for linkage in next iteration */
      r = q;
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	61bb      	str	r3, [r7, #24]
    while (rem_len > 0) {
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	dc9a      	bgt.n	800bfdc <pbuf_alloc+0x148>
    }
    /* end of chain */
    /*r->next = NULL;*/

    break;
 800c0a6:	e07e      	b.n	800c1a6 <pbuf_alloc+0x312>
  case PBUF_RAM:
    {
      mem_size_t alloc_len = LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF + offset) + LWIP_MEM_ALIGN_SIZE(length);
 800c0a8:	8afb      	ldrh	r3, [r7, #22]
 800c0aa:	3313      	adds	r3, #19
 800c0ac:	b29b      	uxth	r3, r3
 800c0ae:	f023 0303 	bic.w	r3, r3, #3
 800c0b2:	b29a      	uxth	r2, r3
 800c0b4:	88bb      	ldrh	r3, [r7, #4]
 800c0b6:	3303      	adds	r3, #3
 800c0b8:	b29b      	uxth	r3, r3
 800c0ba:	f023 0303 	bic.w	r3, r3, #3
 800c0be:	b29b      	uxth	r3, r3
 800c0c0:	4413      	add	r3, r2
 800c0c2:	817b      	strh	r3, [r7, #10]
      
      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if (alloc_len < LWIP_MEM_ALIGN_SIZE(length)) {
 800c0c4:	897a      	ldrh	r2, [r7, #10]
 800c0c6:	88bb      	ldrh	r3, [r7, #4]
 800c0c8:	3303      	adds	r3, #3
 800c0ca:	f023 0303 	bic.w	r3, r3, #3
 800c0ce:	429a      	cmp	r2, r3
 800c0d0:	d201      	bcs.n	800c0d6 <pbuf_alloc+0x242>
        return NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	e06e      	b.n	800c1b4 <pbuf_alloc+0x320>
      }
    
      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf*)mem_malloc(alloc_len);
 800c0d6:	897b      	ldrh	r3, [r7, #10]
 800c0d8:	4618      	mov	r0, r3
 800c0da:	f7ff fb31 	bl	800b740 <mem_malloc>
 800c0de:	61f8      	str	r0, [r7, #28]
    }

    if (p == NULL) {
 800c0e0:	69fb      	ldr	r3, [r7, #28]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d101      	bne.n	800c0ea <pbuf_alloc+0x256>
      return NULL;
 800c0e6:	2300      	movs	r3, #0
 800c0e8:	e064      	b.n	800c1b4 <pbuf_alloc+0x320>
    }
    /* Set up internal structure of the pbuf. */
    p->payload = LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset));
 800c0ea:	8afb      	ldrh	r3, [r7, #22]
 800c0ec:	3310      	adds	r3, #16
 800c0ee:	69fa      	ldr	r2, [r7, #28]
 800c0f0:	4413      	add	r3, r2
 800c0f2:	3303      	adds	r3, #3
 800c0f4:	f023 0303 	bic.w	r3, r3, #3
 800c0f8:	461a      	mov	r2, r3
 800c0fa:	69fb      	ldr	r3, [r7, #28]
 800c0fc:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c0fe:	69fb      	ldr	r3, [r7, #28]
 800c100:	88ba      	ldrh	r2, [r7, #4]
 800c102:	811a      	strh	r2, [r3, #8]
 800c104:	69fb      	ldr	r3, [r7, #28]
 800c106:	891a      	ldrh	r2, [r3, #8]
 800c108:	69fb      	ldr	r3, [r7, #28]
 800c10a:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c10c:	69fb      	ldr	r3, [r7, #28]
 800c10e:	2200      	movs	r2, #0
 800c110:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c112:	69fb      	ldr	r3, [r7, #28]
 800c114:	79ba      	ldrb	r2, [r7, #6]
 800c116:	731a      	strb	r2, [r3, #12]

    LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800c118:	69fb      	ldr	r3, [r7, #28]
 800c11a:	685b      	ldr	r3, [r3, #4]
 800c11c:	f003 0303 	and.w	r3, r3, #3
 800c120:	2b00      	cmp	r3, #0
 800c122:	d03f      	beq.n	800c1a4 <pbuf_alloc+0x310>
 800c124:	4b15      	ldr	r3, [pc, #84]	; (800c17c <pbuf_alloc+0x2e8>)
 800c126:	f240 1277 	movw	r2, #375	; 0x177
 800c12a:	491c      	ldr	r1, [pc, #112]	; (800c19c <pbuf_alloc+0x308>)
 800c12c:	4815      	ldr	r0, [pc, #84]	; (800c184 <pbuf_alloc+0x2f0>)
 800c12e:	f009 fe51 	bl	8015dd4 <iprintf>
           ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
    break;
 800c132:	e037      	b.n	800c1a4 <pbuf_alloc+0x310>
  /* pbuf references existing (non-volatile static constant) ROM payload? */
  case PBUF_ROM:
  /* pbuf references existing (externally allocated) RAM payload? */
  case PBUF_REF:
    /* only allocate memory for the pbuf structure */
    p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800c134:	200b      	movs	r0, #11
 800c136:	f7ff fc73 	bl	800ba20 <memp_malloc>
 800c13a:	61f8      	str	r0, [r7, #28]
    if (p == NULL) {
 800c13c:	69fb      	ldr	r3, [r7, #28]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d101      	bne.n	800c146 <pbuf_alloc+0x2b2>
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("pbuf_alloc: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                  (type == PBUF_ROM) ? "ROM" : "REF"));
      return NULL;
 800c142:	2300      	movs	r3, #0
 800c144:	e036      	b.n	800c1b4 <pbuf_alloc+0x320>
    }
    /* caller must set this field properly, afterwards */
    p->payload = NULL;
 800c146:	69fb      	ldr	r3, [r7, #28]
 800c148:	2200      	movs	r2, #0
 800c14a:	605a      	str	r2, [r3, #4]
    p->len = p->tot_len = length;
 800c14c:	69fb      	ldr	r3, [r7, #28]
 800c14e:	88ba      	ldrh	r2, [r7, #4]
 800c150:	811a      	strh	r2, [r3, #8]
 800c152:	69fb      	ldr	r3, [r7, #28]
 800c154:	891a      	ldrh	r2, [r3, #8]
 800c156:	69fb      	ldr	r3, [r7, #28]
 800c158:	815a      	strh	r2, [r3, #10]
    p->next = NULL;
 800c15a:	69fb      	ldr	r3, [r7, #28]
 800c15c:	2200      	movs	r2, #0
 800c15e:	601a      	str	r2, [r3, #0]
    p->type = type;
 800c160:	69fb      	ldr	r3, [r7, #28]
 800c162:	79ba      	ldrb	r2, [r7, #6]
 800c164:	731a      	strb	r2, [r3, #12]
    break;
 800c166:	e01e      	b.n	800c1a6 <pbuf_alloc+0x312>
  default:
    LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800c168:	4b04      	ldr	r3, [pc, #16]	; (800c17c <pbuf_alloc+0x2e8>)
 800c16a:	f44f 72c6 	mov.w	r2, #396	; 0x18c
 800c16e:	490c      	ldr	r1, [pc, #48]	; (800c1a0 <pbuf_alloc+0x30c>)
 800c170:	4804      	ldr	r0, [pc, #16]	; (800c184 <pbuf_alloc+0x2f0>)
 800c172:	f009 fe2f 	bl	8015dd4 <iprintf>
    return NULL;
 800c176:	2300      	movs	r3, #0
 800c178:	e01c      	b.n	800c1b4 <pbuf_alloc+0x320>
 800c17a:	bf00      	nop
 800c17c:	08019044 	.word	0x08019044
 800c180:	08019074 	.word	0x08019074
 800c184:	08019090 	.word	0x08019090
 800c188:	080190b8 	.word	0x080190b8
 800c18c:	080190e8 	.word	0x080190e8
 800c190:	0801911c 	.word	0x0801911c
 800c194:	08019150 	.word	0x08019150
 800c198:	08019164 	.word	0x08019164
 800c19c:	08019194 	.word	0x08019194
 800c1a0:	080191c0 	.word	0x080191c0
    break;
 800c1a4:	bf00      	nop
  }
  /* set reference count */
  p->ref = 1;
 800c1a6:	69fb      	ldr	r3, [r7, #28]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	81da      	strh	r2, [r3, #14]
  /* set flags */
  p->flags = 0;
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	735a      	strb	r2, [r3, #13]
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800c1b2:	69fb      	ldr	r3, [r7, #28]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3720      	adds	r7, #32
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}

0800c1bc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf*
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800c1bc:	b580      	push	{r7, lr}
 800c1be:	b084      	sub	sp, #16
 800c1c0:	af00      	add	r7, sp, #0
 800c1c2:	603b      	str	r3, [r7, #0]
 800c1c4:	4603      	mov	r3, r0
 800c1c6:	71fb      	strb	r3, [r7, #7]
 800c1c8:	460b      	mov	r3, r1
 800c1ca:	80bb      	strh	r3, [r7, #4]
 800c1cc:	4613      	mov	r3, r2
 800c1ce:	71bb      	strb	r3, [r7, #6]
  u16_t offset;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  /* determine header offset */
  switch (l) {
 800c1d0:	79fb      	ldrb	r3, [r7, #7]
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d81b      	bhi.n	800c20e <pbuf_alloced_custom+0x52>
 800c1d6:	a201      	add	r2, pc, #4	; (adr r2, 800c1dc <pbuf_alloced_custom+0x20>)
 800c1d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1dc:	0800c1f1 	.word	0x0800c1f1
 800c1e0:	0800c1f7 	.word	0x0800c1f7
 800c1e4:	0800c1fd 	.word	0x0800c1fd
 800c1e8:	0800c203 	.word	0x0800c203
 800c1ec:	0800c209 	.word	0x0800c209
  case PBUF_TRANSPORT:
    /* add room for transport (often TCP) layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN + PBUF_TRANSPORT_HLEN;
 800c1f0:	2336      	movs	r3, #54	; 0x36
 800c1f2:	81fb      	strh	r3, [r7, #14]
    break;
 800c1f4:	e014      	b.n	800c220 <pbuf_alloced_custom+0x64>
  case PBUF_IP:
    /* add room for IP layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN + PBUF_IP_HLEN;
 800c1f6:	2322      	movs	r3, #34	; 0x22
 800c1f8:	81fb      	strh	r3, [r7, #14]
    break;
 800c1fa:	e011      	b.n	800c220 <pbuf_alloced_custom+0x64>
  case PBUF_LINK:
    /* add room for link layer header */
    offset = PBUF_LINK_ENCAPSULATION_HLEN + PBUF_LINK_HLEN;
 800c1fc:	230e      	movs	r3, #14
 800c1fe:	81fb      	strh	r3, [r7, #14]
    break;
 800c200:	e00e      	b.n	800c220 <pbuf_alloced_custom+0x64>
  case PBUF_RAW_TX:
    /* add room for encapsulating link layer headers (e.g. 802.11) */
    offset = PBUF_LINK_ENCAPSULATION_HLEN;
 800c202:	2300      	movs	r3, #0
 800c204:	81fb      	strh	r3, [r7, #14]
    break;
 800c206:	e00b      	b.n	800c220 <pbuf_alloced_custom+0x64>
  case PBUF_RAW:
    offset = 0;
 800c208:	2300      	movs	r3, #0
 800c20a:	81fb      	strh	r3, [r7, #14]
    break;
 800c20c:	e008      	b.n	800c220 <pbuf_alloced_custom+0x64>
  default:
    LWIP_ASSERT("pbuf_alloced_custom: bad pbuf layer", 0);
 800c20e:	4b1d      	ldr	r3, [pc, #116]	; (800c284 <pbuf_alloced_custom+0xc8>)
 800c210:	f240 12c5 	movw	r2, #453	; 0x1c5
 800c214:	491c      	ldr	r1, [pc, #112]	; (800c288 <pbuf_alloced_custom+0xcc>)
 800c216:	481d      	ldr	r0, [pc, #116]	; (800c28c <pbuf_alloced_custom+0xd0>)
 800c218:	f009 fddc 	bl	8015dd4 <iprintf>
    return NULL;
 800c21c:	2300      	movs	r3, #0
 800c21e:	e02d      	b.n	800c27c <pbuf_alloced_custom+0xc0>
  }

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800c220:	89fb      	ldrh	r3, [r7, #14]
 800c222:	3303      	adds	r3, #3
 800c224:	f023 0203 	bic.w	r2, r3, #3
 800c228:	88bb      	ldrh	r3, [r7, #4]
 800c22a:	441a      	add	r2, r3
 800c22c:	8bbb      	ldrh	r3, [r7, #28]
 800c22e:	429a      	cmp	r2, r3
 800c230:	d901      	bls.n	800c236 <pbuf_alloced_custom+0x7a>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800c232:	2300      	movs	r3, #0
 800c234:	e022      	b.n	800c27c <pbuf_alloced_custom+0xc0>
  }

  p->pbuf.next = NULL;
 800c236:	683b      	ldr	r3, [r7, #0]
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]
  if (payload_mem != NULL) {
 800c23c:	69bb      	ldr	r3, [r7, #24]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d008      	beq.n	800c254 <pbuf_alloced_custom+0x98>
    p->pbuf.payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800c242:	89fb      	ldrh	r3, [r7, #14]
 800c244:	3303      	adds	r3, #3
 800c246:	f023 0303 	bic.w	r3, r3, #3
 800c24a:	69ba      	ldr	r2, [r7, #24]
 800c24c:	441a      	add	r2, r3
 800c24e:	683b      	ldr	r3, [r7, #0]
 800c250:	605a      	str	r2, [r3, #4]
 800c252:	e002      	b.n	800c25a <pbuf_alloced_custom+0x9e>
  } else {
    p->pbuf.payload = NULL;
 800c254:	683b      	ldr	r3, [r7, #0]
 800c256:	2200      	movs	r2, #0
 800c258:	605a      	str	r2, [r3, #4]
  }
  p->pbuf.flags = PBUF_FLAG_IS_CUSTOM;
 800c25a:	683b      	ldr	r3, [r7, #0]
 800c25c:	2202      	movs	r2, #2
 800c25e:	735a      	strb	r2, [r3, #13]
  p->pbuf.len = p->pbuf.tot_len = length;
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	88ba      	ldrh	r2, [r7, #4]
 800c264:	811a      	strh	r2, [r3, #8]
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	891a      	ldrh	r2, [r3, #8]
 800c26a:	683b      	ldr	r3, [r7, #0]
 800c26c:	815a      	strh	r2, [r3, #10]
  p->pbuf.type = type;
 800c26e:	683b      	ldr	r3, [r7, #0]
 800c270:	79ba      	ldrb	r2, [r7, #6]
 800c272:	731a      	strb	r2, [r3, #12]
  p->pbuf.ref = 1;
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	2201      	movs	r2, #1
 800c278:	81da      	strh	r2, [r3, #14]
  return &p->pbuf;
 800c27a:	683b      	ldr	r3, [r7, #0]
}
 800c27c:	4618      	mov	r0, r3
 800c27e:	3710      	adds	r7, #16
 800c280:	46bd      	mov	sp, r7
 800c282:	bd80      	pop	{r7, pc}
 800c284:	08019044 	.word	0x08019044
 800c288:	080191dc 	.word	0x080191dc
 800c28c:	08019090 	.word	0x08019090

0800c290 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800c290:	b580      	push	{r7, lr}
 800c292:	b086      	sub	sp, #24
 800c294:	af00      	add	r7, sp, #0
 800c296:	6078      	str	r0, [r7, #4]
 800c298:	460b      	mov	r3, r1
 800c29a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  s32_t grow;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d106      	bne.n	800c2b0 <pbuf_realloc+0x20>
 800c2a2:	4b4b      	ldr	r3, [pc, #300]	; (800c3d0 <pbuf_realloc+0x140>)
 800c2a4:	f240 12f3 	movw	r2, #499	; 0x1f3
 800c2a8:	494a      	ldr	r1, [pc, #296]	; (800c3d4 <pbuf_realloc+0x144>)
 800c2aa:	484b      	ldr	r0, [pc, #300]	; (800c3d8 <pbuf_realloc+0x148>)
 800c2ac:	f009 fd92 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("pbuf_realloc: sane p->type", p->type == PBUF_POOL ||
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	7b1b      	ldrb	r3, [r3, #12]
 800c2b4:	2b03      	cmp	r3, #3
 800c2b6:	d012      	beq.n	800c2de <pbuf_realloc+0x4e>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	7b1b      	ldrb	r3, [r3, #12]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d00e      	beq.n	800c2de <pbuf_realloc+0x4e>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	7b1b      	ldrb	r3, [r3, #12]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00a      	beq.n	800c2de <pbuf_realloc+0x4e>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	7b1b      	ldrb	r3, [r3, #12]
 800c2cc:	2b02      	cmp	r3, #2
 800c2ce:	d006      	beq.n	800c2de <pbuf_realloc+0x4e>
 800c2d0:	4b3f      	ldr	r3, [pc, #252]	; (800c3d0 <pbuf_realloc+0x140>)
 800c2d2:	f240 12f7 	movw	r2, #503	; 0x1f7
 800c2d6:	4941      	ldr	r1, [pc, #260]	; (800c3dc <pbuf_realloc+0x14c>)
 800c2d8:	483f      	ldr	r0, [pc, #252]	; (800c3d8 <pbuf_realloc+0x148>)
 800c2da:	f009 fd7b 	bl	8015dd4 <iprintf>
              p->type == PBUF_ROM ||
              p->type == PBUF_RAM ||
              p->type == PBUF_REF);

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	891b      	ldrh	r3, [r3, #8]
 800c2e2:	887a      	ldrh	r2, [r7, #2]
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d26f      	bcs.n	800c3c8 <pbuf_realloc+0x138>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  grow = new_len - p->tot_len;
 800c2e8:	887b      	ldrh	r3, [r7, #2]
 800c2ea:	687a      	ldr	r2, [r7, #4]
 800c2ec:	8912      	ldrh	r2, [r2, #8]
 800c2ee:	1a9b      	subs	r3, r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800c2f2:	887b      	ldrh	r3, [r7, #2]
 800c2f4:	827b      	strh	r3, [r7, #18]
  q = p;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	617b      	str	r3, [r7, #20]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800c2fa:	e025      	b.n	800c348 <pbuf_realloc+0xb8>
    /* decrease remaining length by pbuf length */
    rem_len -= q->len;
 800c2fc:	697b      	ldr	r3, [r7, #20]
 800c2fe:	895b      	ldrh	r3, [r3, #10]
 800c300:	8a7a      	ldrh	r2, [r7, #18]
 800c302:	1ad3      	subs	r3, r2, r3
 800c304:	827b      	strh	r3, [r7, #18]
    /* decrease total length indicator */
    LWIP_ASSERT("grow < max_u16_t", grow < 0xffff);
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c30c:	4293      	cmp	r3, r2
 800c30e:	dd06      	ble.n	800c31e <pbuf_realloc+0x8e>
 800c310:	4b2f      	ldr	r3, [pc, #188]	; (800c3d0 <pbuf_realloc+0x140>)
 800c312:	f240 220b 	movw	r2, #523	; 0x20b
 800c316:	4932      	ldr	r1, [pc, #200]	; (800c3e0 <pbuf_realloc+0x150>)
 800c318:	482f      	ldr	r0, [pc, #188]	; (800c3d8 <pbuf_realloc+0x148>)
 800c31a:	f009 fd5b 	bl	8015dd4 <iprintf>
    q->tot_len += (u16_t)grow;
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	891a      	ldrh	r2, [r3, #8]
 800c322:	68fb      	ldr	r3, [r7, #12]
 800c324:	b29b      	uxth	r3, r3
 800c326:	4413      	add	r3, r2
 800c328:	b29a      	uxth	r2, r3
 800c32a:	697b      	ldr	r3, [r7, #20]
 800c32c:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	617b      	str	r3, [r7, #20]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d106      	bne.n	800c348 <pbuf_realloc+0xb8>
 800c33a:	4b25      	ldr	r3, [pc, #148]	; (800c3d0 <pbuf_realloc+0x140>)
 800c33c:	f240 220f 	movw	r2, #527	; 0x20f
 800c340:	4928      	ldr	r1, [pc, #160]	; (800c3e4 <pbuf_realloc+0x154>)
 800c342:	4825      	ldr	r0, [pc, #148]	; (800c3d8 <pbuf_realloc+0x148>)
 800c344:	f009 fd46 	bl	8015dd4 <iprintf>
  while (rem_len > q->len) {
 800c348:	697b      	ldr	r3, [r7, #20]
 800c34a:	895b      	ldrh	r3, [r3, #10]
 800c34c:	8a7a      	ldrh	r2, [r7, #18]
 800c34e:	429a      	cmp	r2, r3
 800c350:	d8d4      	bhi.n	800c2fc <pbuf_realloc+0x6c>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if ((q->type == PBUF_RAM) && (rem_len != q->len)
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	7b1b      	ldrb	r3, [r3, #12]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d122      	bne.n	800c3a0 <pbuf_realloc+0x110>
 800c35a:	697b      	ldr	r3, [r7, #20]
 800c35c:	895b      	ldrh	r3, [r3, #10]
 800c35e:	8a7a      	ldrh	r2, [r7, #18]
 800c360:	429a      	cmp	r2, r3
 800c362:	d01d      	beq.n	800c3a0 <pbuf_realloc+0x110>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800c364:	697b      	ldr	r3, [r7, #20]
 800c366:	7b5b      	ldrb	r3, [r3, #13]
 800c368:	f003 0302 	and.w	r3, r3, #2
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d117      	bne.n	800c3a0 <pbuf_realloc+0x110>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (u16_t)((u8_t *)q->payload - (u8_t *)q) + rem_len);
 800c370:	697b      	ldr	r3, [r7, #20]
 800c372:	685b      	ldr	r3, [r3, #4]
 800c374:	461a      	mov	r2, r3
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	1ad3      	subs	r3, r2, r3
 800c37a:	b29a      	uxth	r2, r3
 800c37c:	8a7b      	ldrh	r3, [r7, #18]
 800c37e:	4413      	add	r3, r2
 800c380:	b29b      	uxth	r3, r3
 800c382:	4619      	mov	r1, r3
 800c384:	6978      	ldr	r0, [r7, #20]
 800c386:	f7ff f8f1 	bl	800b56c <mem_trim>
 800c38a:	6178      	str	r0, [r7, #20]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800c38c:	697b      	ldr	r3, [r7, #20]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d106      	bne.n	800c3a0 <pbuf_realloc+0x110>
 800c392:	4b0f      	ldr	r3, [pc, #60]	; (800c3d0 <pbuf_realloc+0x140>)
 800c394:	f240 221d 	movw	r2, #541	; 0x21d
 800c398:	4913      	ldr	r1, [pc, #76]	; (800c3e8 <pbuf_realloc+0x158>)
 800c39a:	480f      	ldr	r0, [pc, #60]	; (800c3d8 <pbuf_realloc+0x148>)
 800c39c:	f009 fd1a 	bl	8015dd4 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800c3a0:	697b      	ldr	r3, [r7, #20]
 800c3a2:	8a7a      	ldrh	r2, [r7, #18]
 800c3a4:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800c3a6:	697b      	ldr	r3, [r7, #20]
 800c3a8:	895a      	ldrh	r2, [r3, #10]
 800c3aa:	697b      	ldr	r3, [r7, #20]
 800c3ac:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800c3ae:	697b      	ldr	r3, [r7, #20]
 800c3b0:	681b      	ldr	r3, [r3, #0]
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d004      	beq.n	800c3c0 <pbuf_realloc+0x130>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800c3b6:	697b      	ldr	r3, [r7, #20]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	4618      	mov	r0, r3
 800c3bc:	f000 f8dc 	bl	800c578 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	2200      	movs	r2, #0
 800c3c4:	601a      	str	r2, [r3, #0]
 800c3c6:	e000      	b.n	800c3ca <pbuf_realloc+0x13a>
    return;
 800c3c8:	bf00      	nop

}
 800c3ca:	3718      	adds	r7, #24
 800c3cc:	46bd      	mov	sp, r7
 800c3ce:	bd80      	pop	{r7, pc}
 800c3d0:	08019044 	.word	0x08019044
 800c3d4:	08019200 	.word	0x08019200
 800c3d8:	08019090 	.word	0x08019090
 800c3dc:	08019218 	.word	0x08019218
 800c3e0:	08019234 	.word	0x08019234
 800c3e4:	08019248 	.word	0x08019248
 800c3e8:	08019260 	.word	0x08019260

0800c3ec <pbuf_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c3ec:	b580      	push	{r7, lr}
 800c3ee:	b084      	sub	sp, #16
 800c3f0:	af00      	add	r7, sp, #0
 800c3f2:	6078      	str	r0, [r7, #4]
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	807b      	strh	r3, [r7, #2]
 800c3f8:	4613      	mov	r3, r2
 800c3fa:	707b      	strb	r3, [r7, #1]
  u16_t type;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d106      	bne.n	800c410 <pbuf_header_impl+0x24>
 800c402:	4b46      	ldr	r3, [pc, #280]	; (800c51c <pbuf_header_impl+0x130>)
 800c404:	f240 223f 	movw	r2, #575	; 0x23f
 800c408:	4945      	ldr	r1, [pc, #276]	; (800c520 <pbuf_header_impl+0x134>)
 800c40a:	4846      	ldr	r0, [pc, #280]	; (800c524 <pbuf_header_impl+0x138>)
 800c40c:	f009 fce2 	bl	8015dd4 <iprintf>
  if ((header_size_increment == 0) || (p == NULL)) {
 800c410:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c414:	2b00      	cmp	r3, #0
 800c416:	d002      	beq.n	800c41e <pbuf_header_impl+0x32>
 800c418:	687b      	ldr	r3, [r7, #4]
 800c41a:	2b00      	cmp	r3, #0
 800c41c:	d101      	bne.n	800c422 <pbuf_header_impl+0x36>
    return 0;
 800c41e:	2300      	movs	r3, #0
 800c420:	e078      	b.n	800c514 <pbuf_header_impl+0x128>
  }

  if (header_size_increment < 0) {
 800c422:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c426:	2b00      	cmp	r3, #0
 800c428:	da10      	bge.n	800c44c <pbuf_header_impl+0x60>
    increment_magnitude = (u16_t)-header_size_increment;
 800c42a:	887b      	ldrh	r3, [r7, #2]
 800c42c:	425b      	negs	r3, r3
 800c42e:	81fb      	strh	r3, [r7, #14]
    /* Check that we aren't going to move off the end of the pbuf */
    LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	895b      	ldrh	r3, [r3, #10]
 800c434:	89fa      	ldrh	r2, [r7, #14]
 800c436:	429a      	cmp	r2, r3
 800c438:	d90a      	bls.n	800c450 <pbuf_header_impl+0x64>
 800c43a:	4b38      	ldr	r3, [pc, #224]	; (800c51c <pbuf_header_impl+0x130>)
 800c43c:	f240 2247 	movw	r2, #583	; 0x247
 800c440:	4939      	ldr	r1, [pc, #228]	; (800c528 <pbuf_header_impl+0x13c>)
 800c442:	4838      	ldr	r0, [pc, #224]	; (800c524 <pbuf_header_impl+0x138>)
 800c444:	f009 fcc6 	bl	8015dd4 <iprintf>
 800c448:	2301      	movs	r3, #1
 800c44a:	e063      	b.n	800c514 <pbuf_header_impl+0x128>
  } else {
    increment_magnitude = (u16_t)header_size_increment;
 800c44c:	887b      	ldrh	r3, [r7, #2]
 800c44e:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("p->payload - increment_magnitude >= p + SIZEOF_STRUCT_PBUF",
                (u8_t *)p->payload - increment_magnitude >= (u8_t *)p + SIZEOF_STRUCT_PBUF);
#endif
  }

  type = p->type;
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	7b1b      	ldrb	r3, [r3, #12]
 800c454:	81bb      	strh	r3, [r7, #12]
  /* remember current payload pointer */
  payload = p->payload;
 800c456:	687b      	ldr	r3, [r7, #4]
 800c458:	685b      	ldr	r3, [r3, #4]
 800c45a:	60bb      	str	r3, [r7, #8]

  /* pbuf types containing payloads? */
  if (type == PBUF_RAM || type == PBUF_POOL) {
 800c45c:	89bb      	ldrh	r3, [r7, #12]
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d002      	beq.n	800c468 <pbuf_header_impl+0x7c>
 800c462:	89bb      	ldrh	r3, [r7, #12]
 800c464:	2b03      	cmp	r3, #3
 800c466:	d112      	bne.n	800c48e <pbuf_header_impl+0xa2>
    /* set new payload pointer */
    p->payload = (u8_t *)p->payload - header_size_increment;
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685a      	ldr	r2, [r3, #4]
 800c46c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c470:	425b      	negs	r3, r3
 800c472:	441a      	add	r2, r3
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	605a      	str	r2, [r3, #4]
    /* boundary check fails? */
    if ((u8_t *)p->payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	685a      	ldr	r2, [r3, #4]
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	3310      	adds	r3, #16
 800c480:	429a      	cmp	r2, r3
 800c482:	d238      	bcs.n	800c4f6 <pbuf_header_impl+0x10a>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
        ("pbuf_header: failed as %p < %p (not enough space for new header size)\n",
        (void *)p->payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* restore old payload pointer */
      p->payload = payload;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	68ba      	ldr	r2, [r7, #8]
 800c488:	605a      	str	r2, [r3, #4]
      /* bail out unsuccessfully */
      return 1;
 800c48a:	2301      	movs	r3, #1
 800c48c:	e042      	b.n	800c514 <pbuf_header_impl+0x128>
    }
  /* pbuf types referring to external payloads? */
  } else if (type == PBUF_REF || type == PBUF_ROM) {
 800c48e:	89bb      	ldrh	r3, [r7, #12]
 800c490:	2b02      	cmp	r3, #2
 800c492:	d002      	beq.n	800c49a <pbuf_header_impl+0xae>
 800c494:	89bb      	ldrh	r3, [r7, #12]
 800c496:	2b01      	cmp	r3, #1
 800c498:	d124      	bne.n	800c4e4 <pbuf_header_impl+0xf8>
    /* hide a header in the payload? */
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c49a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	da0d      	bge.n	800c4be <pbuf_header_impl+0xd2>
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	895b      	ldrh	r3, [r3, #10]
 800c4a6:	89fa      	ldrh	r2, [r7, #14]
 800c4a8:	429a      	cmp	r2, r3
 800c4aa:	d808      	bhi.n	800c4be <pbuf_header_impl+0xd2>
      /* increase payload pointer */
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	685a      	ldr	r2, [r3, #4]
 800c4b0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	441a      	add	r2, r3
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	605a      	str	r2, [r3, #4]
 800c4bc:	e011      	b.n	800c4e2 <pbuf_header_impl+0xf6>
    } else if ((header_size_increment > 0) && force) {
 800c4be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	dd0b      	ble.n	800c4de <pbuf_header_impl+0xf2>
 800c4c6:	787b      	ldrb	r3, [r7, #1]
 800c4c8:	2b00      	cmp	r3, #0
 800c4ca:	d008      	beq.n	800c4de <pbuf_header_impl+0xf2>
      p->payload = (u8_t *)p->payload - header_size_increment;
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	685a      	ldr	r2, [r3, #4]
 800c4d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c4d4:	425b      	negs	r3, r3
 800c4d6:	441a      	add	r2, r3
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	605a      	str	r2, [r3, #4]
 800c4dc:	e001      	b.n	800c4e2 <pbuf_header_impl+0xf6>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c4de:	2301      	movs	r3, #1
 800c4e0:	e018      	b.n	800c514 <pbuf_header_impl+0x128>
    if ((header_size_increment < 0) && (increment_magnitude <= p->len)) {
 800c4e2:	e008      	b.n	800c4f6 <pbuf_header_impl+0x10a>
    }
  } else {
    /* Unknown type */
    LWIP_ASSERT("bad pbuf type", 0);
 800c4e4:	4b0d      	ldr	r3, [pc, #52]	; (800c51c <pbuf_header_impl+0x130>)
 800c4e6:	f240 2277 	movw	r2, #631	; 0x277
 800c4ea:	4910      	ldr	r1, [pc, #64]	; (800c52c <pbuf_header_impl+0x140>)
 800c4ec:	480d      	ldr	r0, [pc, #52]	; (800c524 <pbuf_header_impl+0x138>)
 800c4ee:	f009 fc71 	bl	8015dd4 <iprintf>
    return 1;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e00e      	b.n	800c514 <pbuf_header_impl+0x128>
  }
  /* modify pbuf length fields */
  p->len += header_size_increment;
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	895a      	ldrh	r2, [r3, #10]
 800c4fa:	887b      	ldrh	r3, [r7, #2]
 800c4fc:	4413      	add	r3, r2
 800c4fe:	b29a      	uxth	r2, r3
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	815a      	strh	r2, [r3, #10]
  p->tot_len += header_size_increment;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	891a      	ldrh	r2, [r3, #8]
 800c508:	887b      	ldrh	r3, [r7, #2]
 800c50a:	4413      	add	r3, r2
 800c50c:	b29a      	uxth	r2, r3
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_header: old %p new %p (%"S16_F")\n",
    (void *)payload, (void *)p->payload, header_size_increment));

  return 0;
 800c512:	2300      	movs	r3, #0
}
 800c514:	4618      	mov	r0, r3
 800c516:	3710      	adds	r7, #16
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	08019044 	.word	0x08019044
 800c520:	0801927c 	.word	0x0801927c
 800c524:	08019090 	.word	0x08019090
 800c528:	08019288 	.word	0x08019288
 800c52c:	080192a8 	.word	0x080192a8

0800c530 <pbuf_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_header(struct pbuf *p, s16_t header_size_increment)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b082      	sub	sp, #8
 800c534:	af00      	add	r7, sp, #0
 800c536:	6078      	str	r0, [r7, #4]
 800c538:	460b      	mov	r3, r1
 800c53a:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 0);
 800c53c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c540:	2200      	movs	r2, #0
 800c542:	4619      	mov	r1, r3
 800c544:	6878      	ldr	r0, [r7, #4]
 800c546:	f7ff ff51 	bl	800c3ec <pbuf_header_impl>
 800c54a:	4603      	mov	r3, r0
}
 800c54c:	4618      	mov	r0, r3
 800c54e:	3708      	adds	r7, #8
 800c550:	46bd      	mov	sp, r7
 800c552:	bd80      	pop	{r7, pc}

0800c554 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c554:	b580      	push	{r7, lr}
 800c556:	b082      	sub	sp, #8
 800c558:	af00      	add	r7, sp, #0
 800c55a:	6078      	str	r0, [r7, #4]
 800c55c:	460b      	mov	r3, r1
 800c55e:	807b      	strh	r3, [r7, #2]
   return pbuf_header_impl(p, header_size_increment, 1);
 800c560:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c564:	2201      	movs	r2, #1
 800c566:	4619      	mov	r1, r3
 800c568:	6878      	ldr	r0, [r7, #4]
 800c56a:	f7ff ff3f 	bl	800c3ec <pbuf_header_impl>
 800c56e:	4603      	mov	r3, r0
}
 800c570:	4618      	mov	r0, r3
 800c572:	3708      	adds	r7, #8
 800c574:	46bd      	mov	sp, r7
 800c576:	bd80      	pop	{r7, pc}

0800c578 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b088      	sub	sp, #32
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
  u16_t type;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	2b00      	cmp	r3, #0
 800c584:	d10b      	bne.n	800c59e <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d106      	bne.n	800c59a <pbuf_free+0x22>
 800c58c:	4b41      	ldr	r3, [pc, #260]	; (800c694 <pbuf_free+0x11c>)
 800c58e:	f240 22d2 	movw	r2, #722	; 0x2d2
 800c592:	4941      	ldr	r1, [pc, #260]	; (800c698 <pbuf_free+0x120>)
 800c594:	4841      	ldr	r0, [pc, #260]	; (800c69c <pbuf_free+0x124>)
 800c596:	f009 fc1d 	bl	8015dd4 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
      ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c59a:	2300      	movs	r3, #0
 800c59c:	e076      	b.n	800c68c <pbuf_free+0x114>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  LWIP_ASSERT("pbuf_free: sane type",
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	7b1b      	ldrb	r3, [r3, #12]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d012      	beq.n	800c5cc <pbuf_free+0x54>
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	7b1b      	ldrb	r3, [r3, #12]
 800c5aa:	2b01      	cmp	r3, #1
 800c5ac:	d00e      	beq.n	800c5cc <pbuf_free+0x54>
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	7b1b      	ldrb	r3, [r3, #12]
 800c5b2:	2b02      	cmp	r3, #2
 800c5b4:	d00a      	beq.n	800c5cc <pbuf_free+0x54>
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	7b1b      	ldrb	r3, [r3, #12]
 800c5ba:	2b03      	cmp	r3, #3
 800c5bc:	d006      	beq.n	800c5cc <pbuf_free+0x54>
 800c5be:	4b35      	ldr	r3, [pc, #212]	; (800c694 <pbuf_free+0x11c>)
 800c5c0:	f240 22de 	movw	r2, #734	; 0x2de
 800c5c4:	4936      	ldr	r1, [pc, #216]	; (800c6a0 <pbuf_free+0x128>)
 800c5c6:	4835      	ldr	r0, [pc, #212]	; (800c69c <pbuf_free+0x124>)
 800c5c8:	f009 fc04 	bl	8015dd4 <iprintf>
    p->type == PBUF_RAM || p->type == PBUF_ROM ||
    p->type == PBUF_REF || p->type == PBUF_POOL);

  count = 0;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c5d0:	e058      	b.n	800c684 <pbuf_free+0x10c>
    u16_t ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c5d2:	f006 fbb9 	bl	8012d48 <sys_arch_protect>
 800c5d6:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c5d8:	687b      	ldr	r3, [r7, #4]
 800c5da:	89db      	ldrh	r3, [r3, #14]
 800c5dc:	2b00      	cmp	r3, #0
 800c5de:	d106      	bne.n	800c5ee <pbuf_free+0x76>
 800c5e0:	4b2c      	ldr	r3, [pc, #176]	; (800c694 <pbuf_free+0x11c>)
 800c5e2:	f240 22eb 	movw	r2, #747	; 0x2eb
 800c5e6:	492f      	ldr	r1, [pc, #188]	; (800c6a4 <pbuf_free+0x12c>)
 800c5e8:	482c      	ldr	r0, [pc, #176]	; (800c69c <pbuf_free+0x124>)
 800c5ea:	f009 fbf3 	bl	8015dd4 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	89db      	ldrh	r3, [r3, #14]
 800c5f2:	3b01      	subs	r3, #1
 800c5f4:	b29a      	uxth	r2, r3
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	81da      	strh	r2, [r3, #14]
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	89db      	ldrh	r3, [r3, #14]
 800c5fe:	82fb      	strh	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
 800c600:	69b8      	ldr	r0, [r7, #24]
 800c602:	f006 fbaf 	bl	8012d64 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c606:	8afb      	ldrh	r3, [r7, #22]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d139      	bne.n	800c680 <pbuf_free+0x108>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      type = p->type;
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	7b1b      	ldrb	r3, [r3, #12]
 800c616:	81fb      	strh	r3, [r7, #14]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	7b5b      	ldrb	r3, [r3, #13]
 800c61c:	f003 0302 	and.w	r3, r3, #2
 800c620:	2b00      	cmp	r3, #0
 800c622:	d011      	beq.n	800c648 <pbuf_free+0xd0>
        struct pbuf_custom *pc = (struct pbuf_custom*)p;
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c628:	68bb      	ldr	r3, [r7, #8]
 800c62a:	691b      	ldr	r3, [r3, #16]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d106      	bne.n	800c63e <pbuf_free+0xc6>
 800c630:	4b18      	ldr	r3, [pc, #96]	; (800c694 <pbuf_free+0x11c>)
 800c632:	f240 22f9 	movw	r2, #761	; 0x2f9
 800c636:	491c      	ldr	r1, [pc, #112]	; (800c6a8 <pbuf_free+0x130>)
 800c638:	4818      	ldr	r0, [pc, #96]	; (800c69c <pbuf_free+0x124>)
 800c63a:	f009 fbcb 	bl	8015dd4 <iprintf>
        pc->custom_free_function(p);
 800c63e:	68bb      	ldr	r3, [r7, #8]
 800c640:	691b      	ldr	r3, [r3, #16]
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	4798      	blx	r3
 800c646:	e015      	b.n	800c674 <pbuf_free+0xfc>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (type == PBUF_POOL) {
 800c648:	89fb      	ldrh	r3, [r7, #14]
 800c64a:	2b03      	cmp	r3, #3
 800c64c:	d104      	bne.n	800c658 <pbuf_free+0xe0>
          memp_free(MEMP_PBUF_POOL, p);
 800c64e:	6879      	ldr	r1, [r7, #4]
 800c650:	200c      	movs	r0, #12
 800c652:	f7ff fa37 	bl	800bac4 <memp_free>
 800c656:	e00d      	b.n	800c674 <pbuf_free+0xfc>
        /* is this a ROM or RAM referencing pbuf? */
        } else if (type == PBUF_ROM || type == PBUF_REF) {
 800c658:	89fb      	ldrh	r3, [r7, #14]
 800c65a:	2b01      	cmp	r3, #1
 800c65c:	d002      	beq.n	800c664 <pbuf_free+0xec>
 800c65e:	89fb      	ldrh	r3, [r7, #14]
 800c660:	2b02      	cmp	r3, #2
 800c662:	d104      	bne.n	800c66e <pbuf_free+0xf6>
          memp_free(MEMP_PBUF, p);
 800c664:	6879      	ldr	r1, [r7, #4]
 800c666:	200b      	movs	r0, #11
 800c668:	f7ff fa2c 	bl	800bac4 <memp_free>
 800c66c:	e002      	b.n	800c674 <pbuf_free+0xfc>
        /* type == PBUF_RAM */
        } else {
          mem_free(p);
 800c66e:	6878      	ldr	r0, [r7, #4]
 800c670:	f7fe ff0e 	bl	800b490 <mem_free>
        }
      }
      count++;
 800c674:	7ffb      	ldrb	r3, [r7, #31]
 800c676:	3301      	adds	r3, #1
 800c678:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	607b      	str	r3, [r7, #4]
 800c67e:	e001      	b.n	800c684 <pbuf_free+0x10c>
    /* p->ref > 0, this pbuf is still referenced to */
    /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, ref));
      /* stop walking through the chain */
      p = NULL;
 800c680:	2300      	movs	r3, #0
 800c682:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	2b00      	cmp	r3, #0
 800c688:	d1a3      	bne.n	800c5d2 <pbuf_free+0x5a>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c68a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c68c:	4618      	mov	r0, r3
 800c68e:	3720      	adds	r7, #32
 800c690:	46bd      	mov	sp, r7
 800c692:	bd80      	pop	{r7, pc}
 800c694:	08019044 	.word	0x08019044
 800c698:	0801927c 	.word	0x0801927c
 800c69c:	08019090 	.word	0x08019090
 800c6a0:	080192b8 	.word	0x080192b8
 800c6a4:	080192d0 	.word	0x080192d0
 800c6a8:	080192e8 	.word	0x080192e8

0800c6ac <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c6ac:	b480      	push	{r7}
 800c6ae:	b085      	sub	sp, #20
 800c6b0:	af00      	add	r7, sp, #0
 800c6b2:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c6b8:	e005      	b.n	800c6c6 <pbuf_clen+0x1a>
    ++len;
 800c6ba:	89fb      	ldrh	r3, [r7, #14]
 800c6bc:	3301      	adds	r3, #1
 800c6be:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d1f6      	bne.n	800c6ba <pbuf_clen+0xe>
  }
  return len;
 800c6cc:	89fb      	ldrh	r3, [r7, #14]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
	...

0800c6dc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c6dc:	b580      	push	{r7, lr}
 800c6de:	b084      	sub	sp, #16
 800c6e0:	af00      	add	r7, sp, #0
 800c6e2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	2b00      	cmp	r3, #0
 800c6e8:	d016      	beq.n	800c718 <pbuf_ref+0x3c>
    SYS_ARCH_INC(p->ref, 1);
 800c6ea:	f006 fb2d 	bl	8012d48 <sys_arch_protect>
 800c6ee:	60f8      	str	r0, [r7, #12]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	89db      	ldrh	r3, [r3, #14]
 800c6f4:	3301      	adds	r3, #1
 800c6f6:	b29a      	uxth	r2, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	81da      	strh	r2, [r3, #14]
 800c6fc:	68f8      	ldr	r0, [r7, #12]
 800c6fe:	f006 fb31 	bl	8012d64 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	89db      	ldrh	r3, [r3, #14]
 800c706:	2b00      	cmp	r3, #0
 800c708:	d106      	bne.n	800c718 <pbuf_ref+0x3c>
 800c70a:	4b05      	ldr	r3, [pc, #20]	; (800c720 <pbuf_ref+0x44>)
 800c70c:	f240 3239 	movw	r2, #825	; 0x339
 800c710:	4904      	ldr	r1, [pc, #16]	; (800c724 <pbuf_ref+0x48>)
 800c712:	4805      	ldr	r0, [pc, #20]	; (800c728 <pbuf_ref+0x4c>)
 800c714:	f009 fb5e 	bl	8015dd4 <iprintf>
  }
}
 800c718:	bf00      	nop
 800c71a:	3710      	adds	r7, #16
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}
 800c720:	08019044 	.word	0x08019044
 800c724:	0801930c 	.word	0x0801930c
 800c728:	08019090 	.word	0x08019090

0800c72c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c72c:	b580      	push	{r7, lr}
 800c72e:	b084      	sub	sp, #16
 800c730:	af00      	add	r7, sp, #0
 800c732:	6078      	str	r0, [r7, #4]
 800c734:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d002      	beq.n	800c742 <pbuf_cat+0x16>
 800c73c:	683b      	ldr	r3, [r7, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d107      	bne.n	800c752 <pbuf_cat+0x26>
 800c742:	4b20      	ldr	r3, [pc, #128]	; (800c7c4 <pbuf_cat+0x98>)
 800c744:	f240 324d 	movw	r2, #845	; 0x34d
 800c748:	491f      	ldr	r1, [pc, #124]	; (800c7c8 <pbuf_cat+0x9c>)
 800c74a:	4820      	ldr	r0, [pc, #128]	; (800c7cc <pbuf_cat+0xa0>)
 800c74c:	f009 fb42 	bl	8015dd4 <iprintf>
 800c750:	e034      	b.n	800c7bc <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	60fb      	str	r3, [r7, #12]
 800c756:	e00a      	b.n	800c76e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len += t->tot_len;
 800c758:	68fb      	ldr	r3, [r7, #12]
 800c75a:	891a      	ldrh	r2, [r3, #8]
 800c75c:	683b      	ldr	r3, [r7, #0]
 800c75e:	891b      	ldrh	r3, [r3, #8]
 800c760:	4413      	add	r3, r2
 800c762:	b29a      	uxth	r2, r3
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	60fb      	str	r3, [r7, #12]
 800c76e:	68fb      	ldr	r3, [r7, #12]
 800c770:	681b      	ldr	r3, [r3, #0]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d1f0      	bne.n	800c758 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c776:	68fb      	ldr	r3, [r7, #12]
 800c778:	891a      	ldrh	r2, [r3, #8]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	895b      	ldrh	r3, [r3, #10]
 800c77e:	429a      	cmp	r2, r3
 800c780:	d006      	beq.n	800c790 <pbuf_cat+0x64>
 800c782:	4b10      	ldr	r3, [pc, #64]	; (800c7c4 <pbuf_cat+0x98>)
 800c784:	f240 3255 	movw	r2, #853	; 0x355
 800c788:	4911      	ldr	r1, [pc, #68]	; (800c7d0 <pbuf_cat+0xa4>)
 800c78a:	4810      	ldr	r0, [pc, #64]	; (800c7cc <pbuf_cat+0xa0>)
 800c78c:	f009 fb22 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d006      	beq.n	800c7a6 <pbuf_cat+0x7a>
 800c798:	4b0a      	ldr	r3, [pc, #40]	; (800c7c4 <pbuf_cat+0x98>)
 800c79a:	f240 3256 	movw	r2, #854	; 0x356
 800c79e:	490d      	ldr	r1, [pc, #52]	; (800c7d4 <pbuf_cat+0xa8>)
 800c7a0:	480a      	ldr	r0, [pc, #40]	; (800c7cc <pbuf_cat+0xa0>)
 800c7a2:	f009 fb17 	bl	8015dd4 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len += t->tot_len;
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	891a      	ldrh	r2, [r3, #8]
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	891b      	ldrh	r3, [r3, #8]
 800c7ae:	4413      	add	r3, r2
 800c7b0:	b29a      	uxth	r2, r3
 800c7b2:	68fb      	ldr	r3, [r7, #12]
 800c7b4:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	683a      	ldr	r2, [r7, #0]
 800c7ba:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c7bc:	3710      	adds	r7, #16
 800c7be:	46bd      	mov	sp, r7
 800c7c0:	bd80      	pop	{r7, pc}
 800c7c2:	bf00      	nop
 800c7c4:	08019044 	.word	0x08019044
 800c7c8:	08019320 	.word	0x08019320
 800c7cc:	08019090 	.word	0x08019090
 800c7d0:	08019358 	.word	0x08019358
 800c7d4:	08019388 	.word	0x08019388

0800c7d8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]
  u16_t offset_to=0, offset_from=0, len;
 800c7e2:	2300      	movs	r3, #0
 800c7e4:	81fb      	strh	r3, [r7, #14]
 800c7e6:	2300      	movs	r3, #0
 800c7e8:	81bb      	strh	r3, [r7, #12]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
    (const void*)p_to, (const void*)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d008      	beq.n	800c802 <pbuf_copy+0x2a>
 800c7f0:	683b      	ldr	r3, [r7, #0]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	d005      	beq.n	800c802 <pbuf_copy+0x2a>
 800c7f6:	687b      	ldr	r3, [r7, #4]
 800c7f8:	891a      	ldrh	r2, [r3, #8]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	891b      	ldrh	r3, [r3, #8]
 800c7fe:	429a      	cmp	r2, r3
 800c800:	d209      	bcs.n	800c816 <pbuf_copy+0x3e>
 800c802:	4b54      	ldr	r3, [pc, #336]	; (800c954 <pbuf_copy+0x17c>)
 800c804:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c808:	4953      	ldr	r1, [pc, #332]	; (800c958 <pbuf_copy+0x180>)
 800c80a:	4854      	ldr	r0, [pc, #336]	; (800c95c <pbuf_copy+0x184>)
 800c80c:	f009 fae2 	bl	8015dd4 <iprintf>
 800c810:	f06f 030f 	mvn.w	r3, #15
 800c814:	e099      	b.n	800c94a <pbuf_copy+0x172>

  /* iterate through pbuf chain */
  do
  {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	461a      	mov	r2, r3
 800c81c:	89fb      	ldrh	r3, [r7, #14]
 800c81e:	1ad2      	subs	r2, r2, r3
 800c820:	683b      	ldr	r3, [r7, #0]
 800c822:	895b      	ldrh	r3, [r3, #10]
 800c824:	4619      	mov	r1, r3
 800c826:	89bb      	ldrh	r3, [r7, #12]
 800c828:	1acb      	subs	r3, r1, r3
 800c82a:	429a      	cmp	r2, r3
 800c82c:	db05      	blt.n	800c83a <pbuf_copy+0x62>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	895a      	ldrh	r2, [r3, #10]
 800c832:	89bb      	ldrh	r3, [r7, #12]
 800c834:	1ad3      	subs	r3, r2, r3
 800c836:	817b      	strh	r3, [r7, #10]
 800c838:	e004      	b.n	800c844 <pbuf_copy+0x6c>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	895a      	ldrh	r2, [r3, #10]
 800c83e:	89fb      	ldrh	r3, [r7, #14]
 800c840:	1ad3      	subs	r3, r2, r3
 800c842:	817b      	strh	r3, [r7, #10]
    }
    MEMCPY((u8_t*)p_to->payload + offset_to, (u8_t*)p_from->payload + offset_from, len);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	685a      	ldr	r2, [r3, #4]
 800c848:	89fb      	ldrh	r3, [r7, #14]
 800c84a:	18d0      	adds	r0, r2, r3
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685a      	ldr	r2, [r3, #4]
 800c850:	89bb      	ldrh	r3, [r7, #12]
 800c852:	4413      	add	r3, r2
 800c854:	897a      	ldrh	r2, [r7, #10]
 800c856:	4619      	mov	r1, r3
 800c858:	f009 faa9 	bl	8015dae <memcpy>
    offset_to += len;
 800c85c:	89fa      	ldrh	r2, [r7, #14]
 800c85e:	897b      	ldrh	r3, [r7, #10]
 800c860:	4413      	add	r3, r2
 800c862:	81fb      	strh	r3, [r7, #14]
    offset_from += len;
 800c864:	89ba      	ldrh	r2, [r7, #12]
 800c866:	897b      	ldrh	r3, [r7, #10]
 800c868:	4413      	add	r3, r2
 800c86a:	81bb      	strh	r3, [r7, #12]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	895b      	ldrh	r3, [r3, #10]
 800c870:	89fa      	ldrh	r2, [r7, #14]
 800c872:	429a      	cmp	r2, r3
 800c874:	d906      	bls.n	800c884 <pbuf_copy+0xac>
 800c876:	4b37      	ldr	r3, [pc, #220]	; (800c954 <pbuf_copy+0x17c>)
 800c878:	f240 32cd 	movw	r2, #973	; 0x3cd
 800c87c:	4938      	ldr	r1, [pc, #224]	; (800c960 <pbuf_copy+0x188>)
 800c87e:	4837      	ldr	r0, [pc, #220]	; (800c95c <pbuf_copy+0x184>)
 800c880:	f009 faa8 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	895b      	ldrh	r3, [r3, #10]
 800c888:	89ba      	ldrh	r2, [r7, #12]
 800c88a:	429a      	cmp	r2, r3
 800c88c:	d906      	bls.n	800c89c <pbuf_copy+0xc4>
 800c88e:	4b31      	ldr	r3, [pc, #196]	; (800c954 <pbuf_copy+0x17c>)
 800c890:	f240 32ce 	movw	r2, #974	; 0x3ce
 800c894:	4933      	ldr	r1, [pc, #204]	; (800c964 <pbuf_copy+0x18c>)
 800c896:	4831      	ldr	r0, [pc, #196]	; (800c95c <pbuf_copy+0x184>)
 800c898:	f009 fa9c 	bl	8015dd4 <iprintf>
    if (offset_from >= p_from->len) {
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	895b      	ldrh	r3, [r3, #10]
 800c8a0:	89ba      	ldrh	r2, [r7, #12]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d304      	bcc.n	800c8b0 <pbuf_copy+0xd8>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	81bb      	strh	r3, [r7, #12]
      p_from = p_from->next;
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c8b0:	687b      	ldr	r3, [r7, #4]
 800c8b2:	895b      	ldrh	r3, [r3, #10]
 800c8b4:	89fa      	ldrh	r2, [r7, #14]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d114      	bne.n	800c8e4 <pbuf_copy+0x10c>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	81fb      	strh	r3, [r7, #14]
      p_to = p_to->next;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL) , return ERR_ARG;);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2b00      	cmp	r3, #0
 800c8c8:	d10c      	bne.n	800c8e4 <pbuf_copy+0x10c>
 800c8ca:	683b      	ldr	r3, [r7, #0]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	d009      	beq.n	800c8e4 <pbuf_copy+0x10c>
 800c8d0:	4b20      	ldr	r3, [pc, #128]	; (800c954 <pbuf_copy+0x17c>)
 800c8d2:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 800c8d6:	4924      	ldr	r1, [pc, #144]	; (800c968 <pbuf_copy+0x190>)
 800c8d8:	4820      	ldr	r0, [pc, #128]	; (800c95c <pbuf_copy+0x184>)
 800c8da:	f009 fa7b 	bl	8015dd4 <iprintf>
 800c8de:	f06f 030f 	mvn.w	r3, #15
 800c8e2:	e032      	b.n	800c94a <pbuf_copy+0x172>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c8e4:	683b      	ldr	r3, [r7, #0]
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d013      	beq.n	800c912 <pbuf_copy+0x13a>
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	895a      	ldrh	r2, [r3, #10]
 800c8ee:	683b      	ldr	r3, [r7, #0]
 800c8f0:	891b      	ldrh	r3, [r3, #8]
 800c8f2:	429a      	cmp	r2, r3
 800c8f4:	d10d      	bne.n	800c912 <pbuf_copy+0x13a>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c8f6:	683b      	ldr	r3, [r7, #0]
 800c8f8:	681b      	ldr	r3, [r3, #0]
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d009      	beq.n	800c912 <pbuf_copy+0x13a>
 800c8fe:	4b15      	ldr	r3, [pc, #84]	; (800c954 <pbuf_copy+0x17c>)
 800c900:	f240 32de 	movw	r2, #990	; 0x3de
 800c904:	4919      	ldr	r1, [pc, #100]	; (800c96c <pbuf_copy+0x194>)
 800c906:	4815      	ldr	r0, [pc, #84]	; (800c95c <pbuf_copy+0x184>)
 800c908:	f009 fa64 	bl	8015dd4 <iprintf>
 800c90c:	f06f 0305 	mvn.w	r3, #5
 800c910:	e01b      	b.n	800c94a <pbuf_copy+0x172>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2b00      	cmp	r3, #0
 800c916:	d013      	beq.n	800c940 <pbuf_copy+0x168>
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	895a      	ldrh	r2, [r3, #10]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	891b      	ldrh	r3, [r3, #8]
 800c920:	429a      	cmp	r2, r3
 800c922:	d10d      	bne.n	800c940 <pbuf_copy+0x168>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d009      	beq.n	800c940 <pbuf_copy+0x168>
 800c92c:	4b09      	ldr	r3, [pc, #36]	; (800c954 <pbuf_copy+0x17c>)
 800c92e:	f240 32e3 	movw	r2, #995	; 0x3e3
 800c932:	490e      	ldr	r1, [pc, #56]	; (800c96c <pbuf_copy+0x194>)
 800c934:	4809      	ldr	r0, [pc, #36]	; (800c95c <pbuf_copy+0x184>)
 800c936:	f009 fa4d 	bl	8015dd4 <iprintf>
 800c93a:	f06f 0305 	mvn.w	r3, #5
 800c93e:	e004      	b.n	800c94a <pbuf_copy+0x172>
                  (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c940:	683b      	ldr	r3, [r7, #0]
 800c942:	2b00      	cmp	r3, #0
 800c944:	f47f af67 	bne.w	800c816 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c948:	2300      	movs	r3, #0
}
 800c94a:	4618      	mov	r0, r3
 800c94c:	3710      	adds	r7, #16
 800c94e:	46bd      	mov	sp, r7
 800c950:	bd80      	pop	{r7, pc}
 800c952:	bf00      	nop
 800c954:	08019044 	.word	0x08019044
 800c958:	080193d4 	.word	0x080193d4
 800c95c:	08019090 	.word	0x08019090
 800c960:	08019404 	.word	0x08019404
 800c964:	0801941c 	.word	0x0801941c
 800c968:	08019438 	.word	0x08019438
 800c96c:	08019448 	.word	0x08019448

0800c970 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c970:	b580      	push	{r7, lr}
 800c972:	b088      	sub	sp, #32
 800c974:	af00      	add	r7, sp, #0
 800c976:	60f8      	str	r0, [r7, #12]
 800c978:	60b9      	str	r1, [r7, #8]
 800c97a:	4611      	mov	r1, r2
 800c97c:	461a      	mov	r2, r3
 800c97e:	460b      	mov	r3, r1
 800c980:	80fb      	strh	r3, [r7, #6]
 800c982:	4613      	mov	r3, r2
 800c984:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left;
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c986:	2300      	movs	r3, #0
 800c988:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	2b00      	cmp	r3, #0
 800c98e:	d108      	bne.n	800c9a2 <pbuf_copy_partial+0x32>
 800c990:	4b30      	ldr	r3, [pc, #192]	; (800ca54 <pbuf_copy_partial+0xe4>)
 800c992:	f240 32fe 	movw	r2, #1022	; 0x3fe
 800c996:	4930      	ldr	r1, [pc, #192]	; (800ca58 <pbuf_copy_partial+0xe8>)
 800c998:	4830      	ldr	r0, [pc, #192]	; (800ca5c <pbuf_copy_partial+0xec>)
 800c99a:	f009 fa1b 	bl	8015dd4 <iprintf>
 800c99e:	2300      	movs	r3, #0
 800c9a0:	e054      	b.n	800ca4c <pbuf_copy_partial+0xdc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c9a2:	68bb      	ldr	r3, [r7, #8]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d108      	bne.n	800c9ba <pbuf_copy_partial+0x4a>
 800c9a8:	4b2a      	ldr	r3, [pc, #168]	; (800ca54 <pbuf_copy_partial+0xe4>)
 800c9aa:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800c9ae:	492c      	ldr	r1, [pc, #176]	; (800ca60 <pbuf_copy_partial+0xf0>)
 800c9b0:	482a      	ldr	r0, [pc, #168]	; (800ca5c <pbuf_copy_partial+0xec>)
 800c9b2:	f009 fa0f 	bl	8015dd4 <iprintf>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	e048      	b.n	800ca4c <pbuf_copy_partial+0xdc>

  left = 0;
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	837b      	strh	r3, [r7, #26]

  if ((buf == NULL) || (dataptr == NULL)) {
 800c9be:	68fb      	ldr	r3, [r7, #12]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d002      	beq.n	800c9ca <pbuf_copy_partial+0x5a>
 800c9c4:	68bb      	ldr	r3, [r7, #8]
 800c9c6:	2b00      	cmp	r3, #0
 800c9c8:	d101      	bne.n	800c9ce <pbuf_copy_partial+0x5e>
    return 0;
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	e03e      	b.n	800ca4c <pbuf_copy_partial+0xdc>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	61fb      	str	r3, [r7, #28]
 800c9d2:	e034      	b.n	800ca3e <pbuf_copy_partial+0xce>
    if ((offset != 0) && (offset >= p->len)) {
 800c9d4:	88bb      	ldrh	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d00a      	beq.n	800c9f0 <pbuf_copy_partial+0x80>
 800c9da:	69fb      	ldr	r3, [r7, #28]
 800c9dc:	895b      	ldrh	r3, [r3, #10]
 800c9de:	88ba      	ldrh	r2, [r7, #4]
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d305      	bcc.n	800c9f0 <pbuf_copy_partial+0x80>
      /* don't copy from this buffer -> on to the next */
      offset -= p->len;
 800c9e4:	69fb      	ldr	r3, [r7, #28]
 800c9e6:	895b      	ldrh	r3, [r3, #10]
 800c9e8:	88ba      	ldrh	r2, [r7, #4]
 800c9ea:	1ad3      	subs	r3, r2, r3
 800c9ec:	80bb      	strh	r3, [r7, #4]
 800c9ee:	e023      	b.n	800ca38 <pbuf_copy_partial+0xc8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = p->len - offset;
 800c9f0:	69fb      	ldr	r3, [r7, #28]
 800c9f2:	895a      	ldrh	r2, [r3, #10]
 800c9f4:	88bb      	ldrh	r3, [r7, #4]
 800c9f6:	1ad3      	subs	r3, r2, r3
 800c9f8:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c9fa:	8b3a      	ldrh	r2, [r7, #24]
 800c9fc:	88fb      	ldrh	r3, [r7, #6]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	d901      	bls.n	800ca06 <pbuf_copy_partial+0x96>
        buf_copy_len = len;
 800ca02:	88fb      	ldrh	r3, [r7, #6]
 800ca04:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char*)dataptr)[left], &((char*)p->payload)[offset], buf_copy_len);
 800ca06:	8b7b      	ldrh	r3, [r7, #26]
 800ca08:	68ba      	ldr	r2, [r7, #8]
 800ca0a:	18d0      	adds	r0, r2, r3
 800ca0c:	69fb      	ldr	r3, [r7, #28]
 800ca0e:	685a      	ldr	r2, [r3, #4]
 800ca10:	88bb      	ldrh	r3, [r7, #4]
 800ca12:	4413      	add	r3, r2
 800ca14:	8b3a      	ldrh	r2, [r7, #24]
 800ca16:	4619      	mov	r1, r3
 800ca18:	f009 f9c9 	bl	8015dae <memcpy>
      copied_total += buf_copy_len;
 800ca1c:	8afa      	ldrh	r2, [r7, #22]
 800ca1e:	8b3b      	ldrh	r3, [r7, #24]
 800ca20:	4413      	add	r3, r2
 800ca22:	82fb      	strh	r3, [r7, #22]
      left += buf_copy_len;
 800ca24:	8b7a      	ldrh	r2, [r7, #26]
 800ca26:	8b3b      	ldrh	r3, [r7, #24]
 800ca28:	4413      	add	r3, r2
 800ca2a:	837b      	strh	r3, [r7, #26]
      len -= buf_copy_len;
 800ca2c:	88fa      	ldrh	r2, [r7, #6]
 800ca2e:	8b3b      	ldrh	r3, [r7, #24]
 800ca30:	1ad3      	subs	r3, r2, r3
 800ca32:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	681b      	ldr	r3, [r3, #0]
 800ca3c:	61fb      	str	r3, [r7, #28]
 800ca3e:	88fb      	ldrh	r3, [r7, #6]
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d002      	beq.n	800ca4a <pbuf_copy_partial+0xda>
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	2b00      	cmp	r3, #0
 800ca48:	d1c4      	bne.n	800c9d4 <pbuf_copy_partial+0x64>
    }
  }
  return copied_total;
 800ca4a:	8afb      	ldrh	r3, [r7, #22]
}
 800ca4c:	4618      	mov	r0, r3
 800ca4e:	3720      	adds	r7, #32
 800ca50:	46bd      	mov	sp, r7
 800ca52:	bd80      	pop	{r7, pc}
 800ca54:	08019044 	.word	0x08019044
 800ca58:	08019474 	.word	0x08019474
 800ca5c:	08019090 	.word	0x08019090
 800ca60:	08019494 	.word	0x08019494

0800ca64 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ca64:	b480      	push	{r7}
 800ca66:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 800ca68:	bf00      	nop
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca70:	4770      	bx	lr
	...

0800ca74 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800ca78:	f000 fff4 	bl	800da64 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800ca7c:	4b07      	ldr	r3, [pc, #28]	; (800ca9c <tcp_tmr+0x28>)
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	3301      	adds	r3, #1
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	4b05      	ldr	r3, [pc, #20]	; (800ca9c <tcp_tmr+0x28>)
 800ca86:	701a      	strb	r2, [r3, #0]
 800ca88:	4b04      	ldr	r3, [pc, #16]	; (800ca9c <tcp_tmr+0x28>)
 800ca8a:	781b      	ldrb	r3, [r3, #0]
 800ca8c:	f003 0301 	and.w	r3, r3, #1
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800ca94:	f000 fd20 	bl	800d4d8 <tcp_slowtmr>
  }
}
 800ca98:	bf00      	nop
 800ca9a:	bd80      	pop	{r7, pc}
 800ca9c:	20004111 	.word	0x20004111

0800caa0 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
 800caa8:	6039      	str	r1, [r7, #0]
   struct tcp_pcb *pcb;
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	60fb      	str	r3, [r7, #12]
 800caae:	e00a      	b.n	800cac6 <tcp_remove_listener+0x26>
      if (pcb->listener == lpcb) {
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d102      	bne.n	800cac0 <tcp_remove_listener+0x20>
         pcb->listener = NULL;
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2200      	movs	r2, #0
 800cabe:	679a      	str	r2, [r3, #120]	; 0x78
   for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	68db      	ldr	r3, [r3, #12]
 800cac4:	60fb      	str	r3, [r7, #12]
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1f1      	bne.n	800cab0 <tcp_remove_listener+0x10>
      }
   }
}
 800cacc:	bf00      	nop
 800cace:	3714      	adds	r7, #20
 800cad0:	46bd      	mov	sp, r7
 800cad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cad6:	4770      	bx	lr

0800cad8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cad8:	b580      	push	{r7, lr}
 800cada:	b084      	sub	sp, #16
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d105      	bne.n	800caf2 <tcp_listen_closed+0x1a>
 800cae6:	4b13      	ldr	r3, [pc, #76]	; (800cb34 <tcp_listen_closed+0x5c>)
 800cae8:	22c0      	movs	r2, #192	; 0xc0
 800caea:	4913      	ldr	r1, [pc, #76]	; (800cb38 <tcp_listen_closed+0x60>)
 800caec:	4813      	ldr	r0, [pc, #76]	; (800cb3c <tcp_listen_closed+0x64>)
 800caee:	f009 f971 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7d1b      	ldrb	r3, [r3, #20]
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d005      	beq.n	800cb06 <tcp_listen_closed+0x2e>
 800cafa:	4b0e      	ldr	r3, [pc, #56]	; (800cb34 <tcp_listen_closed+0x5c>)
 800cafc:	22c1      	movs	r2, #193	; 0xc1
 800cafe:	4910      	ldr	r1, [pc, #64]	; (800cb40 <tcp_listen_closed+0x68>)
 800cb00:	480e      	ldr	r0, [pc, #56]	; (800cb3c <tcp_listen_closed+0x64>)
 800cb02:	f009 f967 	bl	8015dd4 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cb06:	2301      	movs	r3, #1
 800cb08:	60fb      	str	r3, [r7, #12]
 800cb0a:	e00b      	b.n	800cb24 <tcp_listen_closed+0x4c>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen*)pcb);
 800cb0c:	4a0d      	ldr	r2, [pc, #52]	; (800cb44 <tcp_listen_closed+0x6c>)
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cb14:	681b      	ldr	r3, [r3, #0]
 800cb16:	6879      	ldr	r1, [r7, #4]
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f7ff ffc1 	bl	800caa0 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	3301      	adds	r3, #1
 800cb22:	60fb      	str	r3, [r7, #12]
 800cb24:	68fb      	ldr	r3, [r7, #12]
 800cb26:	2b03      	cmp	r3, #3
 800cb28:	d9f0      	bls.n	800cb0c <tcp_listen_closed+0x34>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cb2a:	bf00      	nop
 800cb2c:	3710      	adds	r7, #16
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	bd80      	pop	{r7, pc}
 800cb32:	bf00      	nop
 800cb34:	080195c8 	.word	0x080195c8
 800cb38:	080195f8 	.word	0x080195f8
 800cb3c:	08019604 	.word	0x08019604
 800cb40:	0801962c 	.word	0x0801962c
 800cb44:	0801a5a4 	.word	0x0801a5a4

0800cb48 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cb48:	b5b0      	push	{r4, r5, r7, lr}
 800cb4a:	b086      	sub	sp, #24
 800cb4c:	af02      	add	r7, sp, #8
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	460b      	mov	r3, r1
 800cb52:	70fb      	strb	r3, [r7, #3]
  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cb54:	78fb      	ldrb	r3, [r7, #3]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d075      	beq.n	800cc46 <tcp_close_shutdown+0xfe>
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	7d1b      	ldrb	r3, [r3, #20]
 800cb5e:	2b04      	cmp	r3, #4
 800cb60:	d003      	beq.n	800cb6a <tcp_close_shutdown+0x22>
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	7d1b      	ldrb	r3, [r3, #20]
 800cb66:	2b07      	cmp	r3, #7
 800cb68:	d16d      	bne.n	800cc46 <tcp_close_shutdown+0xfe>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d104      	bne.n	800cb7c <tcp_close_shutdown+0x34>
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cb76:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cb7a:	d064      	beq.n	800cc46 <tcp_close_shutdown+0xfe>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	7e9b      	ldrb	r3, [r3, #26]
 800cb80:	f003 0310 	and.w	r3, r3, #16
 800cb84:	2b00      	cmp	r3, #0
 800cb86:	d106      	bne.n	800cb96 <tcp_close_shutdown+0x4e>
 800cb88:	4b59      	ldr	r3, [pc, #356]	; (800ccf0 <tcp_close_shutdown+0x1a8>)
 800cb8a:	f240 120f 	movw	r2, #271	; 0x10f
 800cb8e:	4959      	ldr	r1, [pc, #356]	; (800ccf4 <tcp_close_shutdown+0x1ac>)
 800cb90:	4859      	ldr	r0, [pc, #356]	; (800ccf8 <tcp_close_shutdown+0x1b0>)
 800cb92:	f009 f91f 	bl	8015dd4 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800cb9e:	687c      	ldr	r4, [r7, #4]
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	1d1d      	adds	r5, r3, #4
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	8adb      	ldrh	r3, [r3, #22]
 800cba8:	687a      	ldr	r2, [r7, #4]
 800cbaa:	8b12      	ldrh	r2, [r2, #24]
 800cbac:	9201      	str	r2, [sp, #4]
 800cbae:	9300      	str	r3, [sp, #0]
 800cbb0:	462b      	mov	r3, r5
 800cbb2:	4622      	mov	r2, r4
 800cbb4:	f004 ff6c 	bl	8011a90 <tcp_rst>
               pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f001 fa93 	bl	800e0e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cbbe:	4b4f      	ldr	r3, [pc, #316]	; (800ccfc <tcp_close_shutdown+0x1b4>)
 800cbc0:	681a      	ldr	r2, [r3, #0]
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	d105      	bne.n	800cbd4 <tcp_close_shutdown+0x8c>
 800cbc8:	4b4c      	ldr	r3, [pc, #304]	; (800ccfc <tcp_close_shutdown+0x1b4>)
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	68db      	ldr	r3, [r3, #12]
 800cbce:	4a4b      	ldr	r2, [pc, #300]	; (800ccfc <tcp_close_shutdown+0x1b4>)
 800cbd0:	6013      	str	r3, [r2, #0]
 800cbd2:	e013      	b.n	800cbfc <tcp_close_shutdown+0xb4>
 800cbd4:	4b49      	ldr	r3, [pc, #292]	; (800ccfc <tcp_close_shutdown+0x1b4>)
 800cbd6:	681b      	ldr	r3, [r3, #0]
 800cbd8:	60fb      	str	r3, [r7, #12]
 800cbda:	e00c      	b.n	800cbf6 <tcp_close_shutdown+0xae>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	68da      	ldr	r2, [r3, #12]
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	429a      	cmp	r2, r3
 800cbe4:	d104      	bne.n	800cbf0 <tcp_close_shutdown+0xa8>
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	68da      	ldr	r2, [r3, #12]
 800cbea:	68fb      	ldr	r3, [r7, #12]
 800cbec:	60da      	str	r2, [r3, #12]
 800cbee:	e005      	b.n	800cbfc <tcp_close_shutdown+0xb4>
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	68db      	ldr	r3, [r3, #12]
 800cbf4:	60fb      	str	r3, [r7, #12]
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d1ef      	bne.n	800cbdc <tcp_close_shutdown+0x94>
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	60da      	str	r2, [r3, #12]
 800cc02:	4b3f      	ldr	r3, [pc, #252]	; (800cd00 <tcp_close_shutdown+0x1b8>)
 800cc04:	2201      	movs	r2, #1
 800cc06:	701a      	strb	r2, [r3, #0]
      if (pcb->state == ESTABLISHED) {
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	7d1b      	ldrb	r3, [r3, #20]
 800cc0c:	2b04      	cmp	r3, #4
 800cc0e:	d10c      	bne.n	800cc2a <tcp_close_shutdown+0xe2>
        /* move to TIME_WAIT since we close actively */
        pcb->state = TIME_WAIT;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	220a      	movs	r2, #10
 800cc14:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800cc16:	4b3b      	ldr	r3, [pc, #236]	; (800cd04 <tcp_close_shutdown+0x1bc>)
 800cc18:	681a      	ldr	r2, [r3, #0]
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	60da      	str	r2, [r3, #12]
 800cc1e:	4a39      	ldr	r2, [pc, #228]	; (800cd04 <tcp_close_shutdown+0x1bc>)
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	6013      	str	r3, [r2, #0]
 800cc24:	f005 f986 	bl	8011f34 <tcp_timer_needed>
 800cc28:	e00b      	b.n	800cc42 <tcp_close_shutdown+0xfa>
      } else {
        /* CLOSE_WAIT: deallocate the pcb since we already sent a RST for it */
        if (tcp_input_pcb == pcb) {
 800cc2a:	4b37      	ldr	r3, [pc, #220]	; (800cd08 <tcp_close_shutdown+0x1c0>)
 800cc2c:	681a      	ldr	r2, [r3, #0]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d102      	bne.n	800cc3a <tcp_close_shutdown+0xf2>
          /* prevent using a deallocated pcb: free it from tcp_input later */
          tcp_trigger_input_pcb_close();
 800cc34:	f003 fdc2 	bl	80107bc <tcp_trigger_input_pcb_close>
 800cc38:	e003      	b.n	800cc42 <tcp_close_shutdown+0xfa>
        } else {
          memp_free(MEMP_TCP_PCB, pcb);
 800cc3a:	6879      	ldr	r1, [r7, #4]
 800cc3c:	2001      	movs	r0, #1
 800cc3e:	f7fe ff41 	bl	800bac4 <memp_free>
        }
      }
      return ERR_OK;
 800cc42:	2300      	movs	r3, #0
 800cc44:	e050      	b.n	800cce8 <tcp_close_shutdown+0x1a0>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	7d1b      	ldrb	r3, [r3, #20]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d02e      	beq.n	800ccac <tcp_close_shutdown+0x164>
 800cc4e:	2b02      	cmp	r3, #2
 800cc50:	d038      	beq.n	800ccc4 <tcp_close_shutdown+0x17c>
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d142      	bne.n	800ccdc <tcp_close_shutdown+0x194>
     * and the user needs some way to free it should the need arise.
     * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
     * or for a pcb that has been used and then entered the CLOSED state
     * is erroneous, but this should never happen as the pcb has in those cases
     * been freed, and so any remaining handles are bogus. */
    if (pcb->local_port != 0) {
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	8adb      	ldrh	r3, [r3, #22]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d021      	beq.n	800cca2 <tcp_close_shutdown+0x15a>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800cc5e:	4b2b      	ldr	r3, [pc, #172]	; (800cd0c <tcp_close_shutdown+0x1c4>)
 800cc60:	681a      	ldr	r2, [r3, #0]
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	429a      	cmp	r2, r3
 800cc66:	d105      	bne.n	800cc74 <tcp_close_shutdown+0x12c>
 800cc68:	4b28      	ldr	r3, [pc, #160]	; (800cd0c <tcp_close_shutdown+0x1c4>)
 800cc6a:	681b      	ldr	r3, [r3, #0]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	4a27      	ldr	r2, [pc, #156]	; (800cd0c <tcp_close_shutdown+0x1c4>)
 800cc70:	6013      	str	r3, [r2, #0]
 800cc72:	e013      	b.n	800cc9c <tcp_close_shutdown+0x154>
 800cc74:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <tcp_close_shutdown+0x1c4>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	60bb      	str	r3, [r7, #8]
 800cc7a:	e00c      	b.n	800cc96 <tcp_close_shutdown+0x14e>
 800cc7c:	68bb      	ldr	r3, [r7, #8]
 800cc7e:	68da      	ldr	r2, [r3, #12]
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d104      	bne.n	800cc90 <tcp_close_shutdown+0x148>
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	68da      	ldr	r2, [r3, #12]
 800cc8a:	68bb      	ldr	r3, [r7, #8]
 800cc8c:	60da      	str	r2, [r3, #12]
 800cc8e:	e005      	b.n	800cc9c <tcp_close_shutdown+0x154>
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	68db      	ldr	r3, [r3, #12]
 800cc94:	60bb      	str	r3, [r7, #8]
 800cc96:	68bb      	ldr	r3, [r7, #8]
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	d1ef      	bne.n	800cc7c <tcp_close_shutdown+0x134>
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	2200      	movs	r2, #0
 800cca0:	60da      	str	r2, [r3, #12]
    }
    memp_free(MEMP_TCP_PCB, pcb);
 800cca2:	6879      	ldr	r1, [r7, #4]
 800cca4:	2001      	movs	r0, #1
 800cca6:	f7fe ff0d 	bl	800bac4 <memp_free>
    break;
 800ccaa:	e01c      	b.n	800cce6 <tcp_close_shutdown+0x19e>
  case LISTEN:
    tcp_listen_closed(pcb);
 800ccac:	6878      	ldr	r0, [r7, #4]
 800ccae:	f7ff ff13 	bl	800cad8 <tcp_listen_closed>
    tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800ccb2:	6879      	ldr	r1, [r7, #4]
 800ccb4:	4816      	ldr	r0, [pc, #88]	; (800cd10 <tcp_close_shutdown+0x1c8>)
 800ccb6:	f001 fa57 	bl	800e168 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800ccba:	6879      	ldr	r1, [r7, #4]
 800ccbc:	2002      	movs	r0, #2
 800ccbe:	f7fe ff01 	bl	800bac4 <memp_free>
    break;
 800ccc2:	e010      	b.n	800cce6 <tcp_close_shutdown+0x19e>
  case SYN_SENT:
    TCP_PCB_REMOVE_ACTIVE(pcb);
 800ccc4:	6879      	ldr	r1, [r7, #4]
 800ccc6:	480d      	ldr	r0, [pc, #52]	; (800ccfc <tcp_close_shutdown+0x1b4>)
 800ccc8:	f001 fa4e 	bl	800e168 <tcp_pcb_remove>
 800cccc:	4b0c      	ldr	r3, [pc, #48]	; (800cd00 <tcp_close_shutdown+0x1b8>)
 800ccce:	2201      	movs	r2, #1
 800ccd0:	701a      	strb	r2, [r3, #0]
    memp_free(MEMP_TCP_PCB, pcb);
 800ccd2:	6879      	ldr	r1, [r7, #4]
 800ccd4:	2001      	movs	r0, #1
 800ccd6:	f7fe fef5 	bl	800bac4 <memp_free>
    MIB2_STATS_INC(mib2.tcpattemptfails);
    break;
 800ccda:	e004      	b.n	800cce6 <tcp_close_shutdown+0x19e>
  default:
    return tcp_close_shutdown_fin(pcb);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f000 f819 	bl	800cd14 <tcp_close_shutdown_fin>
 800cce2:	4603      	mov	r3, r0
 800cce4:	e000      	b.n	800cce8 <tcp_close_shutdown+0x1a0>
  }
  return ERR_OK;
 800cce6:	2300      	movs	r3, #0
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bdb0      	pop	{r4, r5, r7, pc}
 800ccf0:	080195c8 	.word	0x080195c8
 800ccf4:	08019644 	.word	0x08019644
 800ccf8:	08019604 	.word	0x08019604
 800ccfc:	20007934 	.word	0x20007934
 800cd00:	20007930 	.word	0x20007930
 800cd04:	20007944 	.word	0x20007944
 800cd08:	20007948 	.word	0x20007948
 800cd0c:	20007940 	.word	0x20007940
 800cd10:	2000793c 	.word	0x2000793c

0800cd14 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cd14:	b580      	push	{r7, lr}
 800cd16:	b084      	sub	sp, #16
 800cd18:	af00      	add	r7, sp, #0
 800cd1a:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d106      	bne.n	800cd30 <tcp_close_shutdown_fin+0x1c>
 800cd22:	4b2c      	ldr	r3, [pc, #176]	; (800cdd4 <tcp_close_shutdown_fin+0xc0>)
 800cd24:	f240 124d 	movw	r2, #333	; 0x14d
 800cd28:	492b      	ldr	r1, [pc, #172]	; (800cdd8 <tcp_close_shutdown_fin+0xc4>)
 800cd2a:	482c      	ldr	r0, [pc, #176]	; (800cddc <tcp_close_shutdown_fin+0xc8>)
 800cd2c:	f009 f852 	bl	8015dd4 <iprintf>

  switch (pcb->state) {
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	7d1b      	ldrb	r3, [r3, #20]
 800cd34:	2b04      	cmp	r3, #4
 800cd36:	d010      	beq.n	800cd5a <tcp_close_shutdown_fin+0x46>
 800cd38:	2b07      	cmp	r3, #7
 800cd3a:	d01b      	beq.n	800cd74 <tcp_close_shutdown_fin+0x60>
 800cd3c:	2b03      	cmp	r3, #3
 800cd3e:	d126      	bne.n	800cd8e <tcp_close_shutdown_fin+0x7a>
  case SYN_RCVD:
    err = tcp_send_fin(pcb);
 800cd40:	6878      	ldr	r0, [r7, #4]
 800cd42:	f003 fdc7 	bl	80108d4 <tcp_send_fin>
 800cd46:	4603      	mov	r3, r0
 800cd48:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd4e:	2b00      	cmp	r3, #0
 800cd50:	d11f      	bne.n	800cd92 <tcp_close_shutdown_fin+0x7e>
      tcp_backlog_accepted(pcb);
      MIB2_STATS_INC(mib2.tcpattemptfails);
      pcb->state = FIN_WAIT_1;
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	2205      	movs	r2, #5
 800cd56:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cd58:	e01b      	b.n	800cd92 <tcp_close_shutdown_fin+0x7e>
  case ESTABLISHED:
    err = tcp_send_fin(pcb);
 800cd5a:	6878      	ldr	r0, [r7, #4]
 800cd5c:	f003 fdba 	bl	80108d4 <tcp_send_fin>
 800cd60:	4603      	mov	r3, r0
 800cd62:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd64:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	d114      	bne.n	800cd96 <tcp_close_shutdown_fin+0x82>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = FIN_WAIT_1;
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	2205      	movs	r2, #5
 800cd70:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cd72:	e010      	b.n	800cd96 <tcp_close_shutdown_fin+0x82>
  case CLOSE_WAIT:
    err = tcp_send_fin(pcb);
 800cd74:	6878      	ldr	r0, [r7, #4]
 800cd76:	f003 fdad 	bl	80108d4 <tcp_send_fin>
 800cd7a:	4603      	mov	r3, r0
 800cd7c:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800cd7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d109      	bne.n	800cd9a <tcp_close_shutdown_fin+0x86>
      MIB2_STATS_INC(mib2.tcpestabresets);
      pcb->state = LAST_ACK;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	2209      	movs	r2, #9
 800cd8a:	751a      	strb	r2, [r3, #20]
    }
    break;
 800cd8c:	e005      	b.n	800cd9a <tcp_close_shutdown_fin+0x86>
  default:
    /* Has already been closed, do nothing. */
    return ERR_OK;
 800cd8e:	2300      	movs	r3, #0
 800cd90:	e01c      	b.n	800cdcc <tcp_close_shutdown_fin+0xb8>
    break;
 800cd92:	bf00      	nop
 800cd94:	e002      	b.n	800cd9c <tcp_close_shutdown_fin+0x88>
    break;
 800cd96:	bf00      	nop
 800cd98:	e000      	b.n	800cd9c <tcp_close_shutdown_fin+0x88>
    break;
 800cd9a:	bf00      	nop
  }

  if (err == ERR_OK) {
 800cd9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d103      	bne.n	800cdac <tcp_close_shutdown_fin+0x98>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800cda4:	6878      	ldr	r0, [r7, #4]
 800cda6:	f004 fbeb 	bl	8011580 <tcp_output>
 800cdaa:	e00d      	b.n	800cdc8 <tcp_close_shutdown_fin+0xb4>
  } else if (err == ERR_MEM) {
 800cdac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800cdb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cdb4:	d108      	bne.n	800cdc8 <tcp_close_shutdown_fin+0xb4>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    pcb->flags |= TF_CLOSEPEND;
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	7e9b      	ldrb	r3, [r3, #26]
 800cdba:	f043 0308 	orr.w	r3, r3, #8
 800cdbe:	b2da      	uxtb	r2, r3
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	769a      	strb	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	e001      	b.n	800cdcc <tcp_close_shutdown_fin+0xb8>
  }
  return err;
 800cdc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800cdcc:	4618      	mov	r0, r3
 800cdce:	3710      	adds	r7, #16
 800cdd0:	46bd      	mov	sp, r7
 800cdd2:	bd80      	pop	{r7, pc}
 800cdd4:	080195c8 	.word	0x080195c8
 800cdd8:	080195f8 	.word	0x080195f8
 800cddc:	08019604 	.word	0x08019604

0800cde0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cde0:	b580      	push	{r7, lr}
 800cde2:	b082      	sub	sp, #8
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));
  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	7d1b      	ldrb	r3, [r3, #20]
 800cdec:	2b01      	cmp	r3, #1
 800cdee:	d006      	beq.n	800cdfe <tcp_close+0x1e>
    /* Set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7e9b      	ldrb	r3, [r3, #26]
 800cdf4:	f043 0310 	orr.w	r3, r3, #16
 800cdf8:	b2da      	uxtb	r2, r3
 800cdfa:	687b      	ldr	r3, [r7, #4]
 800cdfc:	769a      	strb	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cdfe:	2101      	movs	r1, #1
 800ce00:	6878      	ldr	r0, [r7, #4]
 800ce02:	f7ff fea1 	bl	800cb48 <tcp_close_shutdown>
 800ce06:	4603      	mov	r3, r0
}
 800ce08:	4618      	mov	r0, r3
 800ce0a:	3708      	adds	r7, #8
 800ce0c:	46bd      	mov	sp, r7
 800ce0e:	bd80      	pop	{r7, pc}

0800ce10 <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	60f8      	str	r0, [r7, #12]
 800ce18:	60b9      	str	r1, [r7, #8]
 800ce1a:	607a      	str	r2, [r7, #4]
  if (pcb->state == LISTEN) {
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	7d1b      	ldrb	r3, [r3, #20]
 800ce20:	2b01      	cmp	r3, #1
 800ce22:	d102      	bne.n	800ce2a <tcp_shutdown+0x1a>
    return ERR_CONN;
 800ce24:	f06f 030a 	mvn.w	r3, #10
 800ce28:	e035      	b.n	800ce96 <tcp_shutdown+0x86>
  }
  if (shut_rx) {
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d01b      	beq.n	800ce68 <tcp_shutdown+0x58>
    /* shut down the receive side: set a flag not to receive any more data... */
    pcb->flags |= TF_RXCLOSED;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	7e9b      	ldrb	r3, [r3, #26]
 800ce34:	f043 0310 	orr.w	r3, r3, #16
 800ce38:	b2da      	uxtb	r2, r3
 800ce3a:	68fb      	ldr	r3, [r7, #12]
 800ce3c:	769a      	strb	r2, [r3, #26]
    if (shut_tx) {
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d005      	beq.n	800ce50 <tcp_shutdown+0x40>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800ce44:	2101      	movs	r1, #1
 800ce46:	68f8      	ldr	r0, [r7, #12]
 800ce48:	f7ff fe7e 	bl	800cb48 <tcp_close_shutdown>
 800ce4c:	4603      	mov	r3, r0
 800ce4e:	e022      	b.n	800ce96 <tcp_shutdown+0x86>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d007      	beq.n	800ce68 <tcp_shutdown+0x58>
      pbuf_free(pcb->refused_data);
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7ff fb8b 	bl	800c578 <pbuf_free>
      pcb->refused_data = NULL;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	2200      	movs	r2, #0
 800ce66:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }
  if (shut_tx) {
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d012      	beq.n	800ce94 <tcp_shutdown+0x84>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	7d1b      	ldrb	r3, [r3, #20]
 800ce72:	2b03      	cmp	r3, #3
 800ce74:	db0b      	blt.n	800ce8e <tcp_shutdown+0x7e>
 800ce76:	2b04      	cmp	r3, #4
 800ce78:	dd01      	ble.n	800ce7e <tcp_shutdown+0x6e>
 800ce7a:	2b07      	cmp	r3, #7
 800ce7c:	d107      	bne.n	800ce8e <tcp_shutdown+0x7e>
    case SYN_RCVD:
    case ESTABLISHED:
    case CLOSE_WAIT:
      return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	b2db      	uxtb	r3, r3
 800ce82:	4619      	mov	r1, r3
 800ce84:	68f8      	ldr	r0, [r7, #12]
 800ce86:	f7ff fe5f 	bl	800cb48 <tcp_close_shutdown>
 800ce8a:	4603      	mov	r3, r0
 800ce8c:	e003      	b.n	800ce96 <tcp_shutdown+0x86>
    default:
      /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
        into CLOSED state, where the PCB is deallocated. */
      return ERR_CONN;
 800ce8e:	f06f 030a 	mvn.w	r3, #10
 800ce92:	e000      	b.n	800ce96 <tcp_shutdown+0x86>
    }
  }
  return ERR_OK;
 800ce94:	2300      	movs	r3, #0
}
 800ce96:	4618      	mov	r0, r3
 800ce98:	3710      	adds	r7, #16
 800ce9a:	46bd      	mov	sp, r7
 800ce9c:	bd80      	pop	{r7, pc}
	...

0800cea0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b08c      	sub	sp, #48	; 0x30
 800cea4:	af02      	add	r7, sp, #8
 800cea6:	6078      	str	r0, [r7, #4]
 800cea8:	6039      	str	r1, [r7, #0]
  tcp_err_fn errf;
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	7d1b      	ldrb	r3, [r3, #20]
 800ceae:	2b01      	cmp	r3, #1
 800ceb0:	d106      	bne.n	800cec0 <tcp_abandon+0x20>
 800ceb2:	4b4d      	ldr	r3, [pc, #308]	; (800cfe8 <tcp_abandon+0x148>)
 800ceb4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ceb8:	494c      	ldr	r1, [pc, #304]	; (800cfec <tcp_abandon+0x14c>)
 800ceba:	484d      	ldr	r0, [pc, #308]	; (800cff0 <tcp_abandon+0x150>)
 800cebc:	f008 ff8a 	bl	8015dd4 <iprintf>
    pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	7d1b      	ldrb	r3, [r3, #20]
 800cec4:	2b0a      	cmp	r3, #10
 800cec6:	d108      	bne.n	800ceda <tcp_abandon+0x3a>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cec8:	6879      	ldr	r1, [r7, #4]
 800ceca:	484a      	ldr	r0, [pc, #296]	; (800cff4 <tcp_abandon+0x154>)
 800cecc:	f001 f94c 	bl	800e168 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800ced0:	6879      	ldr	r1, [r7, #4]
 800ced2:	2001      	movs	r0, #1
 800ced4:	f7fe fdf6 	bl	800bac4 <memp_free>
    }
    last_state = pcb->state;
    memp_free(MEMP_TCP_PCB, pcb);
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
  }
}
 800ced8:	e081      	b.n	800cfde <tcp_abandon+0x13e>
    int send_rst = 0;
 800ceda:	2300      	movs	r3, #0
 800cedc:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cede:	2300      	movs	r3, #0
 800cee0:	847b      	strh	r3, [r7, #34]	; 0x22
    seqno = pcb->snd_nxt;
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cee6:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ceec:	617b      	str	r3, [r7, #20]
    errf = pcb->errf;
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cef4:	613b      	str	r3, [r7, #16]
    errf_arg = pcb->callback_arg;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	691b      	ldr	r3, [r3, #16]
 800cefa:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	7d1b      	ldrb	r3, [r3, #20]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d126      	bne.n	800cf52 <tcp_abandon+0xb2>
      if (pcb->local_port != 0) {
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	8adb      	ldrh	r3, [r3, #22]
 800cf08:	2b00      	cmp	r3, #0
 800cf0a:	d02e      	beq.n	800cf6a <tcp_abandon+0xca>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf0c:	4b3a      	ldr	r3, [pc, #232]	; (800cff8 <tcp_abandon+0x158>)
 800cf0e:	681a      	ldr	r2, [r3, #0]
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	429a      	cmp	r2, r3
 800cf14:	d105      	bne.n	800cf22 <tcp_abandon+0x82>
 800cf16:	4b38      	ldr	r3, [pc, #224]	; (800cff8 <tcp_abandon+0x158>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	4a36      	ldr	r2, [pc, #216]	; (800cff8 <tcp_abandon+0x158>)
 800cf1e:	6013      	str	r3, [r2, #0]
 800cf20:	e013      	b.n	800cf4a <tcp_abandon+0xaa>
 800cf22:	4b35      	ldr	r3, [pc, #212]	; (800cff8 <tcp_abandon+0x158>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	61fb      	str	r3, [r7, #28]
 800cf28:	e00c      	b.n	800cf44 <tcp_abandon+0xa4>
 800cf2a:	69fb      	ldr	r3, [r7, #28]
 800cf2c:	68da      	ldr	r2, [r3, #12]
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d104      	bne.n	800cf3e <tcp_abandon+0x9e>
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	68da      	ldr	r2, [r3, #12]
 800cf38:	69fb      	ldr	r3, [r7, #28]
 800cf3a:	60da      	str	r2, [r3, #12]
 800cf3c:	e005      	b.n	800cf4a <tcp_abandon+0xaa>
 800cf3e:	69fb      	ldr	r3, [r7, #28]
 800cf40:	68db      	ldr	r3, [r3, #12]
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	69fb      	ldr	r3, [r7, #28]
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d1ef      	bne.n	800cf2a <tcp_abandon+0x8a>
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	60da      	str	r2, [r3, #12]
 800cf50:	e00b      	b.n	800cf6a <tcp_abandon+0xca>
      send_rst = reset;
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	8adb      	ldrh	r3, [r3, #22]
 800cf5a:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cf5c:	6879      	ldr	r1, [r7, #4]
 800cf5e:	4827      	ldr	r0, [pc, #156]	; (800cffc <tcp_abandon+0x15c>)
 800cf60:	f001 f902 	bl	800e168 <tcp_pcb_remove>
 800cf64:	4b26      	ldr	r3, [pc, #152]	; (800d000 <tcp_abandon+0x160>)
 800cf66:	2201      	movs	r2, #1
 800cf68:	701a      	strb	r2, [r3, #0]
    if (pcb->unacked != NULL) {
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf6e:	2b00      	cmp	r3, #0
 800cf70:	d004      	beq.n	800cf7c <tcp_abandon+0xdc>
      tcp_segs_free(pcb->unacked);
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf76:	4618      	mov	r0, r3
 800cf78:	f000 fe41 	bl	800dbfe <tcp_segs_free>
    if (pcb->unsent != NULL) {
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d004      	beq.n	800cf8e <tcp_abandon+0xee>
      tcp_segs_free(pcb->unsent);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f000 fe38 	bl	800dbfe <tcp_segs_free>
    if (pcb->ooseq != NULL) {
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	d004      	beq.n	800cfa0 <tcp_abandon+0x100>
      tcp_segs_free(pcb->ooseq);
 800cf96:	687b      	ldr	r3, [r7, #4]
 800cf98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cf9a:	4618      	mov	r0, r3
 800cf9c:	f000 fe2f 	bl	800dbfe <tcp_segs_free>
    if (send_rst) {
 800cfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa2:	2b00      	cmp	r3, #0
 800cfa4:	d00c      	beq.n	800cfc0 <tcp_abandon+0x120>
      tcp_rst(seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800cfa6:	687a      	ldr	r2, [r7, #4]
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	1d19      	adds	r1, r3, #4
 800cfac:	687b      	ldr	r3, [r7, #4]
 800cfae:	8b1b      	ldrh	r3, [r3, #24]
 800cfb0:	9301      	str	r3, [sp, #4]
 800cfb2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cfb4:	9300      	str	r3, [sp, #0]
 800cfb6:	460b      	mov	r3, r1
 800cfb8:	6979      	ldr	r1, [r7, #20]
 800cfba:	69b8      	ldr	r0, [r7, #24]
 800cfbc:	f004 fd68 	bl	8011a90 <tcp_rst>
    last_state = pcb->state;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	7d1b      	ldrb	r3, [r3, #20]
 800cfc4:	72fb      	strb	r3, [r7, #11]
    memp_free(MEMP_TCP_PCB, pcb);
 800cfc6:	6879      	ldr	r1, [r7, #4]
 800cfc8:	2001      	movs	r0, #1
 800cfca:	f7fe fd7b 	bl	800bac4 <memp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800cfce:	693b      	ldr	r3, [r7, #16]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d004      	beq.n	800cfde <tcp_abandon+0x13e>
 800cfd4:	693b      	ldr	r3, [r7, #16]
 800cfd6:	f06f 010c 	mvn.w	r1, #12
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	4798      	blx	r3
}
 800cfde:	bf00      	nop
 800cfe0:	3728      	adds	r7, #40	; 0x28
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	080195c8 	.word	0x080195c8
 800cfec:	08019660 	.word	0x08019660
 800cff0:	08019604 	.word	0x08019604
 800cff4:	20007944 	.word	0x20007944
 800cff8:	20007940 	.word	0x20007940
 800cffc:	20007934 	.word	0x20007934
 800d000:	20007930 	.word	0x20007930

0800d004 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d004:	b580      	push	{r7, lr}
 800d006:	b082      	sub	sp, #8
 800d008:	af00      	add	r7, sp, #0
 800d00a:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d00c:	2101      	movs	r1, #1
 800d00e:	6878      	ldr	r0, [r7, #4]
 800d010:	f7ff ff46 	bl	800cea0 <tcp_abandon>
}
 800d014:	bf00      	nop
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b088      	sub	sp, #32
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	4613      	mov	r3, r2
 800d028:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d02a:	2304      	movs	r3, #4
 800d02c:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb *cpcb;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d02e:	68bb      	ldr	r3, [r7, #8]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d101      	bne.n	800d038 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d034:	4b46      	ldr	r3, [pc, #280]	; (800d150 <tcp_bind+0x134>)
 800d036:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d002      	beq.n	800d044 <tcp_bind+0x28>
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d102      	bne.n	800d04a <tcp_bind+0x2e>
    return ERR_VAL;
 800d044:	f06f 0305 	mvn.w	r3, #5
 800d048:	e07e      	b.n	800d148 <tcp_bind+0x12c>
  }

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	7d1b      	ldrb	r3, [r3, #20]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d009      	beq.n	800d066 <tcp_bind+0x4a>
 800d052:	4b40      	ldr	r3, [pc, #256]	; (800d154 <tcp_bind+0x138>)
 800d054:	f44f 7211 	mov.w	r2, #580	; 0x244
 800d058:	493f      	ldr	r1, [pc, #252]	; (800d158 <tcp_bind+0x13c>)
 800d05a:	4840      	ldr	r0, [pc, #256]	; (800d15c <tcp_bind+0x140>)
 800d05c:	f008 feba 	bl	8015dd4 <iprintf>
 800d060:	f06f 0305 	mvn.w	r3, #5
 800d064:	e070      	b.n	800d148 <tcp_bind+0x12c>
  /* Unless the REUSEADDR flag is set,
     we have to check the pcbs in TIME-WAIT state, also.
     We do not dump TIME_WAIT pcb's; they can still be matched by incoming
     packets using both local and remote IP addresses and ports to distinguish.
   */
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 800d066:	68fb      	ldr	r3, [r7, #12]
 800d068:	7a1b      	ldrb	r3, [r3, #8]
 800d06a:	f003 0304 	and.w	r3, r3, #4
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d001      	beq.n	800d076 <tcp_bind+0x5a>
    max_pcb_list = NUM_TCP_PCB_LISTS_NO_TIME_WAIT;
 800d072:	2303      	movs	r3, #3
 800d074:	61bb      	str	r3, [r7, #24]
  }
#endif /* SO_REUSE */

  if (port == 0) {
 800d076:	88fb      	ldrh	r3, [r7, #6]
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d109      	bne.n	800d090 <tcp_bind+0x74>
    port = tcp_new_port();
 800d07c:	f000 f9e8 	bl	800d450 <tcp_new_port>
 800d080:	4603      	mov	r3, r0
 800d082:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d084:	88fb      	ldrh	r3, [r7, #6]
 800d086:	2b00      	cmp	r3, #0
 800d088:	d141      	bne.n	800d10e <tcp_bind+0xf2>
      return ERR_BUF;
 800d08a:	f06f 0301 	mvn.w	r3, #1
 800d08e:	e05b      	b.n	800d148 <tcp_bind+0x12c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d090:	2300      	movs	r3, #0
 800d092:	61fb      	str	r3, [r7, #28]
 800d094:	e037      	b.n	800d106 <tcp_bind+0xea>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d096:	4a32      	ldr	r2, [pc, #200]	; (800d160 <tcp_bind+0x144>)
 800d098:	69fb      	ldr	r3, [r7, #28]
 800d09a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	617b      	str	r3, [r7, #20]
 800d0a2:	e02a      	b.n	800d0fa <tcp_bind+0xde>
        if (cpcb->local_port == port) {
 800d0a4:	697b      	ldr	r3, [r7, #20]
 800d0a6:	8adb      	ldrh	r3, [r3, #22]
 800d0a8:	88fa      	ldrh	r2, [r7, #6]
 800d0aa:	429a      	cmp	r2, r3
 800d0ac:	d122      	bne.n	800d0f4 <tcp_bind+0xd8>
#if SO_REUSE
          /* Omit checking for the same port if both pcbs have REUSEADDR set.
             For SO_REUSEADDR, the duplicate-check for a 5-tuple is done in
             tcp_connect. */
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 800d0ae:	68fb      	ldr	r3, [r7, #12]
 800d0b0:	7a1b      	ldrb	r3, [r3, #8]
 800d0b2:	f003 0304 	and.w	r3, r3, #4
 800d0b6:	2b00      	cmp	r3, #0
 800d0b8:	d005      	beq.n	800d0c6 <tcp_bind+0xaa>
              !ip_get_option(cpcb, SOF_REUSEADDR))
 800d0ba:	697b      	ldr	r3, [r7, #20]
 800d0bc:	7a1b      	ldrb	r3, [r3, #8]
 800d0be:	f003 0304 	and.w	r3, r3, #4
          if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d116      	bne.n	800d0f4 <tcp_bind+0xd8>
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d0c6:	697b      	ldr	r3, [r7, #20]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d010      	beq.n	800d0ee <tcp_bind+0xd2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d0cc:	697b      	ldr	r3, [r7, #20]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	2b00      	cmp	r3, #0
 800d0d2:	d00c      	beq.n	800d0ee <tcp_bind+0xd2>
 800d0d4:	68bb      	ldr	r3, [r7, #8]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d009      	beq.n	800d0ee <tcp_bind+0xd2>
                ip_addr_isany(ipaddr) ||
 800d0da:	68bb      	ldr	r3, [r7, #8]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	2b00      	cmp	r3, #0
 800d0e0:	d005      	beq.n	800d0ee <tcp_bind+0xd2>
                ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d0e2:	697b      	ldr	r3, [r7, #20]
 800d0e4:	681a      	ldr	r2, [r3, #0]
 800d0e6:	68bb      	ldr	r3, [r7, #8]
 800d0e8:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d0ea:	429a      	cmp	r2, r3
 800d0ec:	d102      	bne.n	800d0f4 <tcp_bind+0xd8>
              return ERR_USE;
 800d0ee:	f06f 0307 	mvn.w	r3, #7
 800d0f2:	e029      	b.n	800d148 <tcp_bind+0x12c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	68db      	ldr	r3, [r3, #12]
 800d0f8:	617b      	str	r3, [r7, #20]
 800d0fa:	697b      	ldr	r3, [r7, #20]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	d1d1      	bne.n	800d0a4 <tcp_bind+0x88>
    for (i = 0; i < max_pcb_list; i++) {
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	3301      	adds	r3, #1
 800d104:	61fb      	str	r3, [r7, #28]
 800d106:	69fa      	ldr	r2, [r7, #28]
 800d108:	69bb      	ldr	r3, [r7, #24]
 800d10a:	429a      	cmp	r2, r3
 800d10c:	dbc3      	blt.n	800d096 <tcp_bind+0x7a>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)) {
 800d10e:	68bb      	ldr	r3, [r7, #8]
 800d110:	2b00      	cmp	r3, #0
 800d112:	d00c      	beq.n	800d12e <tcp_bind+0x112>
 800d114:	68bb      	ldr	r3, [r7, #8]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d008      	beq.n	800d12e <tcp_bind+0x112>
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d11c:	68bb      	ldr	r3, [r7, #8]
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d002      	beq.n	800d128 <tcp_bind+0x10c>
 800d122:	68bb      	ldr	r3, [r7, #8]
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	e000      	b.n	800d12a <tcp_bind+0x10e>
 800d128:	2300      	movs	r3, #0
 800d12a:	68fa      	ldr	r2, [r7, #12]
 800d12c:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d12e:	68fb      	ldr	r3, [r7, #12]
 800d130:	88fa      	ldrh	r2, [r7, #6]
 800d132:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d134:	4b0b      	ldr	r3, [pc, #44]	; (800d164 <tcp_bind+0x148>)
 800d136:	681a      	ldr	r2, [r3, #0]
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	60da      	str	r2, [r3, #12]
 800d13c:	4a09      	ldr	r2, [pc, #36]	; (800d164 <tcp_bind+0x148>)
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	6013      	str	r3, [r2, #0]
 800d142:	f004 fef7 	bl	8011f34 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d146:	2300      	movs	r3, #0
}
 800d148:	4618      	mov	r0, r3
 800d14a:	3720      	adds	r7, #32
 800d14c:	46bd      	mov	sp, r7
 800d14e:	bd80      	pop	{r7, pc}
 800d150:	0801a4b8 	.word	0x0801a4b8
 800d154:	080195c8 	.word	0x080195c8
 800d158:	08019694 	.word	0x08019694
 800d15c:	08019604 	.word	0x08019604
 800d160:	0801a5a4 	.word	0x0801a5a4
 800d164:	20007940 	.word	0x20007940

0800d168 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b084      	sub	sp, #16
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	60f8      	str	r0, [r7, #12]
 800d170:	60b9      	str	r1, [r7, #8]
 800d172:	4613      	mov	r3, r2
 800d174:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  tcp_abort(pcb);
 800d176:	68b8      	ldr	r0, [r7, #8]
 800d178:	f7ff ff44 	bl	800d004 <tcp_abort>

  return ERR_ABRT;
 800d17c:	f06f 030c 	mvn.w	r3, #12
}
 800d180:	4618      	mov	r0, r3
 800d182:	3710      	adds	r7, #16
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b088      	sub	sp, #32
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	60f8      	str	r0, [r7, #12]
 800d190:	460b      	mov	r3, r1
 800d192:	607a      	str	r2, [r7, #4]
 800d194:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 800d196:	2300      	movs	r3, #0
 800d198:	61fb      	str	r3, [r7, #28]
  err_t res;

  LWIP_UNUSED_ARG(backlog);
  LWIP_ERROR("tcp_listen: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	7d1b      	ldrb	r3, [r3, #20]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d009      	beq.n	800d1b6 <tcp_listen_with_backlog_and_err+0x2e>
 800d1a2:	4b50      	ldr	r3, [pc, #320]	; (800d2e4 <tcp_listen_with_backlog_and_err+0x15c>)
 800d1a4:	f44f 722d 	mov.w	r2, #692	; 0x2b4
 800d1a8:	494f      	ldr	r1, [pc, #316]	; (800d2e8 <tcp_listen_with_backlog_and_err+0x160>)
 800d1aa:	4850      	ldr	r0, [pc, #320]	; (800d2ec <tcp_listen_with_backlog_and_err+0x164>)
 800d1ac:	f008 fe12 	bl	8015dd4 <iprintf>
 800d1b0:	23f1      	movs	r3, #241	; 0xf1
 800d1b2:	76fb      	strb	r3, [r7, #27]
 800d1b4:	e08a      	b.n	800d2cc <tcp_listen_with_backlog_and_err+0x144>

  /* already listening? */
  if (pcb->state == LISTEN) {
 800d1b6:	68fb      	ldr	r3, [r7, #12]
 800d1b8:	7d1b      	ldrb	r3, [r3, #20]
 800d1ba:	2b01      	cmp	r3, #1
 800d1bc:	d104      	bne.n	800d1c8 <tcp_listen_with_backlog_and_err+0x40>
    lpcb = (struct tcp_pcb_listen*)pcb;
 800d1be:	68fb      	ldr	r3, [r7, #12]
 800d1c0:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 800d1c2:	23f7      	movs	r3, #247	; 0xf7
 800d1c4:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d1c6:	e081      	b.n	800d2cc <tcp_listen_with_backlog_and_err+0x144>
  }
#if SO_REUSE
  if (ip_get_option(pcb, SOF_REUSEADDR)) {
 800d1c8:	68fb      	ldr	r3, [r7, #12]
 800d1ca:	7a1b      	ldrb	r3, [r3, #8]
 800d1cc:	f003 0304 	and.w	r3, r3, #4
 800d1d0:	2b00      	cmp	r3, #0
 800d1d2:	d01a      	beq.n	800d20a <tcp_listen_with_backlog_and_err+0x82>
    /* Since SOF_REUSEADDR allows reusing a local address before the pcb's usage
       is declared (listen-/connection-pcb), we have to make sure now that
       this port is only used once for every local IP. */
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1d4:	4b46      	ldr	r3, [pc, #280]	; (800d2f0 <tcp_listen_with_backlog_and_err+0x168>)
 800d1d6:	681b      	ldr	r3, [r3, #0]
 800d1d8:	61fb      	str	r3, [r7, #28]
 800d1da:	e013      	b.n	800d204 <tcp_listen_with_backlog_and_err+0x7c>
      if ((lpcb->local_port == pcb->local_port) &&
 800d1dc:	69fb      	ldr	r3, [r7, #28]
 800d1de:	8ada      	ldrh	r2, [r3, #22]
 800d1e0:	68fb      	ldr	r3, [r7, #12]
 800d1e2:	8adb      	ldrh	r3, [r3, #22]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d10a      	bne.n	800d1fe <tcp_listen_with_backlog_and_err+0x76>
          ip_addr_cmp(&lpcb->local_ip, &pcb->local_ip)) {
 800d1e8:	69fb      	ldr	r3, [r7, #28]
 800d1ea:	681a      	ldr	r2, [r3, #0]
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	681b      	ldr	r3, [r3, #0]
      if ((lpcb->local_port == pcb->local_port) &&
 800d1f0:	429a      	cmp	r2, r3
 800d1f2:	d104      	bne.n	800d1fe <tcp_listen_with_backlog_and_err+0x76>
        /* this address/port is already used */
        lpcb = NULL;
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	61fb      	str	r3, [r7, #28]
        res = ERR_USE;
 800d1f8:	23f8      	movs	r3, #248	; 0xf8
 800d1fa:	76fb      	strb	r3, [r7, #27]
        goto done;
 800d1fc:	e066      	b.n	800d2cc <tcp_listen_with_backlog_and_err+0x144>
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800d1fe:	69fb      	ldr	r3, [r7, #28]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	61fb      	str	r3, [r7, #28]
 800d204:	69fb      	ldr	r3, [r7, #28]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d1e8      	bne.n	800d1dc <tcp_listen_with_backlog_and_err+0x54>
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 800d20a:	2002      	movs	r0, #2
 800d20c:	f7fe fc08 	bl	800ba20 <memp_malloc>
 800d210:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 800d212:	69fb      	ldr	r3, [r7, #28]
 800d214:	2b00      	cmp	r3, #0
 800d216:	d102      	bne.n	800d21e <tcp_listen_with_backlog_and_err+0x96>
    res = ERR_MEM;
 800d218:	23ff      	movs	r3, #255	; 0xff
 800d21a:	76fb      	strb	r3, [r7, #27]
    goto done;
 800d21c:	e056      	b.n	800d2cc <tcp_listen_with_backlog_and_err+0x144>
  }
  lpcb->callback_arg = pcb->callback_arg;
 800d21e:	68fb      	ldr	r3, [r7, #12]
 800d220:	691a      	ldr	r2, [r3, #16]
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 800d226:	68fb      	ldr	r3, [r7, #12]
 800d228:	8ada      	ldrh	r2, [r3, #22]
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 800d22e:	69fb      	ldr	r3, [r7, #28]
 800d230:	2201      	movs	r2, #1
 800d232:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 800d234:	68fb      	ldr	r3, [r7, #12]
 800d236:	7d5a      	ldrb	r2, [r3, #21]
 800d238:	69fb      	ldr	r3, [r7, #28]
 800d23a:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	7a1a      	ldrb	r2, [r3, #8]
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 800d244:	68fb      	ldr	r3, [r7, #12]
 800d246:	7a9a      	ldrb	r2, [r3, #10]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	729a      	strb	r2, [r3, #10]
  lpcb->tos = pcb->tos;
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	7a5a      	ldrb	r2, [r3, #9]
 800d250:	69fb      	ldr	r3, [r7, #28]
 800d252:	725a      	strb	r2, [r3, #9]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	681a      	ldr	r2, [r3, #0]
 800d258:	69fb      	ldr	r3, [r7, #28]
 800d25a:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 800d25c:	68fb      	ldr	r3, [r7, #12]
 800d25e:	8adb      	ldrh	r3, [r3, #22]
 800d260:	2b00      	cmp	r3, #0
 800d262:	d021      	beq.n	800d2a8 <tcp_listen_with_backlog_and_err+0x120>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 800d264:	4b23      	ldr	r3, [pc, #140]	; (800d2f4 <tcp_listen_with_backlog_and_err+0x16c>)
 800d266:	681a      	ldr	r2, [r3, #0]
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	429a      	cmp	r2, r3
 800d26c:	d105      	bne.n	800d27a <tcp_listen_with_backlog_and_err+0xf2>
 800d26e:	4b21      	ldr	r3, [pc, #132]	; (800d2f4 <tcp_listen_with_backlog_and_err+0x16c>)
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	68db      	ldr	r3, [r3, #12]
 800d274:	4a1f      	ldr	r2, [pc, #124]	; (800d2f4 <tcp_listen_with_backlog_and_err+0x16c>)
 800d276:	6013      	str	r3, [r2, #0]
 800d278:	e013      	b.n	800d2a2 <tcp_listen_with_backlog_and_err+0x11a>
 800d27a:	4b1e      	ldr	r3, [pc, #120]	; (800d2f4 <tcp_listen_with_backlog_and_err+0x16c>)
 800d27c:	681b      	ldr	r3, [r3, #0]
 800d27e:	617b      	str	r3, [r7, #20]
 800d280:	e00c      	b.n	800d29c <tcp_listen_with_backlog_and_err+0x114>
 800d282:	697b      	ldr	r3, [r7, #20]
 800d284:	68da      	ldr	r2, [r3, #12]
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d104      	bne.n	800d296 <tcp_listen_with_backlog_and_err+0x10e>
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	68da      	ldr	r2, [r3, #12]
 800d290:	697b      	ldr	r3, [r7, #20]
 800d292:	60da      	str	r2, [r3, #12]
 800d294:	e005      	b.n	800d2a2 <tcp_listen_with_backlog_and_err+0x11a>
 800d296:	697b      	ldr	r3, [r7, #20]
 800d298:	68db      	ldr	r3, [r3, #12]
 800d29a:	617b      	str	r3, [r7, #20]
 800d29c:	697b      	ldr	r3, [r7, #20]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1ef      	bne.n	800d282 <tcp_listen_with_backlog_and_err+0xfa>
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	60da      	str	r2, [r3, #12]
  }
  memp_free(MEMP_TCP_PCB, pcb);
 800d2a8:	68f9      	ldr	r1, [r7, #12]
 800d2aa:	2001      	movs	r0, #1
 800d2ac:	f7fe fc0a 	bl	800bac4 <memp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 800d2b0:	69fb      	ldr	r3, [r7, #28]
 800d2b2:	4a11      	ldr	r2, [pc, #68]	; (800d2f8 <tcp_listen_with_backlog_and_err+0x170>)
 800d2b4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 800d2b6:	4b0e      	ldr	r3, [pc, #56]	; (800d2f0 <tcp_listen_with_backlog_and_err+0x168>)
 800d2b8:	681a      	ldr	r2, [r3, #0]
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	60da      	str	r2, [r3, #12]
 800d2be:	4a0c      	ldr	r2, [pc, #48]	; (800d2f0 <tcp_listen_with_backlog_and_err+0x168>)
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	6013      	str	r3, [r2, #0]
 800d2c4:	f004 fe36 	bl	8011f34 <tcp_timer_needed>
  res = ERR_OK;
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d002      	beq.n	800d2d8 <tcp_listen_with_backlog_and_err+0x150>
    *err = res;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	7efa      	ldrb	r2, [r7, #27]
 800d2d6:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 800d2d8:	69fb      	ldr	r3, [r7, #28]
}
 800d2da:	4618      	mov	r0, r3
 800d2dc:	3720      	adds	r7, #32
 800d2de:	46bd      	mov	sp, r7
 800d2e0:	bd80      	pop	{r7, pc}
 800d2e2:	bf00      	nop
 800d2e4:	080195c8 	.word	0x080195c8
 800d2e8:	080196bc 	.word	0x080196bc
 800d2ec:	08019604 	.word	0x08019604
 800d2f0:	2000793c 	.word	0x2000793c
 800d2f4:	20007940 	.word	0x20007940
 800d2f8:	0800d169 	.word	0x0800d169

0800d2fc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d2fc:	b580      	push	{r7, lr}
 800d2fe:	b084      	sub	sp, #16
 800d300:	af00      	add	r7, sp, #0
 800d302:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d308:	687a      	ldr	r2, [r7, #4]
 800d30a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d30c:	4413      	add	r3, r2
 800d30e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d314:	687a      	ldr	r2, [r7, #4]
 800d316:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d318:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d31c:	d802      	bhi.n	800d324 <tcp_update_rcv_ann_wnd+0x28>
 800d31e:	687a      	ldr	r2, [r7, #4]
 800d320:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d322:	e001      	b.n	800d328 <tcp_update_rcv_ann_wnd+0x2c>
 800d324:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800d328:	4413      	add	r3, r2
 800d32a:	68fa      	ldr	r2, [r7, #12]
 800d32c:	1ad3      	subs	r3, r2, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	db08      	blt.n	800d344 <tcp_update_rcv_ann_wnd+0x48>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	68fa      	ldr	r2, [r7, #12]
 800d340:	1ad3      	subs	r3, r2, r3
 800d342:	e020      	b.n	800d386 <tcp_update_rcv_ann_wnd+0x8a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d34c:	1ad3      	subs	r3, r2, r3
 800d34e:	2b00      	cmp	r3, #0
 800d350:	dd03      	ble.n	800d35a <tcp_update_rcv_ann_wnd+0x5e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	2200      	movs	r2, #0
 800d356:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d358:	e014      	b.n	800d384 <tcp_update_rcv_ann_wnd+0x88>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d362:	1ad3      	subs	r3, r2, r3
 800d364:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d366:	68bb      	ldr	r3, [r7, #8]
 800d368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d36c:	d306      	bcc.n	800d37c <tcp_update_rcv_ann_wnd+0x80>
 800d36e:	4b08      	ldr	r3, [pc, #32]	; (800d390 <tcp_update_rcv_ann_wnd+0x94>)
 800d370:	f44f 7242 	mov.w	r2, #776	; 0x308
 800d374:	4907      	ldr	r1, [pc, #28]	; (800d394 <tcp_update_rcv_ann_wnd+0x98>)
 800d376:	4808      	ldr	r0, [pc, #32]	; (800d398 <tcp_update_rcv_ann_wnd+0x9c>)
 800d378:	f008 fd2c 	bl	8015dd4 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d37c:	68bb      	ldr	r3, [r7, #8]
 800d37e:	b29a      	uxth	r2, r3
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d384:	2300      	movs	r3, #0
  }
}
 800d386:	4618      	mov	r0, r3
 800d388:	3710      	adds	r7, #16
 800d38a:	46bd      	mov	sp, r7
 800d38c:	bd80      	pop	{r7, pc}
 800d38e:	bf00      	nop
 800d390:	080195c8 	.word	0x080195c8
 800d394:	080196e0 	.word	0x080196e0
 800d398:	08019604 	.word	0x08019604

0800d39c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b084      	sub	sp, #16
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
 800d3a4:	460b      	mov	r3, r1
 800d3a6:	807b      	strh	r3, [r7, #2]
  int wnd_inflation;

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	7d1b      	ldrb	r3, [r3, #20]
 800d3ac:	2b01      	cmp	r3, #1
 800d3ae:	d106      	bne.n	800d3be <tcp_recved+0x22>
 800d3b0:	4b23      	ldr	r3, [pc, #140]	; (800d440 <tcp_recved+0xa4>)
 800d3b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 800d3b6:	4923      	ldr	r1, [pc, #140]	; (800d444 <tcp_recved+0xa8>)
 800d3b8:	4823      	ldr	r0, [pc, #140]	; (800d448 <tcp_recved+0xac>)
 800d3ba:	f008 fd0b 	bl	8015dd4 <iprintf>
    pcb->state != LISTEN);

  pcb->rcv_wnd += len;
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d3c2:	887b      	ldrh	r3, [r7, #2]
 800d3c4:	4413      	add	r3, r2
 800d3c6:	b29a      	uxth	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	851a      	strh	r2, [r3, #40]	; 0x28
  if (pcb->rcv_wnd > TCP_WND_MAX(pcb)) {
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3d0:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d3d4:	d904      	bls.n	800d3e0 <tcp_recved+0x44>
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d3dc:	851a      	strh	r2, [r3, #40]	; 0x28
 800d3de:	e017      	b.n	800d410 <tcp_recved+0x74>
  } else if (pcb->rcv_wnd == 0) {
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d113      	bne.n	800d410 <tcp_recved+0x74>
    /* rcv_wnd overflowed */
    if ((pcb->state == CLOSE_WAIT) || (pcb->state == LAST_ACK)) {
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	7d1b      	ldrb	r3, [r3, #20]
 800d3ec:	2b07      	cmp	r3, #7
 800d3ee:	d003      	beq.n	800d3f8 <tcp_recved+0x5c>
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	7d1b      	ldrb	r3, [r3, #20]
 800d3f4:	2b09      	cmp	r3, #9
 800d3f6:	d104      	bne.n	800d402 <tcp_recved+0x66>
      /* In passive close, we allow this, since the FIN bit is added to rcv_wnd
         by the stack itself, since it is not mandatory for an application
         to call tcp_recved() for the FIN bit, but e.g. the netconn API does so. */
      pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d3fe:	851a      	strh	r2, [r3, #40]	; 0x28
 800d400:	e006      	b.n	800d410 <tcp_recved+0x74>
    } else {
      LWIP_ASSERT("tcp_recved: len wrapped rcv_wnd\n", 0);
 800d402:	4b0f      	ldr	r3, [pc, #60]	; (800d440 <tcp_recved+0xa4>)
 800d404:	f240 322d 	movw	r2, #813	; 0x32d
 800d408:	4910      	ldr	r1, [pc, #64]	; (800d44c <tcp_recved+0xb0>)
 800d40a:	480f      	ldr	r0, [pc, #60]	; (800d448 <tcp_recved+0xac>)
 800d40c:	f008 fce2 	bl	8015dd4 <iprintf>
    }
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d410:	6878      	ldr	r0, [r7, #4]
 800d412:	f7ff ff73 	bl	800d2fc <tcp_update_rcv_ann_wnd>
 800d416:	4603      	mov	r3, r0
 800d418:	60fb      	str	r3, [r7, #12]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d420:	db09      	blt.n	800d436 <tcp_recved+0x9a>
    tcp_ack_now(pcb);
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	7e9b      	ldrb	r3, [r3, #26]
 800d426:	f043 0302 	orr.w	r3, r3, #2
 800d42a:	b2da      	uxtb	r2, r3
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800d430:	6878      	ldr	r0, [r7, #4]
 800d432:	f004 f8a5 	bl	8011580 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
         len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d436:	bf00      	nop
 800d438:	3710      	adds	r7, #16
 800d43a:	46bd      	mov	sp, r7
 800d43c:	bd80      	pop	{r7, pc}
 800d43e:	bf00      	nop
 800d440:	080195c8 	.word	0x080195c8
 800d444:	080196fc 	.word	0x080196fc
 800d448:	08019604 	.word	0x08019604
 800d44c:	08019724 	.word	0x08019724

0800d450 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d450:	b480      	push	{r7}
 800d452:	b083      	sub	sp, #12
 800d454:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d456:	2300      	movs	r3, #0
 800d458:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  if (tcp_port++ == TCP_LOCAL_PORT_RANGE_END) {
 800d45a:	4b1d      	ldr	r3, [pc, #116]	; (800d4d0 <tcp_new_port+0x80>)
 800d45c:	881b      	ldrh	r3, [r3, #0]
 800d45e:	1c5a      	adds	r2, r3, #1
 800d460:	b291      	uxth	r1, r2
 800d462:	4a1b      	ldr	r2, [pc, #108]	; (800d4d0 <tcp_new_port+0x80>)
 800d464:	8011      	strh	r1, [r2, #0]
 800d466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d46a:	4293      	cmp	r3, r2
 800d46c:	d103      	bne.n	800d476 <tcp_new_port+0x26>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d46e:	4b18      	ldr	r3, [pc, #96]	; (800d4d0 <tcp_new_port+0x80>)
 800d470:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d474:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d476:	2300      	movs	r3, #0
 800d478:	71fb      	strb	r3, [r7, #7]
 800d47a:	e01e      	b.n	800d4ba <tcp_new_port+0x6a>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d47c:	79fb      	ldrb	r3, [r7, #7]
 800d47e:	4a15      	ldr	r2, [pc, #84]	; (800d4d4 <tcp_new_port+0x84>)
 800d480:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	603b      	str	r3, [r7, #0]
 800d488:	e011      	b.n	800d4ae <tcp_new_port+0x5e>
      if (pcb->local_port == tcp_port) {
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	8ada      	ldrh	r2, [r3, #22]
 800d48e:	4b10      	ldr	r3, [pc, #64]	; (800d4d0 <tcp_new_port+0x80>)
 800d490:	881b      	ldrh	r3, [r3, #0]
 800d492:	429a      	cmp	r2, r3
 800d494:	d108      	bne.n	800d4a8 <tcp_new_port+0x58>
        if (++n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d496:	88bb      	ldrh	r3, [r7, #4]
 800d498:	3301      	adds	r3, #1
 800d49a:	80bb      	strh	r3, [r7, #4]
 800d49c:	88bb      	ldrh	r3, [r7, #4]
 800d49e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d4a2:	d3da      	bcc.n	800d45a <tcp_new_port+0xa>
          return 0;
 800d4a4:	2300      	movs	r3, #0
 800d4a6:	e00d      	b.n	800d4c4 <tcp_new_port+0x74>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	68db      	ldr	r3, [r3, #12]
 800d4ac:	603b      	str	r3, [r7, #0]
 800d4ae:	683b      	ldr	r3, [r7, #0]
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d1ea      	bne.n	800d48a <tcp_new_port+0x3a>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d4b4:	79fb      	ldrb	r3, [r7, #7]
 800d4b6:	3301      	adds	r3, #1
 800d4b8:	71fb      	strb	r3, [r7, #7]
 800d4ba:	79fb      	ldrb	r3, [r7, #7]
 800d4bc:	2b03      	cmp	r3, #3
 800d4be:	d9dd      	bls.n	800d47c <tcp_new_port+0x2c>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d4c0:	4b03      	ldr	r3, [pc, #12]	; (800d4d0 <tcp_new_port+0x80>)
 800d4c2:	881b      	ldrh	r3, [r3, #0]
}
 800d4c4:	4618      	mov	r0, r3
 800d4c6:	370c      	adds	r7, #12
 800d4c8:	46bd      	mov	sp, r7
 800d4ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4ce:	4770      	bx	lr
 800d4d0:	20000008 	.word	0x20000008
 800d4d4:	0801a5a4 	.word	0x0801a5a4

0800d4d8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d4d8:	b5b0      	push	{r4, r5, r7, lr}
 800d4da:	b08c      	sub	sp, #48	; 0x30
 800d4dc:	af02      	add	r7, sp, #8
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d4de:	2300      	movs	r3, #0
 800d4e0:	777b      	strb	r3, [r7, #29]

  ++tcp_ticks;
 800d4e2:	4b9a      	ldr	r3, [pc, #616]	; (800d74c <tcp_slowtmr+0x274>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3301      	adds	r3, #1
 800d4e8:	4a98      	ldr	r2, [pc, #608]	; (800d74c <tcp_slowtmr+0x274>)
 800d4ea:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d4ec:	4b98      	ldr	r3, [pc, #608]	; (800d750 <tcp_slowtmr+0x278>)
 800d4ee:	781b      	ldrb	r3, [r3, #0]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	b2da      	uxtb	r2, r3
 800d4f4:	4b96      	ldr	r3, [pc, #600]	; (800d750 <tcp_slowtmr+0x278>)
 800d4f6:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	623b      	str	r3, [r7, #32]
  pcb = tcp_active_pcbs;
 800d4fc:	4b95      	ldr	r3, [pc, #596]	; (800d754 <tcp_slowtmr+0x27c>)
 800d4fe:	681b      	ldr	r3, [r3, #0]
 800d500:	627b      	str	r3, [r7, #36]	; 0x24
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d502:	e22f      	b.n	800d964 <tcp_slowtmr+0x48c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d506:	7d1b      	ldrb	r3, [r3, #20]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d106      	bne.n	800d51a <tcp_slowtmr+0x42>
 800d50c:	4b92      	ldr	r3, [pc, #584]	; (800d758 <tcp_slowtmr+0x280>)
 800d50e:	f44f 727c 	mov.w	r2, #1008	; 0x3f0
 800d512:	4992      	ldr	r1, [pc, #584]	; (800d75c <tcp_slowtmr+0x284>)
 800d514:	4892      	ldr	r0, [pc, #584]	; (800d760 <tcp_slowtmr+0x288>)
 800d516:	f008 fc5d 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d51c:	7d1b      	ldrb	r3, [r3, #20]
 800d51e:	2b01      	cmp	r3, #1
 800d520:	d106      	bne.n	800d530 <tcp_slowtmr+0x58>
 800d522:	4b8d      	ldr	r3, [pc, #564]	; (800d758 <tcp_slowtmr+0x280>)
 800d524:	f240 32f1 	movw	r2, #1009	; 0x3f1
 800d528:	498e      	ldr	r1, [pc, #568]	; (800d764 <tcp_slowtmr+0x28c>)
 800d52a:	488d      	ldr	r0, [pc, #564]	; (800d760 <tcp_slowtmr+0x288>)
 800d52c:	f008 fc52 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d532:	7d1b      	ldrb	r3, [r3, #20]
 800d534:	2b0a      	cmp	r3, #10
 800d536:	d106      	bne.n	800d546 <tcp_slowtmr+0x6e>
 800d538:	4b87      	ldr	r3, [pc, #540]	; (800d758 <tcp_slowtmr+0x280>)
 800d53a:	f240 32f2 	movw	r2, #1010	; 0x3f2
 800d53e:	498a      	ldr	r1, [pc, #552]	; (800d768 <tcp_slowtmr+0x290>)
 800d540:	4887      	ldr	r0, [pc, #540]	; (800d760 <tcp_slowtmr+0x288>)
 800d542:	f008 fc47 	bl	8015dd4 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d548:	7f5a      	ldrb	r2, [r3, #29]
 800d54a:	4b81      	ldr	r3, [pc, #516]	; (800d750 <tcp_slowtmr+0x278>)
 800d54c:	781b      	ldrb	r3, [r3, #0]
 800d54e:	429a      	cmp	r2, r3
 800d550:	d103      	bne.n	800d55a <tcp_slowtmr+0x82>
      /* skip this pcb, we have already processed it */
      pcb = pcb->next;
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	627b      	str	r3, [r7, #36]	; 0x24
      continue;
 800d558:	e204      	b.n	800d964 <tcp_slowtmr+0x48c>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d55a:	4b7d      	ldr	r3, [pc, #500]	; (800d750 <tcp_slowtmr+0x278>)
 800d55c:	781a      	ldrb	r2, [r3, #0]
 800d55e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d560:	775a      	strb	r2, [r3, #29]

    pcb_remove = 0;
 800d562:	2300      	movs	r3, #0
 800d564:	77fb      	strb	r3, [r7, #31]
    pcb_reset = 0;
 800d566:	2300      	movs	r3, #0
 800d568:	77bb      	strb	r3, [r7, #30]

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	7d1b      	ldrb	r3, [r3, #20]
 800d56e:	2b02      	cmp	r3, #2
 800d570:	d108      	bne.n	800d584 <tcp_slowtmr+0xac>
 800d572:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d574:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d578:	2b05      	cmp	r3, #5
 800d57a:	d903      	bls.n	800d584 <tcp_slowtmr+0xac>
      ++pcb_remove;
 800d57c:	7ffb      	ldrb	r3, [r7, #31]
 800d57e:	3301      	adds	r3, #1
 800d580:	77fb      	strb	r3, [r7, #31]
 800d582:	e0a2      	b.n	800d6ca <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    }
    else if (pcb->nrtx >= TCP_MAXRTX) {
 800d584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d586:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d58a:	2b0b      	cmp	r3, #11
 800d58c:	d903      	bls.n	800d596 <tcp_slowtmr+0xbe>
      ++pcb_remove;
 800d58e:	7ffb      	ldrb	r3, [r7, #31]
 800d590:	3301      	adds	r3, #1
 800d592:	77fb      	strb	r3, [r7, #31]
 800d594:	e099      	b.n	800d6ca <tcp_slowtmr+0x1f2>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d598:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d032      	beq.n	800d606 <tcp_slowtmr+0x12e>
        /* If snd_wnd is zero, use persist timer to send 1 byte probes
         * instead of using the standard retransmission mechanism. */
        u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff-1];
 800d5a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5a2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d5a6:	3b01      	subs	r3, #1
 800d5a8:	4a70      	ldr	r2, [pc, #448]	; (800d76c <tcp_slowtmr+0x294>)
 800d5aa:	5cd3      	ldrb	r3, [r2, r3]
 800d5ac:	773b      	strb	r3, [r7, #28]
        if (pcb->persist_cnt < backoff_cnt) {
 800d5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5b0:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d5b4:	7f3a      	ldrb	r2, [r7, #28]
 800d5b6:	429a      	cmp	r2, r3
 800d5b8:	d907      	bls.n	800d5ca <tcp_slowtmr+0xf2>
          pcb->persist_cnt++;
 800d5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5bc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d5c0:	3301      	adds	r3, #1
 800d5c2:	b2da      	uxtb	r2, r3
 800d5c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5c6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
        }
        if (pcb->persist_cnt >= backoff_cnt) {
 800d5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5cc:	f893 309c 	ldrb.w	r3, [r3, #156]	; 0x9c
 800d5d0:	7f3a      	ldrb	r2, [r7, #28]
 800d5d2:	429a      	cmp	r2, r3
 800d5d4:	d879      	bhi.n	800d6ca <tcp_slowtmr+0x1f2>
          if (tcp_zero_window_probe(pcb) == ERR_OK) {
 800d5d6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d5d8:	f004 fbec 	bl	8011db4 <tcp_zero_window_probe>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d173      	bne.n	800d6ca <tcp_slowtmr+0x1f2>
            pcb->persist_cnt = 0;
 800d5e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
            if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ec:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d5f0:	2b06      	cmp	r3, #6
 800d5f2:	d86a      	bhi.n	800d6ca <tcp_slowtmr+0x1f2>
              pcb->persist_backoff++;
 800d5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5f6:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800d5fa:	3301      	adds	r3, #1
 800d5fc:	b2da      	uxtb	r2, r3
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800d604:	e061      	b.n	800d6ca <tcp_slowtmr+0x1f2>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if (pcb->rtime >= 0) {
 800d606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d608:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	db08      	blt.n	800d622 <tcp_slowtmr+0x14a>
          ++pcb->rtime;
 800d610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d612:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d616:	b29b      	uxth	r3, r3
 800d618:	3301      	adds	r3, #1
 800d61a:	b29b      	uxth	r3, r3
 800d61c:	b21a      	sxth	r2, r3
 800d61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d620:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->unacked != NULL && pcb->rtime >= pcb->rto) {
 800d622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d624:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d626:	2b00      	cmp	r3, #0
 800d628:	d04f      	beq.n	800d6ca <tcp_slowtmr+0x1f2>
 800d62a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d62c:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d632:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d636:	429a      	cmp	r2, r3
 800d638:	db47      	blt.n	800d6ca <tcp_slowtmr+0x1f2>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));

          /* Double retransmission time-out unless we are trying to
           * connect to somebody (i.e., we are in SYN_SENT). */
          if (pcb->state != SYN_SENT) {
 800d63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d63c:	7d1b      	ldrb	r3, [r3, #20]
 800d63e:	2b02      	cmp	r3, #2
 800d640:	d018      	beq.n	800d674 <tcp_slowtmr+0x19c>
            u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff)-1);
 800d642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d644:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d648:	2b0c      	cmp	r3, #12
 800d64a:	bf28      	it	cs
 800d64c:	230c      	movcs	r3, #12
 800d64e:	76fb      	strb	r3, [r7, #27]
            pcb->rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d652:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d656:	10db      	asrs	r3, r3, #3
 800d658:	b21b      	sxth	r3, r3
 800d65a:	461a      	mov	r2, r3
 800d65c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d65e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d662:	4413      	add	r3, r2
 800d664:	7efa      	ldrb	r2, [r7, #27]
 800d666:	4942      	ldr	r1, [pc, #264]	; (800d770 <tcp_slowtmr+0x298>)
 800d668:	5c8a      	ldrb	r2, [r1, r2]
 800d66a:	4093      	lsls	r3, r2
 800d66c:	b21a      	sxth	r2, r3
 800d66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d670:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
          }

          /* Reset the retransmission timer. */
          pcb->rtime = 0;
 800d674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d676:	2200      	movs	r2, #0
 800d678:	861a      	strh	r2, [r3, #48]	; 0x30

          /* Reduce congestion window and ssthresh. */
          eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d67a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d67c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800d680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d682:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d686:	4293      	cmp	r3, r2
 800d688:	bf28      	it	cs
 800d68a:	4613      	movcs	r3, r2
 800d68c:	833b      	strh	r3, [r7, #24]
          pcb->ssthresh = eff_wnd >> 1;
 800d68e:	8b3b      	ldrh	r3, [r7, #24]
 800d690:	085b      	lsrs	r3, r3, #1
 800d692:	b29a      	uxth	r2, r3
 800d694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d696:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d69c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d6a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6a2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6a4:	005b      	lsls	r3, r3, #1
 800d6a6:	b29b      	uxth	r3, r3
 800d6a8:	429a      	cmp	r2, r3
 800d6aa:	d206      	bcs.n	800d6ba <tcp_slowtmr+0x1e2>
            pcb->ssthresh = (pcb->mss << 1);
 800d6ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d6b0:	005b      	lsls	r3, r3, #1
 800d6b2:	b29a      	uxth	r2, r3
 800d6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6b6:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
          }
          pcb->cwnd = pcb->mss;
 800d6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6bc:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d6be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6c0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          /* The following needs to be called AFTER cwnd is set to one
             mss - STJ */
          tcp_rexmit_rto(pcb);
 800d6c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6c6:	f004 fa59 	bl	8011b7c <tcp_rexmit_rto>
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6cc:	7d1b      	ldrb	r3, [r3, #20]
 800d6ce:	2b06      	cmp	r3, #6
 800d6d0:	d10f      	bne.n	800d6f2 <tcp_slowtmr+0x21a>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d6d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6d4:	7e9b      	ldrb	r3, [r3, #26]
 800d6d6:	f003 0310 	and.w	r3, r3, #16
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d009      	beq.n	800d6f2 <tcp_slowtmr+0x21a>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d6de:	4b1b      	ldr	r3, [pc, #108]	; (800d74c <tcp_slowtmr+0x274>)
 800d6e0:	681a      	ldr	r2, [r3, #0]
 800d6e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6e4:	6a1b      	ldr	r3, [r3, #32]
 800d6e6:	1ad3      	subs	r3, r2, r3
 800d6e8:	2b28      	cmp	r3, #40	; 0x28
 800d6ea:	d902      	bls.n	800d6f2 <tcp_slowtmr+0x21a>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d6ec:	7ffb      	ldrb	r3, [r7, #31]
 800d6ee:	3301      	adds	r3, #1
 800d6f0:	77fb      	strb	r3, [r7, #31]
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d6f4:	7a1b      	ldrb	r3, [r3, #8]
 800d6f6:	f003 0308 	and.w	r3, r3, #8
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d065      	beq.n	800d7ca <tcp_slowtmr+0x2f2>
       ((pcb->state == ESTABLISHED) ||
 800d6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d700:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d702:	2b04      	cmp	r3, #4
 800d704:	d003      	beq.n	800d70e <tcp_slowtmr+0x236>
        (pcb->state == CLOSE_WAIT))) {
 800d706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d708:	7d1b      	ldrb	r3, [r3, #20]
       ((pcb->state == ESTABLISHED) ||
 800d70a:	2b07      	cmp	r3, #7
 800d70c:	d15d      	bne.n	800d7ca <tcp_slowtmr+0x2f2>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d70e:	4b0f      	ldr	r3, [pc, #60]	; (800d74c <tcp_slowtmr+0x274>)
 800d710:	681a      	ldr	r2, [r3, #0]
 800d712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d714:	6a1b      	ldr	r3, [r3, #32]
 800d716:	1ad2      	subs	r2, r2, r3
         (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL)
 800d718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d71a:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d720:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d724:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d726:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
 800d72a:	fb00 f303 	mul.w	r3, r0, r3
 800d72e:	440b      	add	r3, r1
 800d730:	4910      	ldr	r1, [pc, #64]	; (800d774 <tcp_slowtmr+0x29c>)
 800d732:	fba1 1303 	umull	r1, r3, r1, r3
 800d736:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d738:	429a      	cmp	r2, r3
 800d73a:	d91d      	bls.n	800d778 <tcp_slowtmr+0x2a0>
      {
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print(TCP_DEBUG, &pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d73c:	7ffb      	ldrb	r3, [r7, #31]
 800d73e:	3301      	adds	r3, #1
 800d740:	77fb      	strb	r3, [r7, #31]
        ++pcb_reset;
 800d742:	7fbb      	ldrb	r3, [r7, #30]
 800d744:	3301      	adds	r3, #1
 800d746:	77bb      	strb	r3, [r7, #30]
 800d748:	e03f      	b.n	800d7ca <tcp_slowtmr+0x2f2>
 800d74a:	bf00      	nop
 800d74c:	20007938 	.word	0x20007938
 800d750:	20004112 	.word	0x20004112
 800d754:	20007934 	.word	0x20007934
 800d758:	080195c8 	.word	0x080195c8
 800d75c:	08019778 	.word	0x08019778
 800d760:	08019604 	.word	0x08019604
 800d764:	080197a4 	.word	0x080197a4
 800d768:	080197d0 	.word	0x080197d0
 800d76c:	0801a59c 	.word	0x0801a59c
 800d770:	0801a58c 	.word	0x0801a58c
 800d774:	10624dd3 	.word	0x10624dd3
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d778:	4b98      	ldr	r3, [pc, #608]	; (800d9dc <tcp_slowtmr+0x504>)
 800d77a:	681a      	ldr	r2, [r3, #0]
 800d77c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77e:	6a1b      	ldr	r3, [r3, #32]
 800d780:	1ad2      	subs	r2, r2, r3
                (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d784:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
 800d788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d78a:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800d78e:	4618      	mov	r0, r3
 800d790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d792:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d796:	fb03 f300 	mul.w	r3, r3, r0
 800d79a:	440b      	add	r3, r1
                / TCP_SLOW_INTERVAL)
 800d79c:	4990      	ldr	r1, [pc, #576]	; (800d9e0 <tcp_slowtmr+0x508>)
 800d79e:	fba1 1303 	umull	r1, r3, r1, r3
 800d7a2:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d7a4:	429a      	cmp	r2, r3
 800d7a6:	d910      	bls.n	800d7ca <tcp_slowtmr+0x2f2>
      {
        err = tcp_keepalive(pcb);
 800d7a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d7aa:	f004 fac6 	bl	8011d3a <tcp_keepalive>
 800d7ae:	4603      	mov	r3, r0
 800d7b0:	777b      	strb	r3, [r7, #29]
        if (err == ERR_OK) {
 800d7b2:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d7b6:	2b00      	cmp	r3, #0
 800d7b8:	d107      	bne.n	800d7ca <tcp_slowtmr+0x2f2>
          pcb->keep_cnt_sent++;
 800d7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7bc:	f893 309e 	ldrb.w	r3, [r3, #158]	; 0x9e
 800d7c0:	3301      	adds	r3, #1
 800d7c2:	b2da      	uxtb	r2, r3
 800d7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7c6:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d7ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d016      	beq.n	800d800 <tcp_slowtmr+0x328>
        (u32_t)tcp_ticks - pcb->tmr >= pcb->rto * TCP_OOSEQ_TIMEOUT) {
 800d7d2:	4b82      	ldr	r3, [pc, #520]	; (800d9dc <tcp_slowtmr+0x504>)
 800d7d4:	681a      	ldr	r2, [r3, #0]
 800d7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7d8:	6a1b      	ldr	r3, [r3, #32]
 800d7da:	1ad2      	subs	r2, r2, r3
 800d7dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7de:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7e2:	4619      	mov	r1, r3
 800d7e4:	460b      	mov	r3, r1
 800d7e6:	005b      	lsls	r3, r3, #1
 800d7e8:	440b      	add	r3, r1
 800d7ea:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d7ec:	429a      	cmp	r2, r3
 800d7ee:	d307      	bcc.n	800d800 <tcp_slowtmr+0x328>
      tcp_segs_free(pcb->ooseq);
 800d7f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7f4:	4618      	mov	r0, r3
 800d7f6:	f000 fa02 	bl	800dbfe <tcp_segs_free>
      pcb->ooseq = NULL;
 800d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7fc:	2200      	movs	r2, #0
 800d7fe:	671a      	str	r2, [r3, #112]	; 0x70
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d800:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d802:	7d1b      	ldrb	r3, [r3, #20]
 800d804:	2b03      	cmp	r3, #3
 800d806:	d109      	bne.n	800d81c <tcp_slowtmr+0x344>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d808:	4b74      	ldr	r3, [pc, #464]	; (800d9dc <tcp_slowtmr+0x504>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d80e:	6a1b      	ldr	r3, [r3, #32]
 800d810:	1ad3      	subs	r3, r2, r3
 800d812:	2b28      	cmp	r3, #40	; 0x28
 800d814:	d902      	bls.n	800d81c <tcp_slowtmr+0x344>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d816:	7ffb      	ldrb	r3, [r7, #31]
 800d818:	3301      	adds	r3, #1
 800d81a:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d81c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d81e:	7d1b      	ldrb	r3, [r3, #20]
 800d820:	2b09      	cmp	r3, #9
 800d822:	d109      	bne.n	800d838 <tcp_slowtmr+0x360>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d824:	4b6d      	ldr	r3, [pc, #436]	; (800d9dc <tcp_slowtmr+0x504>)
 800d826:	681a      	ldr	r2, [r3, #0]
 800d828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82a:	6a1b      	ldr	r3, [r3, #32]
 800d82c:	1ad3      	subs	r3, r2, r3
 800d82e:	2bf0      	cmp	r3, #240	; 0xf0
 800d830:	d902      	bls.n	800d838 <tcp_slowtmr+0x360>
        ++pcb_remove;
 800d832:	7ffb      	ldrb	r3, [r7, #31]
 800d834:	3301      	adds	r3, #1
 800d836:	77fb      	strb	r3, [r7, #31]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d838:	7ffb      	ldrb	r3, [r7, #31]
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	d05d      	beq.n	800d8fa <tcp_slowtmr+0x422>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800d83e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d840:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d844:	617b      	str	r3, [r7, #20]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800d846:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d848:	f000 fc4c 	bl	800e0e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800d84c:	6a3b      	ldr	r3, [r7, #32]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d010      	beq.n	800d874 <tcp_slowtmr+0x39c>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800d852:	4b64      	ldr	r3, [pc, #400]	; (800d9e4 <tcp_slowtmr+0x50c>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d858:	429a      	cmp	r2, r3
 800d85a:	d106      	bne.n	800d86a <tcp_slowtmr+0x392>
 800d85c:	4b62      	ldr	r3, [pc, #392]	; (800d9e8 <tcp_slowtmr+0x510>)
 800d85e:	f240 4289 	movw	r2, #1161	; 0x489
 800d862:	4962      	ldr	r1, [pc, #392]	; (800d9ec <tcp_slowtmr+0x514>)
 800d864:	4862      	ldr	r0, [pc, #392]	; (800d9f0 <tcp_slowtmr+0x518>)
 800d866:	f008 fab5 	bl	8015dd4 <iprintf>
        prev->next = pcb->next;
 800d86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d86c:	68da      	ldr	r2, [r3, #12]
 800d86e:	6a3b      	ldr	r3, [r7, #32]
 800d870:	60da      	str	r2, [r3, #12]
 800d872:	e00f      	b.n	800d894 <tcp_slowtmr+0x3bc>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800d874:	4b5b      	ldr	r3, [pc, #364]	; (800d9e4 <tcp_slowtmr+0x50c>)
 800d876:	681a      	ldr	r2, [r3, #0]
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d006      	beq.n	800d88c <tcp_slowtmr+0x3b4>
 800d87e:	4b5a      	ldr	r3, [pc, #360]	; (800d9e8 <tcp_slowtmr+0x510>)
 800d880:	f240 428d 	movw	r2, #1165	; 0x48d
 800d884:	495b      	ldr	r1, [pc, #364]	; (800d9f4 <tcp_slowtmr+0x51c>)
 800d886:	485a      	ldr	r0, [pc, #360]	; (800d9f0 <tcp_slowtmr+0x518>)
 800d888:	f008 faa4 	bl	8015dd4 <iprintf>
        tcp_active_pcbs = pcb->next;
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	4a54      	ldr	r2, [pc, #336]	; (800d9e4 <tcp_slowtmr+0x50c>)
 800d892:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800d894:	7fbb      	ldrb	r3, [r7, #30]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d010      	beq.n	800d8bc <tcp_slowtmr+0x3e4>
        tcp_rst(pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d89c:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 800d89e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a0:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800d8a2:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 800d8a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8a6:	1d1d      	adds	r5, r3, #4
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	8adb      	ldrh	r3, [r3, #22]
 800d8ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8ae:	8b12      	ldrh	r2, [r2, #24]
 800d8b0:	9201      	str	r2, [sp, #4]
 800d8b2:	9300      	str	r3, [sp, #0]
 800d8b4:	462b      	mov	r3, r5
 800d8b6:	4622      	mov	r2, r4
 800d8b8:	f004 f8ea 	bl	8011a90 <tcp_rst>
                 pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800d8bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8be:	691b      	ldr	r3, [r3, #16]
 800d8c0:	613b      	str	r3, [r7, #16]
      last_state = pcb->state;
 800d8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8c4:	7d1b      	ldrb	r3, [r3, #20]
 800d8c6:	73fb      	strb	r3, [r7, #15]
      pcb2 = pcb;
 800d8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ca:	60bb      	str	r3, [r7, #8]
      pcb = pcb->next;
 800d8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ce:	68db      	ldr	r3, [r3, #12]
 800d8d0:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800d8d2:	68b9      	ldr	r1, [r7, #8]
 800d8d4:	2001      	movs	r0, #1
 800d8d6:	f7fe f8f5 	bl	800bac4 <memp_free>

      tcp_active_pcbs_changed = 0;
 800d8da:	4b47      	ldr	r3, [pc, #284]	; (800d9f8 <tcp_slowtmr+0x520>)
 800d8dc:	2200      	movs	r2, #0
 800d8de:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800d8e0:	697b      	ldr	r3, [r7, #20]
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d004      	beq.n	800d8f0 <tcp_slowtmr+0x418>
 800d8e6:	697b      	ldr	r3, [r7, #20]
 800d8e8:	f06f 010c 	mvn.w	r1, #12
 800d8ec:	6938      	ldr	r0, [r7, #16]
 800d8ee:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800d8f0:	4b41      	ldr	r3, [pc, #260]	; (800d9f8 <tcp_slowtmr+0x520>)
 800d8f2:	781b      	ldrb	r3, [r3, #0]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d035      	beq.n	800d964 <tcp_slowtmr+0x48c>
        goto tcp_slowtmr_start;
 800d8f8:	e5fe      	b.n	800d4f8 <tcp_slowtmr+0x20>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800d8fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fc:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800d8fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d900:	68db      	ldr	r3, [r3, #12]
 800d902:	627b      	str	r3, [r7, #36]	; 0x24

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800d904:	6a3b      	ldr	r3, [r7, #32]
 800d906:	7edb      	ldrb	r3, [r3, #27]
 800d908:	3301      	adds	r3, #1
 800d90a:	b2da      	uxtb	r2, r3
 800d90c:	6a3b      	ldr	r3, [r7, #32]
 800d90e:	76da      	strb	r2, [r3, #27]
      if (prev->polltmr >= prev->pollinterval) {
 800d910:	6a3b      	ldr	r3, [r7, #32]
 800d912:	7eda      	ldrb	r2, [r3, #27]
 800d914:	6a3b      	ldr	r3, [r7, #32]
 800d916:	7f1b      	ldrb	r3, [r3, #28]
 800d918:	429a      	cmp	r2, r3
 800d91a:	d323      	bcc.n	800d964 <tcp_slowtmr+0x48c>
        prev->polltmr = 0;
 800d91c:	6a3b      	ldr	r3, [r7, #32]
 800d91e:	2200      	movs	r2, #0
 800d920:	76da      	strb	r2, [r3, #27]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800d922:	4b35      	ldr	r3, [pc, #212]	; (800d9f8 <tcp_slowtmr+0x520>)
 800d924:	2200      	movs	r2, #0
 800d926:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800d928:	6a3b      	ldr	r3, [r7, #32]
 800d92a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d00a      	beq.n	800d948 <tcp_slowtmr+0x470>
 800d932:	6a3b      	ldr	r3, [r7, #32]
 800d934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d938:	6a3a      	ldr	r2, [r7, #32]
 800d93a:	6912      	ldr	r2, [r2, #16]
 800d93c:	6a39      	ldr	r1, [r7, #32]
 800d93e:	4610      	mov	r0, r2
 800d940:	4798      	blx	r3
 800d942:	4603      	mov	r3, r0
 800d944:	777b      	strb	r3, [r7, #29]
 800d946:	e001      	b.n	800d94c <tcp_slowtmr+0x474>
 800d948:	2300      	movs	r3, #0
 800d94a:	777b      	strb	r3, [r7, #29]
        if (tcp_active_pcbs_changed) {
 800d94c:	4b2a      	ldr	r3, [pc, #168]	; (800d9f8 <tcp_slowtmr+0x520>)
 800d94e:	781b      	ldrb	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d000      	beq.n	800d956 <tcp_slowtmr+0x47e>
          goto tcp_slowtmr_start;
 800d954:	e5d0      	b.n	800d4f8 <tcp_slowtmr+0x20>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800d956:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <tcp_slowtmr+0x48c>
          tcp_output(prev);
 800d95e:	6a38      	ldr	r0, [r7, #32]
 800d960:	f003 fe0e 	bl	8011580 <tcp_output>
  while (pcb != NULL) {
 800d964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d966:	2b00      	cmp	r3, #0
 800d968:	f47f adcc 	bne.w	800d504 <tcp_slowtmr+0x2c>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800d96c:	2300      	movs	r3, #0
 800d96e:	623b      	str	r3, [r7, #32]
  pcb = tcp_tw_pcbs;
 800d970:	4b22      	ldr	r3, [pc, #136]	; (800d9fc <tcp_slowtmr+0x524>)
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800d976:	e066      	b.n	800da46 <tcp_slowtmr+0x56e>
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800d978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d97a:	7d1b      	ldrb	r3, [r3, #20]
 800d97c:	2b0a      	cmp	r3, #10
 800d97e:	d006      	beq.n	800d98e <tcp_slowtmr+0x4b6>
 800d980:	4b19      	ldr	r3, [pc, #100]	; (800d9e8 <tcp_slowtmr+0x510>)
 800d982:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800d986:	491e      	ldr	r1, [pc, #120]	; (800da00 <tcp_slowtmr+0x528>)
 800d988:	4819      	ldr	r0, [pc, #100]	; (800d9f0 <tcp_slowtmr+0x518>)
 800d98a:	f008 fa23 	bl	8015dd4 <iprintf>
    pcb_remove = 0;
 800d98e:	2300      	movs	r3, #0
 800d990:	77fb      	strb	r3, [r7, #31]

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d992:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <tcp_slowtmr+0x504>)
 800d994:	681a      	ldr	r2, [r3, #0]
 800d996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d998:	6a1b      	ldr	r3, [r3, #32]
 800d99a:	1ad3      	subs	r3, r2, r3
 800d99c:	2bf0      	cmp	r3, #240	; 0xf0
 800d99e:	d902      	bls.n	800d9a6 <tcp_slowtmr+0x4ce>
      ++pcb_remove;
 800d9a0:	7ffb      	ldrb	r3, [r7, #31]
 800d9a2:	3301      	adds	r3, #1
 800d9a4:	77fb      	strb	r3, [r7, #31]
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800d9a6:	7ffb      	ldrb	r3, [r7, #31]
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d047      	beq.n	800da3c <tcp_slowtmr+0x564>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800d9ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d9ae:	f000 fb99 	bl	800e0e4 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800d9b2:	6a3b      	ldr	r3, [r7, #32]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d027      	beq.n	800da08 <tcp_slowtmr+0x530>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800d9b8:	4b10      	ldr	r3, [pc, #64]	; (800d9fc <tcp_slowtmr+0x524>)
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d9be:	429a      	cmp	r2, r3
 800d9c0:	d106      	bne.n	800d9d0 <tcp_slowtmr+0x4f8>
 800d9c2:	4b09      	ldr	r3, [pc, #36]	; (800d9e8 <tcp_slowtmr+0x510>)
 800d9c4:	f240 42cb 	movw	r2, #1227	; 0x4cb
 800d9c8:	490e      	ldr	r1, [pc, #56]	; (800da04 <tcp_slowtmr+0x52c>)
 800d9ca:	4809      	ldr	r0, [pc, #36]	; (800d9f0 <tcp_slowtmr+0x518>)
 800d9cc:	f008 fa02 	bl	8015dd4 <iprintf>
        prev->next = pcb->next;
 800d9d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9d2:	68da      	ldr	r2, [r3, #12]
 800d9d4:	6a3b      	ldr	r3, [r7, #32]
 800d9d6:	60da      	str	r2, [r3, #12]
 800d9d8:	e026      	b.n	800da28 <tcp_slowtmr+0x550>
 800d9da:	bf00      	nop
 800d9dc:	20007938 	.word	0x20007938
 800d9e0:	10624dd3 	.word	0x10624dd3
 800d9e4:	20007934 	.word	0x20007934
 800d9e8:	080195c8 	.word	0x080195c8
 800d9ec:	08019800 	.word	0x08019800
 800d9f0:	08019604 	.word	0x08019604
 800d9f4:	0801982c 	.word	0x0801982c
 800d9f8:	20007930 	.word	0x20007930
 800d9fc:	20007944 	.word	0x20007944
 800da00:	08019858 	.word	0x08019858
 800da04:	08019888 	.word	0x08019888
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800da08:	4b12      	ldr	r3, [pc, #72]	; (800da54 <tcp_slowtmr+0x57c>)
 800da0a:	681a      	ldr	r2, [r3, #0]
 800da0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da0e:	429a      	cmp	r2, r3
 800da10:	d006      	beq.n	800da20 <tcp_slowtmr+0x548>
 800da12:	4b11      	ldr	r3, [pc, #68]	; (800da58 <tcp_slowtmr+0x580>)
 800da14:	f240 42cf 	movw	r2, #1231	; 0x4cf
 800da18:	4910      	ldr	r1, [pc, #64]	; (800da5c <tcp_slowtmr+0x584>)
 800da1a:	4811      	ldr	r0, [pc, #68]	; (800da60 <tcp_slowtmr+0x588>)
 800da1c:	f008 f9da 	bl	8015dd4 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800da20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da22:	68db      	ldr	r3, [r3, #12]
 800da24:	4a0b      	ldr	r2, [pc, #44]	; (800da54 <tcp_slowtmr+0x57c>)
 800da26:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800da28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2a:	607b      	str	r3, [r7, #4]
      pcb = pcb->next;
 800da2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da2e:	68db      	ldr	r3, [r3, #12]
 800da30:	627b      	str	r3, [r7, #36]	; 0x24
      memp_free(MEMP_TCP_PCB, pcb2);
 800da32:	6879      	ldr	r1, [r7, #4]
 800da34:	2001      	movs	r0, #1
 800da36:	f7fe f845 	bl	800bac4 <memp_free>
 800da3a:	e004      	b.n	800da46 <tcp_slowtmr+0x56e>
    } else {
      prev = pcb;
 800da3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da3e:	623b      	str	r3, [r7, #32]
      pcb = pcb->next;
 800da40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da42:	68db      	ldr	r3, [r3, #12]
 800da44:	627b      	str	r3, [r7, #36]	; 0x24
  while (pcb != NULL) {
 800da46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d195      	bne.n	800d978 <tcp_slowtmr+0x4a0>
    }
  }
}
 800da4c:	bf00      	nop
 800da4e:	3728      	adds	r7, #40	; 0x28
 800da50:	46bd      	mov	sp, r7
 800da52:	bdb0      	pop	{r4, r5, r7, pc}
 800da54:	20007944 	.word	0x20007944
 800da58:	080195c8 	.word	0x080195c8
 800da5c:	080198b0 	.word	0x080198b0
 800da60:	08019604 	.word	0x08019604

0800da64 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b082      	sub	sp, #8
 800da68:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800da6a:	4b2d      	ldr	r3, [pc, #180]	; (800db20 <tcp_fasttmr+0xbc>)
 800da6c:	781b      	ldrb	r3, [r3, #0]
 800da6e:	3301      	adds	r3, #1
 800da70:	b2da      	uxtb	r2, r3
 800da72:	4b2b      	ldr	r3, [pc, #172]	; (800db20 <tcp_fasttmr+0xbc>)
 800da74:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800da76:	4b2b      	ldr	r3, [pc, #172]	; (800db24 <tcp_fasttmr+0xc0>)
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800da7c:	e048      	b.n	800db10 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	7f5a      	ldrb	r2, [r3, #29]
 800da82:	4b27      	ldr	r3, [pc, #156]	; (800db20 <tcp_fasttmr+0xbc>)
 800da84:	781b      	ldrb	r3, [r3, #0]
 800da86:	429a      	cmp	r2, r3
 800da88:	d03f      	beq.n	800db0a <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800da8a:	4b25      	ldr	r3, [pc, #148]	; (800db20 <tcp_fasttmr+0xbc>)
 800da8c:	781a      	ldrb	r2, [r3, #0]
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	775a      	strb	r2, [r3, #29]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	7e9b      	ldrb	r3, [r3, #26]
 800da96:	f003 0301 	and.w	r3, r3, #1
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	d010      	beq.n	800dac0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800da9e:	687b      	ldr	r3, [r7, #4]
 800daa0:	7e9b      	ldrb	r3, [r3, #26]
 800daa2:	f043 0302 	orr.w	r3, r3, #2
 800daa6:	b2da      	uxtb	r2, r3
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	769a      	strb	r2, [r3, #26]
        tcp_output(pcb);
 800daac:	6878      	ldr	r0, [r7, #4]
 800daae:	f003 fd67 	bl	8011580 <tcp_output>
        pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	7e9b      	ldrb	r3, [r3, #26]
 800dab6:	f023 0303 	bic.w	r3, r3, #3
 800daba:	b2da      	uxtb	r2, r3
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	769a      	strb	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	7e9b      	ldrb	r3, [r3, #26]
 800dac4:	f003 0308 	and.w	r3, r3, #8
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d009      	beq.n	800dae0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        pcb->flags &= ~(TF_CLOSEPEND);
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7e9b      	ldrb	r3, [r3, #26]
 800dad0:	f023 0308 	bic.w	r3, r3, #8
 800dad4:	b2da      	uxtb	r2, r3
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	769a      	strb	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dada:	6878      	ldr	r0, [r7, #4]
 800dadc:	f7ff f91a 	bl	800cd14 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	68db      	ldr	r3, [r3, #12]
 800dae4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800daea:	2b00      	cmp	r3, #0
 800daec:	d00a      	beq.n	800db04 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800daee:	4b0e      	ldr	r3, [pc, #56]	; (800db28 <tcp_fasttmr+0xc4>)
 800daf0:	2200      	movs	r2, #0
 800daf2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f000 f819 	bl	800db2c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dafa:	4b0b      	ldr	r3, [pc, #44]	; (800db28 <tcp_fasttmr+0xc4>)
 800dafc:	781b      	ldrb	r3, [r3, #0]
 800dafe:	2b00      	cmp	r3, #0
 800db00:	d000      	beq.n	800db04 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800db02:	e7b8      	b.n	800da76 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800db04:	683b      	ldr	r3, [r7, #0]
 800db06:	607b      	str	r3, [r7, #4]
 800db08:	e002      	b.n	800db10 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68db      	ldr	r3, [r3, #12]
 800db0e:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d1b3      	bne.n	800da7e <tcp_fasttmr+0x1a>
    }
  }
}
 800db16:	bf00      	nop
 800db18:	3708      	adds	r7, #8
 800db1a:	46bd      	mov	sp, r7
 800db1c:	bd80      	pop	{r7, pc}
 800db1e:	bf00      	nop
 800db20:	20004112 	.word	0x20004112
 800db24:	20007934 	.word	0x20007934
 800db28:	20007930 	.word	0x20007930

0800db2c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800db2c:	b590      	push	{r4, r7, lr}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
 800db32:	6078      	str	r0, [r7, #4]
  struct pbuf *rest;
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db38:	7b5b      	ldrb	r3, [r3, #13]
 800db3a:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800db40:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800db42:	687b      	ldr	r3, [r7, #4]
 800db44:	2200      	movs	r2, #0
 800db46:	675a      	str	r2, [r3, #116]	; 0x74
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800db48:	687b      	ldr	r3, [r7, #4]
 800db4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d00b      	beq.n	800db6a <tcp_process_refused_data+0x3e>
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800db58:	687b      	ldr	r3, [r7, #4]
 800db5a:	6918      	ldr	r0, [r3, #16]
 800db5c:	2300      	movs	r3, #0
 800db5e:	68ba      	ldr	r2, [r7, #8]
 800db60:	6879      	ldr	r1, [r7, #4]
 800db62:	47a0      	blx	r4
 800db64:	4603      	mov	r3, r0
 800db66:	73fb      	strb	r3, [r7, #15]
 800db68:	e007      	b.n	800db7a <tcp_process_refused_data+0x4e>
 800db6a:	2300      	movs	r3, #0
 800db6c:	68ba      	ldr	r2, [r7, #8]
 800db6e:	6879      	ldr	r1, [r7, #4]
 800db70:	2000      	movs	r0, #0
 800db72:	f000 f88c 	bl	800dc8e <tcp_recv_null>
 800db76:	4603      	mov	r3, r0
 800db78:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800db7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d12a      	bne.n	800dbd8 <tcp_process_refused_data+0xac>
      /* did refused_data include a FIN? */
      if (refused_flags & PBUF_FLAG_TCP_FIN
 800db82:	7bbb      	ldrb	r3, [r7, #14]
 800db84:	f003 0320 	and.w	r3, r3, #32
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d033      	beq.n	800dbf4 <tcp_process_refused_data+0xc8>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db90:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800db94:	d005      	beq.n	800dba2 <tcp_process_refused_data+0x76>
          pcb->rcv_wnd++;
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800db9a:	3301      	adds	r3, #1
 800db9c:	b29a      	uxth	r2, r3
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d00b      	beq.n	800dbc4 <tcp_process_refused_data+0x98>
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	6918      	ldr	r0, [r3, #16]
 800dbb6:	2300      	movs	r3, #0
 800dbb8:	2200      	movs	r2, #0
 800dbba:	6879      	ldr	r1, [r7, #4]
 800dbbc:	47a0      	blx	r4
 800dbbe:	4603      	mov	r3, r0
 800dbc0:	73fb      	strb	r3, [r7, #15]
 800dbc2:	e001      	b.n	800dbc8 <tcp_process_refused_data+0x9c>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800dbc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbcc:	f113 0f0d 	cmn.w	r3, #13
 800dbd0:	d110      	bne.n	800dbf4 <tcp_process_refused_data+0xc8>
          return ERR_ABRT;
 800dbd2:	f06f 030c 	mvn.w	r3, #12
 800dbd6:	e00e      	b.n	800dbf6 <tcp_process_refused_data+0xca>
        }
      }
    } else if (err == ERR_ABRT) {
 800dbd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dbdc:	f113 0f0d 	cmn.w	r3, #13
 800dbe0:	d102      	bne.n	800dbe8 <tcp_process_refused_data+0xbc>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800dbe2:	f06f 030c 	mvn.w	r3, #12
 800dbe6:	e006      	b.n	800dbf6 <tcp_process_refused_data+0xca>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	68ba      	ldr	r2, [r7, #8]
 800dbec:	675a      	str	r2, [r3, #116]	; 0x74
      return ERR_INPROGRESS;
 800dbee:	f06f 0304 	mvn.w	r3, #4
 800dbf2:	e000      	b.n	800dbf6 <tcp_process_refused_data+0xca>
    }
  }
  return ERR_OK;
 800dbf4:	2300      	movs	r3, #0
}
 800dbf6:	4618      	mov	r0, r3
 800dbf8:	3714      	adds	r7, #20
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd90      	pop	{r4, r7, pc}

0800dbfe <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b084      	sub	sp, #16
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800dc06:	e007      	b.n	800dc18 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800dc0e:	6878      	ldr	r0, [r7, #4]
 800dc10:	f000 f809 	bl	800dc26 <tcp_seg_free>
    seg = next;
 800dc14:	68fb      	ldr	r3, [r7, #12]
 800dc16:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	2b00      	cmp	r3, #0
 800dc1c:	d1f4      	bne.n	800dc08 <tcp_segs_free+0xa>
  }
}
 800dc1e:	bf00      	nop
 800dc20:	3710      	adds	r7, #16
 800dc22:	46bd      	mov	sp, r7
 800dc24:	bd80      	pop	{r7, pc}

0800dc26 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800dc26:	b580      	push	{r7, lr}
 800dc28:	b082      	sub	sp, #8
 800dc2a:	af00      	add	r7, sp, #0
 800dc2c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800dc2e:	687b      	ldr	r3, [r7, #4]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d00c      	beq.n	800dc4e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800dc34:	687b      	ldr	r3, [r7, #4]
 800dc36:	685b      	ldr	r3, [r3, #4]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d004      	beq.n	800dc46 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800dc3c:	687b      	ldr	r3, [r7, #4]
 800dc3e:	685b      	ldr	r3, [r3, #4]
 800dc40:	4618      	mov	r0, r3
 800dc42:	f7fe fc99 	bl	800c578 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800dc46:	6879      	ldr	r1, [r7, #4]
 800dc48:	2003      	movs	r0, #3
 800dc4a:	f7fd ff3b 	bl	800bac4 <memp_free>
  }
}
 800dc4e:	bf00      	nop
 800dc50:	3708      	adds	r7, #8
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}

0800dc56 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800dc56:	b580      	push	{r7, lr}
 800dc58:	b084      	sub	sp, #16
 800dc5a:	af00      	add	r7, sp, #0
 800dc5c:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800dc5e:	2003      	movs	r0, #3
 800dc60:	f7fd fede 	bl	800ba20 <memp_malloc>
 800dc64:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d101      	bne.n	800dc70 <tcp_seg_copy+0x1a>
    return NULL;
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	e00a      	b.n	800dc86 <tcp_seg_copy+0x30>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800dc70:	2210      	movs	r2, #16
 800dc72:	6879      	ldr	r1, [r7, #4]
 800dc74:	68f8      	ldr	r0, [r7, #12]
 800dc76:	f008 f89a 	bl	8015dae <memcpy>
  pbuf_ref(cseg->p);
 800dc7a:	68fb      	ldr	r3, [r7, #12]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	4618      	mov	r0, r3
 800dc80:	f7fe fd2c 	bl	800c6dc <pbuf_ref>
  return cseg;
 800dc84:	68fb      	ldr	r3, [r7, #12]
}
 800dc86:	4618      	mov	r0, r3
 800dc88:	3710      	adds	r7, #16
 800dc8a:	46bd      	mov	sp, r7
 800dc8c:	bd80      	pop	{r7, pc}

0800dc8e <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dc8e:	b580      	push	{r7, lr}
 800dc90:	b084      	sub	sp, #16
 800dc92:	af00      	add	r7, sp, #0
 800dc94:	60f8      	str	r0, [r7, #12]
 800dc96:	60b9      	str	r1, [r7, #8]
 800dc98:	607a      	str	r2, [r7, #4]
 800dc9a:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);
  if (p != NULL) {
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	d009      	beq.n	800dcb6 <tcp_recv_null+0x28>
    tcp_recved(pcb, p->tot_len);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	891b      	ldrh	r3, [r3, #8]
 800dca6:	4619      	mov	r1, r3
 800dca8:	68b8      	ldr	r0, [r7, #8]
 800dcaa:	f7ff fb77 	bl	800d39c <tcp_recved>
    pbuf_free(p);
 800dcae:	6878      	ldr	r0, [r7, #4]
 800dcb0:	f7fe fc62 	bl	800c578 <pbuf_free>
 800dcb4:	e008      	b.n	800dcc8 <tcp_recv_null+0x3a>
  } else if (err == ERR_OK) {
 800dcb6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d104      	bne.n	800dcc8 <tcp_recv_null+0x3a>
    return tcp_close(pcb);
 800dcbe:	68b8      	ldr	r0, [r7, #8]
 800dcc0:	f7ff f88e 	bl	800cde0 <tcp_close>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	e000      	b.n	800dcca <tcp_recv_null+0x3c>
  }
  return ERR_OK;
 800dcc8:	2300      	movs	r3, #0
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b086      	sub	sp, #24
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	4603      	mov	r3, r0
 800dcdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800dcde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dce2:	2b00      	cmp	r3, #0
 800dce4:	db01      	blt.n	800dcea <tcp_kill_prio+0x16>
 800dce6:	79fb      	ldrb	r3, [r7, #7]
 800dce8:	e000      	b.n	800dcec <tcp_kill_prio+0x18>
 800dcea:	237f      	movs	r3, #127	; 0x7f
 800dcec:	72fb      	strb	r3, [r7, #11]

  /* We kill the oldest active connection that has lower priority than prio. */
  inactivity = 0;
 800dcee:	2300      	movs	r3, #0
 800dcf0:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dcf2:	2300      	movs	r3, #0
 800dcf4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dcf6:	4b16      	ldr	r3, [pc, #88]	; (800dd50 <tcp_kill_prio+0x7c>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	617b      	str	r3, [r7, #20]
 800dcfc:	e01a      	b.n	800dd34 <tcp_kill_prio+0x60>
    if (pcb->prio <= mprio &&
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	7d5b      	ldrb	r3, [r3, #21]
 800dd02:	7afa      	ldrb	r2, [r7, #11]
 800dd04:	429a      	cmp	r2, r3
 800dd06:	d312      	bcc.n	800dd2e <tcp_kill_prio+0x5a>
       (u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd08:	4b12      	ldr	r3, [pc, #72]	; (800dd54 <tcp_kill_prio+0x80>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	697b      	ldr	r3, [r7, #20]
 800dd0e:	6a1b      	ldr	r3, [r3, #32]
 800dd10:	1ad2      	subs	r2, r2, r3
    if (pcb->prio <= mprio &&
 800dd12:	68fb      	ldr	r3, [r7, #12]
 800dd14:	429a      	cmp	r2, r3
 800dd16:	d30a      	bcc.n	800dd2e <tcp_kill_prio+0x5a>
      inactivity = tcp_ticks - pcb->tmr;
 800dd18:	4b0e      	ldr	r3, [pc, #56]	; (800dd54 <tcp_kill_prio+0x80>)
 800dd1a:	681a      	ldr	r2, [r3, #0]
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	6a1b      	ldr	r3, [r3, #32]
 800dd20:	1ad3      	subs	r3, r2, r3
 800dd22:	60fb      	str	r3, [r7, #12]
      inactive = pcb;
 800dd24:	697b      	ldr	r3, [r7, #20]
 800dd26:	613b      	str	r3, [r7, #16]
      mprio = pcb->prio;
 800dd28:	697b      	ldr	r3, [r7, #20]
 800dd2a:	7d5b      	ldrb	r3, [r3, #21]
 800dd2c:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd2e:	697b      	ldr	r3, [r7, #20]
 800dd30:	68db      	ldr	r3, [r3, #12]
 800dd32:	617b      	str	r3, [r7, #20]
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d1e1      	bne.n	800dcfe <tcp_kill_prio+0x2a>
    }
  }
  if (inactive != NULL) {
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d002      	beq.n	800dd46 <tcp_kill_prio+0x72>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dd40:	6938      	ldr	r0, [r7, #16]
 800dd42:	f7ff f95f 	bl	800d004 <tcp_abort>
  }
}
 800dd46:	bf00      	nop
 800dd48:	3718      	adds	r7, #24
 800dd4a:	46bd      	mov	sp, r7
 800dd4c:	bd80      	pop	{r7, pc}
 800dd4e:	bf00      	nop
 800dd50:	20007934 	.word	0x20007934
 800dd54:	20007938 	.word	0x20007938

0800dd58 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	4603      	mov	r3, r0
 800dd60:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dd62:	79fb      	ldrb	r3, [r7, #7]
 800dd64:	2b08      	cmp	r3, #8
 800dd66:	d009      	beq.n	800dd7c <tcp_kill_state+0x24>
 800dd68:	79fb      	ldrb	r3, [r7, #7]
 800dd6a:	2b09      	cmp	r3, #9
 800dd6c:	d006      	beq.n	800dd7c <tcp_kill_state+0x24>
 800dd6e:	4b1a      	ldr	r3, [pc, #104]	; (800ddd8 <tcp_kill_state+0x80>)
 800dd70:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800dd74:	4919      	ldr	r1, [pc, #100]	; (800dddc <tcp_kill_state+0x84>)
 800dd76:	481a      	ldr	r0, [pc, #104]	; (800dde0 <tcp_kill_state+0x88>)
 800dd78:	f008 f82c 	bl	8015dd4 <iprintf>

  inactivity = 0;
 800dd7c:	2300      	movs	r3, #0
 800dd7e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dd80:	2300      	movs	r3, #0
 800dd82:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dd84:	4b17      	ldr	r3, [pc, #92]	; (800dde4 <tcp_kill_state+0x8c>)
 800dd86:	681b      	ldr	r3, [r3, #0]
 800dd88:	617b      	str	r3, [r7, #20]
 800dd8a:	e017      	b.n	800ddbc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800dd8c:	697b      	ldr	r3, [r7, #20]
 800dd8e:	7d1b      	ldrb	r3, [r3, #20]
 800dd90:	79fa      	ldrb	r2, [r7, #7]
 800dd92:	429a      	cmp	r2, r3
 800dd94:	d10f      	bne.n	800ddb6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800dd96:	4b14      	ldr	r3, [pc, #80]	; (800dde8 <tcp_kill_state+0x90>)
 800dd98:	681a      	ldr	r2, [r3, #0]
 800dd9a:	697b      	ldr	r3, [r7, #20]
 800dd9c:	6a1b      	ldr	r3, [r3, #32]
 800dd9e:	1ad2      	subs	r2, r2, r3
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	429a      	cmp	r2, r3
 800dda4:	d307      	bcc.n	800ddb6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800dda6:	4b10      	ldr	r3, [pc, #64]	; (800dde8 <tcp_kill_state+0x90>)
 800dda8:	681a      	ldr	r2, [r3, #0]
 800ddaa:	697b      	ldr	r3, [r7, #20]
 800ddac:	6a1b      	ldr	r3, [r3, #32]
 800ddae:	1ad3      	subs	r3, r2, r3
 800ddb0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800ddb2:	697b      	ldr	r3, [r7, #20]
 800ddb4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	68db      	ldr	r3, [r3, #12]
 800ddba:	617b      	str	r3, [r7, #20]
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b00      	cmp	r3, #0
 800ddc0:	d1e4      	bne.n	800dd8c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ddc2:	693b      	ldr	r3, [r7, #16]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d003      	beq.n	800ddd0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
           tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ddc8:	2100      	movs	r1, #0
 800ddca:	6938      	ldr	r0, [r7, #16]
 800ddcc:	f7ff f868 	bl	800cea0 <tcp_abandon>
  }
}
 800ddd0:	bf00      	nop
 800ddd2:	3718      	adds	r7, #24
 800ddd4:	46bd      	mov	sp, r7
 800ddd6:	bd80      	pop	{r7, pc}
 800ddd8:	080195c8 	.word	0x080195c8
 800dddc:	080198d8 	.word	0x080198d8
 800dde0:	08019604 	.word	0x08019604
 800dde4:	20007934 	.word	0x20007934
 800dde8:	20007938 	.word	0x20007938

0800ddec <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ddec:	b580      	push	{r7, lr}
 800ddee:	b084      	sub	sp, #16
 800ddf0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ddf2:	2300      	movs	r3, #0
 800ddf4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ddfa:	4b12      	ldr	r3, [pc, #72]	; (800de44 <tcp_kill_timewait+0x58>)
 800ddfc:	681b      	ldr	r3, [r3, #0]
 800ddfe:	60fb      	str	r3, [r7, #12]
 800de00:	e012      	b.n	800de28 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800de02:	4b11      	ldr	r3, [pc, #68]	; (800de48 <tcp_kill_timewait+0x5c>)
 800de04:	681a      	ldr	r2, [r3, #0]
 800de06:	68fb      	ldr	r3, [r7, #12]
 800de08:	6a1b      	ldr	r3, [r3, #32]
 800de0a:	1ad2      	subs	r2, r2, r3
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	429a      	cmp	r2, r3
 800de10:	d307      	bcc.n	800de22 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800de12:	4b0d      	ldr	r3, [pc, #52]	; (800de48 <tcp_kill_timewait+0x5c>)
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	68fb      	ldr	r3, [r7, #12]
 800de18:	6a1b      	ldr	r3, [r3, #32]
 800de1a:	1ad3      	subs	r3, r2, r3
 800de1c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	68db      	ldr	r3, [r3, #12]
 800de26:	60fb      	str	r3, [r7, #12]
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d1e9      	bne.n	800de02 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d002      	beq.n	800de3a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
           (void *)inactive, inactivity));
    tcp_abort(inactive);
 800de34:	68b8      	ldr	r0, [r7, #8]
 800de36:	f7ff f8e5 	bl	800d004 <tcp_abort>
  }
}
 800de3a:	bf00      	nop
 800de3c:	3710      	adds	r7, #16
 800de3e:	46bd      	mov	sp, r7
 800de40:	bd80      	pop	{r7, pc}
 800de42:	bf00      	nop
 800de44:	20007944 	.word	0x20007944
 800de48:	20007938 	.word	0x20007938

0800de4c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800de4c:	b580      	push	{r7, lr}
 800de4e:	b084      	sub	sp, #16
 800de50:	af00      	add	r7, sp, #0
 800de52:	4603      	mov	r3, r0
 800de54:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de56:	2001      	movs	r0, #1
 800de58:	f7fd fde2 	bl	800ba20 <memp_malloc>
 800de5c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800de5e:	68fb      	ldr	r3, [r7, #12]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d124      	bne.n	800deae <tcp_alloc+0x62>
    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800de64:	f7ff ffc2 	bl	800ddec <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de68:	2001      	movs	r0, #1
 800de6a:	f7fd fdd9 	bl	800ba20 <memp_malloc>
 800de6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800de70:	68fb      	ldr	r3, [r7, #12]
 800de72:	2b00      	cmp	r3, #0
 800de74:	d11b      	bne.n	800deae <tcp_alloc+0x62>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800de76:	2009      	movs	r0, #9
 800de78:	f7ff ff6e 	bl	800dd58 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de7c:	2001      	movs	r0, #1
 800de7e:	f7fd fdcf 	bl	800ba20 <memp_malloc>
 800de82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d111      	bne.n	800deae <tcp_alloc+0x62>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800de8a:	2008      	movs	r0, #8
 800de8c:	f7ff ff64 	bl	800dd58 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800de90:	2001      	movs	r0, #1
 800de92:	f7fd fdc5 	bl	800ba20 <memp_malloc>
 800de96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d107      	bne.n	800deae <tcp_alloc+0x62>
          /* Try killing active connections with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800de9e:	79fb      	ldrb	r3, [r7, #7]
 800dea0:	4618      	mov	r0, r3
 800dea2:	f7ff ff17 	bl	800dcd4 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800dea6:	2001      	movs	r0, #1
 800dea8:	f7fd fdba 	bl	800ba20 <memp_malloc>
 800deac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d047      	beq.n	800df44 <tcp_alloc+0xf8>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800deb4:	22a0      	movs	r2, #160	; 0xa0
 800deb6:	2100      	movs	r1, #0
 800deb8:	68f8      	ldr	r0, [r7, #12]
 800deba:	f007 ff83 	bl	8015dc4 <memset>
    pcb->prio = prio;
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	79fa      	ldrb	r2, [r7, #7]
 800dec2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800deca:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800dece:	68fb      	ldr	r3, [r7, #12]
 800ded0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ded4:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800deda:	68fb      	ldr	r3, [r7, #12]
 800dedc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800dede:	68fb      	ldr	r3, [r7, #12]
 800dee0:	22ff      	movs	r2, #255	; 0xff
 800dee2:	729a      	strb	r2, [r3, #10]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800dee4:	68fb      	ldr	r3, [r7, #12]
 800dee6:	f44f 7206 	mov.w	r2, #536	; 0x218
 800deea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800deec:	68fb      	ldr	r3, [r7, #12]
 800deee:	2206      	movs	r2, #6
 800def0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800def4:	68fb      	ldr	r3, [r7, #12]
 800def6:	2206      	movs	r2, #6
 800def8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800df00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800df02:	68fb      	ldr	r3, [r7, #12]
 800df04:	2201      	movs	r2, #1
 800df06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800df0a:	4b11      	ldr	r3, [pc, #68]	; (800df50 <tcp_alloc+0x104>)
 800df0c:	681a      	ldr	r2, [r3, #0]
 800df0e:	68fb      	ldr	r3, [r7, #12]
 800df10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800df12:	4b10      	ldr	r3, [pc, #64]	; (800df54 <tcp_alloc+0x108>)
 800df14:	781a      	ldrb	r2, [r3, #0]
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	775a      	strb	r2, [r3, #29]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800df20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800df24:	68fb      	ldr	r3, [r7, #12]
 800df26:	4a0c      	ldr	r2, [pc, #48]	; (800df58 <tcp_alloc+0x10c>)
 800df28:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	4a0b      	ldr	r2, [pc, #44]	; (800df5c <tcp_alloc+0x110>)
 800df30:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	4a0a      	ldr	r2, [pc, #40]	; (800df60 <tcp_alloc+0x114>)
 800df38:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
 800df3c:	68fb      	ldr	r3, [r7, #12]
 800df3e:	2209      	movs	r2, #9
 800df40:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800df44:	68fb      	ldr	r3, [r7, #12]
}
 800df46:	4618      	mov	r0, r3
 800df48:	3710      	adds	r7, #16
 800df4a:	46bd      	mov	sp, r7
 800df4c:	bd80      	pop	{r7, pc}
 800df4e:	bf00      	nop
 800df50:	20007938 	.word	0x20007938
 800df54:	20004112 	.word	0x20004112
 800df58:	0800dc8f 	.word	0x0800dc8f
 800df5c:	006ddd00 	.word	0x006ddd00
 800df60:	000124f8 	.word	0x000124f8

0800df64 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b084      	sub	sp, #16
 800df68:	af00      	add	r7, sp, #0
 800df6a:	4603      	mov	r3, r0
 800df6c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb * pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800df6e:	2040      	movs	r0, #64	; 0x40
 800df70:	f7ff ff6c 	bl	800de4c <tcp_alloc>
 800df74:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800df76:	68fb      	ldr	r3, [r7, #12]
}
 800df78:	4618      	mov	r0, r3
 800df7a:	3710      	adds	r7, #16
 800df7c:	46bd      	mov	sp, r7
 800df7e:	bd80      	pop	{r7, pc}

0800df80 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800df80:	b480      	push	{r7}
 800df82:	b083      	sub	sp, #12
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d002      	beq.n	800df96 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800df90:	687b      	ldr	r3, [r7, #4]
 800df92:	683a      	ldr	r2, [r7, #0]
 800df94:	611a      	str	r2, [r3, #16]
  }
}
 800df96:	bf00      	nop
 800df98:	370c      	adds	r7, #12
 800df9a:	46bd      	mov	sp, r7
 800df9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfa0:	4770      	bx	lr
	...

0800dfa4 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b082      	sub	sp, #8
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dfae:	687b      	ldr	r3, [r7, #4]
 800dfb0:	2b00      	cmp	r3, #0
 800dfb2:	d00e      	beq.n	800dfd2 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	7d1b      	ldrb	r3, [r3, #20]
 800dfb8:	2b01      	cmp	r3, #1
 800dfba:	d106      	bne.n	800dfca <tcp_recv+0x26>
 800dfbc:	4b07      	ldr	r3, [pc, #28]	; (800dfdc <tcp_recv+0x38>)
 800dfbe:	f240 62bb 	movw	r2, #1723	; 0x6bb
 800dfc2:	4907      	ldr	r1, [pc, #28]	; (800dfe0 <tcp_recv+0x3c>)
 800dfc4:	4807      	ldr	r0, [pc, #28]	; (800dfe4 <tcp_recv+0x40>)
 800dfc6:	f007 ff05 	bl	8015dd4 <iprintf>
    pcb->recv = recv;
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	683a      	ldr	r2, [r7, #0]
 800dfce:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800dfd2:	bf00      	nop
 800dfd4:	3708      	adds	r7, #8
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}
 800dfda:	bf00      	nop
 800dfdc:	080195c8 	.word	0x080195c8
 800dfe0:	080198e8 	.word	0x080198e8
 800dfe4:	08019604 	.word	0x08019604

0800dfe8 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800dfe8:	b580      	push	{r7, lr}
 800dfea:	b082      	sub	sp, #8
 800dfec:	af00      	add	r7, sp, #0
 800dfee:	6078      	str	r0, [r7, #4]
 800dff0:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d00d      	beq.n	800e014 <tcp_sent+0x2c>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	7d1b      	ldrb	r3, [r3, #20]
 800dffc:	2b01      	cmp	r3, #1
 800dffe:	d106      	bne.n	800e00e <tcp_sent+0x26>
 800e000:	4b06      	ldr	r3, [pc, #24]	; (800e01c <tcp_sent+0x34>)
 800e002:	f240 62cc 	movw	r2, #1740	; 0x6cc
 800e006:	4906      	ldr	r1, [pc, #24]	; (800e020 <tcp_sent+0x38>)
 800e008:	4806      	ldr	r0, [pc, #24]	; (800e024 <tcp_sent+0x3c>)
 800e00a:	f007 fee3 	bl	8015dd4 <iprintf>
    pcb->sent = sent;
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	683a      	ldr	r2, [r7, #0]
 800e012:	67da      	str	r2, [r3, #124]	; 0x7c
  }
}
 800e014:	bf00      	nop
 800e016:	3708      	adds	r7, #8
 800e018:	46bd      	mov	sp, r7
 800e01a:	bd80      	pop	{r7, pc}
 800e01c:	080195c8 	.word	0x080195c8
 800e020:	08019910 	.word	0x08019910
 800e024:	08019604 	.word	0x08019604

0800e028 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e028:	b580      	push	{r7, lr}
 800e02a:	b082      	sub	sp, #8
 800e02c:	af00      	add	r7, sp, #0
 800e02e:	6078      	str	r0, [r7, #4]
 800e030:	6039      	str	r1, [r7, #0]
  if (pcb != NULL) {
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d00e      	beq.n	800e056 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	7d1b      	ldrb	r3, [r3, #20]
 800e03c:	2b01      	cmp	r3, #1
 800e03e:	d106      	bne.n	800e04e <tcp_err+0x26>
 800e040:	4b07      	ldr	r3, [pc, #28]	; (800e060 <tcp_err+0x38>)
 800e042:	f44f 62dc 	mov.w	r2, #1760	; 0x6e0
 800e046:	4907      	ldr	r1, [pc, #28]	; (800e064 <tcp_err+0x3c>)
 800e048:	4807      	ldr	r0, [pc, #28]	; (800e068 <tcp_err+0x40>)
 800e04a:	f007 fec3 	bl	8015dd4 <iprintf>
    pcb->errf = err;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	683a      	ldr	r2, [r7, #0]
 800e052:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  }
}
 800e056:	bf00      	nop
 800e058:	3708      	adds	r7, #8
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	080195c8 	.word	0x080195c8
 800e064:	08019938 	.word	0x08019938
 800e068:	08019604 	.word	0x08019604

0800e06c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
 800e074:	6039      	str	r1, [r7, #0]
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800e076:	687b      	ldr	r3, [r7, #4]
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d008      	beq.n	800e08e <tcp_accept+0x22>
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	7d1b      	ldrb	r3, [r3, #20]
 800e080:	2b01      	cmp	r3, #1
 800e082:	d104      	bne.n	800e08e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen*)pcb;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800e088:	68fb      	ldr	r3, [r7, #12]
 800e08a:	683a      	ldr	r2, [r7, #0]
 800e08c:	619a      	str	r2, [r3, #24]
  }
}
 800e08e:	bf00      	nop
 800e090:	3714      	adds	r7, #20
 800e092:	46bd      	mov	sp, r7
 800e094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e098:	4770      	bx	lr
	...

0800e09c <tcp_poll>:
 * timer interval, which is called twice a second.
 *
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	60f8      	str	r0, [r7, #12]
 800e0a4:	60b9      	str	r1, [r7, #8]
 800e0a6:	4613      	mov	r3, r2
 800e0a8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	7d1b      	ldrb	r3, [r3, #20]
 800e0ae:	2b01      	cmp	r3, #1
 800e0b0:	d106      	bne.n	800e0c0 <tcp_poll+0x24>
 800e0b2:	4b09      	ldr	r3, [pc, #36]	; (800e0d8 <tcp_poll+0x3c>)
 800e0b4:	f240 7203 	movw	r2, #1795	; 0x703
 800e0b8:	4908      	ldr	r1, [pc, #32]	; (800e0dc <tcp_poll+0x40>)
 800e0ba:	4809      	ldr	r0, [pc, #36]	; (800e0e0 <tcp_poll+0x44>)
 800e0bc:	f007 fe8a 	bl	8015dd4 <iprintf>
#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	68ba      	ldr	r2, [r7, #8]
 800e0c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	79fa      	ldrb	r2, [r7, #7]
 800e0cc:	771a      	strb	r2, [r3, #28]
}
 800e0ce:	bf00      	nop
 800e0d0:	3710      	adds	r7, #16
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	080195c8 	.word	0x080195c8
 800e0dc:	08019960 	.word	0x08019960
 800e0e0:	08019604 	.word	0x08019604

0800e0e4 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e0e4:	b580      	push	{r7, lr}
 800e0e6:	b082      	sub	sp, #8
 800e0e8:	af00      	add	r7, sp, #0
 800e0ea:	6078      	str	r0, [r7, #4]
  if (pcb->state != CLOSED &&
 800e0ec:	687b      	ldr	r3, [r7, #4]
 800e0ee:	7d1b      	ldrb	r3, [r3, #20]
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d034      	beq.n	800e15e <tcp_pcb_purge+0x7a>
     pcb->state != TIME_WAIT &&
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e0f8:	2b0a      	cmp	r3, #10
 800e0fa:	d030      	beq.n	800e15e <tcp_pcb_purge+0x7a>
     pcb->state != LISTEN) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	7d1b      	ldrb	r3, [r3, #20]
     pcb->state != TIME_WAIT &&
 800e100:	2b01      	cmp	r3, #1
 800e102:	d02c      	beq.n	800e15e <tcp_pcb_purge+0x7a>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d007      	beq.n	800e11c <tcp_pcb_purge+0x38>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e110:	4618      	mov	r0, r3
 800e112:	f7fe fa31 	bl	800c578 <pbuf_free>
      pcb->refused_data = NULL;
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	2200      	movs	r2, #0
 800e11a:	675a      	str	r2, [r3, #116]	; 0x74
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
    }
    tcp_segs_free(pcb->ooseq);
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e120:	4618      	mov	r0, r3
 800e122:	f7ff fd6c 	bl	800dbfe <tcp_segs_free>
    pcb->ooseq = NULL;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	671a      	str	r2, [r3, #112]	; 0x70
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e132:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff fd60 	bl	800dbfe <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e142:	4618      	mov	r0, r3
 800e144:	f7ff fd5b 	bl	800dbfe <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	2200      	movs	r2, #0
 800e14c:	669a      	str	r2, [r3, #104]	; 0x68
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	66da      	str	r2, [r3, #108]	; 0x6c
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2200      	movs	r2, #0
 800e15a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */
  }
}
 800e15e:	bf00      	nop
 800e160:	3708      	adds	r7, #8
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
	...

0800e168 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e168:	b580      	push	{r7, lr}
 800e16a:	b084      	sub	sp, #16
 800e16c:	af00      	add	r7, sp, #0
 800e16e:	6078      	str	r0, [r7, #4]
 800e170:	6039      	str	r1, [r7, #0]
  TCP_RMV(pcblist, pcb);
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	683b      	ldr	r3, [r7, #0]
 800e178:	429a      	cmp	r2, r3
 800e17a:	d105      	bne.n	800e188 <tcp_pcb_remove+0x20>
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	681b      	ldr	r3, [r3, #0]
 800e180:	68da      	ldr	r2, [r3, #12]
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	601a      	str	r2, [r3, #0]
 800e186:	e013      	b.n	800e1b0 <tcp_pcb_remove+0x48>
 800e188:	687b      	ldr	r3, [r7, #4]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	60fb      	str	r3, [r7, #12]
 800e18e:	e00c      	b.n	800e1aa <tcp_pcb_remove+0x42>
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	68da      	ldr	r2, [r3, #12]
 800e194:	683b      	ldr	r3, [r7, #0]
 800e196:	429a      	cmp	r2, r3
 800e198:	d104      	bne.n	800e1a4 <tcp_pcb_remove+0x3c>
 800e19a:	683b      	ldr	r3, [r7, #0]
 800e19c:	68da      	ldr	r2, [r3, #12]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	60da      	str	r2, [r3, #12]
 800e1a2:	e005      	b.n	800e1b0 <tcp_pcb_remove+0x48>
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	68db      	ldr	r3, [r3, #12]
 800e1a8:	60fb      	str	r3, [r7, #12]
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d1ef      	bne.n	800e190 <tcp_pcb_remove+0x28>
 800e1b0:	683b      	ldr	r3, [r7, #0]
 800e1b2:	2200      	movs	r2, #0
 800e1b4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e1b6:	6838      	ldr	r0, [r7, #0]
 800e1b8:	f7ff ff94 	bl	800e0e4 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if (pcb->state != TIME_WAIT &&
 800e1bc:	683b      	ldr	r3, [r7, #0]
 800e1be:	7d1b      	ldrb	r3, [r3, #20]
 800e1c0:	2b0a      	cmp	r3, #10
 800e1c2:	d013      	beq.n	800e1ec <tcp_pcb_remove+0x84>
     pcb->state != LISTEN &&
 800e1c4:	683b      	ldr	r3, [r7, #0]
 800e1c6:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != TIME_WAIT &&
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d00f      	beq.n	800e1ec <tcp_pcb_remove+0x84>
     pcb->flags & TF_ACK_DELAY) {
 800e1cc:	683b      	ldr	r3, [r7, #0]
 800e1ce:	7e9b      	ldrb	r3, [r3, #26]
 800e1d0:	f003 0301 	and.w	r3, r3, #1
     pcb->state != LISTEN &&
 800e1d4:	2b00      	cmp	r3, #0
 800e1d6:	d009      	beq.n	800e1ec <tcp_pcb_remove+0x84>
    pcb->flags |= TF_ACK_NOW;
 800e1d8:	683b      	ldr	r3, [r7, #0]
 800e1da:	7e9b      	ldrb	r3, [r3, #26]
 800e1dc:	f043 0302 	orr.w	r3, r3, #2
 800e1e0:	b2da      	uxtb	r2, r3
 800e1e2:	683b      	ldr	r3, [r7, #0]
 800e1e4:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800e1e6:	6838      	ldr	r0, [r7, #0]
 800e1e8:	f003 f9ca 	bl	8011580 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	7d1b      	ldrb	r3, [r3, #20]
 800e1f0:	2b01      	cmp	r3, #1
 800e1f2:	d020      	beq.n	800e236 <tcp_pcb_remove+0xce>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e1f4:	683b      	ldr	r3, [r7, #0]
 800e1f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <tcp_pcb_remove+0xa2>
 800e1fc:	4b13      	ldr	r3, [pc, #76]	; (800e24c <tcp_pcb_remove+0xe4>)
 800e1fe:	f240 7253 	movw	r2, #1875	; 0x753
 800e202:	4913      	ldr	r1, [pc, #76]	; (800e250 <tcp_pcb_remove+0xe8>)
 800e204:	4813      	ldr	r0, [pc, #76]	; (800e254 <tcp_pcb_remove+0xec>)
 800e206:	f007 fde5 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e20a:	683b      	ldr	r3, [r7, #0]
 800e20c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e20e:	2b00      	cmp	r3, #0
 800e210:	d006      	beq.n	800e220 <tcp_pcb_remove+0xb8>
 800e212:	4b0e      	ldr	r3, [pc, #56]	; (800e24c <tcp_pcb_remove+0xe4>)
 800e214:	f240 7254 	movw	r2, #1876	; 0x754
 800e218:	490f      	ldr	r1, [pc, #60]	; (800e258 <tcp_pcb_remove+0xf0>)
 800e21a:	480e      	ldr	r0, [pc, #56]	; (800e254 <tcp_pcb_remove+0xec>)
 800e21c:	f007 fdda 	bl	8015dd4 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e224:	2b00      	cmp	r3, #0
 800e226:	d006      	beq.n	800e236 <tcp_pcb_remove+0xce>
 800e228:	4b08      	ldr	r3, [pc, #32]	; (800e24c <tcp_pcb_remove+0xe4>)
 800e22a:	f240 7256 	movw	r2, #1878	; 0x756
 800e22e:	490b      	ldr	r1, [pc, #44]	; (800e25c <tcp_pcb_remove+0xf4>)
 800e230:	4808      	ldr	r0, [pc, #32]	; (800e254 <tcp_pcb_remove+0xec>)
 800e232:	f007 fdcf 	bl	8015dd4 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e236:	683b      	ldr	r3, [r7, #0]
 800e238:	2200      	movs	r2, #0
 800e23a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	2200      	movs	r2, #0
 800e240:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e242:	bf00      	nop
 800e244:	3710      	adds	r7, #16
 800e246:	46bd      	mov	sp, r7
 800e248:	bd80      	pop	{r7, pc}
 800e24a:	bf00      	nop
 800e24c:	080195c8 	.word	0x080195c8
 800e250:	08019980 	.word	0x08019980
 800e254:	08019604 	.word	0x08019604
 800e258:	08019998 	.word	0x08019998
 800e25c:	080199b4 	.word	0x080199b4

0800e260 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e260:	b480      	push	{r7}
 800e262:	b083      	sub	sp, #12
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e268:	4b07      	ldr	r3, [pc, #28]	; (800e288 <tcp_next_iss+0x28>)
 800e26a:	681a      	ldr	r2, [r3, #0]
 800e26c:	4b07      	ldr	r3, [pc, #28]	; (800e28c <tcp_next_iss+0x2c>)
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4413      	add	r3, r2
 800e272:	4a05      	ldr	r2, [pc, #20]	; (800e288 <tcp_next_iss+0x28>)
 800e274:	6013      	str	r3, [r2, #0]
  return iss;
 800e276:	4b04      	ldr	r3, [pc, #16]	; (800e288 <tcp_next_iss+0x28>)
 800e278:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	370c      	adds	r7, #12
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	2000000c 	.word	0x2000000c
 800e28c:	20007938 	.word	0x20007938

0800e290 <tcp_eff_send_mss_impl>:
tcp_eff_send_mss_impl(u16_t sendmss, const ip_addr_t *dest
#if LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING
                     , const ip_addr_t *src
#endif /* LWIP_IPV6 || LWIP_IPV4_SRC_ROUTING */
                     )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b084      	sub	sp, #16
 800e294:	af00      	add	r7, sp, #0
 800e296:	4603      	mov	r3, r0
 800e298:	6039      	str	r1, [r7, #0]
 800e29a:	80fb      	strh	r3, [r7, #6]
  u16_t mss_s;
  struct netif *outif;
  s16_t mtu;

  outif = ip_route(src, dest);
 800e29c:	6838      	ldr	r0, [r7, #0]
 800e29e:	f7fb ff8f 	bl	800a1c0 <ip4_route>
 800e2a2:	60f8      	str	r0, [r7, #12]
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2b00      	cmp	r3, #0
 800e2a8:	d101      	bne.n	800e2ae <tcp_eff_send_mss_impl+0x1e>
      return sendmss;
 800e2aa:	88fb      	ldrh	r3, [r7, #6]
 800e2ac:	e010      	b.n	800e2d0 <tcp_eff_send_mss_impl+0x40>
    }
    mtu = outif->mtu;
 800e2ae:	68fb      	ldr	r3, [r7, #12]
 800e2b0:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 800e2b2:	817b      	strh	r3, [r7, #10]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e2b4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d008      	beq.n	800e2ce <tcp_eff_send_mss_impl+0x3e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      mss_s = mtu - IP_HLEN - TCP_HLEN;
 800e2bc:	897b      	ldrh	r3, [r7, #10]
 800e2be:	3b28      	subs	r3, #40	; 0x28
 800e2c0:	813b      	strh	r3, [r7, #8]
#endif /* LWIP_IPV4 */
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e2c2:	893a      	ldrh	r2, [r7, #8]
 800e2c4:	88fb      	ldrh	r3, [r7, #6]
 800e2c6:	4293      	cmp	r3, r2
 800e2c8:	bf28      	it	cs
 800e2ca:	4613      	movcs	r3, r2
 800e2cc:	80fb      	strh	r3, [r7, #6]
  }
  return sendmss;
 800e2ce:	88fb      	ldrh	r3, [r7, #6]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}

0800e2d8 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t* old_addr, struct tcp_pcb* pcb_list)
{
 800e2d8:	b580      	push	{r7, lr}
 800e2da:	b084      	sub	sp, #16
 800e2dc:	af00      	add	r7, sp, #0
 800e2de:	6078      	str	r0, [r7, #4]
 800e2e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e2e2:	683b      	ldr	r3, [r7, #0]
 800e2e4:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e2e6:	e011      	b.n	800e30c <tcp_netif_ip_addr_changed_pcblist+0x34>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	681a      	ldr	r2, [r3, #0]
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	681b      	ldr	r3, [r3, #0]
 800e2f0:	429a      	cmp	r2, r3
 800e2f2:	d108      	bne.n	800e306 <tcp_netif_ip_addr_changed_pcblist+0x2e>
      /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
      && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
      ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	68db      	ldr	r3, [r3, #12]
 800e2f8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e2fa:	68f8      	ldr	r0, [r7, #12]
 800e2fc:	f7fe fe82 	bl	800d004 <tcp_abort>
      pcb = next;
 800e300:	68bb      	ldr	r3, [r7, #8]
 800e302:	60fb      	str	r3, [r7, #12]
 800e304:	e002      	b.n	800e30c <tcp_netif_ip_addr_changed_pcblist+0x34>
    } else {
      pcb = pcb->next;
 800e306:	68fb      	ldr	r3, [r7, #12]
 800e308:	68db      	ldr	r3, [r3, #12]
 800e30a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d1ea      	bne.n	800e2e8 <tcp_netif_ip_addr_changed_pcblist+0x10>
    }
  }
}
 800e312:	bf00      	nop
 800e314:	3710      	adds	r7, #16
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}
	...

0800e31c <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 800e31c:	b580      	push	{r7, lr}
 800e31e:	b084      	sub	sp, #16
 800e320:	af00      	add	r7, sp, #0
 800e322:	6078      	str	r0, [r7, #4]
 800e324:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb, *next;

  if (!ip_addr_isany(old_addr)) {
 800e326:	687b      	ldr	r3, [r7, #4]
 800e328:	2b00      	cmp	r3, #0
 800e32a:	d02c      	beq.n	800e386 <tcp_netif_ip_addr_changed+0x6a>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d028      	beq.n	800e386 <tcp_netif_ip_addr_changed+0x6a>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e334:	4b16      	ldr	r3, [pc, #88]	; (800e390 <tcp_netif_ip_addr_changed+0x74>)
 800e336:	681b      	ldr	r3, [r3, #0]
 800e338:	4619      	mov	r1, r3
 800e33a:	6878      	ldr	r0, [r7, #4]
 800e33c:	f7ff ffcc 	bl	800e2d8 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e340:	4b14      	ldr	r3, [pc, #80]	; (800e394 <tcp_netif_ip_addr_changed+0x78>)
 800e342:	681b      	ldr	r3, [r3, #0]
 800e344:	4619      	mov	r1, r3
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f7ff ffc6 	bl	800e2d8 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e34c:	683b      	ldr	r3, [r7, #0]
 800e34e:	2b00      	cmp	r3, #0
 800e350:	d019      	beq.n	800e386 <tcp_netif_ip_addr_changed+0x6a>
 800e352:	683b      	ldr	r3, [r7, #0]
 800e354:	681b      	ldr	r3, [r3, #0]
 800e356:	2b00      	cmp	r3, #0
 800e358:	d015      	beq.n	800e386 <tcp_netif_ip_addr_changed+0x6a>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e35a:	4b0f      	ldr	r3, [pc, #60]	; (800e398 <tcp_netif_ip_addr_changed+0x7c>)
 800e35c:	681b      	ldr	r3, [r3, #0]
 800e35e:	60fb      	str	r3, [r7, #12]
 800e360:	e00e      	b.n	800e380 <tcp_netif_ip_addr_changed+0x64>
        next = lpcb->next;
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	68db      	ldr	r3, [r3, #12]
 800e366:	60bb      	str	r3, [r7, #8]
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	681a      	ldr	r2, [r3, #0]
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	429a      	cmp	r2, r3
 800e372:	d103      	bne.n	800e37c <tcp_netif_ip_addr_changed+0x60>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e374:	683b      	ldr	r3, [r7, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	68fb      	ldr	r3, [r7, #12]
 800e37a:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = next) {
 800e37c:	68bb      	ldr	r3, [r7, #8]
 800e37e:	60fb      	str	r3, [r7, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	2b00      	cmp	r3, #0
 800e384:	d1ed      	bne.n	800e362 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e386:	bf00      	nop
 800e388:	3710      	adds	r7, #16
 800e38a:	46bd      	mov	sp, r7
 800e38c:	bd80      	pop	{r7, pc}
 800e38e:	bf00      	nop
 800e390:	20007934 	.word	0x20007934
 800e394:	20007940 	.word	0x20007940
 800e398:	2000793c 	.word	0x2000793c

0800e39c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e39c:	b590      	push	{r4, r7, lr}
 800e39e:	b08d      	sub	sp, #52	; 0x34
 800e3a0:	af02      	add	r7, sp, #8
 800e3a2:	6078      	str	r0, [r7, #4]
 800e3a4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb, *prev;
  struct tcp_pcb_listen *lpcb;
#if SO_REUSE
  struct tcp_pcb *lpcb_prev = NULL;
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	61bb      	str	r3, [r7, #24]
  struct tcp_pcb_listen *lpcb_any = NULL;
 800e3aa:	2300      	movs	r3, #0
 800e3ac:	617b      	str	r3, [r7, #20]
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	685b      	ldr	r3, [r3, #4]
 800e3b2:	4a82      	ldr	r2, [pc, #520]	; (800e5bc <tcp_input+0x220>)
 800e3b4:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e3b6:	687b      	ldr	r3, [r7, #4]
 800e3b8:	895b      	ldrh	r3, [r3, #10]
 800e3ba:	2b13      	cmp	r3, #19
 800e3bc:	f240 83a0 	bls.w	800eb00 <tcp_input+0x764>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e3c0:	4b7f      	ldr	r3, [pc, #508]	; (800e5c0 <tcp_input+0x224>)
 800e3c2:	695a      	ldr	r2, [r3, #20]
 800e3c4:	4b7e      	ldr	r3, [pc, #504]	; (800e5c0 <tcp_input+0x224>)
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	4619      	mov	r1, r3
 800e3ca:	4610      	mov	r0, r2
 800e3cc:	f7fc f96e 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	f040 8397 	bne.w	800eb06 <tcp_input+0x76a>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e3d8:	4b79      	ldr	r3, [pc, #484]	; (800e5c0 <tcp_input+0x224>)
 800e3da:	695b      	ldr	r3, [r3, #20]
 800e3dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e3e0:	2be0      	cmp	r3, #224	; 0xe0
 800e3e2:	f000 8390 	beq.w	800eb06 <tcp_input+0x76a>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN(tcphdr) * 4;
 800e3e6:	4b75      	ldr	r3, [pc, #468]	; (800e5bc <tcp_input+0x220>)
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	899b      	ldrh	r3, [r3, #12]
 800e3ec:	b29b      	uxth	r3, r3
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	f7fa fe04 	bl	8008ffc <lwip_htons>
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	0b1b      	lsrs	r3, r3, #12
 800e3f8:	b29b      	uxth	r3, r3
 800e3fa:	b2db      	uxtb	r3, r3
 800e3fc:	009b      	lsls	r3, r3, #2
 800e3fe:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e400:	7cbb      	ldrb	r3, [r7, #18]
 800e402:	2b13      	cmp	r3, #19
 800e404:	f240 837f 	bls.w	800eb06 <tcp_input+0x76a>
 800e408:	7cbb      	ldrb	r3, [r7, #18]
 800e40a:	b29a      	uxth	r2, r3
 800e40c:	687b      	ldr	r3, [r7, #4]
 800e40e:	891b      	ldrh	r3, [r3, #8]
 800e410:	429a      	cmp	r2, r3
 800e412:	f200 8378 	bhi.w	800eb06 <tcp_input+0x76a>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = hdrlen_bytes - TCP_HLEN;
 800e416:	7cbb      	ldrb	r3, [r7, #18]
 800e418:	b29b      	uxth	r3, r3
 800e41a:	3b14      	subs	r3, #20
 800e41c:	b29a      	uxth	r2, r3
 800e41e:	4b69      	ldr	r3, [pc, #420]	; (800e5c4 <tcp_input+0x228>)
 800e420:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e422:	4b69      	ldr	r3, [pc, #420]	; (800e5c8 <tcp_input+0x22c>)
 800e424:	2200      	movs	r2, #0
 800e426:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	895a      	ldrh	r2, [r3, #10]
 800e42c:	7cbb      	ldrb	r3, [r7, #18]
 800e42e:	b29b      	uxth	r3, r3
 800e430:	429a      	cmp	r2, r3
 800e432:	d30d      	bcc.n	800e450 <tcp_input+0xb4>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e434:	4b63      	ldr	r3, [pc, #396]	; (800e5c4 <tcp_input+0x228>)
 800e436:	881a      	ldrh	r2, [r3, #0]
 800e438:	4b64      	ldr	r3, [pc, #400]	; (800e5cc <tcp_input+0x230>)
 800e43a:	801a      	strh	r2, [r3, #0]
    pbuf_header(p, -(s16_t)hdrlen_bytes); /* cannot fail */
 800e43c:	7cbb      	ldrb	r3, [r7, #18]
 800e43e:	b29b      	uxth	r3, r3
 800e440:	425b      	negs	r3, r3
 800e442:	b29b      	uxth	r3, r3
 800e444:	b21b      	sxth	r3, r3
 800e446:	4619      	mov	r1, r3
 800e448:	6878      	ldr	r0, [r7, #4]
 800e44a:	f7fe f871 	bl	800c530 <pbuf_header>
 800e44e:	e055      	b.n	800e4fc <tcp_input+0x160>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d105      	bne.n	800e464 <tcp_input+0xc8>
 800e458:	4b5d      	ldr	r3, [pc, #372]	; (800e5d0 <tcp_input+0x234>)
 800e45a:	22b2      	movs	r2, #178	; 0xb2
 800e45c:	495d      	ldr	r1, [pc, #372]	; (800e5d4 <tcp_input+0x238>)
 800e45e:	485e      	ldr	r0, [pc, #376]	; (800e5d8 <tcp_input+0x23c>)
 800e460:	f007 fcb8 	bl	8015dd4 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_header(p, -TCP_HLEN);
 800e464:	f06f 0113 	mvn.w	r1, #19
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f7fe f861 	bl	800c530 <pbuf_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e46e:	687b      	ldr	r3, [r7, #4]
 800e470:	895a      	ldrh	r2, [r3, #10]
 800e472:	4b56      	ldr	r3, [pc, #344]	; (800e5cc <tcp_input+0x230>)
 800e474:	801a      	strh	r2, [r3, #0]
    opt2len = tcphdr_optlen - tcphdr_opt1len;
 800e476:	4b53      	ldr	r3, [pc, #332]	; (800e5c4 <tcp_input+0x228>)
 800e478:	881a      	ldrh	r2, [r3, #0]
 800e47a:	4b54      	ldr	r3, [pc, #336]	; (800e5cc <tcp_input+0x230>)
 800e47c:	881b      	ldrh	r3, [r3, #0]
 800e47e:	1ad3      	subs	r3, r2, r3
 800e480:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_header(p, -(s16_t)tcphdr_opt1len);
 800e482:	4b52      	ldr	r3, [pc, #328]	; (800e5cc <tcp_input+0x230>)
 800e484:	881b      	ldrh	r3, [r3, #0]
 800e486:	425b      	negs	r3, r3
 800e488:	b29b      	uxth	r3, r3
 800e48a:	b21b      	sxth	r3, r3
 800e48c:	4619      	mov	r1, r3
 800e48e:	6878      	ldr	r0, [r7, #4]
 800e490:	f7fe f84e 	bl	800c530 <pbuf_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	895b      	ldrh	r3, [r3, #10]
 800e49a:	8a3a      	ldrh	r2, [r7, #16]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	f200 8331 	bhi.w	800eb04 <tcp_input+0x768>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t*)p->next->payload;
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	685b      	ldr	r3, [r3, #4]
 800e4a8:	4a47      	ldr	r2, [pc, #284]	; (800e5c8 <tcp_input+0x22c>)
 800e4aa:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_header(p->next, -(s16_t)opt2len);
 800e4ac:	687b      	ldr	r3, [r7, #4]
 800e4ae:	681a      	ldr	r2, [r3, #0]
 800e4b0:	8a3b      	ldrh	r3, [r7, #16]
 800e4b2:	425b      	negs	r3, r3
 800e4b4:	b29b      	uxth	r3, r3
 800e4b6:	b21b      	sxth	r3, r3
 800e4b8:	4619      	mov	r1, r3
 800e4ba:	4610      	mov	r0, r2
 800e4bc:	f7fe f838 	bl	800c530 <pbuf_header>
    p->tot_len -= opt2len;
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	891a      	ldrh	r2, [r3, #8]
 800e4c4:	8a3b      	ldrh	r3, [r7, #16]
 800e4c6:	1ad3      	subs	r3, r2, r3
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	687b      	ldr	r3, [r7, #4]
 800e4cc:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	895b      	ldrh	r3, [r3, #10]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d005      	beq.n	800e4e2 <tcp_input+0x146>
 800e4d6:	4b3e      	ldr	r3, [pc, #248]	; (800e5d0 <tcp_input+0x234>)
 800e4d8:	22cf      	movs	r2, #207	; 0xcf
 800e4da:	4940      	ldr	r1, [pc, #256]	; (800e5dc <tcp_input+0x240>)
 800e4dc:	483e      	ldr	r0, [pc, #248]	; (800e5d8 <tcp_input+0x23c>)
 800e4de:	f007 fc79 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	891a      	ldrh	r2, [r3, #8]
 800e4e6:	687b      	ldr	r3, [r7, #4]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	891b      	ldrh	r3, [r3, #8]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	d005      	beq.n	800e4fc <tcp_input+0x160>
 800e4f0:	4b37      	ldr	r3, [pc, #220]	; (800e5d0 <tcp_input+0x234>)
 800e4f2:	22d0      	movs	r2, #208	; 0xd0
 800e4f4:	493a      	ldr	r1, [pc, #232]	; (800e5e0 <tcp_input+0x244>)
 800e4f6:	4838      	ldr	r0, [pc, #224]	; (800e5d8 <tcp_input+0x23c>)
 800e4f8:	f007 fc6c 	bl	8015dd4 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e4fc:	4b2f      	ldr	r3, [pc, #188]	; (800e5bc <tcp_input+0x220>)
 800e4fe:	681c      	ldr	r4, [r3, #0]
 800e500:	4b2e      	ldr	r3, [pc, #184]	; (800e5bc <tcp_input+0x220>)
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	881b      	ldrh	r3, [r3, #0]
 800e506:	b29b      	uxth	r3, r3
 800e508:	4618      	mov	r0, r3
 800e50a:	f7fa fd77 	bl	8008ffc <lwip_htons>
 800e50e:	4603      	mov	r3, r0
 800e510:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e512:	4b2a      	ldr	r3, [pc, #168]	; (800e5bc <tcp_input+0x220>)
 800e514:	681c      	ldr	r4, [r3, #0]
 800e516:	4b29      	ldr	r3, [pc, #164]	; (800e5bc <tcp_input+0x220>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	885b      	ldrh	r3, [r3, #2]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4618      	mov	r0, r3
 800e520:	f7fa fd6c 	bl	8008ffc <lwip_htons>
 800e524:	4603      	mov	r3, r0
 800e526:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e528:	4b24      	ldr	r3, [pc, #144]	; (800e5bc <tcp_input+0x220>)
 800e52a:	681c      	ldr	r4, [r3, #0]
 800e52c:	4b23      	ldr	r3, [pc, #140]	; (800e5bc <tcp_input+0x220>)
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	685b      	ldr	r3, [r3, #4]
 800e532:	4618      	mov	r0, r3
 800e534:	f7fa fd70 	bl	8009018 <lwip_htonl>
 800e538:	4603      	mov	r3, r0
 800e53a:	6063      	str	r3, [r4, #4]
 800e53c:	6863      	ldr	r3, [r4, #4]
 800e53e:	4a29      	ldr	r2, [pc, #164]	; (800e5e4 <tcp_input+0x248>)
 800e540:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e542:	4b1e      	ldr	r3, [pc, #120]	; (800e5bc <tcp_input+0x220>)
 800e544:	681c      	ldr	r4, [r3, #0]
 800e546:	4b1d      	ldr	r3, [pc, #116]	; (800e5bc <tcp_input+0x220>)
 800e548:	681b      	ldr	r3, [r3, #0]
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	4618      	mov	r0, r3
 800e54e:	f7fa fd63 	bl	8009018 <lwip_htonl>
 800e552:	4603      	mov	r3, r0
 800e554:	60a3      	str	r3, [r4, #8]
 800e556:	68a3      	ldr	r3, [r4, #8]
 800e558:	4a23      	ldr	r2, [pc, #140]	; (800e5e8 <tcp_input+0x24c>)
 800e55a:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e55c:	4b17      	ldr	r3, [pc, #92]	; (800e5bc <tcp_input+0x220>)
 800e55e:	681c      	ldr	r4, [r3, #0]
 800e560:	4b16      	ldr	r3, [pc, #88]	; (800e5bc <tcp_input+0x220>)
 800e562:	681b      	ldr	r3, [r3, #0]
 800e564:	89db      	ldrh	r3, [r3, #14]
 800e566:	b29b      	uxth	r3, r3
 800e568:	4618      	mov	r0, r3
 800e56a:	f7fa fd47 	bl	8008ffc <lwip_htons>
 800e56e:	4603      	mov	r3, r0
 800e570:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e572:	4b12      	ldr	r3, [pc, #72]	; (800e5bc <tcp_input+0x220>)
 800e574:	681b      	ldr	r3, [r3, #0]
 800e576:	899b      	ldrh	r3, [r3, #12]
 800e578:	b29b      	uxth	r3, r3
 800e57a:	4618      	mov	r0, r3
 800e57c:	f7fa fd3e 	bl	8008ffc <lwip_htons>
 800e580:	4603      	mov	r3, r0
 800e582:	b2db      	uxtb	r3, r3
 800e584:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e588:	b2da      	uxtb	r2, r3
 800e58a:	4b18      	ldr	r3, [pc, #96]	; (800e5ec <tcp_input+0x250>)
 800e58c:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len + ((flags & (TCP_FIN | TCP_SYN)) ? 1 : 0);
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	891a      	ldrh	r2, [r3, #8]
 800e592:	4b16      	ldr	r3, [pc, #88]	; (800e5ec <tcp_input+0x250>)
 800e594:	781b      	ldrb	r3, [r3, #0]
 800e596:	f003 0303 	and.w	r3, r3, #3
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	bf14      	ite	ne
 800e59e:	2301      	movne	r3, #1
 800e5a0:	2300      	moveq	r3, #0
 800e5a2:	b2db      	uxtb	r3, r3
 800e5a4:	b29b      	uxth	r3, r3
 800e5a6:	4413      	add	r3, r2
 800e5a8:	b29a      	uxth	r2, r3
 800e5aa:	4b11      	ldr	r3, [pc, #68]	; (800e5f0 <tcp_input+0x254>)
 800e5ac:	801a      	strh	r2, [r3, #0]

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e5ae:	2300      	movs	r3, #0
 800e5b0:	623b      	str	r3, [r7, #32]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e5b2:	4b10      	ldr	r3, [pc, #64]	; (800e5f4 <tcp_input+0x258>)
 800e5b4:	681b      	ldr	r3, [r3, #0]
 800e5b6:	627b      	str	r3, [r7, #36]	; 0x24
 800e5b8:	e082      	b.n	800e6c0 <tcp_input+0x324>
 800e5ba:	bf00      	nop
 800e5bc:	20004124 	.word	0x20004124
 800e5c0:	200041ec 	.word	0x200041ec
 800e5c4:	20004128 	.word	0x20004128
 800e5c8:	2000412c 	.word	0x2000412c
 800e5cc:	2000412a 	.word	0x2000412a
 800e5d0:	080199cc 	.word	0x080199cc
 800e5d4:	08019a00 	.word	0x08019a00
 800e5d8:	08019a10 	.word	0x08019a10
 800e5dc:	08019a38 	.word	0x08019a38
 800e5e0:	08019a44 	.word	0x08019a44
 800e5e4:	20004134 	.word	0x20004134
 800e5e8:	20004138 	.word	0x20004138
 800e5ec:	20004140 	.word	0x20004140
 800e5f0:	2000413e 	.word	0x2000413e
 800e5f4:	20007934 	.word	0x20007934
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e5fa:	7d1b      	ldrb	r3, [r3, #20]
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d105      	bne.n	800e60c <tcp_input+0x270>
 800e600:	4b73      	ldr	r3, [pc, #460]	; (800e7d0 <tcp_input+0x434>)
 800e602:	22e2      	movs	r2, #226	; 0xe2
 800e604:	4973      	ldr	r1, [pc, #460]	; (800e7d4 <tcp_input+0x438>)
 800e606:	4874      	ldr	r0, [pc, #464]	; (800e7d8 <tcp_input+0x43c>)
 800e608:	f007 fbe4 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e60c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e60e:	7d1b      	ldrb	r3, [r3, #20]
 800e610:	2b0a      	cmp	r3, #10
 800e612:	d105      	bne.n	800e620 <tcp_input+0x284>
 800e614:	4b6e      	ldr	r3, [pc, #440]	; (800e7d0 <tcp_input+0x434>)
 800e616:	22e3      	movs	r2, #227	; 0xe3
 800e618:	4970      	ldr	r1, [pc, #448]	; (800e7dc <tcp_input+0x440>)
 800e61a:	486f      	ldr	r0, [pc, #444]	; (800e7d8 <tcp_input+0x43c>)
 800e61c:	f007 fbda 	bl	8015dd4 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e622:	7d1b      	ldrb	r3, [r3, #20]
 800e624:	2b01      	cmp	r3, #1
 800e626:	d105      	bne.n	800e634 <tcp_input+0x298>
 800e628:	4b69      	ldr	r3, [pc, #420]	; (800e7d0 <tcp_input+0x434>)
 800e62a:	22e4      	movs	r2, #228	; 0xe4
 800e62c:	496c      	ldr	r1, [pc, #432]	; (800e7e0 <tcp_input+0x444>)
 800e62e:	486a      	ldr	r0, [pc, #424]	; (800e7d8 <tcp_input+0x43c>)
 800e630:	f007 fbd0 	bl	8015dd4 <iprintf>
    if (pcb->remote_port == tcphdr->src &&
 800e634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e636:	8b1a      	ldrh	r2, [r3, #24]
 800e638:	4b6a      	ldr	r3, [pc, #424]	; (800e7e4 <tcp_input+0x448>)
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	881b      	ldrh	r3, [r3, #0]
 800e63e:	b29b      	uxth	r3, r3
 800e640:	429a      	cmp	r2, r3
 800e642:	d138      	bne.n	800e6b6 <tcp_input+0x31a>
        pcb->local_port == tcphdr->dest &&
 800e644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e646:	8ada      	ldrh	r2, [r3, #22]
 800e648:	4b66      	ldr	r3, [pc, #408]	; (800e7e4 <tcp_input+0x448>)
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	885b      	ldrh	r3, [r3, #2]
 800e64e:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e650:	429a      	cmp	r2, r3
 800e652:	d130      	bne.n	800e6b6 <tcp_input+0x31a>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e656:	685a      	ldr	r2, [r3, #4]
 800e658:	4b63      	ldr	r3, [pc, #396]	; (800e7e8 <tcp_input+0x44c>)
 800e65a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800e65c:	429a      	cmp	r2, r3
 800e65e:	d12a      	bne.n	800e6b6 <tcp_input+0x31a>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e662:	681a      	ldr	r2, [r3, #0]
 800e664:	4b60      	ldr	r3, [pc, #384]	; (800e7e8 <tcp_input+0x44c>)
 800e666:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e668:	429a      	cmp	r2, r3
 800e66a:	d124      	bne.n	800e6b6 <tcp_input+0x31a>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800e66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e66e:	68da      	ldr	r2, [r3, #12]
 800e670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e672:	429a      	cmp	r2, r3
 800e674:	d105      	bne.n	800e682 <tcp_input+0x2e6>
 800e676:	4b56      	ldr	r3, [pc, #344]	; (800e7d0 <tcp_input+0x434>)
 800e678:	22ec      	movs	r2, #236	; 0xec
 800e67a:	495c      	ldr	r1, [pc, #368]	; (800e7ec <tcp_input+0x450>)
 800e67c:	4856      	ldr	r0, [pc, #344]	; (800e7d8 <tcp_input+0x43c>)
 800e67e:	f007 fba9 	bl	8015dd4 <iprintf>
      if (prev != NULL) {
 800e682:	6a3b      	ldr	r3, [r7, #32]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d00a      	beq.n	800e69e <tcp_input+0x302>
        prev->next = pcb->next;
 800e688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e68a:	68da      	ldr	r2, [r3, #12]
 800e68c:	6a3b      	ldr	r3, [r7, #32]
 800e68e:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800e690:	4b57      	ldr	r3, [pc, #348]	; (800e7f0 <tcp_input+0x454>)
 800e692:	681a      	ldr	r2, [r3, #0]
 800e694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e696:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800e698:	4a55      	ldr	r2, [pc, #340]	; (800e7f0 <tcp_input+0x454>)
 800e69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e69c:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800e69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a0:	68da      	ldr	r2, [r3, #12]
 800e6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6a4:	429a      	cmp	r2, r3
 800e6a6:	d10f      	bne.n	800e6c8 <tcp_input+0x32c>
 800e6a8:	4b49      	ldr	r3, [pc, #292]	; (800e7d0 <tcp_input+0x434>)
 800e6aa:	22f4      	movs	r2, #244	; 0xf4
 800e6ac:	4951      	ldr	r1, [pc, #324]	; (800e7f4 <tcp_input+0x458>)
 800e6ae:	484a      	ldr	r0, [pc, #296]	; (800e7d8 <tcp_input+0x43c>)
 800e6b0:	f007 fb90 	bl	8015dd4 <iprintf>
      break;
 800e6b4:	e008      	b.n	800e6c8 <tcp_input+0x32c>
    }
    prev = pcb;
 800e6b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6b8:	623b      	str	r3, [r7, #32]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6bc:	68db      	ldr	r3, [r3, #12]
 800e6be:	627b      	str	r3, [r7, #36]	; 0x24
 800e6c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6c2:	2b00      	cmp	r3, #0
 800e6c4:	d198      	bne.n	800e5f8 <tcp_input+0x25c>
 800e6c6:	e000      	b.n	800e6ca <tcp_input+0x32e>
      break;
 800e6c8:	bf00      	nop
  }

  if (pcb == NULL) {
 800e6ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	f040 8099 	bne.w	800e804 <tcp_input+0x468>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e6d2:	4b49      	ldr	r3, [pc, #292]	; (800e7f8 <tcp_input+0x45c>)
 800e6d4:	681b      	ldr	r3, [r3, #0]
 800e6d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e6d8:	e02f      	b.n	800e73a <tcp_input+0x39e>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e6da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6dc:	7d1b      	ldrb	r3, [r3, #20]
 800e6de:	2b0a      	cmp	r3, #10
 800e6e0:	d005      	beq.n	800e6ee <tcp_input+0x352>
 800e6e2:	4b3b      	ldr	r3, [pc, #236]	; (800e7d0 <tcp_input+0x434>)
 800e6e4:	22fe      	movs	r2, #254	; 0xfe
 800e6e6:	4945      	ldr	r1, [pc, #276]	; (800e7fc <tcp_input+0x460>)
 800e6e8:	483b      	ldr	r0, [pc, #236]	; (800e7d8 <tcp_input+0x43c>)
 800e6ea:	f007 fb73 	bl	8015dd4 <iprintf>
      if (pcb->remote_port == tcphdr->src &&
 800e6ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e6f0:	8b1a      	ldrh	r2, [r3, #24]
 800e6f2:	4b3c      	ldr	r3, [pc, #240]	; (800e7e4 <tcp_input+0x448>)
 800e6f4:	681b      	ldr	r3, [r3, #0]
 800e6f6:	881b      	ldrh	r3, [r3, #0]
 800e6f8:	b29b      	uxth	r3, r3
 800e6fa:	429a      	cmp	r2, r3
 800e6fc:	d11a      	bne.n	800e734 <tcp_input+0x398>
          pcb->local_port == tcphdr->dest &&
 800e6fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e700:	8ada      	ldrh	r2, [r3, #22]
 800e702:	4b38      	ldr	r3, [pc, #224]	; (800e7e4 <tcp_input+0x448>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	885b      	ldrh	r3, [r3, #2]
 800e708:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800e70a:	429a      	cmp	r2, r3
 800e70c:	d112      	bne.n	800e734 <tcp_input+0x398>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e710:	685a      	ldr	r2, [r3, #4]
 800e712:	4b35      	ldr	r3, [pc, #212]	; (800e7e8 <tcp_input+0x44c>)
 800e714:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800e716:	429a      	cmp	r2, r3
 800e718:	d10c      	bne.n	800e734 <tcp_input+0x398>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	681a      	ldr	r2, [r3, #0]
 800e71e:	4b32      	ldr	r3, [pc, #200]	; (800e7e8 <tcp_input+0x44c>)
 800e720:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800e722:	429a      	cmp	r2, r3
 800e724:	d106      	bne.n	800e734 <tcp_input+0x398>
        /* We don't really care enough to move this PCB to the front
           of the list since we are not very likely to receive that
           many segments for connections in TIME-WAIT. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for TIME_WAITing connection.\n"));
        tcp_timewait_input(pcb);
 800e726:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e728:	f000 fb16 	bl	800ed58 <tcp_timewait_input>
        pbuf_free(p);
 800e72c:	6878      	ldr	r0, [r7, #4]
 800e72e:	f7fd ff23 	bl	800c578 <pbuf_free>
        return;
 800e732:	e1ed      	b.n	800eb10 <tcp_input+0x774>
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e736:	68db      	ldr	r3, [r3, #12]
 800e738:	627b      	str	r3, [r7, #36]	; 0x24
 800e73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d1cc      	bne.n	800e6da <tcp_input+0x33e>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800e740:	2300      	movs	r3, #0
 800e742:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e744:	4b2e      	ldr	r3, [pc, #184]	; (800e800 <tcp_input+0x464>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	61fb      	str	r3, [r7, #28]
 800e74a:	e01d      	b.n	800e788 <tcp_input+0x3ec>
      if (lpcb->local_port == tcphdr->dest) {
 800e74c:	69fb      	ldr	r3, [r7, #28]
 800e74e:	8ada      	ldrh	r2, [r3, #22]
 800e750:	4b24      	ldr	r3, [pc, #144]	; (800e7e4 <tcp_input+0x448>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	885b      	ldrh	r3, [r3, #2]
 800e756:	b29b      	uxth	r3, r3
 800e758:	429a      	cmp	r2, r3
 800e75a:	d110      	bne.n	800e77e <tcp_input+0x3e2>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800e75c:	69fb      	ldr	r3, [r7, #28]
 800e75e:	681a      	ldr	r2, [r3, #0]
 800e760:	4b21      	ldr	r3, [pc, #132]	; (800e7e8 <tcp_input+0x44c>)
 800e762:	695b      	ldr	r3, [r3, #20]
 800e764:	429a      	cmp	r2, r3
 800e766:	d013      	beq.n	800e790 <tcp_input+0x3f4>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800e768:	69fb      	ldr	r3, [r7, #28]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d003      	beq.n	800e776 <tcp_input+0x3da>
 800e76e:	69fb      	ldr	r3, [r7, #28]
 800e770:	681b      	ldr	r3, [r3, #0]
 800e772:	2b00      	cmp	r3, #0
 800e774:	d103      	bne.n	800e77e <tcp_input+0x3e2>
            /* found an ANY-match */
#if SO_REUSE
            lpcb_any = lpcb;
 800e776:	69fb      	ldr	r3, [r7, #28]
 800e778:	617b      	str	r3, [r7, #20]
            lpcb_prev = prev;
 800e77a:	6a3b      	ldr	r3, [r7, #32]
 800e77c:	61bb      	str	r3, [r7, #24]
            break;
 #endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800e77e:	69fb      	ldr	r3, [r7, #28]
 800e780:	623b      	str	r3, [r7, #32]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e782:	69fb      	ldr	r3, [r7, #28]
 800e784:	68db      	ldr	r3, [r3, #12]
 800e786:	61fb      	str	r3, [r7, #28]
 800e788:	69fb      	ldr	r3, [r7, #28]
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d1de      	bne.n	800e74c <tcp_input+0x3b0>
 800e78e:	e000      	b.n	800e792 <tcp_input+0x3f6>
            break;
 800e790:	bf00      	nop
    }
#if SO_REUSE
    /* first try specific local IP */
    if (lpcb == NULL) {
 800e792:	69fb      	ldr	r3, [r7, #28]
 800e794:	2b00      	cmp	r3, #0
 800e796:	d103      	bne.n	800e7a0 <tcp_input+0x404>
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
 800e798:	697b      	ldr	r3, [r7, #20]
 800e79a:	61fb      	str	r3, [r7, #28]
      prev = lpcb_prev;
 800e79c:	69bb      	ldr	r3, [r7, #24]
 800e79e:	623b      	str	r3, [r7, #32]
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800e7a0:	69fb      	ldr	r3, [r7, #28]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d02e      	beq.n	800e804 <tcp_input+0x468>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800e7a6:	6a3b      	ldr	r3, [r7, #32]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d00a      	beq.n	800e7c2 <tcp_input+0x426>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800e7ac:	69fb      	ldr	r3, [r7, #28]
 800e7ae:	68da      	ldr	r2, [r3, #12]
 800e7b0:	6a3b      	ldr	r3, [r7, #32]
 800e7b2:	60da      	str	r2, [r3, #12]
              /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800e7b4:	4b12      	ldr	r3, [pc, #72]	; (800e800 <tcp_input+0x464>)
 800e7b6:	681a      	ldr	r2, [r3, #0]
 800e7b8:	69fb      	ldr	r3, [r7, #28]
 800e7ba:	60da      	str	r2, [r3, #12]
              /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800e7bc:	4a10      	ldr	r2, [pc, #64]	; (800e800 <tcp_input+0x464>)
 800e7be:	69fb      	ldr	r3, [r7, #28]
 800e7c0:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }

      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: packed for LISTENing connection.\n"));
      tcp_listen_input(lpcb);
 800e7c2:	69f8      	ldr	r0, [r7, #28]
 800e7c4:	f000 f9e6 	bl	800eb94 <tcp_listen_input>
      pbuf_free(p);
 800e7c8:	6878      	ldr	r0, [r7, #4]
 800e7ca:	f7fd fed5 	bl	800c578 <pbuf_free>
      return;
 800e7ce:	e19f      	b.n	800eb10 <tcp_input+0x774>
 800e7d0:	080199cc 	.word	0x080199cc
 800e7d4:	08019a64 	.word	0x08019a64
 800e7d8:	08019a10 	.word	0x08019a10
 800e7dc:	08019a8c 	.word	0x08019a8c
 800e7e0:	08019ab8 	.word	0x08019ab8
 800e7e4:	20004124 	.word	0x20004124
 800e7e8:	200041ec 	.word	0x200041ec
 800e7ec:	08019ae0 	.word	0x08019ae0
 800e7f0:	20007934 	.word	0x20007934
 800e7f4:	08019b0c 	.word	0x08019b0c
 800e7f8:	20007944 	.word	0x20007944
 800e7fc:	08019b38 	.word	0x08019b38
 800e800:	2000793c 	.word	0x2000793c
  tcp_debug_print_flags(TCPH_FLAGS(tcphdr));
  LWIP_DEBUGF(TCP_INPUT_DEBUG, ("-+-+-+-+-+-+-+-+-+-+-+-+-+-+\n"));
#endif /* TCP_INPUT_DEBUG */


  if (pcb != NULL) {
 800e804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e806:	2b00      	cmp	r3, #0
 800e808:	f000 8154 	beq.w	800eab4 <tcp_input+0x718>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800e80c:	4b9d      	ldr	r3, [pc, #628]	; (800ea84 <tcp_input+0x6e8>)
 800e80e:	2200      	movs	r2, #0
 800e810:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	891a      	ldrh	r2, [r3, #8]
 800e816:	4b9b      	ldr	r3, [pc, #620]	; (800ea84 <tcp_input+0x6e8>)
 800e818:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800e81a:	4a9a      	ldr	r2, [pc, #616]	; (800ea84 <tcp_input+0x6e8>)
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800e820:	4b99      	ldr	r3, [pc, #612]	; (800ea88 <tcp_input+0x6ec>)
 800e822:	681b      	ldr	r3, [r3, #0]
 800e824:	4a97      	ldr	r2, [pc, #604]	; (800ea84 <tcp_input+0x6e8>)
 800e826:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800e828:	4b98      	ldr	r3, [pc, #608]	; (800ea8c <tcp_input+0x6f0>)
 800e82a:	2200      	movs	r2, #0
 800e82c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800e82e:	4b98      	ldr	r3, [pc, #608]	; (800ea90 <tcp_input+0x6f4>)
 800e830:	2200      	movs	r2, #0
 800e832:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800e834:	4b97      	ldr	r3, [pc, #604]	; (800ea94 <tcp_input+0x6f8>)
 800e836:	2200      	movs	r2, #0
 800e838:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800e83a:	4b97      	ldr	r3, [pc, #604]	; (800ea98 <tcp_input+0x6fc>)
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	f003 0308 	and.w	r3, r3, #8
 800e842:	2b00      	cmp	r3, #0
 800e844:	d006      	beq.n	800e854 <tcp_input+0x4b8>
      p->flags |= PBUF_FLAG_PUSH;
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	7b5b      	ldrb	r3, [r3, #13]
 800e84a:	f043 0301 	orr.w	r3, r3, #1
 800e84e:	b2da      	uxtb	r2, r3
 800e850:	687b      	ldr	r3, [r7, #4]
 800e852:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800e854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e858:	2b00      	cmp	r3, #0
 800e85a:	d017      	beq.n	800e88c <tcp_input+0x4f0>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e85c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e85e:	f7ff f965 	bl	800db2c <tcp_process_refused_data>
 800e862:	4603      	mov	r3, r0
 800e864:	f113 0f0d 	cmn.w	r3, #13
 800e868:	d007      	beq.n	800e87a <tcp_input+0x4de>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e86a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800e86e:	2b00      	cmp	r3, #0
 800e870:	d00c      	beq.n	800e88c <tcp_input+0x4f0>
        ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800e872:	4b8a      	ldr	r3, [pc, #552]	; (800ea9c <tcp_input+0x700>)
 800e874:	881b      	ldrh	r3, [r3, #0]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d008      	beq.n	800e88c <tcp_input+0x4f0>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800e87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e87c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800e87e:	2b00      	cmp	r3, #0
 800e880:	f040 80e2 	bne.w	800ea48 <tcp_input+0x6ac>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800e884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e886:	f002 fe1f 	bl	80114c8 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800e88a:	e0dd      	b.n	800ea48 <tcp_input+0x6ac>
      }
    }
    tcp_input_pcb = pcb;
 800e88c:	4a84      	ldr	r2, [pc, #528]	; (800eaa0 <tcp_input+0x704>)
 800e88e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e890:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800e892:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e894:	f000 fac8 	bl	800ee28 <tcp_process>
 800e898:	4603      	mov	r3, r0
 800e89a:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800e89c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e8a0:	f113 0f0d 	cmn.w	r3, #13
 800e8a4:	f000 80db 	beq.w	800ea5e <tcp_input+0x6c2>
      if (recv_flags & TF_RESET) {
 800e8a8:	4b79      	ldr	r3, [pc, #484]	; (800ea90 <tcp_input+0x6f4>)
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	f003 0308 	and.w	r3, r3, #8
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d016      	beq.n	800e8e2 <tcp_input+0x546>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800e8b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d008      	beq.n	800e8d0 <tcp_input+0x534>
 800e8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e8c6:	6912      	ldr	r2, [r2, #16]
 800e8c8:	f06f 010d 	mvn.w	r1, #13
 800e8cc:	4610      	mov	r0, r2
 800e8ce:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800e8d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8d2:	4874      	ldr	r0, [pc, #464]	; (800eaa4 <tcp_input+0x708>)
 800e8d4:	f7ff fc48 	bl	800e168 <tcp_pcb_remove>
        memp_free(MEMP_TCP_PCB, pcb);
 800e8d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e8da:	2001      	movs	r0, #1
 800e8dc:	f7fd f8f2 	bl	800bac4 <memp_free>
 800e8e0:	e0bd      	b.n	800ea5e <tcp_input+0x6c2>
      } else {
        err = ERR_OK;
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800e8e6:	4b6b      	ldr	r3, [pc, #428]	; (800ea94 <tcp_input+0x6f8>)
 800e8e8:	881b      	ldrh	r3, [r3, #0]
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d01b      	beq.n	800e926 <tcp_input+0x58a>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800e8ee:	4b69      	ldr	r3, [pc, #420]	; (800ea94 <tcp_input+0x6f8>)
 800e8f0:	881b      	ldrh	r3, [r3, #0]
 800e8f2:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d009      	beq.n	800e910 <tcp_input+0x574>
 800e8fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e900:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e902:	6910      	ldr	r0, [r2, #16]
 800e904:	89fa      	ldrh	r2, [r7, #14]
 800e906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e908:	4798      	blx	r3
 800e90a:	4603      	mov	r3, r0
 800e90c:	74fb      	strb	r3, [r7, #19]
 800e90e:	e001      	b.n	800e914 <tcp_input+0x578>
 800e910:	2300      	movs	r3, #0
 800e912:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800e914:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e918:	f113 0f0d 	cmn.w	r3, #13
 800e91c:	f000 8096 	beq.w	800ea4c <tcp_input+0x6b0>
              goto aborted;
            }
          }
          recv_acked = 0;
 800e920:	4b5c      	ldr	r3, [pc, #368]	; (800ea94 <tcp_input+0x6f8>)
 800e922:	2200      	movs	r2, #0
 800e924:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800e926:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e928:	f000 f902 	bl	800eb30 <tcp_input_delayed_close>
 800e92c:	4603      	mov	r3, r0
 800e92e:	2b00      	cmp	r3, #0
 800e930:	f040 808e 	bne.w	800ea50 <tcp_input+0x6b4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800e934:	4b55      	ldr	r3, [pc, #340]	; (800ea8c <tcp_input+0x6f0>)
 800e936:	681b      	ldr	r3, [r3, #0]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d041      	beq.n	800e9c0 <tcp_input+0x624>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800e93c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e940:	2b00      	cmp	r3, #0
 800e942:	d006      	beq.n	800e952 <tcp_input+0x5b6>
 800e944:	4b58      	ldr	r3, [pc, #352]	; (800eaa8 <tcp_input+0x70c>)
 800e946:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
 800e94a:	4958      	ldr	r1, [pc, #352]	; (800eaac <tcp_input+0x710>)
 800e94c:	4858      	ldr	r0, [pc, #352]	; (800eab0 <tcp_input+0x714>)
 800e94e:	f007 fa41 	bl	8015dd4 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800e952:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e954:	7e9b      	ldrb	r3, [r3, #26]
 800e956:	f003 0310 	and.w	r3, r3, #16
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d008      	beq.n	800e970 <tcp_input+0x5d4>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800e95e:	4b4b      	ldr	r3, [pc, #300]	; (800ea8c <tcp_input+0x6f0>)
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	4618      	mov	r0, r3
 800e964:	f7fd fe08 	bl	800c578 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800e968:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e96a:	f7fe fb4b 	bl	800d004 <tcp_abort>
            goto aborted;
 800e96e:	e076      	b.n	800ea5e <tcp_input+0x6c2>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800e970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e972:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e976:	2b00      	cmp	r3, #0
 800e978:	d00c      	beq.n	800e994 <tcp_input+0x5f8>
 800e97a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e97c:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800e980:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e982:	6918      	ldr	r0, [r3, #16]
 800e984:	4b41      	ldr	r3, [pc, #260]	; (800ea8c <tcp_input+0x6f0>)
 800e986:	681a      	ldr	r2, [r3, #0]
 800e988:	2300      	movs	r3, #0
 800e98a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e98c:	47a0      	blx	r4
 800e98e:	4603      	mov	r3, r0
 800e990:	74fb      	strb	r3, [r7, #19]
 800e992:	e008      	b.n	800e9a6 <tcp_input+0x60a>
 800e994:	4b3d      	ldr	r3, [pc, #244]	; (800ea8c <tcp_input+0x6f0>)
 800e996:	681a      	ldr	r2, [r3, #0]
 800e998:	2300      	movs	r3, #0
 800e99a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e99c:	2000      	movs	r0, #0
 800e99e:	f7ff f976 	bl	800dc8e <tcp_recv_null>
 800e9a2:	4603      	mov	r3, r0
 800e9a4:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800e9a6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9aa:	f113 0f0d 	cmn.w	r3, #13
 800e9ae:	d051      	beq.n	800ea54 <tcp_input+0x6b8>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800e9b0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d003      	beq.n	800e9c0 <tcp_input+0x624>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800e9b8:	4b34      	ldr	r3, [pc, #208]	; (800ea8c <tcp_input+0x6f0>)
 800e9ba:	681a      	ldr	r2, [r3, #0]
 800e9bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9be:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800e9c0:	4b33      	ldr	r3, [pc, #204]	; (800ea90 <tcp_input+0x6f4>)
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	f003 0320 	and.w	r3, r3, #32
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d030      	beq.n	800ea2e <tcp_input+0x692>
          if (pcb->refused_data != NULL) {
 800e9cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9d0:	2b00      	cmp	r3, #0
 800e9d2:	d009      	beq.n	800e9e8 <tcp_input+0x64c>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800e9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e9da:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800e9dc:	7b52      	ldrb	r2, [r2, #13]
 800e9de:	f042 0220 	orr.w	r2, r2, #32
 800e9e2:	b2d2      	uxtb	r2, r2
 800e9e4:	735a      	strb	r2, [r3, #13]
 800e9e6:	e022      	b.n	800ea2e <tcp_input+0x692>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800e9e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9ec:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e9f0:	d005      	beq.n	800e9fe <tcp_input+0x662>
              pcb->rcv_wnd++;
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e9f6:	3301      	adds	r3, #1
 800e9f8:	b29a      	uxth	r2, r3
 800e9fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9fc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800e9fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d00b      	beq.n	800ea20 <tcp_input+0x684>
 800ea08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0a:	f8d3 4080 	ldr.w	r4, [r3, #128]	; 0x80
 800ea0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea10:	6918      	ldr	r0, [r3, #16]
 800ea12:	2300      	movs	r3, #0
 800ea14:	2200      	movs	r2, #0
 800ea16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ea18:	47a0      	blx	r4
 800ea1a:	4603      	mov	r3, r0
 800ea1c:	74fb      	strb	r3, [r7, #19]
 800ea1e:	e001      	b.n	800ea24 <tcp_input+0x688>
 800ea20:	2300      	movs	r3, #0
 800ea22:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ea24:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ea28:	f113 0f0d 	cmn.w	r3, #13
 800ea2c:	d014      	beq.n	800ea58 <tcp_input+0x6bc>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ea2e:	4b1c      	ldr	r3, [pc, #112]	; (800eaa0 <tcp_input+0x704>)
 800ea30:	2200      	movs	r2, #0
 800ea32:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ea34:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea36:	f000 f87b 	bl	800eb30 <tcp_input_delayed_close>
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d10d      	bne.n	800ea5c <tcp_input+0x6c0>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ea40:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ea42:	f002 fd9d 	bl	8011580 <tcp_output>
 800ea46:	e00a      	b.n	800ea5e <tcp_input+0x6c2>
        goto aborted;
 800ea48:	bf00      	nop
 800ea4a:	e008      	b.n	800ea5e <tcp_input+0x6c2>
              goto aborted;
 800ea4c:	bf00      	nop
 800ea4e:	e006      	b.n	800ea5e <tcp_input+0x6c2>
          goto aborted;
 800ea50:	bf00      	nop
 800ea52:	e004      	b.n	800ea5e <tcp_input+0x6c2>
            goto aborted;
 800ea54:	bf00      	nop
 800ea56:	e002      	b.n	800ea5e <tcp_input+0x6c2>
              goto aborted;
 800ea58:	bf00      	nop
 800ea5a:	e000      	b.n	800ea5e <tcp_input+0x6c2>
          goto aborted;
 800ea5c:	bf00      	nop
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
    tcp_input_pcb = NULL;
 800ea5e:	4b10      	ldr	r3, [pc, #64]	; (800eaa0 <tcp_input+0x704>)
 800ea60:	2200      	movs	r2, #0
 800ea62:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ea64:	4b09      	ldr	r3, [pc, #36]	; (800ea8c <tcp_input+0x6f0>)
 800ea66:	2200      	movs	r2, #0
 800ea68:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL)
 800ea6a:	4b06      	ldr	r3, [pc, #24]	; (800ea84 <tcp_input+0x6e8>)
 800ea6c:	685b      	ldr	r3, [r3, #4]
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d04d      	beq.n	800eb0e <tcp_input+0x772>
    {
      pbuf_free(inseg.p);
 800ea72:	4b04      	ldr	r3, [pc, #16]	; (800ea84 <tcp_input+0x6e8>)
 800ea74:	685b      	ldr	r3, [r3, #4]
 800ea76:	4618      	mov	r0, r3
 800ea78:	f7fd fd7e 	bl	800c578 <pbuf_free>
      inseg.p = NULL;
 800ea7c:	4b01      	ldr	r3, [pc, #4]	; (800ea84 <tcp_input+0x6e8>)
 800ea7e:	2200      	movs	r2, #0
 800ea80:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ea82:	e044      	b.n	800eb0e <tcp_input+0x772>
 800ea84:	20004114 	.word	0x20004114
 800ea88:	20004124 	.word	0x20004124
 800ea8c:	20004144 	.word	0x20004144
 800ea90:	20004141 	.word	0x20004141
 800ea94:	2000413c 	.word	0x2000413c
 800ea98:	20004140 	.word	0x20004140
 800ea9c:	2000413e 	.word	0x2000413e
 800eaa0:	20007948 	.word	0x20007948
 800eaa4:	20007934 	.word	0x20007934
 800eaa8:	080199cc 	.word	0x080199cc
 800eaac:	08019b68 	.word	0x08019b68
 800eab0:	08019a10 	.word	0x08019a10
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800eab4:	4b18      	ldr	r3, [pc, #96]	; (800eb18 <tcp_input+0x77c>)
 800eab6:	681b      	ldr	r3, [r3, #0]
 800eab8:	899b      	ldrh	r3, [r3, #12]
 800eaba:	b29b      	uxth	r3, r3
 800eabc:	4618      	mov	r0, r3
 800eabe:	f7fa fa9d 	bl	8008ffc <lwip_htons>
 800eac2:	4603      	mov	r3, r0
 800eac4:	f003 0304 	and.w	r3, r3, #4
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d115      	bne.n	800eaf8 <tcp_input+0x75c>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eacc:	4b13      	ldr	r3, [pc, #76]	; (800eb1c <tcp_input+0x780>)
 800eace:	6818      	ldr	r0, [r3, #0]
 800ead0:	4b13      	ldr	r3, [pc, #76]	; (800eb20 <tcp_input+0x784>)
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	461a      	mov	r2, r3
 800ead6:	4b13      	ldr	r3, [pc, #76]	; (800eb24 <tcp_input+0x788>)
 800ead8:	681b      	ldr	r3, [r3, #0]
 800eada:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eadc:	4b0e      	ldr	r3, [pc, #56]	; (800eb18 <tcp_input+0x77c>)
 800eade:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae0:	885b      	ldrh	r3, [r3, #2]
 800eae2:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eae4:	4a0c      	ldr	r2, [pc, #48]	; (800eb18 <tcp_input+0x77c>)
 800eae6:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800eae8:	8812      	ldrh	r2, [r2, #0]
 800eaea:	b292      	uxth	r2, r2
 800eaec:	9201      	str	r2, [sp, #4]
 800eaee:	9300      	str	r3, [sp, #0]
 800eaf0:	4b0d      	ldr	r3, [pc, #52]	; (800eb28 <tcp_input+0x78c>)
 800eaf2:	4a0e      	ldr	r2, [pc, #56]	; (800eb2c <tcp_input+0x790>)
 800eaf4:	f002 ffcc 	bl	8011a90 <tcp_rst>
    pbuf_free(p);
 800eaf8:	6878      	ldr	r0, [r7, #4]
 800eafa:	f7fd fd3d 	bl	800c578 <pbuf_free>
  return;
 800eafe:	e006      	b.n	800eb0e <tcp_input+0x772>
    goto dropped;
 800eb00:	bf00      	nop
 800eb02:	e000      	b.n	800eb06 <tcp_input+0x76a>
      goto dropped;
 800eb04:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eb06:	6878      	ldr	r0, [r7, #4]
 800eb08:	f7fd fd36 	bl	800c578 <pbuf_free>
 800eb0c:	e000      	b.n	800eb10 <tcp_input+0x774>
  return;
 800eb0e:	bf00      	nop
}
 800eb10:	372c      	adds	r7, #44	; 0x2c
 800eb12:	46bd      	mov	sp, r7
 800eb14:	bd90      	pop	{r4, r7, pc}
 800eb16:	bf00      	nop
 800eb18:	20004124 	.word	0x20004124
 800eb1c:	20004138 	.word	0x20004138
 800eb20:	2000413e 	.word	0x2000413e
 800eb24:	20004134 	.word	0x20004134
 800eb28:	200041fc 	.word	0x200041fc
 800eb2c:	20004200 	.word	0x20004200

0800eb30 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b082      	sub	sp, #8
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
  if (recv_flags & TF_CLOSED) {
 800eb38:	4b14      	ldr	r3, [pc, #80]	; (800eb8c <tcp_input_delayed_close+0x5c>)
 800eb3a:	781b      	ldrb	r3, [r3, #0]
 800eb3c:	f003 0310 	and.w	r3, r3, #16
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d01d      	beq.n	800eb80 <tcp_input_delayed_close+0x50>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	7e9b      	ldrb	r3, [r3, #26]
 800eb48:	f003 0310 	and.w	r3, r3, #16
 800eb4c:	2b00      	cmp	r3, #0
 800eb4e:	d10d      	bne.n	800eb6c <tcp_input_delayed_close+0x3c>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d008      	beq.n	800eb6c <tcp_input_delayed_close+0x3c>
 800eb5a:	687b      	ldr	r3, [r7, #4]
 800eb5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb60:	687a      	ldr	r2, [r7, #4]
 800eb62:	6912      	ldr	r2, [r2, #16]
 800eb64:	f06f 010e 	mvn.w	r1, #14
 800eb68:	4610      	mov	r0, r2
 800eb6a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eb6c:	6879      	ldr	r1, [r7, #4]
 800eb6e:	4808      	ldr	r0, [pc, #32]	; (800eb90 <tcp_input_delayed_close+0x60>)
 800eb70:	f7ff fafa 	bl	800e168 <tcp_pcb_remove>
    memp_free(MEMP_TCP_PCB, pcb);
 800eb74:	6879      	ldr	r1, [r7, #4]
 800eb76:	2001      	movs	r0, #1
 800eb78:	f7fc ffa4 	bl	800bac4 <memp_free>
    return 1;
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	e000      	b.n	800eb82 <tcp_input_delayed_close+0x52>
  }
  return 0;
 800eb80:	2300      	movs	r3, #0
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	20004141 	.word	0x20004141
 800eb90:	20007934 	.word	0x20007934

0800eb94 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b088      	sub	sp, #32
 800eb98:	af02      	add	r7, sp, #8
 800eb9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800eb9c:	4b64      	ldr	r3, [pc, #400]	; (800ed30 <tcp_listen_input+0x19c>)
 800eb9e:	781b      	ldrb	r3, [r3, #0]
 800eba0:	f003 0304 	and.w	r3, r3, #4
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	f040 80bc 	bne.w	800ed22 <tcp_listen_input+0x18e>
    return;
  }

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800ebaa:	4b61      	ldr	r3, [pc, #388]	; (800ed30 <tcp_listen_input+0x19c>)
 800ebac:	781b      	ldrb	r3, [r3, #0]
 800ebae:	f003 0310 	and.w	r3, r3, #16
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d016      	beq.n	800ebe4 <tcp_listen_input+0x50>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebb6:	4b5f      	ldr	r3, [pc, #380]	; (800ed34 <tcp_listen_input+0x1a0>)
 800ebb8:	6818      	ldr	r0, [r3, #0]
 800ebba:	4b5f      	ldr	r3, [pc, #380]	; (800ed38 <tcp_listen_input+0x1a4>)
 800ebbc:	881b      	ldrh	r3, [r3, #0]
 800ebbe:	461a      	mov	r2, r3
 800ebc0:	4b5e      	ldr	r3, [pc, #376]	; (800ed3c <tcp_listen_input+0x1a8>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	18d1      	adds	r1, r2, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebc6:	4b5e      	ldr	r3, [pc, #376]	; (800ed40 <tcp_listen_input+0x1ac>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebca:	885b      	ldrh	r3, [r3, #2]
 800ebcc:	b29b      	uxth	r3, r3
      ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800ebce:	4a5c      	ldr	r2, [pc, #368]	; (800ed40 <tcp_listen_input+0x1ac>)
 800ebd0:	6812      	ldr	r2, [r2, #0]
    tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ebd2:	8812      	ldrh	r2, [r2, #0]
 800ebd4:	b292      	uxth	r2, r2
 800ebd6:	9201      	str	r2, [sp, #4]
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	4b5a      	ldr	r3, [pc, #360]	; (800ed44 <tcp_listen_input+0x1b0>)
 800ebdc:	4a5a      	ldr	r2, [pc, #360]	; (800ed48 <tcp_listen_input+0x1b4>)
 800ebde:	f002 ff57 	bl	8011a90 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800ebe2:	e0a0      	b.n	800ed26 <tcp_listen_input+0x192>
  } else if (flags & TCP_SYN) {
 800ebe4:	4b52      	ldr	r3, [pc, #328]	; (800ed30 <tcp_listen_input+0x19c>)
 800ebe6:	781b      	ldrb	r3, [r3, #0]
 800ebe8:	f003 0302 	and.w	r3, r3, #2
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	f000 809a 	beq.w	800ed26 <tcp_listen_input+0x192>
    npcb = tcp_alloc(pcb->prio);
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	7d5b      	ldrb	r3, [r3, #21]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7ff f928 	bl	800de4c <tcp_alloc>
 800ebfc:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800ebfe:	697b      	ldr	r3, [r7, #20]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d111      	bne.n	800ec28 <tcp_listen_input+0x94>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	699b      	ldr	r3, [r3, #24]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	d00a      	beq.n	800ec22 <tcp_listen_input+0x8e>
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	699b      	ldr	r3, [r3, #24]
 800ec10:	687a      	ldr	r2, [r7, #4]
 800ec12:	6910      	ldr	r0, [r2, #16]
 800ec14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec18:	2100      	movs	r1, #0
 800ec1a:	4798      	blx	r3
 800ec1c:	4603      	mov	r3, r0
 800ec1e:	74fb      	strb	r3, [r7, #19]
      return;
 800ec20:	e082      	b.n	800ed28 <tcp_listen_input+0x194>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800ec22:	23f0      	movs	r3, #240	; 0xf0
 800ec24:	74fb      	strb	r3, [r7, #19]
      return;
 800ec26:	e07f      	b.n	800ed28 <tcp_listen_input+0x194>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800ec28:	4b48      	ldr	r3, [pc, #288]	; (800ed4c <tcp_listen_input+0x1b8>)
 800ec2a:	695a      	ldr	r2, [r3, #20]
 800ec2c:	697b      	ldr	r3, [r7, #20]
 800ec2e:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800ec30:	4b46      	ldr	r3, [pc, #280]	; (800ed4c <tcp_listen_input+0x1b8>)
 800ec32:	691a      	ldr	r2, [r3, #16]
 800ec34:	697b      	ldr	r3, [r7, #20]
 800ec36:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800ec38:	687b      	ldr	r3, [r7, #4]
 800ec3a:	8ada      	ldrh	r2, [r3, #22]
 800ec3c:	697b      	ldr	r3, [r7, #20]
 800ec3e:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800ec40:	4b3f      	ldr	r3, [pc, #252]	; (800ed40 <tcp_listen_input+0x1ac>)
 800ec42:	681b      	ldr	r3, [r3, #0]
 800ec44:	881b      	ldrh	r3, [r3, #0]
 800ec46:	b29a      	uxth	r2, r3
 800ec48:	697b      	ldr	r3, [r7, #20]
 800ec4a:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800ec4c:	697b      	ldr	r3, [r7, #20]
 800ec4e:	2203      	movs	r2, #3
 800ec50:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800ec52:	4b3a      	ldr	r3, [pc, #232]	; (800ed3c <tcp_listen_input+0x1a8>)
 800ec54:	681b      	ldr	r3, [r3, #0]
 800ec56:	1c5a      	adds	r2, r3, #1
 800ec58:	697b      	ldr	r3, [r7, #20]
 800ec5a:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800ec5c:	697b      	ldr	r3, [r7, #20]
 800ec5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec60:	697b      	ldr	r3, [r7, #20]
 800ec62:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800ec64:	6978      	ldr	r0, [r7, #20]
 800ec66:	f7ff fafb 	bl	800e260 <tcp_next_iss>
 800ec6a:	60f8      	str	r0, [r7, #12]
    npcb->snd_wl2 = iss;
 800ec6c:	697b      	ldr	r3, [r7, #20]
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->snd_nxt = iss;
 800ec72:	697b      	ldr	r3, [r7, #20]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	64da      	str	r2, [r3, #76]	; 0x4c
    npcb->lastack = iss;
 800ec78:	697b      	ldr	r3, [r7, #20]
 800ec7a:	68fa      	ldr	r2, [r7, #12]
 800ec7c:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800ec7e:	697b      	ldr	r3, [r7, #20]
 800ec80:	68fa      	ldr	r2, [r7, #12]
 800ec82:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800ec84:	4b2d      	ldr	r3, [pc, #180]	; (800ed3c <tcp_listen_input+0x1a8>)
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	1e5a      	subs	r2, r3, #1
 800ec8a:	697b      	ldr	r3, [r7, #20]
 800ec8c:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->callback_arg = pcb->callback_arg;
 800ec8e:	687b      	ldr	r3, [r7, #4]
 800ec90:	691a      	ldr	r2, [r3, #16]
 800ec92:	697b      	ldr	r3, [r7, #20]
 800ec94:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800ec96:	697b      	ldr	r3, [r7, #20]
 800ec98:	687a      	ldr	r2, [r7, #4]
 800ec9a:	679a      	str	r2, [r3, #120]	; 0x78
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	7a1b      	ldrb	r3, [r3, #8]
 800eca0:	f003 030c 	and.w	r3, r3, #12
 800eca4:	b2da      	uxtb	r2, r3
 800eca6:	697b      	ldr	r3, [r7, #20]
 800eca8:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800ecaa:	4b29      	ldr	r3, [pc, #164]	; (800ed50 <tcp_listen_input+0x1bc>)
 800ecac:	681a      	ldr	r2, [r3, #0]
 800ecae:	697b      	ldr	r3, [r7, #20]
 800ecb0:	60da      	str	r2, [r3, #12]
 800ecb2:	4a27      	ldr	r2, [pc, #156]	; (800ed50 <tcp_listen_input+0x1bc>)
 800ecb4:	697b      	ldr	r3, [r7, #20]
 800ecb6:	6013      	str	r3, [r2, #0]
 800ecb8:	f003 f93c 	bl	8011f34 <tcp_timer_needed>
 800ecbc:	4b25      	ldr	r3, [pc, #148]	; (800ed54 <tcp_listen_input+0x1c0>)
 800ecbe:	2201      	movs	r2, #1
 800ecc0:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ecc2:	6978      	ldr	r0, [r7, #20]
 800ecc4:	f001 fd16 	bl	80106f4 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ecc8:	4b1d      	ldr	r3, [pc, #116]	; (800ed40 <tcp_listen_input+0x1ac>)
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	89db      	ldrh	r3, [r3, #14]
 800ecce:	b29a      	uxth	r2, r3
 800ecd0:	697b      	ldr	r3, [r7, #20]
 800ecd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ecd6:	697b      	ldr	r3, [r7, #20]
 800ecd8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800ecdc:	697b      	ldr	r3, [r7, #20]
 800ecde:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ece2:	697b      	ldr	r3, [r7, #20]
 800ece4:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800ece6:	697b      	ldr	r3, [r7, #20]
 800ece8:	3304      	adds	r3, #4
 800ecea:	4619      	mov	r1, r3
 800ecec:	4610      	mov	r0, r2
 800ecee:	f7ff facf 	bl	800e290 <tcp_eff_send_mss_impl>
 800ecf2:	4603      	mov	r3, r0
 800ecf4:	461a      	mov	r2, r3
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ecfa:	2112      	movs	r1, #18
 800ecfc:	6978      	ldr	r0, [r7, #20]
 800ecfe:	f002 fae5 	bl	80112cc <tcp_enqueue_flags>
 800ed02:	4603      	mov	r3, r0
 800ed04:	72fb      	strb	r3, [r7, #11]
    if (rc != ERR_OK) {
 800ed06:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	d004      	beq.n	800ed18 <tcp_listen_input+0x184>
      tcp_abandon(npcb, 0);
 800ed0e:	2100      	movs	r1, #0
 800ed10:	6978      	ldr	r0, [r7, #20]
 800ed12:	f7fe f8c5 	bl	800cea0 <tcp_abandon>
      return;
 800ed16:	e007      	b.n	800ed28 <tcp_listen_input+0x194>
    tcp_output(npcb);
 800ed18:	6978      	ldr	r0, [r7, #20]
 800ed1a:	f002 fc31 	bl	8011580 <tcp_output>
  return;
 800ed1e:	bf00      	nop
 800ed20:	e001      	b.n	800ed26 <tcp_listen_input+0x192>
    return;
 800ed22:	bf00      	nop
 800ed24:	e000      	b.n	800ed28 <tcp_listen_input+0x194>
  return;
 800ed26:	bf00      	nop
}
 800ed28:	3718      	adds	r7, #24
 800ed2a:	46bd      	mov	sp, r7
 800ed2c:	bd80      	pop	{r7, pc}
 800ed2e:	bf00      	nop
 800ed30:	20004140 	.word	0x20004140
 800ed34:	20004138 	.word	0x20004138
 800ed38:	2000413e 	.word	0x2000413e
 800ed3c:	20004134 	.word	0x20004134
 800ed40:	20004124 	.word	0x20004124
 800ed44:	200041fc 	.word	0x200041fc
 800ed48:	20004200 	.word	0x20004200
 800ed4c:	200041ec 	.word	0x200041ec
 800ed50:	20007934 	.word	0x20007934
 800ed54:	20007930 	.word	0x20007930

0800ed58 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ed58:	b580      	push	{r7, lr}
 800ed5a:	b084      	sub	sp, #16
 800ed5c:	af02      	add	r7, sp, #8
 800ed5e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ed60:	4b29      	ldr	r3, [pc, #164]	; (800ee08 <tcp_timewait_input+0xb0>)
 800ed62:	781b      	ldrb	r3, [r3, #0]
 800ed64:	f003 0304 	and.w	r3, r3, #4
 800ed68:	2b00      	cmp	r3, #0
 800ed6a:	d147      	bne.n	800edfc <tcp_timewait_input+0xa4>
    return;
  }
  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ed6c:	4b26      	ldr	r3, [pc, #152]	; (800ee08 <tcp_timewait_input+0xb0>)
 800ed6e:	781b      	ldrb	r3, [r3, #0]
 800ed70:	f003 0302 	and.w	r3, r3, #2
 800ed74:	2b00      	cmp	r3, #0
 800ed76:	d027      	beq.n	800edc8 <tcp_timewait_input+0x70>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ed78:	4b24      	ldr	r3, [pc, #144]	; (800ee0c <tcp_timewait_input+0xb4>)
 800ed7a:	681a      	ldr	r2, [r3, #0]
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed80:	1ad3      	subs	r3, r2, r3
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	db2a      	blt.n	800eddc <tcp_timewait_input+0x84>
 800ed86:	4b21      	ldr	r3, [pc, #132]	; (800ee0c <tcp_timewait_input+0xb4>)
 800ed88:	681a      	ldr	r2, [r3, #0]
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed8e:	6879      	ldr	r1, [r7, #4]
 800ed90:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ed92:	440b      	add	r3, r1
 800ed94:	1ad3      	subs	r3, r2, r3
 800ed96:	2b00      	cmp	r3, #0
 800ed98:	dc20      	bgt.n	800eddc <tcp_timewait_input+0x84>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800ed9a:	4b1d      	ldr	r3, [pc, #116]	; (800ee10 <tcp_timewait_input+0xb8>)
 800ed9c:	6818      	ldr	r0, [r3, #0]
 800ed9e:	4b1d      	ldr	r3, [pc, #116]	; (800ee14 <tcp_timewait_input+0xbc>)
 800eda0:	881b      	ldrh	r3, [r3, #0]
 800eda2:	461a      	mov	r2, r3
 800eda4:	4b19      	ldr	r3, [pc, #100]	; (800ee0c <tcp_timewait_input+0xb4>)
 800eda6:	681b      	ldr	r3, [r3, #0]
 800eda8:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edaa:	4b1b      	ldr	r3, [pc, #108]	; (800ee18 <tcp_timewait_input+0xc0>)
 800edac:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800edae:	885b      	ldrh	r3, [r3, #2]
 800edb0:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800edb2:	4a19      	ldr	r2, [pc, #100]	; (800ee18 <tcp_timewait_input+0xc0>)
 800edb4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800edb6:	8812      	ldrh	r2, [r2, #0]
 800edb8:	b292      	uxth	r2, r2
 800edba:	9201      	str	r2, [sp, #4]
 800edbc:	9300      	str	r3, [sp, #0]
 800edbe:	4b17      	ldr	r3, [pc, #92]	; (800ee1c <tcp_timewait_input+0xc4>)
 800edc0:	4a17      	ldr	r2, [pc, #92]	; (800ee20 <tcp_timewait_input+0xc8>)
 800edc2:	f002 fe65 	bl	8011a90 <tcp_rst>
      return;
 800edc6:	e01c      	b.n	800ee02 <tcp_timewait_input+0xaa>
    }
  } else if (flags & TCP_FIN) {
 800edc8:	4b0f      	ldr	r3, [pc, #60]	; (800ee08 <tcp_timewait_input+0xb0>)
 800edca:	781b      	ldrb	r3, [r3, #0]
 800edcc:	f003 0301 	and.w	r3, r3, #1
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d003      	beq.n	800eddc <tcp_timewait_input+0x84>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800edd4:	4b13      	ldr	r3, [pc, #76]	; (800ee24 <tcp_timewait_input+0xcc>)
 800edd6:	681a      	ldr	r2, [r3, #0]
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800eddc:	4b0d      	ldr	r3, [pc, #52]	; (800ee14 <tcp_timewait_input+0xbc>)
 800edde:	881b      	ldrh	r3, [r3, #0]
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	d00d      	beq.n	800ee00 <tcp_timewait_input+0xa8>
    /* Acknowledge data, FIN or out-of-window SYN */
    pcb->flags |= TF_ACK_NOW;
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	7e9b      	ldrb	r3, [r3, #26]
 800ede8:	f043 0302 	orr.w	r3, r3, #2
 800edec:	b2da      	uxtb	r2, r3
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	769a      	strb	r2, [r3, #26]
    tcp_output(pcb);
 800edf2:	6878      	ldr	r0, [r7, #4]
 800edf4:	f002 fbc4 	bl	8011580 <tcp_output>
  }
  return;
 800edf8:	bf00      	nop
 800edfa:	e001      	b.n	800ee00 <tcp_timewait_input+0xa8>
    return;
 800edfc:	bf00      	nop
 800edfe:	e000      	b.n	800ee02 <tcp_timewait_input+0xaa>
  return;
 800ee00:	bf00      	nop
}
 800ee02:	3708      	adds	r7, #8
 800ee04:	46bd      	mov	sp, r7
 800ee06:	bd80      	pop	{r7, pc}
 800ee08:	20004140 	.word	0x20004140
 800ee0c:	20004134 	.word	0x20004134
 800ee10:	20004138 	.word	0x20004138
 800ee14:	2000413e 	.word	0x2000413e
 800ee18:	20004124 	.word	0x20004124
 800ee1c:	200041fc 	.word	0x200041fc
 800ee20:	20004200 	.word	0x20004200
 800ee24:	20007938 	.word	0x20007938

0800ee28 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	; 0x28
 800ee2c:	af02      	add	r7, sp, #8
 800ee2e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800ee34:	2300      	movs	r3, #0
 800ee36:	76bb      	strb	r3, [r7, #26]

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800ee38:	4ba4      	ldr	r3, [pc, #656]	; (800f0cc <tcp_process+0x2a4>)
 800ee3a:	781b      	ldrb	r3, [r3, #0]
 800ee3c:	f003 0304 	and.w	r3, r3, #4
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d04e      	beq.n	800eee2 <tcp_process+0xba>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	7d1b      	ldrb	r3, [r3, #20]
 800ee48:	2b02      	cmp	r3, #2
 800ee4a:	d108      	bne.n	800ee5e <tcp_process+0x36>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee50:	4b9f      	ldr	r3, [pc, #636]	; (800f0d0 <tcp_process+0x2a8>)
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	429a      	cmp	r2, r3
 800ee56:	d123      	bne.n	800eea0 <tcp_process+0x78>
        acceptable = 1;
 800ee58:	2301      	movs	r3, #1
 800ee5a:	76fb      	strb	r3, [r7, #27]
 800ee5c:	e020      	b.n	800eea0 <tcp_process+0x78>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ee62:	4b9c      	ldr	r3, [pc, #624]	; (800f0d4 <tcp_process+0x2ac>)
 800ee64:	681b      	ldr	r3, [r3, #0]
 800ee66:	429a      	cmp	r2, r3
 800ee68:	d102      	bne.n	800ee70 <tcp_process+0x48>
        acceptable = 1;
 800ee6a:	2301      	movs	r3, #1
 800ee6c:	76fb      	strb	r3, [r7, #27]
 800ee6e:	e017      	b.n	800eea0 <tcp_process+0x78>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800ee70:	4b98      	ldr	r3, [pc, #608]	; (800f0d4 <tcp_process+0x2ac>)
 800ee72:	681a      	ldr	r2, [r3, #0]
 800ee74:	687b      	ldr	r3, [r7, #4]
 800ee76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee78:	1ad3      	subs	r3, r2, r3
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	db10      	blt.n	800eea0 <tcp_process+0x78>
 800ee7e:	4b95      	ldr	r3, [pc, #596]	; (800f0d4 <tcp_process+0x2ac>)
 800ee80:	681a      	ldr	r2, [r3, #0]
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee86:	6879      	ldr	r1, [r7, #4]
 800ee88:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ee8a:	440b      	add	r3, r1
 800ee8c:	1ad3      	subs	r3, r2, r3
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	dc06      	bgt.n	800eea0 <tcp_process+0x78>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we only send an ACK
           and wait for a re-send with matching sequence number.
           This violates RFC 793, but is required to protection against
           CVE-2004-0230 (RST spoofing attack). */
        tcp_ack_now(pcb);
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	7e9b      	ldrb	r3, [r3, #26]
 800ee96:	f043 0302 	orr.w	r3, r3, #2
 800ee9a:	b2da      	uxtb	r2, r3
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	769a      	strb	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800eea0:	7efb      	ldrb	r3, [r7, #27]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d01b      	beq.n	800eede <tcp_process+0xb6>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	7d1b      	ldrb	r3, [r3, #20]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d106      	bne.n	800eebc <tcp_process+0x94>
 800eeae:	4b8a      	ldr	r3, [pc, #552]	; (800f0d8 <tcp_process+0x2b0>)
 800eeb0:	f240 22e7 	movw	r2, #743	; 0x2e7
 800eeb4:	4989      	ldr	r1, [pc, #548]	; (800f0dc <tcp_process+0x2b4>)
 800eeb6:	488a      	ldr	r0, [pc, #552]	; (800f0e0 <tcp_process+0x2b8>)
 800eeb8:	f006 ff8c 	bl	8015dd4 <iprintf>
      recv_flags |= TF_RESET;
 800eebc:	4b89      	ldr	r3, [pc, #548]	; (800f0e4 <tcp_process+0x2bc>)
 800eebe:	781b      	ldrb	r3, [r3, #0]
 800eec0:	f043 0308 	orr.w	r3, r3, #8
 800eec4:	b2da      	uxtb	r2, r3
 800eec6:	4b87      	ldr	r3, [pc, #540]	; (800f0e4 <tcp_process+0x2bc>)
 800eec8:	701a      	strb	r2, [r3, #0]
      pcb->flags &= ~TF_ACK_DELAY;
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	7e9b      	ldrb	r3, [r3, #26]
 800eece:	f023 0301 	bic.w	r3, r3, #1
 800eed2:	b2da      	uxtb	r2, r3
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	769a      	strb	r2, [r3, #26]
      return ERR_RST;
 800eed8:	f06f 030d 	mvn.w	r3, #13
 800eedc:	e34d      	b.n	800f57a <tcp_process+0x752>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
       seqno, pcb->rcv_nxt));
      return ERR_OK;
 800eede:	2300      	movs	r3, #0
 800eee0:	e34b      	b.n	800f57a <tcp_process+0x752>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800eee2:	4b7a      	ldr	r3, [pc, #488]	; (800f0cc <tcp_process+0x2a4>)
 800eee4:	781b      	ldrb	r3, [r3, #0]
 800eee6:	f003 0302 	and.w	r3, r3, #2
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d010      	beq.n	800ef10 <tcp_process+0xe8>
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	7d1b      	ldrb	r3, [r3, #20]
 800eef2:	2b02      	cmp	r3, #2
 800eef4:	d00c      	beq.n	800ef10 <tcp_process+0xe8>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	7d1b      	ldrb	r3, [r3, #20]
 800eefa:	2b03      	cmp	r3, #3
 800eefc:	d008      	beq.n	800ef10 <tcp_process+0xe8>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	7e9b      	ldrb	r3, [r3, #26]
 800ef02:	f043 0302 	orr.w	r3, r3, #2
 800ef06:	b2da      	uxtb	r2, r3
 800ef08:	687b      	ldr	r3, [r7, #4]
 800ef0a:	769a      	strb	r2, [r3, #26]
    return ERR_OK;
 800ef0c:	2300      	movs	r3, #0
 800ef0e:	e334      	b.n	800f57a <tcp_process+0x752>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	7e9b      	ldrb	r3, [r3, #26]
 800ef14:	f003 0310 	and.w	r3, r3, #16
 800ef18:	2b00      	cmp	r3, #0
 800ef1a:	d103      	bne.n	800ef24 <tcp_process+0xfc>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800ef1c:	4b72      	ldr	r3, [pc, #456]	; (800f0e8 <tcp_process+0x2c0>)
 800ef1e:	681a      	ldr	r2, [r3, #0]
 800ef20:	687b      	ldr	r3, [r7, #4]
 800ef22:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800ef24:	687b      	ldr	r3, [r7, #4]
 800ef26:	2200      	movs	r2, #0
 800ef28:	f883 209e 	strb.w	r2, [r3, #158]	; 0x9e

  tcp_parseopt(pcb);
 800ef2c:	6878      	ldr	r0, [r7, #4]
 800ef2e:	f001 fbe1 	bl	80106f4 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	7d1b      	ldrb	r3, [r3, #20]
 800ef36:	3b02      	subs	r3, #2
 800ef38:	2b07      	cmp	r3, #7
 800ef3a:	f200 830e 	bhi.w	800f55a <tcp_process+0x732>
 800ef3e:	a201      	add	r2, pc, #4	; (adr r2, 800ef44 <tcp_process+0x11c>)
 800ef40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef44:	0800ef65 	.word	0x0800ef65
 800ef48:	0800f15d 	.word	0x0800f15d
 800ef4c:	0800f2b5 	.word	0x0800f2b5
 800ef50:	0800f2df 	.word	0x0800f2df
 800ef54:	0800f409 	.word	0x0800f409
 800ef58:	0800f2b5 	.word	0x0800f2b5
 800ef5c:	0800f495 	.word	0x0800f495
 800ef60:	0800f525 	.word	0x0800f525
  case SYN_SENT:
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
     pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    /* received SYN ACK with expected sequence number? */
    if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800ef64:	4b59      	ldr	r3, [pc, #356]	; (800f0cc <tcp_process+0x2a4>)
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	f003 0310 	and.w	r3, r3, #16
 800ef6c:	2b00      	cmp	r3, #0
 800ef6e:	f000 80cb 	beq.w	800f108 <tcp_process+0x2e0>
 800ef72:	4b56      	ldr	r3, [pc, #344]	; (800f0cc <tcp_process+0x2a4>)
 800ef74:	781b      	ldrb	r3, [r3, #0]
 800ef76:	f003 0302 	and.w	r3, r3, #2
 800ef7a:	2b00      	cmp	r3, #0
 800ef7c:	f000 80c4 	beq.w	800f108 <tcp_process+0x2e0>
        && (ackno == pcb->lastack + 1)) {
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ef84:	1c5a      	adds	r2, r3, #1
 800ef86:	4b52      	ldr	r3, [pc, #328]	; (800f0d0 <tcp_process+0x2a8>)
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	429a      	cmp	r2, r3
 800ef8c:	f040 80bc 	bne.w	800f108 <tcp_process+0x2e0>
      pcb->rcv_nxt = seqno + 1;
 800ef90:	4b50      	ldr	r3, [pc, #320]	; (800f0d4 <tcp_process+0x2ac>)
 800ef92:	681b      	ldr	r3, [r3, #0]
 800ef94:	1c5a      	adds	r2, r3, #1
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	625a      	str	r2, [r3, #36]	; 0x24
      pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800ef9a:	687b      	ldr	r3, [r7, #4]
 800ef9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	62da      	str	r2, [r3, #44]	; 0x2c
      pcb->lastack = ackno;
 800efa2:	4b4b      	ldr	r3, [pc, #300]	; (800f0d0 <tcp_process+0x2a8>)
 800efa4:	681a      	ldr	r2, [r3, #0]
 800efa6:	687b      	ldr	r3, [r7, #4]
 800efa8:	645a      	str	r2, [r3, #68]	; 0x44
      pcb->snd_wnd = tcphdr->wnd;
 800efaa:	4b50      	ldr	r3, [pc, #320]	; (800f0ec <tcp_process+0x2c4>)
 800efac:	681b      	ldr	r3, [r3, #0]
 800efae:	89db      	ldrh	r3, [r3, #14]
 800efb0:	b29a      	uxth	r2, r3
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      pcb->snd_wnd_max = pcb->snd_wnd;
 800efb8:	687b      	ldr	r3, [r7, #4]
 800efba:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800efc4:	4b43      	ldr	r3, [pc, #268]	; (800f0d4 <tcp_process+0x2ac>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	1e5a      	subs	r2, r3, #1
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->state = ESTABLISHED;
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2204      	movs	r2, #4
 800efd2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
      pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	3304      	adds	r3, #4
 800efdc:	4619      	mov	r1, r3
 800efde:	4610      	mov	r0, r2
 800efe0:	f7ff f956 	bl	800e290 <tcp_eff_send_mss_impl>
 800efe4:	4603      	mov	r3, r0
 800efe6:	461a      	mov	r2, r3
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

      pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800eff0:	005b      	lsls	r3, r3, #1
 800eff2:	f241 121c 	movw	r2, #4380	; 0x111c
 800eff6:	429a      	cmp	r2, r3
 800eff8:	bf38      	it	cc
 800effa:	461a      	movcc	r2, r3
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f000:	009b      	lsls	r3, r3, #2
 800f002:	4293      	cmp	r3, r2
 800f004:	bf28      	it	cs
 800f006:	4613      	movcs	r3, r2
 800f008:	b29a      	uxth	r2, r3
 800f00a:	687b      	ldr	r3, [r7, #4]
 800f00c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                   " ssthresh %"TCPWNDSIZE_F"\n",
                                   pcb->cwnd, pcb->ssthresh));
      LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f016:	2b00      	cmp	r3, #0
 800f018:	d106      	bne.n	800f028 <tcp_process+0x200>
 800f01a:	4b2f      	ldr	r3, [pc, #188]	; (800f0d8 <tcp_process+0x2b0>)
 800f01c:	f240 321a 	movw	r2, #794	; 0x31a
 800f020:	4933      	ldr	r1, [pc, #204]	; (800f0f0 <tcp_process+0x2c8>)
 800f022:	482f      	ldr	r0, [pc, #188]	; (800f0e0 <tcp_process+0x2b8>)
 800f024:	f006 fed6 	bl	8015dd4 <iprintf>
      --pcb->snd_queuelen;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f02e:	3b01      	subs	r3, #1
 800f030:	b29a      	uxth	r2, r3
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
      rseg = pcb->unacked;
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f03c:	61fb      	str	r3, [r7, #28]
      if (rseg == NULL) {
 800f03e:	69fb      	ldr	r3, [r7, #28]
 800f040:	2b00      	cmp	r3, #0
 800f042:	d111      	bne.n	800f068 <tcp_process+0x240>
        /* might happen if tcp_output fails in tcp_rexmit_rto()
           in which case the segment is on the unsent list */
        rseg = pcb->unsent;
 800f044:	687b      	ldr	r3, [r7, #4]
 800f046:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f048:	61fb      	str	r3, [r7, #28]
        LWIP_ASSERT("no segment to free", rseg != NULL);
 800f04a:	69fb      	ldr	r3, [r7, #28]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d106      	bne.n	800f05e <tcp_process+0x236>
 800f050:	4b21      	ldr	r3, [pc, #132]	; (800f0d8 <tcp_process+0x2b0>)
 800f052:	f240 3222 	movw	r2, #802	; 0x322
 800f056:	4927      	ldr	r1, [pc, #156]	; (800f0f4 <tcp_process+0x2cc>)
 800f058:	4821      	ldr	r0, [pc, #132]	; (800f0e0 <tcp_process+0x2b8>)
 800f05a:	f006 febb 	bl	8015dd4 <iprintf>
        pcb->unsent = rseg->next;
 800f05e:	69fb      	ldr	r3, [r7, #28]
 800f060:	681a      	ldr	r2, [r3, #0]
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	669a      	str	r2, [r3, #104]	; 0x68
 800f066:	e003      	b.n	800f070 <tcp_process+0x248>
      } else {
        pcb->unacked = rseg->next;
 800f068:	69fb      	ldr	r3, [r7, #28]
 800f06a:	681a      	ldr	r2, [r3, #0]
 800f06c:	687b      	ldr	r3, [r7, #4]
 800f06e:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      tcp_seg_free(rseg);
 800f070:	69f8      	ldr	r0, [r7, #28]
 800f072:	f7fe fdd8 	bl	800dc26 <tcp_seg_free>

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800f076:	687b      	ldr	r3, [r7, #4]
 800f078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f07a:	2b00      	cmp	r3, #0
 800f07c:	d104      	bne.n	800f088 <tcp_process+0x260>
        pcb->rtime = -1;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f084:	861a      	strh	r2, [r3, #48]	; 0x30
 800f086:	e006      	b.n	800f096 <tcp_process+0x26e>
      } else {
        pcb->rtime = 0;
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	2200      	movs	r2, #0
 800f08c:	861a      	strh	r2, [r3, #48]	; 0x30
        pcb->nrtx = 0;
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	2200      	movs	r2, #0
 800f092:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      }

      /* Call the user specified function to call when successfully
       * connected. */
      TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d00a      	beq.n	800f0b6 <tcp_process+0x28e>
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f0a6:	687a      	ldr	r2, [r7, #4]
 800f0a8:	6910      	ldr	r0, [r2, #16]
 800f0aa:	2200      	movs	r2, #0
 800f0ac:	6879      	ldr	r1, [r7, #4]
 800f0ae:	4798      	blx	r3
 800f0b0:	4603      	mov	r3, r0
 800f0b2:	76bb      	strb	r3, [r7, #26]
 800f0b4:	e001      	b.n	800f0ba <tcp_process+0x292>
 800f0b6:	2300      	movs	r3, #0
 800f0b8:	76bb      	strb	r3, [r7, #26]
      if (err == ERR_ABRT) {
 800f0ba:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f0be:	f113 0f0d 	cmn.w	r3, #13
 800f0c2:	d119      	bne.n	800f0f8 <tcp_process+0x2d0>
        return ERR_ABRT;
 800f0c4:	f06f 030c 	mvn.w	r3, #12
 800f0c8:	e257      	b.n	800f57a <tcp_process+0x752>
 800f0ca:	bf00      	nop
 800f0cc:	20004140 	.word	0x20004140
 800f0d0:	20004138 	.word	0x20004138
 800f0d4:	20004134 	.word	0x20004134
 800f0d8:	080199cc 	.word	0x080199cc
 800f0dc:	08019b84 	.word	0x08019b84
 800f0e0:	08019a10 	.word	0x08019a10
 800f0e4:	20004141 	.word	0x20004141
 800f0e8:	20007938 	.word	0x20007938
 800f0ec:	20004124 	.word	0x20004124
 800f0f0:	08019ba4 	.word	0x08019ba4
 800f0f4:	08019bbc 	.word	0x08019bbc
      }
      tcp_ack_now(pcb);
 800f0f8:	687b      	ldr	r3, [r7, #4]
 800f0fa:	7e9b      	ldrb	r3, [r3, #26]
 800f0fc:	f043 0302 	orr.w	r3, r3, #2
 800f100:	b2da      	uxtb	r2, r3
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	769a      	strb	r2, [r3, #26]
      if (pcb->nrtx < TCP_SYNMAXRTX) {
        pcb->rtime = 0;
        tcp_rexmit_rto(pcb);
      }
    }
    break;
 800f106:	e22a      	b.n	800f55e <tcp_process+0x736>
    else if (flags & TCP_ACK) {
 800f108:	4b9f      	ldr	r3, [pc, #636]	; (800f388 <tcp_process+0x560>)
 800f10a:	781b      	ldrb	r3, [r3, #0]
 800f10c:	f003 0310 	and.w	r3, r3, #16
 800f110:	2b00      	cmp	r3, #0
 800f112:	f000 8224 	beq.w	800f55e <tcp_process+0x736>
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f116:	4b9d      	ldr	r3, [pc, #628]	; (800f38c <tcp_process+0x564>)
 800f118:	6818      	ldr	r0, [r3, #0]
 800f11a:	4b9d      	ldr	r3, [pc, #628]	; (800f390 <tcp_process+0x568>)
 800f11c:	881b      	ldrh	r3, [r3, #0]
 800f11e:	461a      	mov	r2, r3
 800f120:	4b9c      	ldr	r3, [pc, #624]	; (800f394 <tcp_process+0x56c>)
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	18d1      	adds	r1, r2, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f126:	4b9c      	ldr	r3, [pc, #624]	; (800f398 <tcp_process+0x570>)
 800f128:	681b      	ldr	r3, [r3, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f12a:	885b      	ldrh	r3, [r3, #2]
 800f12c:	b29b      	uxth	r3, r3
        ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f12e:	4a9a      	ldr	r2, [pc, #616]	; (800f398 <tcp_process+0x570>)
 800f130:	6812      	ldr	r2, [r2, #0]
      tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f132:	8812      	ldrh	r2, [r2, #0]
 800f134:	b292      	uxth	r2, r2
 800f136:	9201      	str	r2, [sp, #4]
 800f138:	9300      	str	r3, [sp, #0]
 800f13a:	4b98      	ldr	r3, [pc, #608]	; (800f39c <tcp_process+0x574>)
 800f13c:	4a98      	ldr	r2, [pc, #608]	; (800f3a0 <tcp_process+0x578>)
 800f13e:	f002 fca7 	bl	8011a90 <tcp_rst>
      if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f148:	2b05      	cmp	r3, #5
 800f14a:	f200 8208 	bhi.w	800f55e <tcp_process+0x736>
        pcb->rtime = 0;
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	2200      	movs	r2, #0
 800f152:	861a      	strh	r2, [r3, #48]	; 0x30
        tcp_rexmit_rto(pcb);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f002 fd11 	bl	8011b7c <tcp_rexmit_rto>
    break;
 800f15a:	e200      	b.n	800f55e <tcp_process+0x736>
  case SYN_RCVD:
    if (flags & TCP_ACK) {
 800f15c:	4b8a      	ldr	r3, [pc, #552]	; (800f388 <tcp_process+0x560>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	f003 0310 	and.w	r3, r3, #16
 800f164:	2b00      	cmp	r3, #0
 800f166:	f000 8091 	beq.w	800f28c <tcp_process+0x464>
      /* expected ACK number? */
      if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f16a:	4b88      	ldr	r3, [pc, #544]	; (800f38c <tcp_process+0x564>)
 800f16c:	681a      	ldr	r2, [r3, #0]
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f172:	1ad3      	subs	r3, r2, r3
 800f174:	3b01      	subs	r3, #1
 800f176:	2b00      	cmp	r3, #0
 800f178:	db71      	blt.n	800f25e <tcp_process+0x436>
 800f17a:	4b84      	ldr	r3, [pc, #528]	; (800f38c <tcp_process+0x564>)
 800f17c:	681a      	ldr	r2, [r3, #0]
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f182:	1ad3      	subs	r3, r2, r3
 800f184:	2b00      	cmp	r3, #0
 800f186:	dc6a      	bgt.n	800f25e <tcp_process+0x436>
        pcb->state = ESTABLISHED;
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	2204      	movs	r2, #4
 800f18c:	751a      	strb	r2, [r3, #20]
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
#if LWIP_CALLBACK_API
        LWIP_ASSERT("pcb->listener->accept != NULL",
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f192:	2b00      	cmp	r3, #0
 800f194:	d00b      	beq.n	800f1ae <tcp_process+0x386>
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f19a:	699b      	ldr	r3, [r3, #24]
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	d106      	bne.n	800f1ae <tcp_process+0x386>
 800f1a0:	4b80      	ldr	r3, [pc, #512]	; (800f3a4 <tcp_process+0x57c>)
 800f1a2:	f240 3251 	movw	r2, #849	; 0x351
 800f1a6:	4980      	ldr	r1, [pc, #512]	; (800f3a8 <tcp_process+0x580>)
 800f1a8:	4880      	ldr	r0, [pc, #512]	; (800f3ac <tcp_process+0x584>)
 800f1aa:	f006 fe13 	bl	8015dd4 <iprintf>
          (pcb->listener == NULL) || (pcb->listener->accept != NULL));
#endif
        if (pcb->listener == NULL) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1b2:	2b00      	cmp	r3, #0
 800f1b4:	d102      	bne.n	800f1bc <tcp_process+0x394>
          /* listen pcb might be closed by now */
          err = ERR_VAL;
 800f1b6:	23fa      	movs	r3, #250	; 0xfa
 800f1b8:	76bb      	strb	r3, [r7, #26]
 800f1ba:	e011      	b.n	800f1e0 <tcp_process+0x3b8>
        } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
        {
          tcp_backlog_accepted(pcb);
          /* Call the accept function. */
          TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1c0:	699b      	ldr	r3, [r3, #24]
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <tcp_process+0x3b4>
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ca:	699b      	ldr	r3, [r3, #24]
 800f1cc:	687a      	ldr	r2, [r7, #4]
 800f1ce:	6910      	ldr	r0, [r2, #16]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	6879      	ldr	r1, [r7, #4]
 800f1d4:	4798      	blx	r3
 800f1d6:	4603      	mov	r3, r0
 800f1d8:	76bb      	strb	r3, [r7, #26]
 800f1da:	e001      	b.n	800f1e0 <tcp_process+0x3b8>
 800f1dc:	23f0      	movs	r3, #240	; 0xf0
 800f1de:	76bb      	strb	r3, [r7, #26]
        }
        if (err != ERR_OK) {
 800f1e0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d00a      	beq.n	800f1fe <tcp_process+0x3d6>
          /* If the accept function returns with an error, we abort
           * the connection. */
          /* Already aborted? */
          if (err != ERR_ABRT) {
 800f1e8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f1ec:	f113 0f0d 	cmn.w	r3, #13
 800f1f0:	d002      	beq.n	800f1f8 <tcp_process+0x3d0>
            tcp_abort(pcb);
 800f1f2:	6878      	ldr	r0, [r7, #4]
 800f1f4:	f7fd ff06 	bl	800d004 <tcp_abort>
          }
          return ERR_ABRT;
 800f1f8:	f06f 030c 	mvn.w	r3, #12
 800f1fc:	e1bd      	b.n	800f57a <tcp_process+0x752>
        }
        /* If there was any data contained within this ACK,
         * we'd better pass it on to the application as well. */
        tcp_receive(pcb);
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f000 fa42 	bl	800f688 <tcp_receive>

        /* Prevent ACK for SYN to generate a sent event */
        if (recv_acked != 0) {
 800f204:	4b6a      	ldr	r3, [pc, #424]	; (800f3b0 <tcp_process+0x588>)
 800f206:	881b      	ldrh	r3, [r3, #0]
 800f208:	2b00      	cmp	r3, #0
 800f20a:	d005      	beq.n	800f218 <tcp_process+0x3f0>
          recv_acked--;
 800f20c:	4b68      	ldr	r3, [pc, #416]	; (800f3b0 <tcp_process+0x588>)
 800f20e:	881b      	ldrh	r3, [r3, #0]
 800f210:	3b01      	subs	r3, #1
 800f212:	b29a      	uxth	r2, r3
 800f214:	4b66      	ldr	r3, [pc, #408]	; (800f3b0 <tcp_process+0x588>)
 800f216:	801a      	strh	r2, [r3, #0]
        }

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f21c:	005b      	lsls	r3, r3, #1
 800f21e:	f241 121c 	movw	r2, #4380	; 0x111c
 800f222:	429a      	cmp	r2, r3
 800f224:	bf38      	it	cc
 800f226:	461a      	movcc	r2, r3
 800f228:	687b      	ldr	r3, [r7, #4]
 800f22a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f22c:	009b      	lsls	r3, r3, #2
 800f22e:	4293      	cmp	r3, r2
 800f230:	bf28      	it	cs
 800f232:	4613      	movcs	r3, r2
 800f234:	b29a      	uxth	r2, r3
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));

        if (recv_flags & TF_GOT_FIN) {
 800f23c:	4b5d      	ldr	r3, [pc, #372]	; (800f3b4 <tcp_process+0x58c>)
 800f23e:	781b      	ldrb	r3, [r3, #0]
 800f240:	f003 0320 	and.w	r3, r3, #32
 800f244:	2b00      	cmp	r3, #0
 800f246:	d034      	beq.n	800f2b2 <tcp_process+0x48a>
          tcp_ack_now(pcb);
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	7e9b      	ldrb	r3, [r3, #26]
 800f24c:	f043 0302 	orr.w	r3, r3, #2
 800f250:	b2da      	uxtb	r2, r3
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	769a      	strb	r2, [r3, #26]
          pcb->state = CLOSE_WAIT;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	2207      	movs	r2, #7
 800f25a:	751a      	strb	r2, [r3, #20]
        if (recv_flags & TF_GOT_FIN) {
 800f25c:	e029      	b.n	800f2b2 <tcp_process+0x48a>
        }
      } else {
        /* incorrect ACK number, send RST */
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f25e:	4b4b      	ldr	r3, [pc, #300]	; (800f38c <tcp_process+0x564>)
 800f260:	6818      	ldr	r0, [r3, #0]
 800f262:	4b4b      	ldr	r3, [pc, #300]	; (800f390 <tcp_process+0x568>)
 800f264:	881b      	ldrh	r3, [r3, #0]
 800f266:	461a      	mov	r2, r3
 800f268:	4b4a      	ldr	r3, [pc, #296]	; (800f394 <tcp_process+0x56c>)
 800f26a:	681b      	ldr	r3, [r3, #0]
 800f26c:	18d1      	adds	r1, r2, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f26e:	4b4a      	ldr	r3, [pc, #296]	; (800f398 <tcp_process+0x570>)
 800f270:	681b      	ldr	r3, [r3, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f272:	885b      	ldrh	r3, [r3, #2]
 800f274:	b29b      	uxth	r3, r3
          ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f276:	4a48      	ldr	r2, [pc, #288]	; (800f398 <tcp_process+0x570>)
 800f278:	6812      	ldr	r2, [r2, #0]
        tcp_rst(ackno, seqno + tcplen, ip_current_dest_addr(),
 800f27a:	8812      	ldrh	r2, [r2, #0]
 800f27c:	b292      	uxth	r2, r2
 800f27e:	9201      	str	r2, [sp, #4]
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	4b46      	ldr	r3, [pc, #280]	; (800f39c <tcp_process+0x574>)
 800f284:	4a46      	ldr	r2, [pc, #280]	; (800f3a0 <tcp_process+0x578>)
 800f286:	f002 fc03 	bl	8011a90 <tcp_rst>
      }
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
      /* Looks like another copy of the SYN - retransmit our SYN-ACK */
      tcp_rexmit(pcb);
    }
    break;
 800f28a:	e16a      	b.n	800f562 <tcp_process+0x73a>
    } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f28c:	4b3e      	ldr	r3, [pc, #248]	; (800f388 <tcp_process+0x560>)
 800f28e:	781b      	ldrb	r3, [r3, #0]
 800f290:	f003 0302 	and.w	r3, r3, #2
 800f294:	2b00      	cmp	r3, #0
 800f296:	f000 8164 	beq.w	800f562 <tcp_process+0x73a>
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f29e:	1e5a      	subs	r2, r3, #1
 800f2a0:	4b3c      	ldr	r3, [pc, #240]	; (800f394 <tcp_process+0x56c>)
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	429a      	cmp	r2, r3
 800f2a6:	f040 815c 	bne.w	800f562 <tcp_process+0x73a>
      tcp_rexmit(pcb);
 800f2aa:	6878      	ldr	r0, [r7, #4]
 800f2ac:	f002 fc9c 	bl	8011be8 <tcp_rexmit>
    break;
 800f2b0:	e157      	b.n	800f562 <tcp_process+0x73a>
 800f2b2:	e156      	b.n	800f562 <tcp_process+0x73a>
  case CLOSE_WAIT:
    /* FALLTHROUGH */
  case ESTABLISHED:
    tcp_receive(pcb);
 800f2b4:	6878      	ldr	r0, [r7, #4]
 800f2b6:	f000 f9e7 	bl	800f688 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f2ba:	4b3e      	ldr	r3, [pc, #248]	; (800f3b4 <tcp_process+0x58c>)
 800f2bc:	781b      	ldrb	r3, [r3, #0]
 800f2be:	f003 0320 	and.w	r3, r3, #32
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	f000 814f 	beq.w	800f566 <tcp_process+0x73e>
      tcp_ack_now(pcb);
 800f2c8:	687b      	ldr	r3, [r7, #4]
 800f2ca:	7e9b      	ldrb	r3, [r3, #26]
 800f2cc:	f043 0302 	orr.w	r3, r3, #2
 800f2d0:	b2da      	uxtb	r2, r3
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	769a      	strb	r2, [r3, #26]
      pcb->state = CLOSE_WAIT;
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	2207      	movs	r2, #7
 800f2da:	751a      	strb	r2, [r3, #20]
    }
    break;
 800f2dc:	e143      	b.n	800f566 <tcp_process+0x73e>
  case FIN_WAIT_1:
    tcp_receive(pcb);
 800f2de:	6878      	ldr	r0, [r7, #4]
 800f2e0:	f000 f9d2 	bl	800f688 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f2e4:	4b33      	ldr	r3, [pc, #204]	; (800f3b4 <tcp_process+0x58c>)
 800f2e6:	781b      	ldrb	r3, [r3, #0]
 800f2e8:	f003 0320 	and.w	r3, r3, #32
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d074      	beq.n	800f3da <tcp_process+0x5b2>
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f2f0:	4b25      	ldr	r3, [pc, #148]	; (800f388 <tcp_process+0x560>)
 800f2f2:	781b      	ldrb	r3, [r3, #0]
 800f2f4:	f003 0310 	and.w	r3, r3, #16
 800f2f8:	2b00      	cmp	r3, #0
 800f2fa:	d063      	beq.n	800f3c4 <tcp_process+0x59c>
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f300:	4b22      	ldr	r3, [pc, #136]	; (800f38c <tcp_process+0x564>)
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d15d      	bne.n	800f3c4 <tcp_process+0x59c>
          pcb->unsent == NULL) {
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
      if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d159      	bne.n	800f3c4 <tcp_process+0x59c>
        LWIP_DEBUGF(TCP_DEBUG,
          ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f310:	687b      	ldr	r3, [r7, #4]
 800f312:	7e9b      	ldrb	r3, [r3, #26]
 800f314:	f043 0302 	orr.w	r3, r3, #2
 800f318:	b2da      	uxtb	r2, r3
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	769a      	strb	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f31e:	6878      	ldr	r0, [r7, #4]
 800f320:	f7fe fee0 	bl	800e0e4 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f324:	4b24      	ldr	r3, [pc, #144]	; (800f3b8 <tcp_process+0x590>)
 800f326:	681a      	ldr	r2, [r3, #0]
 800f328:	687b      	ldr	r3, [r7, #4]
 800f32a:	429a      	cmp	r2, r3
 800f32c:	d105      	bne.n	800f33a <tcp_process+0x512>
 800f32e:	4b22      	ldr	r3, [pc, #136]	; (800f3b8 <tcp_process+0x590>)
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	68db      	ldr	r3, [r3, #12]
 800f334:	4a20      	ldr	r2, [pc, #128]	; (800f3b8 <tcp_process+0x590>)
 800f336:	6013      	str	r3, [r2, #0]
 800f338:	e013      	b.n	800f362 <tcp_process+0x53a>
 800f33a:	4b1f      	ldr	r3, [pc, #124]	; (800f3b8 <tcp_process+0x590>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	617b      	str	r3, [r7, #20]
 800f340:	e00c      	b.n	800f35c <tcp_process+0x534>
 800f342:	697b      	ldr	r3, [r7, #20]
 800f344:	68da      	ldr	r2, [r3, #12]
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	429a      	cmp	r2, r3
 800f34a:	d104      	bne.n	800f356 <tcp_process+0x52e>
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	68da      	ldr	r2, [r3, #12]
 800f350:	697b      	ldr	r3, [r7, #20]
 800f352:	60da      	str	r2, [r3, #12]
 800f354:	e005      	b.n	800f362 <tcp_process+0x53a>
 800f356:	697b      	ldr	r3, [r7, #20]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	617b      	str	r3, [r7, #20]
 800f35c:	697b      	ldr	r3, [r7, #20]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d1ef      	bne.n	800f342 <tcp_process+0x51a>
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	2200      	movs	r2, #0
 800f366:	60da      	str	r2, [r3, #12]
 800f368:	4b14      	ldr	r3, [pc, #80]	; (800f3bc <tcp_process+0x594>)
 800f36a:	2201      	movs	r2, #1
 800f36c:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	220a      	movs	r2, #10
 800f372:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f374:	4b12      	ldr	r3, [pc, #72]	; (800f3c0 <tcp_process+0x598>)
 800f376:	681a      	ldr	r2, [r3, #0]
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	60da      	str	r2, [r3, #12]
 800f37c:	4a10      	ldr	r2, [pc, #64]	; (800f3c0 <tcp_process+0x598>)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	6013      	str	r3, [r2, #0]
 800f382:	f002 fdd7 	bl	8011f34 <tcp_timer_needed>
      }
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
               pcb->unsent == NULL) {
      pcb->state = FIN_WAIT_2;
    }
    break;
 800f386:	e0f0      	b.n	800f56a <tcp_process+0x742>
 800f388:	20004140 	.word	0x20004140
 800f38c:	20004138 	.word	0x20004138
 800f390:	2000413e 	.word	0x2000413e
 800f394:	20004134 	.word	0x20004134
 800f398:	20004124 	.word	0x20004124
 800f39c:	200041fc 	.word	0x200041fc
 800f3a0:	20004200 	.word	0x20004200
 800f3a4:	080199cc 	.word	0x080199cc
 800f3a8:	08019bd0 	.word	0x08019bd0
 800f3ac:	08019a10 	.word	0x08019a10
 800f3b0:	2000413c 	.word	0x2000413c
 800f3b4:	20004141 	.word	0x20004141
 800f3b8:	20007934 	.word	0x20007934
 800f3bc:	20007930 	.word	0x20007930
 800f3c0:	20007944 	.word	0x20007944
        tcp_ack_now(pcb);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	7e9b      	ldrb	r3, [r3, #26]
 800f3c8:	f043 0302 	orr.w	r3, r3, #2
 800f3cc:	b2da      	uxtb	r2, r3
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	769a      	strb	r2, [r3, #26]
        pcb->state = CLOSING;
 800f3d2:	687b      	ldr	r3, [r7, #4]
 800f3d4:	2208      	movs	r2, #8
 800f3d6:	751a      	strb	r2, [r3, #20]
    break;
 800f3d8:	e0c7      	b.n	800f56a <tcp_process+0x742>
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f3da:	4b6a      	ldr	r3, [pc, #424]	; (800f584 <tcp_process+0x75c>)
 800f3dc:	781b      	ldrb	r3, [r3, #0]
 800f3de:	f003 0310 	and.w	r3, r3, #16
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	f000 80c1 	beq.w	800f56a <tcp_process+0x742>
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f3ec:	4b66      	ldr	r3, [pc, #408]	; (800f588 <tcp_process+0x760>)
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	429a      	cmp	r2, r3
 800f3f2:	f040 80ba 	bne.w	800f56a <tcp_process+0x742>
               pcb->unsent == NULL) {
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
    } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	f040 80b5 	bne.w	800f56a <tcp_process+0x742>
      pcb->state = FIN_WAIT_2;
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	2206      	movs	r2, #6
 800f404:	751a      	strb	r2, [r3, #20]
    break;
 800f406:	e0b0      	b.n	800f56a <tcp_process+0x742>
  case FIN_WAIT_2:
    tcp_receive(pcb);
 800f408:	6878      	ldr	r0, [r7, #4]
 800f40a:	f000 f93d 	bl	800f688 <tcp_receive>
    if (recv_flags & TF_GOT_FIN) {
 800f40e:	4b5f      	ldr	r3, [pc, #380]	; (800f58c <tcp_process+0x764>)
 800f410:	781b      	ldrb	r3, [r3, #0]
 800f412:	f003 0320 	and.w	r3, r3, #32
 800f416:	2b00      	cmp	r3, #0
 800f418:	f000 80a9 	beq.w	800f56e <tcp_process+0x746>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_ack_now(pcb);
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	7e9b      	ldrb	r3, [r3, #26]
 800f420:	f043 0302 	orr.w	r3, r3, #2
 800f424:	b2da      	uxtb	r2, r3
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	769a      	strb	r2, [r3, #26]
      tcp_pcb_purge(pcb);
 800f42a:	6878      	ldr	r0, [r7, #4]
 800f42c:	f7fe fe5a 	bl	800e0e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f430:	4b57      	ldr	r3, [pc, #348]	; (800f590 <tcp_process+0x768>)
 800f432:	681a      	ldr	r2, [r3, #0]
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	429a      	cmp	r2, r3
 800f438:	d105      	bne.n	800f446 <tcp_process+0x61e>
 800f43a:	4b55      	ldr	r3, [pc, #340]	; (800f590 <tcp_process+0x768>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	68db      	ldr	r3, [r3, #12]
 800f440:	4a53      	ldr	r2, [pc, #332]	; (800f590 <tcp_process+0x768>)
 800f442:	6013      	str	r3, [r2, #0]
 800f444:	e013      	b.n	800f46e <tcp_process+0x646>
 800f446:	4b52      	ldr	r3, [pc, #328]	; (800f590 <tcp_process+0x768>)
 800f448:	681b      	ldr	r3, [r3, #0]
 800f44a:	613b      	str	r3, [r7, #16]
 800f44c:	e00c      	b.n	800f468 <tcp_process+0x640>
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	68da      	ldr	r2, [r3, #12]
 800f452:	687b      	ldr	r3, [r7, #4]
 800f454:	429a      	cmp	r2, r3
 800f456:	d104      	bne.n	800f462 <tcp_process+0x63a>
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	68da      	ldr	r2, [r3, #12]
 800f45c:	693b      	ldr	r3, [r7, #16]
 800f45e:	60da      	str	r2, [r3, #12]
 800f460:	e005      	b.n	800f46e <tcp_process+0x646>
 800f462:	693b      	ldr	r3, [r7, #16]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	613b      	str	r3, [r7, #16]
 800f468:	693b      	ldr	r3, [r7, #16]
 800f46a:	2b00      	cmp	r3, #0
 800f46c:	d1ef      	bne.n	800f44e <tcp_process+0x626>
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	2200      	movs	r2, #0
 800f472:	60da      	str	r2, [r3, #12]
 800f474:	4b47      	ldr	r3, [pc, #284]	; (800f594 <tcp_process+0x76c>)
 800f476:	2201      	movs	r2, #1
 800f478:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	220a      	movs	r2, #10
 800f47e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f480:	4b45      	ldr	r3, [pc, #276]	; (800f598 <tcp_process+0x770>)
 800f482:	681a      	ldr	r2, [r3, #0]
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	60da      	str	r2, [r3, #12]
 800f488:	4a43      	ldr	r2, [pc, #268]	; (800f598 <tcp_process+0x770>)
 800f48a:	687b      	ldr	r3, [r7, #4]
 800f48c:	6013      	str	r3, [r2, #0]
 800f48e:	f002 fd51 	bl	8011f34 <tcp_timer_needed>
    }
    break;
 800f492:	e06c      	b.n	800f56e <tcp_process+0x746>
  case CLOSING:
    tcp_receive(pcb);
 800f494:	6878      	ldr	r0, [r7, #4]
 800f496:	f000 f8f7 	bl	800f688 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f49a:	4b3a      	ldr	r3, [pc, #232]	; (800f584 <tcp_process+0x75c>)
 800f49c:	781b      	ldrb	r3, [r3, #0]
 800f49e:	f003 0310 	and.w	r3, r3, #16
 800f4a2:	2b00      	cmp	r3, #0
 800f4a4:	d065      	beq.n	800f572 <tcp_process+0x74a>
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f4aa:	4b37      	ldr	r3, [pc, #220]	; (800f588 <tcp_process+0x760>)
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	429a      	cmp	r2, r3
 800f4b0:	d15f      	bne.n	800f572 <tcp_process+0x74a>
 800f4b2:	687b      	ldr	r3, [r7, #4]
 800f4b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d15b      	bne.n	800f572 <tcp_process+0x74a>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      tcp_pcb_purge(pcb);
 800f4ba:	6878      	ldr	r0, [r7, #4]
 800f4bc:	f7fe fe12 	bl	800e0e4 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800f4c0:	4b33      	ldr	r3, [pc, #204]	; (800f590 <tcp_process+0x768>)
 800f4c2:	681a      	ldr	r2, [r3, #0]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	429a      	cmp	r2, r3
 800f4c8:	d105      	bne.n	800f4d6 <tcp_process+0x6ae>
 800f4ca:	4b31      	ldr	r3, [pc, #196]	; (800f590 <tcp_process+0x768>)
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	68db      	ldr	r3, [r3, #12]
 800f4d0:	4a2f      	ldr	r2, [pc, #188]	; (800f590 <tcp_process+0x768>)
 800f4d2:	6013      	str	r3, [r2, #0]
 800f4d4:	e013      	b.n	800f4fe <tcp_process+0x6d6>
 800f4d6:	4b2e      	ldr	r3, [pc, #184]	; (800f590 <tcp_process+0x768>)
 800f4d8:	681b      	ldr	r3, [r3, #0]
 800f4da:	60fb      	str	r3, [r7, #12]
 800f4dc:	e00c      	b.n	800f4f8 <tcp_process+0x6d0>
 800f4de:	68fb      	ldr	r3, [r7, #12]
 800f4e0:	68da      	ldr	r2, [r3, #12]
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	429a      	cmp	r2, r3
 800f4e6:	d104      	bne.n	800f4f2 <tcp_process+0x6ca>
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	68da      	ldr	r2, [r3, #12]
 800f4ec:	68fb      	ldr	r3, [r7, #12]
 800f4ee:	60da      	str	r2, [r3, #12]
 800f4f0:	e005      	b.n	800f4fe <tcp_process+0x6d6>
 800f4f2:	68fb      	ldr	r3, [r7, #12]
 800f4f4:	68db      	ldr	r3, [r3, #12]
 800f4f6:	60fb      	str	r3, [r7, #12]
 800f4f8:	68fb      	ldr	r3, [r7, #12]
 800f4fa:	2b00      	cmp	r3, #0
 800f4fc:	d1ef      	bne.n	800f4de <tcp_process+0x6b6>
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	2200      	movs	r2, #0
 800f502:	60da      	str	r2, [r3, #12]
 800f504:	4b23      	ldr	r3, [pc, #140]	; (800f594 <tcp_process+0x76c>)
 800f506:	2201      	movs	r2, #1
 800f508:	701a      	strb	r2, [r3, #0]
      pcb->state = TIME_WAIT;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	220a      	movs	r2, #10
 800f50e:	751a      	strb	r2, [r3, #20]
      TCP_REG(&tcp_tw_pcbs, pcb);
 800f510:	4b21      	ldr	r3, [pc, #132]	; (800f598 <tcp_process+0x770>)
 800f512:	681a      	ldr	r2, [r3, #0]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	60da      	str	r2, [r3, #12]
 800f518:	4a1f      	ldr	r2, [pc, #124]	; (800f598 <tcp_process+0x770>)
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	6013      	str	r3, [r2, #0]
 800f51e:	f002 fd09 	bl	8011f34 <tcp_timer_needed>
    }
    break;
 800f522:	e026      	b.n	800f572 <tcp_process+0x74a>
  case LAST_ACK:
    tcp_receive(pcb);
 800f524:	6878      	ldr	r0, [r7, #4]
 800f526:	f000 f8af 	bl	800f688 <tcp_receive>
    if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f52a:	4b16      	ldr	r3, [pc, #88]	; (800f584 <tcp_process+0x75c>)
 800f52c:	781b      	ldrb	r3, [r3, #0]
 800f52e:	f003 0310 	and.w	r3, r3, #16
 800f532:	2b00      	cmp	r3, #0
 800f534:	d01f      	beq.n	800f576 <tcp_process+0x74e>
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800f53a:	4b13      	ldr	r3, [pc, #76]	; (800f588 <tcp_process+0x760>)
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	429a      	cmp	r2, r3
 800f540:	d119      	bne.n	800f576 <tcp_process+0x74e>
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f546:	2b00      	cmp	r3, #0
 800f548:	d115      	bne.n	800f576 <tcp_process+0x74e>
      LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
      /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
      recv_flags |= TF_CLOSED;
 800f54a:	4b10      	ldr	r3, [pc, #64]	; (800f58c <tcp_process+0x764>)
 800f54c:	781b      	ldrb	r3, [r3, #0]
 800f54e:	f043 0310 	orr.w	r3, r3, #16
 800f552:	b2da      	uxtb	r2, r3
 800f554:	4b0d      	ldr	r3, [pc, #52]	; (800f58c <tcp_process+0x764>)
 800f556:	701a      	strb	r2, [r3, #0]
    }
    break;
 800f558:	e00d      	b.n	800f576 <tcp_process+0x74e>
  default:
    break;
 800f55a:	bf00      	nop
 800f55c:	e00c      	b.n	800f578 <tcp_process+0x750>
    break;
 800f55e:	bf00      	nop
 800f560:	e00a      	b.n	800f578 <tcp_process+0x750>
    break;
 800f562:	bf00      	nop
 800f564:	e008      	b.n	800f578 <tcp_process+0x750>
    break;
 800f566:	bf00      	nop
 800f568:	e006      	b.n	800f578 <tcp_process+0x750>
    break;
 800f56a:	bf00      	nop
 800f56c:	e004      	b.n	800f578 <tcp_process+0x750>
    break;
 800f56e:	bf00      	nop
 800f570:	e002      	b.n	800f578 <tcp_process+0x750>
    break;
 800f572:	bf00      	nop
 800f574:	e000      	b.n	800f578 <tcp_process+0x750>
    break;
 800f576:	bf00      	nop
  }
  return ERR_OK;
 800f578:	2300      	movs	r3, #0
}
 800f57a:	4618      	mov	r0, r3
 800f57c:	3720      	adds	r7, #32
 800f57e:	46bd      	mov	sp, r7
 800f580:	bd80      	pop	{r7, pc}
 800f582:	bf00      	nop
 800f584:	20004140 	.word	0x20004140
 800f588:	20004138 	.word	0x20004138
 800f58c:	20004141 	.word	0x20004141
 800f590:	20007934 	.word	0x20007934
 800f594:	20007930 	.word	0x20007930
 800f598:	20007944 	.word	0x20007944

0800f59c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800f59c:	b5b0      	push	{r4, r5, r7, lr}
 800f59e:	b084      	sub	sp, #16
 800f5a0:	af00      	add	r7, sp, #0
 800f5a2:	6078      	str	r0, [r7, #4]
 800f5a4:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	68db      	ldr	r3, [r3, #12]
 800f5aa:	899b      	ldrh	r3, [r3, #12]
 800f5ac:	b29b      	uxth	r3, r3
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	f7f9 fd24 	bl	8008ffc <lwip_htons>
 800f5b4:	4603      	mov	r3, r0
 800f5b6:	f003 0301 	and.w	r3, r3, #1
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d026      	beq.n	800f60c <tcp_oos_insert_segment+0x70>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800f5be:	6838      	ldr	r0, [r7, #0]
 800f5c0:	f7fe fb1d 	bl	800dbfe <tcp_segs_free>
    next = NULL;
 800f5c4:	2300      	movs	r3, #0
 800f5c6:	603b      	str	r3, [r7, #0]
 800f5c8:	e054      	b.n	800f674 <tcp_oos_insert_segment+0xd8>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                      (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	68db      	ldr	r3, [r3, #12]
 800f5ce:	899b      	ldrh	r3, [r3, #12]
 800f5d0:	b29b      	uxth	r3, r3
 800f5d2:	4618      	mov	r0, r3
 800f5d4:	f7f9 fd12 	bl	8008ffc <lwip_htons>
 800f5d8:	4603      	mov	r3, r0
 800f5da:	f003 0301 	and.w	r3, r3, #1
 800f5de:	2b00      	cmp	r3, #0
 800f5e0:	d00c      	beq.n	800f5fc <tcp_oos_insert_segment+0x60>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800f5e2:	687b      	ldr	r3, [r7, #4]
 800f5e4:	68dc      	ldr	r4, [r3, #12]
 800f5e6:	687b      	ldr	r3, [r7, #4]
 800f5e8:	68db      	ldr	r3, [r3, #12]
 800f5ea:	899b      	ldrh	r3, [r3, #12]
 800f5ec:	b29d      	uxth	r5, r3
 800f5ee:	2001      	movs	r0, #1
 800f5f0:	f7f9 fd04 	bl	8008ffc <lwip_htons>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	432b      	orrs	r3, r5
 800f5f8:	b29b      	uxth	r3, r3
 800f5fa:	81a3      	strh	r3, [r4, #12]
      }
      old_seg = next;
 800f5fc:	683b      	ldr	r3, [r7, #0]
 800f5fe:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800f600:	683b      	ldr	r3, [r7, #0]
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800f606:	68f8      	ldr	r0, [r7, #12]
 800f608:	f7fe fb0d 	bl	800dc26 <tcp_seg_free>
    while (next &&
 800f60c:	683b      	ldr	r3, [r7, #0]
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d00e      	beq.n	800f630 <tcp_oos_insert_segment+0x94>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	891b      	ldrh	r3, [r3, #8]
 800f616:	461a      	mov	r2, r3
 800f618:	4b1a      	ldr	r3, [pc, #104]	; (800f684 <tcp_oos_insert_segment+0xe8>)
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	441a      	add	r2, r3
 800f61e:	683b      	ldr	r3, [r7, #0]
 800f620:	68db      	ldr	r3, [r3, #12]
 800f622:	685b      	ldr	r3, [r3, #4]
 800f624:	6839      	ldr	r1, [r7, #0]
 800f626:	8909      	ldrh	r1, [r1, #8]
 800f628:	440b      	add	r3, r1
 800f62a:	1ad3      	subs	r3, r2, r3
    while (next &&
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	dacc      	bge.n	800f5ca <tcp_oos_insert_segment+0x2e>
    }
    if (next &&
 800f630:	683b      	ldr	r3, [r7, #0]
 800f632:	2b00      	cmp	r3, #0
 800f634:	d01e      	beq.n	800f674 <tcp_oos_insert_segment+0xd8>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	891b      	ldrh	r3, [r3, #8]
 800f63a:	461a      	mov	r2, r3
 800f63c:	4b11      	ldr	r3, [pc, #68]	; (800f684 <tcp_oos_insert_segment+0xe8>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	441a      	add	r2, r3
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	68db      	ldr	r3, [r3, #12]
 800f646:	685b      	ldr	r3, [r3, #4]
 800f648:	1ad3      	subs	r3, r2, r3
    if (next &&
 800f64a:	2b00      	cmp	r3, #0
 800f64c:	dd12      	ble.n	800f674 <tcp_oos_insert_segment+0xd8>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800f64e:	683b      	ldr	r3, [r7, #0]
 800f650:	68db      	ldr	r3, [r3, #12]
 800f652:	685b      	ldr	r3, [r3, #4]
 800f654:	b29a      	uxth	r2, r3
 800f656:	4b0b      	ldr	r3, [pc, #44]	; (800f684 <tcp_oos_insert_segment+0xe8>)
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	b29b      	uxth	r3, r3
 800f65c:	1ad3      	subs	r3, r2, r3
 800f65e:	b29a      	uxth	r2, r3
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	685a      	ldr	r2, [r3, #4]
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	891b      	ldrh	r3, [r3, #8]
 800f66c:	4619      	mov	r1, r3
 800f66e:	4610      	mov	r0, r2
 800f670:	f7fc fe0e 	bl	800c290 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	683a      	ldr	r2, [r7, #0]
 800f678:	601a      	str	r2, [r3, #0]
}
 800f67a:	bf00      	nop
 800f67c:	3710      	adds	r7, #16
 800f67e:	46bd      	mov	sp, r7
 800f680:	bdb0      	pop	{r4, r5, r7, pc}
 800f682:	bf00      	nop
 800f684:	20004134 	.word	0x20004134

0800f688 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800f688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f68a:	b08d      	sub	sp, #52	; 0x34
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	6078      	str	r0, [r7, #4]
#endif /* TCP_QUEUE_OOSEQ */
  s32_t off;
  s16_t m;
  u32_t right_wnd_edge;
  u16_t new_tot_len;
  int found_dupack = 0;
 800f690:	2300      	movs	r3, #0
 800f692:	61fb      	str	r3, [r7, #28]
#if TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS
  u32_t ooseq_blen;
  u16_t ooseq_qlen;
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */

  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	7d1b      	ldrb	r3, [r3, #20]
 800f698:	2b03      	cmp	r3, #3
 800f69a:	d806      	bhi.n	800f6aa <tcp_receive+0x22>
 800f69c:	4b9a      	ldr	r3, [pc, #616]	; (800f908 <tcp_receive+0x280>)
 800f69e:	f44f 6281 	mov.w	r2, #1032	; 0x408
 800f6a2:	499a      	ldr	r1, [pc, #616]	; (800f90c <tcp_receive+0x284>)
 800f6a4:	489a      	ldr	r0, [pc, #616]	; (800f910 <tcp_receive+0x288>)
 800f6a6:	f006 fb95 	bl	8015dd4 <iprintf>

  if (flags & TCP_ACK) {
 800f6aa:	4b9a      	ldr	r3, [pc, #616]	; (800f914 <tcp_receive+0x28c>)
 800f6ac:	781b      	ldrb	r3, [r3, #0]
 800f6ae:	f003 0310 	and.w	r3, r3, #16
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	f000 82c5 	beq.w	800fc42 <tcp_receive+0x5ba>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800f6b8:	687b      	ldr	r3, [r7, #4]
 800f6ba:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f6be:	461a      	mov	r2, r3
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6c4:	4413      	add	r3, r2
 800f6c6:	617b      	str	r3, [r7, #20]

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6cc:	4b92      	ldr	r3, [pc, #584]	; (800f918 <tcp_receive+0x290>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	1ad3      	subs	r3, r2, r3
 800f6d2:	2b00      	cmp	r3, #0
 800f6d4:	db1b      	blt.n	800f70e <tcp_receive+0x86>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6d6:	687b      	ldr	r3, [r7, #4]
 800f6d8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f6da:	4b8f      	ldr	r3, [pc, #572]	; (800f918 <tcp_receive+0x290>)
 800f6dc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800f6de:	429a      	cmp	r2, r3
 800f6e0:	d106      	bne.n	800f6f0 <tcp_receive+0x68>
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6e6:	4b8d      	ldr	r3, [pc, #564]	; (800f91c <tcp_receive+0x294>)
 800f6e8:	681b      	ldr	r3, [r3, #0]
 800f6ea:	1ad3      	subs	r3, r2, r3
 800f6ec:	2b00      	cmp	r3, #0
 800f6ee:	db0e      	blt.n	800f70e <tcp_receive+0x86>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800f6f4:	4b89      	ldr	r3, [pc, #548]	; (800f91c <tcp_receive+0x294>)
 800f6f6:	681b      	ldr	r3, [r3, #0]
       (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800f6f8:	429a      	cmp	r2, r3
 800f6fa:	d141      	bne.n	800f780 <tcp_receive+0xf8>
       (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800f6fc:	4b88      	ldr	r3, [pc, #544]	; (800f920 <tcp_receive+0x298>)
 800f6fe:	681b      	ldr	r3, [r3, #0]
 800f700:	89db      	ldrh	r3, [r3, #14]
 800f702:	b29a      	uxth	r2, r3
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f70a:	429a      	cmp	r2, r3
 800f70c:	d938      	bls.n	800f780 <tcp_receive+0xf8>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800f70e:	4b84      	ldr	r3, [pc, #528]	; (800f920 <tcp_receive+0x298>)
 800f710:	681b      	ldr	r3, [r3, #0]
 800f712:	89db      	ldrh	r3, [r3, #14]
 800f714:	b29a      	uxth	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800f71c:	687b      	ldr	r3, [r7, #4]
 800f71e:	f8b3 205e 	ldrh.w	r2, [r3, #94]	; 0x5e
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f728:	429a      	cmp	r2, r3
 800f72a:	d205      	bcs.n	800f738 <tcp_receive+0xb0>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f72c:	687b      	ldr	r3, [r7, #4]
 800f72e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      }
      pcb->snd_wl1 = seqno;
 800f738:	4b77      	ldr	r3, [pc, #476]	; (800f918 <tcp_receive+0x290>)
 800f73a:	681a      	ldr	r2, [r3, #0]
 800f73c:	687b      	ldr	r3, [r7, #4]
 800f73e:	651a      	str	r2, [r3, #80]	; 0x50
      pcb->snd_wl2 = ackno;
 800f740:	4b76      	ldr	r3, [pc, #472]	; (800f91c <tcp_receive+0x294>)
 800f742:	681a      	ldr	r2, [r3, #0]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	655a      	str	r2, [r3, #84]	; 0x54
      if (pcb->snd_wnd == 0) {
 800f748:	687b      	ldr	r3, [r7, #4]
 800f74a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f74e:	2b00      	cmp	r3, #0
 800f750:	d10d      	bne.n	800f76e <tcp_receive+0xe6>
        if (pcb->persist_backoff == 0) {
 800f752:	687b      	ldr	r3, [r7, #4]
 800f754:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800f758:	2b00      	cmp	r3, #0
 800f75a:	d111      	bne.n	800f780 <tcp_receive+0xf8>
          /* start persist timer */
          pcb->persist_cnt = 0;
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	2200      	movs	r2, #0
 800f760:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
          pcb->persist_backoff = 1;
 800f764:	687b      	ldr	r3, [r7, #4]
 800f766:	2201      	movs	r2, #1
 800f768:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
 800f76c:	e008      	b.n	800f780 <tcp_receive+0xf8>
        }
      } else if (pcb->persist_backoff > 0) {
 800f76e:	687b      	ldr	r3, [r7, #4]
 800f770:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 800f774:	2b00      	cmp	r3, #0
 800f776:	d003      	beq.n	800f780 <tcp_receive+0xf8>
        /* stop persist timer */
          pcb->persist_backoff = 0;
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	2200      	movs	r2, #0
 800f77c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800f780:	4b66      	ldr	r3, [pc, #408]	; (800f91c <tcp_receive+0x294>)
 800f782:	681a      	ldr	r2, [r3, #0]
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f788:	1ad3      	subs	r3, r2, r3
 800f78a:	2b00      	cmp	r3, #0
 800f78c:	dc58      	bgt.n	800f840 <tcp_receive+0x1b8>
      /* Clause 2 */
      if (tcplen == 0) {
 800f78e:	4b65      	ldr	r3, [pc, #404]	; (800f924 <tcp_receive+0x29c>)
 800f790:	881b      	ldrh	r3, [r3, #0]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d14b      	bne.n	800f82e <tcp_receive+0x1a6>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f79a:	687a      	ldr	r2, [r7, #4]
 800f79c:	f8b2 205c 	ldrh.w	r2, [r2, #92]	; 0x5c
 800f7a0:	441a      	add	r2, r3
 800f7a2:	697b      	ldr	r3, [r7, #20]
 800f7a4:	429a      	cmp	r2, r3
 800f7a6:	d142      	bne.n	800f82e <tcp_receive+0x1a6>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	db3d      	blt.n	800f82e <tcp_receive+0x1a6>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800f7b6:	4b59      	ldr	r3, [pc, #356]	; (800f91c <tcp_receive+0x294>)
 800f7b8:	681b      	ldr	r3, [r3, #0]
 800f7ba:	429a      	cmp	r2, r3
 800f7bc:	d137      	bne.n	800f82e <tcp_receive+0x1a6>
              found_dupack = 1;
 800f7be:	2301      	movs	r3, #1
 800f7c0:	61fb      	str	r3, [r7, #28]
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7c8:	3301      	adds	r3, #1
 800f7ca:	b2da      	uxtb	r2, r3
 800f7cc:	687b      	ldr	r3, [r7, #4]
 800f7ce:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7d2:	429a      	cmp	r2, r3
 800f7d4:	d907      	bls.n	800f7e6 <tcp_receive+0x15e>
                ++pcb->dupacks;
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7dc:	3301      	adds	r3, #1
 800f7de:	b2da      	uxtb	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f7ec:	2b03      	cmp	r3, #3
 800f7ee:	d916      	bls.n	800f81e <tcp_receive+0x196>
                /* Inflate the congestion window, but not if it means that
                   the value overflows. */
                if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f7fa:	4413      	add	r3, r2
 800f7fc:	b29a      	uxth	r2, r3
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f804:	429a      	cmp	r2, r3
 800f806:	d912      	bls.n	800f82e <tcp_receive+0x1a6>
                  pcb->cwnd += pcb->mss;
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f80e:	687b      	ldr	r3, [r7, #4]
 800f810:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f812:	4413      	add	r3, r2
 800f814:	b29a      	uxth	r2, r3
 800f816:	687b      	ldr	r3, [r7, #4]
 800f818:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f81c:	e007      	b.n	800f82e <tcp_receive+0x1a6>
                }
              } else if (pcb->dupacks == 3) {
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800f824:	2b03      	cmp	r3, #3
 800f826:	d102      	bne.n	800f82e <tcp_receive+0x1a6>
                /* Do fast retransmit */
                tcp_rexmit_fast(pcb);
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f002 fa2d 	bl	8011c88 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	2b00      	cmp	r3, #0
 800f832:	f040 8169 	bne.w	800fb08 <tcp_receive+0x480>
        pcb->dupacks = 0;
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	2200      	movs	r2, #0
 800f83a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f83e:	e163      	b.n	800fb08 <tcp_receive+0x480>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack+1, pcb->snd_nxt)) {
 800f840:	4b36      	ldr	r3, [pc, #216]	; (800f91c <tcp_receive+0x294>)
 800f842:	681a      	ldr	r2, [r3, #0]
 800f844:	687b      	ldr	r3, [r7, #4]
 800f846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f848:	1ad3      	subs	r3, r2, r3
 800f84a:	3b01      	subs	r3, #1
 800f84c:	2b00      	cmp	r3, #0
 800f84e:	f2c0 8107 	blt.w	800fa60 <tcp_receive+0x3d8>
 800f852:	4b32      	ldr	r3, [pc, #200]	; (800f91c <tcp_receive+0x294>)
 800f854:	681a      	ldr	r2, [r3, #0]
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	2b00      	cmp	r3, #0
 800f85e:	f300 80ff 	bgt.w	800fa60 <tcp_receive+0x3d8>
      /* We come here when the ACK acknowledges new data. */

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	7e9b      	ldrb	r3, [r3, #26]
 800f866:	f003 0304 	and.w	r3, r3, #4
 800f86a:	2b00      	cmp	r3, #0
 800f86c:	d00c      	beq.n	800f888 <tcp_receive+0x200>
        pcb->flags &= ~TF_INFR;
 800f86e:	687b      	ldr	r3, [r7, #4]
 800f870:	7e9b      	ldrb	r3, [r3, #26]
 800f872:	f023 0304 	bic.w	r3, r3, #4
 800f876:	b2da      	uxtb	r2, r3
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	769a      	strb	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	2200      	movs	r2, #0
 800f88c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800f896:	10db      	asrs	r3, r3, #3
 800f898:	b21b      	sxth	r3, r3
 800f89a:	b29a      	uxth	r2, r3
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800f8a2:	b29b      	uxth	r3, r3
 800f8a4:	4413      	add	r3, r2
 800f8a6:	b29b      	uxth	r3, r3
 800f8a8:	b21a      	sxth	r2, r3
 800f8aa:	687b      	ldr	r3, [r7, #4]
 800f8ac:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	2200      	movs	r2, #0
 800f8b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800f8b8:	4b18      	ldr	r3, [pc, #96]	; (800f91c <tcp_receive+0x294>)
 800f8ba:	681a      	ldr	r2, [r3, #0]
 800f8bc:	687b      	ldr	r3, [r7, #4]
 800f8be:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800f8c0:	687b      	ldr	r3, [r7, #4]
 800f8c2:	7d1b      	ldrb	r3, [r3, #20]
 800f8c4:	2b03      	cmp	r3, #3
 800f8c6:	f240 8094 	bls.w	800f9f2 <tcp_receive+0x36a>
        if (pcb->cwnd < pcb->ssthresh) {
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d226      	bcs.n	800f928 <tcp_receive+0x2a0>
          if ((tcpwnd_size_t)(pcb->cwnd + pcb->mss) > pcb->cwnd) {
 800f8da:	687b      	ldr	r3, [r7, #4]
 800f8dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8e0:	687b      	ldr	r3, [r7, #4]
 800f8e2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8e4:	4413      	add	r3, r2
 800f8e6:	b29a      	uxth	r2, r3
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f8ee:	429a      	cmp	r2, r3
 800f8f0:	d97f      	bls.n	800f9f2 <tcp_receive+0x36a>
            pcb->cwnd += pcb->mss;
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f8fc:	4413      	add	r3, r2
 800f8fe:	b29a      	uxth	r2, r3
 800f900:	687b      	ldr	r3, [r7, #4]
 800f902:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800f906:	e074      	b.n	800f9f2 <tcp_receive+0x36a>
 800f908:	080199cc 	.word	0x080199cc
 800f90c:	08019bf0 	.word	0x08019bf0
 800f910:	08019a10 	.word	0x08019a10
 800f914:	20004140 	.word	0x20004140
 800f918:	20004134 	.word	0x20004134
 800f91c:	20004138 	.word	0x20004138
 800f920:	20004124 	.word	0x20004124
 800f924:	2000413e 	.word	0x2000413e
          }
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          tcpwnd_size_t new_cwnd = (pcb->cwnd + pcb->mss * pcb->mss / pcb->cwnd);
 800f928:	687b      	ldr	r3, [r7, #4]
 800f92a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f932:	4619      	mov	r1, r3
 800f934:	687b      	ldr	r3, [r7, #4]
 800f936:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f938:	fb03 f301 	mul.w	r3, r3, r1
 800f93c:	6879      	ldr	r1, [r7, #4]
 800f93e:	f8b1 1048 	ldrh.w	r1, [r1, #72]	; 0x48
 800f942:	fb93 f3f1 	sdiv	r3, r3, r1
 800f946:	b29b      	uxth	r3, r3
 800f948:	4413      	add	r3, r2
 800f94a:	827b      	strh	r3, [r7, #18]
          if (new_cwnd > pcb->cwnd) {
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800f952:	8a7a      	ldrh	r2, [r7, #18]
 800f954:	429a      	cmp	r2, r3
 800f956:	d94c      	bls.n	800f9f2 <tcp_receive+0x36a>
            pcb->cwnd = new_cwnd;
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	8a7a      	ldrh	r2, [r7, #18]
 800f95c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked): 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      while (pcb->unacked != NULL &&
 800f960:	e047      	b.n	800f9f2 <tcp_receive+0x36a>
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unacked\n",
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno),
                                      lwip_ntohl(pcb->unacked->tcphdr->seqno) +
                                      TCP_TCPLEN(pcb->unacked)));

        next = pcb->unacked;
 800f962:	687b      	ldr	r3, [r7, #4]
 800f964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f966:	62fb      	str	r3, [r7, #44]	; 0x2c
        pcb->unacked = pcb->unacked->next;
 800f968:	687b      	ldr	r3, [r7, #4]
 800f96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f96c:	681a      	ldr	r2, [r3, #0]
 800f96e:	687b      	ldr	r3, [r7, #4]
 800f970:	66da      	str	r2, [r3, #108]	; 0x6c

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
        LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800f972:	687b      	ldr	r3, [r7, #4]
 800f974:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800f978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f97a:	685b      	ldr	r3, [r3, #4]
 800f97c:	4618      	mov	r0, r3
 800f97e:	f7fc fe95 	bl	800c6ac <pbuf_clen>
 800f982:	4603      	mov	r3, r0
 800f984:	429c      	cmp	r4, r3
 800f986:	d206      	bcs.n	800f996 <tcp_receive+0x30e>
 800f988:	4b70      	ldr	r3, [pc, #448]	; (800fb4c <tcp_receive+0x4c4>)
 800f98a:	f240 429e 	movw	r2, #1182	; 0x49e
 800f98e:	4970      	ldr	r1, [pc, #448]	; (800fb50 <tcp_receive+0x4c8>)
 800f990:	4870      	ldr	r0, [pc, #448]	; (800fb54 <tcp_receive+0x4cc>)
 800f992:	f006 fa1f 	bl	8015dd4 <iprintf>

        pcb->snd_queuelen -= pbuf_clen(next->p);
 800f996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f998:	685b      	ldr	r3, [r3, #4]
 800f99a:	4618      	mov	r0, r3
 800f99c:	f7fc fe86 	bl	800c6ac <pbuf_clen>
 800f9a0:	4603      	mov	r3, r0
 800f9a2:	461a      	mov	r2, r3
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f9aa:	1a9b      	subs	r3, r3, r2
 800f9ac:	b29a      	uxth	r2, r3
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        recv_acked += next->len;
 800f9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9b6:	891a      	ldrh	r2, [r3, #8]
 800f9b8:	4b67      	ldr	r3, [pc, #412]	; (800fb58 <tcp_receive+0x4d0>)
 800f9ba:	881b      	ldrh	r3, [r3, #0]
 800f9bc:	4413      	add	r3, r2
 800f9be:	b29a      	uxth	r2, r3
 800f9c0:	4b65      	ldr	r3, [pc, #404]	; (800fb58 <tcp_receive+0x4d0>)
 800f9c2:	801a      	strh	r2, [r3, #0]
        tcp_seg_free(next);
 800f9c4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f9c6:	f7fe f92e 	bl	800dc26 <tcp_seg_free>

        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unacked)\n", (tcpwnd_size_t)pcb->snd_queuelen));
        if (pcb->snd_queuelen != 0) {
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d00e      	beq.n	800f9f2 <tcp_receive+0x36a>
          LWIP_ASSERT("tcp_receive: valid queue length", pcb->unacked != NULL ||
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d10a      	bne.n	800f9f2 <tcp_receive+0x36a>
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d106      	bne.n	800f9f2 <tcp_receive+0x36a>
 800f9e4:	4b59      	ldr	r3, [pc, #356]	; (800fb4c <tcp_receive+0x4c4>)
 800f9e6:	f240 42a7 	movw	r2, #1191	; 0x4a7
 800f9ea:	495c      	ldr	r1, [pc, #368]	; (800fb5c <tcp_receive+0x4d4>)
 800f9ec:	4859      	ldr	r0, [pc, #356]	; (800fb54 <tcp_receive+0x4cc>)
 800f9ee:	f006 f9f1 	bl	8015dd4 <iprintf>
      while (pcb->unacked != NULL &&
 800f9f2:	687b      	ldr	r3, [r7, #4]
 800f9f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d022      	beq.n	800fa40 <tcp_receive+0x3b8>
             TCP_SEQ_LEQ(lwip_ntohl(pcb->unacked->tcphdr->seqno) +
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f9fe:	68db      	ldr	r3, [r3, #12]
 800fa00:	685b      	ldr	r3, [r3, #4]
 800fa02:	4618      	mov	r0, r3
 800fa04:	f7f9 fb08 	bl	8009018 <lwip_htonl>
 800fa08:	4604      	mov	r4, r0
 800fa0a:	687b      	ldr	r3, [r7, #4]
 800fa0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa0e:	891b      	ldrh	r3, [r3, #8]
 800fa10:	461d      	mov	r5, r3
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa16:	68db      	ldr	r3, [r3, #12]
 800fa18:	899b      	ldrh	r3, [r3, #12]
 800fa1a:	b29b      	uxth	r3, r3
 800fa1c:	4618      	mov	r0, r3
 800fa1e:	f7f9 faed 	bl	8008ffc <lwip_htons>
 800fa22:	4603      	mov	r3, r0
 800fa24:	f003 0303 	and.w	r3, r3, #3
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <tcp_receive+0x3a8>
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e000      	b.n	800fa32 <tcp_receive+0x3aa>
 800fa30:	2300      	movs	r3, #0
 800fa32:	442b      	add	r3, r5
 800fa34:	18e2      	adds	r2, r4, r3
 800fa36:	4b4a      	ldr	r3, [pc, #296]	; (800fb60 <tcp_receive+0x4d8>)
 800fa38:	681b      	ldr	r3, [r3, #0]
 800fa3a:	1ad3      	subs	r3, r2, r3
      while (pcb->unacked != NULL &&
 800fa3c:	2b00      	cmp	r3, #0
 800fa3e:	dd90      	ble.n	800f962 <tcp_receive+0x2da>
        }
      }

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 800fa40:	687b      	ldr	r3, [r7, #4]
 800fa42:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d104      	bne.n	800fa52 <tcp_receive+0x3ca>
        pcb->rtime = -1;
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fa4e:	861a      	strh	r2, [r3, #48]	; 0x30
 800fa50:	e002      	b.n	800fa58 <tcp_receive+0x3d0>
      } else {
        pcb->rtime = 0;
 800fa52:	687b      	ldr	r3, [r7, #4]
 800fa54:	2200      	movs	r2, #0
 800fa56:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	2200      	movs	r2, #0
 800fa5c:	76da      	strb	r2, [r3, #27]
 800fa5e:	e002      	b.n	800fa66 <tcp_receive+0x3de>
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 800fa60:	6878      	ldr	r0, [r7, #4]
 800fa62:	f001 fd31 	bl	80114c8 <tcp_send_empty_ack>
       on the list are acknowledged by the ACK. This may seem
       strange since an "unsent" segment shouldn't be acked. The
       rationale is that lwIP puts all outstanding segments on the
       ->unsent list after a retransmission, so these segments may
       in fact have been sent once. */
    while (pcb->unsent != NULL &&
 800fa66:	e04f      	b.n	800fb08 <tcp_receive+0x480>
                           TCP_TCPLEN(pcb->unsent), pcb->snd_nxt)) {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->unsent\n",
                                    lwip_ntohl(pcb->unsent->tcphdr->seqno), lwip_ntohl(pcb->unsent->tcphdr->seqno) +
                                    TCP_TCPLEN(pcb->unsent)));

      next = pcb->unsent;
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa6c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pcb->unsent = pcb->unsent->next;
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa72:	681a      	ldr	r2, [r3, #0]
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	669a      	str	r2, [r3, #104]	; 0x68
#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fa7c:	2b00      	cmp	r3, #0
 800fa7e:	d103      	bne.n	800fa88 <tcp_receive+0x400>
        pcb->unsent_oversize = 0;
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	2200      	movs	r2, #0
 800fa84:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      }
#endif /* TCP_OVERSIZE */
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ", (tcpwnd_size_t)pcb->snd_queuelen));
      LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= pbuf_clen(next->p)));
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	f8b3 4062 	ldrh.w	r4, [r3, #98]	; 0x62
 800fa8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa90:	685b      	ldr	r3, [r3, #4]
 800fa92:	4618      	mov	r0, r3
 800fa94:	f7fc fe0a 	bl	800c6ac <pbuf_clen>
 800fa98:	4603      	mov	r3, r0
 800fa9a:	429c      	cmp	r4, r3
 800fa9c:	d206      	bcs.n	800faac <tcp_receive+0x424>
 800fa9e:	4b2b      	ldr	r3, [pc, #172]	; (800fb4c <tcp_receive+0x4c4>)
 800faa0:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800faa4:	492a      	ldr	r1, [pc, #168]	; (800fb50 <tcp_receive+0x4c8>)
 800faa6:	482b      	ldr	r0, [pc, #172]	; (800fb54 <tcp_receive+0x4cc>)
 800faa8:	f006 f994 	bl	8015dd4 <iprintf>
      /* Prevent ACK for FIN to generate a sent event */
      pcb->snd_queuelen -= pbuf_clen(next->p);
 800faac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faae:	685b      	ldr	r3, [r3, #4]
 800fab0:	4618      	mov	r0, r3
 800fab2:	f7fc fdfb 	bl	800c6ac <pbuf_clen>
 800fab6:	4603      	mov	r3, r0
 800fab8:	461a      	mov	r2, r3
 800faba:	687b      	ldr	r3, [r7, #4]
 800fabc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fac0:	1a9b      	subs	r3, r3, r2
 800fac2:	b29a      	uxth	r2, r3
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      recv_acked += next->len;
 800faca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800facc:	891a      	ldrh	r2, [r3, #8]
 800face:	4b22      	ldr	r3, [pc, #136]	; (800fb58 <tcp_receive+0x4d0>)
 800fad0:	881b      	ldrh	r3, [r3, #0]
 800fad2:	4413      	add	r3, r2
 800fad4:	b29a      	uxth	r2, r3
 800fad6:	4b20      	ldr	r3, [pc, #128]	; (800fb58 <tcp_receive+0x4d0>)
 800fad8:	801a      	strh	r2, [r3, #0]
      tcp_seg_free(next);
 800fada:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fadc:	f7fe f8a3 	bl	800dc26 <tcp_seg_free>
      LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing unsent)\n", (tcpwnd_size_t)pcb->snd_queuelen));
      if (pcb->snd_queuelen != 0) {
 800fae0:	687b      	ldr	r3, [r7, #4]
 800fae2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d00e      	beq.n	800fb08 <tcp_receive+0x480>
        LWIP_ASSERT("tcp_receive: valid queue length",
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d10a      	bne.n	800fb08 <tcp_receive+0x480>
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d106      	bne.n	800fb08 <tcp_receive+0x480>
 800fafa:	4b14      	ldr	r3, [pc, #80]	; (800fb4c <tcp_receive+0x4c4>)
 800fafc:	f240 42dd 	movw	r2, #1245	; 0x4dd
 800fb00:	4916      	ldr	r1, [pc, #88]	; (800fb5c <tcp_receive+0x4d4>)
 800fb02:	4814      	ldr	r0, [pc, #80]	; (800fb54 <tcp_receive+0x4cc>)
 800fb04:	f006 f966 	bl	8015dd4 <iprintf>
    while (pcb->unsent != NULL &&
 800fb08:	687b      	ldr	r3, [r7, #4]
 800fb0a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	d037      	beq.n	800fb80 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fb10:	4b13      	ldr	r3, [pc, #76]	; (800fb60 <tcp_receive+0x4d8>)
 800fb12:	681c      	ldr	r4, [r3, #0]
 800fb14:	687b      	ldr	r3, [r7, #4]
 800fb16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb18:	68db      	ldr	r3, [r3, #12]
 800fb1a:	685b      	ldr	r3, [r3, #4]
 800fb1c:	4618      	mov	r0, r3
 800fb1e:	f7f9 fa7b 	bl	8009018 <lwip_htonl>
 800fb22:	4605      	mov	r5, r0
 800fb24:	687b      	ldr	r3, [r7, #4]
 800fb26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb28:	891b      	ldrh	r3, [r3, #8]
 800fb2a:	461e      	mov	r6, r3
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fb30:	68db      	ldr	r3, [r3, #12]
 800fb32:	899b      	ldrh	r3, [r3, #12]
 800fb34:	b29b      	uxth	r3, r3
 800fb36:	4618      	mov	r0, r3
 800fb38:	f7f9 fa60 	bl	8008ffc <lwip_htons>
 800fb3c:	4603      	mov	r3, r0
 800fb3e:	f003 0303 	and.w	r3, r3, #3
 800fb42:	2b00      	cmp	r3, #0
 800fb44:	d00e      	beq.n	800fb64 <tcp_receive+0x4dc>
 800fb46:	2301      	movs	r3, #1
 800fb48:	e00d      	b.n	800fb66 <tcp_receive+0x4de>
 800fb4a:	bf00      	nop
 800fb4c:	080199cc 	.word	0x080199cc
 800fb50:	08019c0c 	.word	0x08019c0c
 800fb54:	08019a10 	.word	0x08019a10
 800fb58:	2000413c 	.word	0x2000413c
 800fb5c:	08019c34 	.word	0x08019c34
 800fb60:	20004138 	.word	0x20004138
 800fb64:	2300      	movs	r3, #0
 800fb66:	4433      	add	r3, r6
 800fb68:	442b      	add	r3, r5
 800fb6a:	1ae3      	subs	r3, r4, r3
    while (pcb->unsent != NULL &&
 800fb6c:	2b00      	cmp	r3, #0
 800fb6e:	db07      	blt.n	800fb80 <tcp_receive+0x4f8>
           TCP_SEQ_BETWEEN(ackno, lwip_ntohl(pcb->unsent->tcphdr->seqno) +
 800fb70:	4b8d      	ldr	r3, [pc, #564]	; (800fda8 <tcp_receive+0x720>)
 800fb72:	681a      	ldr	r2, [r3, #0]
 800fb74:	687b      	ldr	r3, [r7, #4]
 800fb76:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800fb78:	1ad3      	subs	r3, r2, r3
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f77f af74 	ble.w	800fa68 <tcp_receive+0x3e0>
          pcb->unacked != NULL || pcb->unsent != NULL);
      }
    }
    pcb->snd_buf += recv_acked;
 800fb80:	687b      	ldr	r3, [r7, #4]
 800fb82:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fb86:	4b89      	ldr	r3, [pc, #548]	; (800fdac <tcp_receive+0x724>)
 800fb88:	881b      	ldrh	r3, [r3, #0]
 800fb8a:	4413      	add	r3, r2
 800fb8c:	b29a      	uxth	r2, r3
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fb98:	2b00      	cmp	r3, #0
 800fb9a:	d052      	beq.n	800fc42 <tcp_receive+0x5ba>
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fba0:	4b81      	ldr	r3, [pc, #516]	; (800fda8 <tcp_receive+0x720>)
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	1ad3      	subs	r3, r2, r3
 800fba6:	2b00      	cmp	r3, #0
 800fba8:	da4b      	bge.n	800fc42 <tcp_receive+0x5ba>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 800fbaa:	4b81      	ldr	r3, [pc, #516]	; (800fdb0 <tcp_receive+0x728>)
 800fbac:	681b      	ldr	r3, [r3, #0]
 800fbae:	b29a      	uxth	r2, r3
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800fbb4:	b29b      	uxth	r3, r3
 800fbb6:	1ad3      	subs	r3, r2, r3
 800fbb8:	b29b      	uxth	r3, r3
 800fbba:	847b      	strh	r3, [r7, #34]	; 0x22

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = m - (pcb->sa >> 3);
 800fbbc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fbc4:	10db      	asrs	r3, r3, #3
 800fbc6:	b21b      	sxth	r3, r3
 800fbc8:	b29b      	uxth	r3, r3
 800fbca:	1ad3      	subs	r3, r2, r3
 800fbcc:	b29b      	uxth	r3, r3
 800fbce:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sa += m;
 800fbd0:	687b      	ldr	r3, [r7, #4]
 800fbd2:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fbd6:	b29a      	uxth	r2, r3
 800fbd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbda:	4413      	add	r3, r2
 800fbdc:	b29b      	uxth	r3, r3
 800fbde:	b21a      	sxth	r2, r3
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 800fbe4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800fbe8:	2b00      	cmp	r3, #0
 800fbea:	da03      	bge.n	800fbf4 <tcp_receive+0x56c>
        m = -m;
 800fbec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fbee:	425b      	negs	r3, r3
 800fbf0:	b29b      	uxth	r3, r3
 800fbf2:	847b      	strh	r3, [r7, #34]	; 0x22
      }
      m = m - (pcb->sv >> 2);
 800fbf4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800fbf6:	687b      	ldr	r3, [r7, #4]
 800fbf8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fbfc:	109b      	asrs	r3, r3, #2
 800fbfe:	b21b      	sxth	r3, r3
 800fc00:	b29b      	uxth	r3, r3
 800fc02:	1ad3      	subs	r3, r2, r3
 800fc04:	b29b      	uxth	r3, r3
 800fc06:	847b      	strh	r3, [r7, #34]	; 0x22
      pcb->sv += m;
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc0e:	b29a      	uxth	r2, r3
 800fc10:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800fc12:	4413      	add	r3, r2
 800fc14:	b29b      	uxth	r3, r3
 800fc16:	b21a      	sxth	r2, r3
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (pcb->sa >> 3) + pcb->sv;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fc22:	10db      	asrs	r3, r3, #3
 800fc24:	b21b      	sxth	r3, r3
 800fc26:	b29a      	uxth	r2, r3
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	4413      	add	r3, r2
 800fc32:	b29b      	uxth	r3, r3
 800fc34:	b21a      	sxth	r2, r3
 800fc36:	687b      	ldr	r3, [r7, #4]
 800fc38:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	2200      	movs	r2, #0
 800fc40:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 800fc42:	4b5c      	ldr	r3, [pc, #368]	; (800fdb4 <tcp_receive+0x72c>)
 800fc44:	881b      	ldrh	r3, [r3, #0]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	f000 84ee 	beq.w	8010628 <tcp_receive+0xfa0>
 800fc4c:	687b      	ldr	r3, [r7, #4]
 800fc4e:	7d1b      	ldrb	r3, [r3, #20]
 800fc50:	2b06      	cmp	r3, #6
 800fc52:	f200 84e9 	bhi.w	8010628 <tcp_receive+0xfa0>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fc56:	687b      	ldr	r3, [r7, #4]
 800fc58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc5a:	4b57      	ldr	r3, [pc, #348]	; (800fdb8 <tcp_receive+0x730>)
 800fc5c:	681b      	ldr	r3, [r3, #0]
 800fc5e:	1ad3      	subs	r3, r2, r3
 800fc60:	3b01      	subs	r3, #1
 800fc62:	2b00      	cmp	r3, #0
 800fc64:	f2c0 80b8 	blt.w	800fdd8 <tcp_receive+0x750>
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc6c:	4b51      	ldr	r3, [pc, #324]	; (800fdb4 <tcp_receive+0x72c>)
 800fc6e:	881b      	ldrh	r3, [r3, #0]
 800fc70:	4619      	mov	r1, r3
 800fc72:	4b51      	ldr	r3, [pc, #324]	; (800fdb8 <tcp_receive+0x730>)
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	440b      	add	r3, r1
 800fc78:	1ad3      	subs	r3, r2, r3
 800fc7a:	3301      	adds	r3, #1
 800fc7c:	2b00      	cmp	r3, #0
 800fc7e:	f300 80ab 	bgt.w	800fdd8 <tcp_receive+0x750>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 800fc82:	4b4e      	ldr	r3, [pc, #312]	; (800fdbc <tcp_receive+0x734>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	61bb      	str	r3, [r7, #24]
      off = pcb->rcv_nxt - seqno;
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fc8c:	4b4a      	ldr	r3, [pc, #296]	; (800fdb8 <tcp_receive+0x730>)
 800fc8e:	681b      	ldr	r3, [r3, #0]
 800fc90:	1ad3      	subs	r3, r2, r3
 800fc92:	627b      	str	r3, [r7, #36]	; 0x24
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 800fc94:	4b49      	ldr	r3, [pc, #292]	; (800fdbc <tcp_receive+0x734>)
 800fc96:	685b      	ldr	r3, [r3, #4]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d106      	bne.n	800fcaa <tcp_receive+0x622>
 800fc9c:	4b48      	ldr	r3, [pc, #288]	; (800fdc0 <tcp_receive+0x738>)
 800fc9e:	f240 523c 	movw	r2, #1340	; 0x53c
 800fca2:	4948      	ldr	r1, [pc, #288]	; (800fdc4 <tcp_receive+0x73c>)
 800fca4:	4848      	ldr	r0, [pc, #288]	; (800fdc8 <tcp_receive+0x740>)
 800fca6:	f006 f895 	bl	8015dd4 <iprintf>
      LWIP_ASSERT("insane offset!", (off < 0x7fff));
 800fcaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcac:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800fcb0:	4293      	cmp	r3, r2
 800fcb2:	dd06      	ble.n	800fcc2 <tcp_receive+0x63a>
 800fcb4:	4b42      	ldr	r3, [pc, #264]	; (800fdc0 <tcp_receive+0x738>)
 800fcb6:	f240 523d 	movw	r2, #1341	; 0x53d
 800fcba:	4944      	ldr	r1, [pc, #272]	; (800fdcc <tcp_receive+0x744>)
 800fcbc:	4842      	ldr	r0, [pc, #264]	; (800fdc8 <tcp_receive+0x740>)
 800fcbe:	f006 f889 	bl	8015dd4 <iprintf>
      if (inseg.p->len < off) {
 800fcc2:	4b3e      	ldr	r3, [pc, #248]	; (800fdbc <tcp_receive+0x734>)
 800fcc4:	685b      	ldr	r3, [r3, #4]
 800fcc6:	895b      	ldrh	r3, [r3, #10]
 800fcc8:	461a      	mov	r2, r3
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	429a      	cmp	r2, r3
 800fcce:	da3e      	bge.n	800fd4e <tcp_receive+0x6c6>
        LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 800fcd0:	4b3a      	ldr	r3, [pc, #232]	; (800fdbc <tcp_receive+0x734>)
 800fcd2:	685b      	ldr	r3, [r3, #4]
 800fcd4:	891b      	ldrh	r3, [r3, #8]
 800fcd6:	461a      	mov	r2, r3
 800fcd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcda:	429a      	cmp	r2, r3
 800fcdc:	da06      	bge.n	800fcec <tcp_receive+0x664>
 800fcde:	4b38      	ldr	r3, [pc, #224]	; (800fdc0 <tcp_receive+0x738>)
 800fce0:	f240 523f 	movw	r2, #1343	; 0x53f
 800fce4:	493a      	ldr	r1, [pc, #232]	; (800fdd0 <tcp_receive+0x748>)
 800fce6:	4838      	ldr	r0, [pc, #224]	; (800fdc8 <tcp_receive+0x740>)
 800fce8:	f006 f874 	bl	8015dd4 <iprintf>
        new_tot_len = (u16_t)(inseg.p->tot_len - off);
 800fcec:	4b33      	ldr	r3, [pc, #204]	; (800fdbc <tcp_receive+0x734>)
 800fcee:	685b      	ldr	r3, [r3, #4]
 800fcf0:	891a      	ldrh	r2, [r3, #8]
 800fcf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf4:	b29b      	uxth	r3, r3
 800fcf6:	1ad3      	subs	r3, r2, r3
 800fcf8:	823b      	strh	r3, [r7, #16]
        while (p->len < off) {
 800fcfa:	e00e      	b.n	800fd1a <tcp_receive+0x692>
          off -= p->len;
 800fcfc:	69bb      	ldr	r3, [r7, #24]
 800fcfe:	895b      	ldrh	r3, [r3, #10]
 800fd00:	461a      	mov	r2, r3
 800fd02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd04:	1a9b      	subs	r3, r3, r2
 800fd06:	627b      	str	r3, [r7, #36]	; 0x24
          /* KJM following line changed (with addition of new_tot_len var)
             to fix bug #9076
             inseg.p->tot_len -= p->len; */
          p->tot_len = new_tot_len;
 800fd08:	69bb      	ldr	r3, [r7, #24]
 800fd0a:	8a3a      	ldrh	r2, [r7, #16]
 800fd0c:	811a      	strh	r2, [r3, #8]
          p->len = 0;
 800fd0e:	69bb      	ldr	r3, [r7, #24]
 800fd10:	2200      	movs	r2, #0
 800fd12:	815a      	strh	r2, [r3, #10]
          p = p->next;
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	61bb      	str	r3, [r7, #24]
        while (p->len < off) {
 800fd1a:	69bb      	ldr	r3, [r7, #24]
 800fd1c:	895b      	ldrh	r3, [r3, #10]
 800fd1e:	461a      	mov	r2, r3
 800fd20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd22:	429a      	cmp	r2, r3
 800fd24:	dbea      	blt.n	800fcfc <tcp_receive+0x674>
        }
        if (pbuf_header(p, (s16_t)-off)) {
 800fd26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd28:	b29b      	uxth	r3, r3
 800fd2a:	425b      	negs	r3, r3
 800fd2c:	b29b      	uxth	r3, r3
 800fd2e:	b21b      	sxth	r3, r3
 800fd30:	4619      	mov	r1, r3
 800fd32:	69b8      	ldr	r0, [r7, #24]
 800fd34:	f7fc fbfc 	bl	800c530 <pbuf_header>
 800fd38:	4603      	mov	r3, r0
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d01c      	beq.n	800fd78 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fd3e:	4b20      	ldr	r3, [pc, #128]	; (800fdc0 <tcp_receive+0x738>)
 800fd40:	f240 524c 	movw	r2, #1356	; 0x54c
 800fd44:	4923      	ldr	r1, [pc, #140]	; (800fdd4 <tcp_receive+0x74c>)
 800fd46:	4820      	ldr	r0, [pc, #128]	; (800fdc8 <tcp_receive+0x740>)
 800fd48:	f006 f844 	bl	8015dd4 <iprintf>
 800fd4c:	e014      	b.n	800fd78 <tcp_receive+0x6f0>
        }
      } else {
        if (pbuf_header(inseg.p, (s16_t)-off)) {
 800fd4e:	4b1b      	ldr	r3, [pc, #108]	; (800fdbc <tcp_receive+0x734>)
 800fd50:	685b      	ldr	r3, [r3, #4]
 800fd52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd54:	b292      	uxth	r2, r2
 800fd56:	4252      	negs	r2, r2
 800fd58:	b292      	uxth	r2, r2
 800fd5a:	b212      	sxth	r2, r2
 800fd5c:	4611      	mov	r1, r2
 800fd5e:	4618      	mov	r0, r3
 800fd60:	f7fc fbe6 	bl	800c530 <pbuf_header>
 800fd64:	4603      	mov	r3, r0
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d006      	beq.n	800fd78 <tcp_receive+0x6f0>
          /* Do we need to cope with this failing?  Assert for now */
          LWIP_ASSERT("pbuf_header failed", 0);
 800fd6a:	4b15      	ldr	r3, [pc, #84]	; (800fdc0 <tcp_receive+0x738>)
 800fd6c:	f240 5251 	movw	r2, #1361	; 0x551
 800fd70:	4918      	ldr	r1, [pc, #96]	; (800fdd4 <tcp_receive+0x74c>)
 800fd72:	4815      	ldr	r0, [pc, #84]	; (800fdc8 <tcp_receive+0x740>)
 800fd74:	f006 f82e 	bl	8015dd4 <iprintf>
        }
      }
      inseg.len -= (u16_t)(pcb->rcv_nxt - seqno);
 800fd78:	4b10      	ldr	r3, [pc, #64]	; (800fdbc <tcp_receive+0x734>)
 800fd7a:	891a      	ldrh	r2, [r3, #8]
 800fd7c:	4b0e      	ldr	r3, [pc, #56]	; (800fdb8 <tcp_receive+0x730>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	b299      	uxth	r1, r3
 800fd82:	687b      	ldr	r3, [r7, #4]
 800fd84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fd86:	b29b      	uxth	r3, r3
 800fd88:	1acb      	subs	r3, r1, r3
 800fd8a:	b29b      	uxth	r3, r3
 800fd8c:	4413      	add	r3, r2
 800fd8e:	b29a      	uxth	r2, r3
 800fd90:	4b0a      	ldr	r3, [pc, #40]	; (800fdbc <tcp_receive+0x734>)
 800fd92:	811a      	strh	r2, [r3, #8]
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 800fd94:	4b09      	ldr	r3, [pc, #36]	; (800fdbc <tcp_receive+0x734>)
 800fd96:	68db      	ldr	r3, [r3, #12]
 800fd98:	687a      	ldr	r2, [r7, #4]
 800fd9a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800fd9c:	4906      	ldr	r1, [pc, #24]	; (800fdb8 <tcp_receive+0x730>)
 800fd9e:	600a      	str	r2, [r1, #0]
 800fda0:	4a05      	ldr	r2, [pc, #20]	; (800fdb8 <tcp_receive+0x730>)
 800fda2:	6812      	ldr	r2, [r2, #0]
 800fda4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 800fda6:	e025      	b.n	800fdf4 <tcp_receive+0x76c>
 800fda8:	20004138 	.word	0x20004138
 800fdac:	2000413c 	.word	0x2000413c
 800fdb0:	20007938 	.word	0x20007938
 800fdb4:	2000413e 	.word	0x2000413e
 800fdb8:	20004134 	.word	0x20004134
 800fdbc:	20004114 	.word	0x20004114
 800fdc0:	080199cc 	.word	0x080199cc
 800fdc4:	08019c54 	.word	0x08019c54
 800fdc8:	08019a10 	.word	0x08019a10
 800fdcc:	08019c64 	.word	0x08019c64
 800fdd0:	08019c74 	.word	0x08019c74
 800fdd4:	08019c84 	.word	0x08019c84
    }
    else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 800fdd8:	4b86      	ldr	r3, [pc, #536]	; (800fff4 <tcp_receive+0x96c>)
 800fdda:	681a      	ldr	r2, [r3, #0]
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fde0:	1ad3      	subs	r3, r2, r3
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	da06      	bge.n	800fdf4 <tcp_receive+0x76c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 800fde6:	687b      	ldr	r3, [r7, #4]
 800fde8:	7e9b      	ldrb	r3, [r3, #26]
 800fdea:	f043 0302 	orr.w	r3, r3, #2
 800fdee:	b2da      	uxtb	r2, r3
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	769a      	strb	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800fdf4:	4b7f      	ldr	r3, [pc, #508]	; (800fff4 <tcp_receive+0x96c>)
 800fdf6:	681a      	ldr	r2, [r3, #0]
 800fdf8:	687b      	ldr	r3, [r7, #4]
 800fdfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdfc:	1ad3      	subs	r3, r2, r3
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	f2c0 840d 	blt.w	801061e <tcp_receive+0xf96>
 800fe04:	4b7b      	ldr	r3, [pc, #492]	; (800fff4 <tcp_receive+0x96c>)
 800fe06:	681a      	ldr	r2, [r3, #0]
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe0c:	6879      	ldr	r1, [r7, #4]
 800fe0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fe10:	440b      	add	r3, r1
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	3301      	adds	r3, #1
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f300 8401 	bgt.w	801061e <tcp_receive+0xf96>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe20:	4b74      	ldr	r3, [pc, #464]	; (800fff4 <tcp_receive+0x96c>)
 800fe22:	681b      	ldr	r3, [r3, #0]
 800fe24:	429a      	cmp	r2, r3
 800fe26:	f040 8285 	bne.w	8010334 <tcp_receive+0xcac>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 800fe2a:	4b73      	ldr	r3, [pc, #460]	; (800fff8 <tcp_receive+0x970>)
 800fe2c:	891c      	ldrh	r4, [r3, #8]
 800fe2e:	4b72      	ldr	r3, [pc, #456]	; (800fff8 <tcp_receive+0x970>)
 800fe30:	68db      	ldr	r3, [r3, #12]
 800fe32:	899b      	ldrh	r3, [r3, #12]
 800fe34:	b29b      	uxth	r3, r3
 800fe36:	4618      	mov	r0, r3
 800fe38:	f7f9 f8e0 	bl	8008ffc <lwip_htons>
 800fe3c:	4603      	mov	r3, r0
 800fe3e:	f003 0303 	and.w	r3, r3, #3
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d001      	beq.n	800fe4a <tcp_receive+0x7c2>
 800fe46:	2301      	movs	r3, #1
 800fe48:	e000      	b.n	800fe4c <tcp_receive+0x7c4>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	4423      	add	r3, r4
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	4b6a      	ldr	r3, [pc, #424]	; (800fffc <tcp_receive+0x974>)
 800fe52:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800fe58:	4b68      	ldr	r3, [pc, #416]	; (800fffc <tcp_receive+0x974>)
 800fe5a:	881b      	ldrh	r3, [r3, #0]
 800fe5c:	429a      	cmp	r2, r3
 800fe5e:	d26d      	bcs.n	800ff3c <tcp_receive+0x8b4>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800fe60:	4b65      	ldr	r3, [pc, #404]	; (800fff8 <tcp_receive+0x970>)
 800fe62:	68db      	ldr	r3, [r3, #12]
 800fe64:	899b      	ldrh	r3, [r3, #12]
 800fe66:	b29b      	uxth	r3, r3
 800fe68:	4618      	mov	r0, r3
 800fe6a:	f7f9 f8c7 	bl	8008ffc <lwip_htons>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	f003 0301 	and.w	r3, r3, #1
 800fe74:	2b00      	cmp	r3, #0
 800fe76:	d01a      	beq.n	800feae <tcp_receive+0x826>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 800fe78:	4b5f      	ldr	r3, [pc, #380]	; (800fff8 <tcp_receive+0x970>)
 800fe7a:	68dc      	ldr	r4, [r3, #12]
 800fe7c:	4b5e      	ldr	r3, [pc, #376]	; (800fff8 <tcp_receive+0x970>)
 800fe7e:	68db      	ldr	r3, [r3, #12]
 800fe80:	899b      	ldrh	r3, [r3, #12]
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800fe88:	b29d      	uxth	r5, r3
 800fe8a:	4b5b      	ldr	r3, [pc, #364]	; (800fff8 <tcp_receive+0x970>)
 800fe8c:	68db      	ldr	r3, [r3, #12]
 800fe8e:	899b      	ldrh	r3, [r3, #12]
 800fe90:	b29b      	uxth	r3, r3
 800fe92:	4618      	mov	r0, r3
 800fe94:	f7f9 f8b2 	bl	8008ffc <lwip_htons>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 800fe9e:	b29b      	uxth	r3, r3
 800fea0:	4618      	mov	r0, r3
 800fea2:	f7f9 f8ab 	bl	8008ffc <lwip_htons>
 800fea6:	4603      	mov	r3, r0
 800fea8:	432b      	orrs	r3, r5
 800feaa:	b29b      	uxth	r3, r3
 800feac:	81a3      	strh	r3, [r4, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800feb2:	4b51      	ldr	r3, [pc, #324]	; (800fff8 <tcp_receive+0x970>)
 800feb4:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 800feb6:	4b50      	ldr	r3, [pc, #320]	; (800fff8 <tcp_receive+0x970>)
 800feb8:	68db      	ldr	r3, [r3, #12]
 800feba:	899b      	ldrh	r3, [r3, #12]
 800febc:	b29b      	uxth	r3, r3
 800febe:	4618      	mov	r0, r3
 800fec0:	f7f9 f89c 	bl	8008ffc <lwip_htons>
 800fec4:	4603      	mov	r3, r0
 800fec6:	f003 0302 	and.w	r3, r3, #2
 800feca:	2b00      	cmp	r3, #0
 800fecc:	d005      	beq.n	800feda <tcp_receive+0x852>
            inseg.len -= 1;
 800fece:	4b4a      	ldr	r3, [pc, #296]	; (800fff8 <tcp_receive+0x970>)
 800fed0:	891b      	ldrh	r3, [r3, #8]
 800fed2:	3b01      	subs	r3, #1
 800fed4:	b29a      	uxth	r2, r3
 800fed6:	4b48      	ldr	r3, [pc, #288]	; (800fff8 <tcp_receive+0x970>)
 800fed8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 800feda:	4b47      	ldr	r3, [pc, #284]	; (800fff8 <tcp_receive+0x970>)
 800fedc:	685a      	ldr	r2, [r3, #4]
 800fede:	4b46      	ldr	r3, [pc, #280]	; (800fff8 <tcp_receive+0x970>)
 800fee0:	891b      	ldrh	r3, [r3, #8]
 800fee2:	4619      	mov	r1, r3
 800fee4:	4610      	mov	r0, r2
 800fee6:	f7fc f9d3 	bl	800c290 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 800feea:	4b43      	ldr	r3, [pc, #268]	; (800fff8 <tcp_receive+0x970>)
 800feec:	891c      	ldrh	r4, [r3, #8]
 800feee:	4b42      	ldr	r3, [pc, #264]	; (800fff8 <tcp_receive+0x970>)
 800fef0:	68db      	ldr	r3, [r3, #12]
 800fef2:	899b      	ldrh	r3, [r3, #12]
 800fef4:	b29b      	uxth	r3, r3
 800fef6:	4618      	mov	r0, r3
 800fef8:	f7f9 f880 	bl	8008ffc <lwip_htons>
 800fefc:	4603      	mov	r3, r0
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	2b00      	cmp	r3, #0
 800ff04:	d001      	beq.n	800ff0a <tcp_receive+0x882>
 800ff06:	2301      	movs	r3, #1
 800ff08:	e000      	b.n	800ff0c <tcp_receive+0x884>
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	4423      	add	r3, r4
 800ff0e:	b29a      	uxth	r2, r3
 800ff10:	4b3a      	ldr	r3, [pc, #232]	; (800fffc <tcp_receive+0x974>)
 800ff12:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 800ff14:	4b39      	ldr	r3, [pc, #228]	; (800fffc <tcp_receive+0x974>)
 800ff16:	881b      	ldrh	r3, [r3, #0]
 800ff18:	461a      	mov	r2, r3
 800ff1a:	4b36      	ldr	r3, [pc, #216]	; (800fff4 <tcp_receive+0x96c>)
 800ff1c:	681b      	ldr	r3, [r3, #0]
 800ff1e:	441a      	add	r2, r3
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff24:	6879      	ldr	r1, [r7, #4]
 800ff26:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800ff28:	440b      	add	r3, r1
 800ff2a:	429a      	cmp	r2, r3
 800ff2c:	d006      	beq.n	800ff3c <tcp_receive+0x8b4>
 800ff2e:	4b34      	ldr	r3, [pc, #208]	; (8010000 <tcp_receive+0x978>)
 800ff30:	f240 527f 	movw	r2, #1407	; 0x57f
 800ff34:	4933      	ldr	r1, [pc, #204]	; (8010004 <tcp_receive+0x97c>)
 800ff36:	4834      	ldr	r0, [pc, #208]	; (8010008 <tcp_receive+0x980>)
 800ff38:	f005 ff4c 	bl	8015dd4 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff40:	2b00      	cmp	r3, #0
 800ff42:	f000 80e0 	beq.w	8010106 <tcp_receive+0xa7e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 800ff46:	4b2c      	ldr	r3, [pc, #176]	; (800fff8 <tcp_receive+0x970>)
 800ff48:	68db      	ldr	r3, [r3, #12]
 800ff4a:	899b      	ldrh	r3, [r3, #12]
 800ff4c:	b29b      	uxth	r3, r3
 800ff4e:	4618      	mov	r0, r3
 800ff50:	f7f9 f854 	bl	8008ffc <lwip_htons>
 800ff54:	4603      	mov	r3, r0
 800ff56:	f003 0301 	and.w	r3, r3, #1
 800ff5a:	2b00      	cmp	r3, #0
 800ff5c:	d010      	beq.n	800ff80 <tcp_receive+0x8f8>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 800ff5e:	e00a      	b.n	800ff76 <tcp_receive+0x8ee>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff64:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff6a:	681a      	ldr	r2, [r3, #0]
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	671a      	str	r2, [r3, #112]	; 0x70
              tcp_seg_free(old_ooseq);
 800ff70:	68f8      	ldr	r0, [r7, #12]
 800ff72:	f7fd fe58 	bl	800dc26 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff7a:	2b00      	cmp	r3, #0
 800ff7c:	d1f0      	bne.n	800ff60 <tcp_receive+0x8d8>
 800ff7e:	e0c2      	b.n	8010106 <tcp_receive+0xa7e>
            }
          } else {
            next = pcb->ooseq;
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ff84:	62fb      	str	r3, [r7, #44]	; 0x2c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 800ff86:	e04e      	b.n	8010026 <tcp_receive+0x99e>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ff88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ff8a:	68db      	ldr	r3, [r3, #12]
 800ff8c:	899b      	ldrh	r3, [r3, #12]
 800ff8e:	b29b      	uxth	r3, r3
 800ff90:	4618      	mov	r0, r3
 800ff92:	f7f9 f833 	bl	8008ffc <lwip_htons>
 800ff96:	4603      	mov	r3, r0
 800ff98:	f003 0301 	and.w	r3, r3, #1
 800ff9c:	2b00      	cmp	r3, #0
 800ff9e:	d03a      	beq.n	8010016 <tcp_receive+0x98e>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 800ffa0:	4b15      	ldr	r3, [pc, #84]	; (800fff8 <tcp_receive+0x970>)
 800ffa2:	68db      	ldr	r3, [r3, #12]
 800ffa4:	899b      	ldrh	r3, [r3, #12]
 800ffa6:	b29b      	uxth	r3, r3
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	f7f9 f827 	bl	8008ffc <lwip_htons>
 800ffae:	4603      	mov	r3, r0
 800ffb0:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d12e      	bne.n	8010016 <tcp_receive+0x98e>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 800ffb8:	4b0f      	ldr	r3, [pc, #60]	; (800fff8 <tcp_receive+0x970>)
 800ffba:	68dc      	ldr	r4, [r3, #12]
 800ffbc:	4b0e      	ldr	r3, [pc, #56]	; (800fff8 <tcp_receive+0x970>)
 800ffbe:	68db      	ldr	r3, [r3, #12]
 800ffc0:	899b      	ldrh	r3, [r3, #12]
 800ffc2:	b29d      	uxth	r5, r3
 800ffc4:	2001      	movs	r0, #1
 800ffc6:	f7f9 f819 	bl	8008ffc <lwip_htons>
 800ffca:	4603      	mov	r3, r0
 800ffcc:	432b      	orrs	r3, r5
 800ffce:	b29b      	uxth	r3, r3
 800ffd0:	81a3      	strh	r3, [r4, #12]
                tcplen = TCP_TCPLEN(&inseg);
 800ffd2:	4b09      	ldr	r3, [pc, #36]	; (800fff8 <tcp_receive+0x970>)
 800ffd4:	891c      	ldrh	r4, [r3, #8]
 800ffd6:	4b08      	ldr	r3, [pc, #32]	; (800fff8 <tcp_receive+0x970>)
 800ffd8:	68db      	ldr	r3, [r3, #12]
 800ffda:	899b      	ldrh	r3, [r3, #12]
 800ffdc:	b29b      	uxth	r3, r3
 800ffde:	4618      	mov	r0, r3
 800ffe0:	f7f9 f80c 	bl	8008ffc <lwip_htons>
 800ffe4:	4603      	mov	r3, r0
 800ffe6:	f003 0303 	and.w	r3, r3, #3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	d00e      	beq.n	801000c <tcp_receive+0x984>
 800ffee:	2301      	movs	r3, #1
 800fff0:	e00d      	b.n	801000e <tcp_receive+0x986>
 800fff2:	bf00      	nop
 800fff4:	20004134 	.word	0x20004134
 800fff8:	20004114 	.word	0x20004114
 800fffc:	2000413e 	.word	0x2000413e
 8010000:	080199cc 	.word	0x080199cc
 8010004:	08019c98 	.word	0x08019c98
 8010008:	08019a10 	.word	0x08019a10
 801000c:	2300      	movs	r3, #0
 801000e:	4423      	add	r3, r4
 8010010:	b29a      	uxth	r2, r3
 8010012:	4b95      	ldr	r3, [pc, #596]	; (8010268 <tcp_receive+0xbe0>)
 8010014:	801a      	strh	r2, [r3, #0]
              }
              prev = next;
 8010016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010018:	62bb      	str	r3, [r7, #40]	; 0x28
              next = next->next;
 801001a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	62fb      	str	r3, [r7, #44]	; 0x2c
              tcp_seg_free(prev);
 8010020:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010022:	f7fd fe00 	bl	800dc26 <tcp_seg_free>
            while (next &&
 8010026:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010028:	2b00      	cmp	r3, #0
 801002a:	d00e      	beq.n	801004a <tcp_receive+0x9c2>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801002c:	4b8e      	ldr	r3, [pc, #568]	; (8010268 <tcp_receive+0xbe0>)
 801002e:	881b      	ldrh	r3, [r3, #0]
 8010030:	461a      	mov	r2, r3
 8010032:	4b8e      	ldr	r3, [pc, #568]	; (801026c <tcp_receive+0xbe4>)
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	441a      	add	r2, r3
 8010038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801003a:	68db      	ldr	r3, [r3, #12]
 801003c:	685b      	ldr	r3, [r3, #4]
 801003e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010040:	8909      	ldrh	r1, [r1, #8]
 8010042:	440b      	add	r3, r1
 8010044:	1ad3      	subs	r3, r2, r3
            while (next &&
 8010046:	2b00      	cmp	r3, #0
 8010048:	da9e      	bge.n	800ff88 <tcp_receive+0x900>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801004a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801004c:	2b00      	cmp	r3, #0
 801004e:	d057      	beq.n	8010100 <tcp_receive+0xa78>
                TCP_SEQ_GT(seqno + tcplen,
 8010050:	4b85      	ldr	r3, [pc, #532]	; (8010268 <tcp_receive+0xbe0>)
 8010052:	881b      	ldrh	r3, [r3, #0]
 8010054:	461a      	mov	r2, r3
 8010056:	4b85      	ldr	r3, [pc, #532]	; (801026c <tcp_receive+0xbe4>)
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	441a      	add	r2, r3
 801005c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005e:	68db      	ldr	r3, [r3, #12]
 8010060:	685b      	ldr	r3, [r3, #4]
 8010062:	1ad3      	subs	r3, r2, r3
            if (next &&
 8010064:	2b00      	cmp	r3, #0
 8010066:	dd4b      	ble.n	8010100 <tcp_receive+0xa78>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010068:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801006a:	68db      	ldr	r3, [r3, #12]
 801006c:	685b      	ldr	r3, [r3, #4]
 801006e:	b29a      	uxth	r2, r3
 8010070:	4b7e      	ldr	r3, [pc, #504]	; (801026c <tcp_receive+0xbe4>)
 8010072:	681b      	ldr	r3, [r3, #0]
 8010074:	b29b      	uxth	r3, r3
 8010076:	1ad3      	subs	r3, r2, r3
 8010078:	b29a      	uxth	r2, r3
 801007a:	4b7d      	ldr	r3, [pc, #500]	; (8010270 <tcp_receive+0xbe8>)
 801007c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801007e:	4b7c      	ldr	r3, [pc, #496]	; (8010270 <tcp_receive+0xbe8>)
 8010080:	68db      	ldr	r3, [r3, #12]
 8010082:	899b      	ldrh	r3, [r3, #12]
 8010084:	b29b      	uxth	r3, r3
 8010086:	4618      	mov	r0, r3
 8010088:	f7f8 ffb8 	bl	8008ffc <lwip_htons>
 801008c:	4603      	mov	r3, r0
 801008e:	f003 0302 	and.w	r3, r3, #2
 8010092:	2b00      	cmp	r3, #0
 8010094:	d005      	beq.n	80100a2 <tcp_receive+0xa1a>
                inseg.len -= 1;
 8010096:	4b76      	ldr	r3, [pc, #472]	; (8010270 <tcp_receive+0xbe8>)
 8010098:	891b      	ldrh	r3, [r3, #8]
 801009a:	3b01      	subs	r3, #1
 801009c:	b29a      	uxth	r2, r3
 801009e:	4b74      	ldr	r3, [pc, #464]	; (8010270 <tcp_receive+0xbe8>)
 80100a0:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80100a2:	4b73      	ldr	r3, [pc, #460]	; (8010270 <tcp_receive+0xbe8>)
 80100a4:	685a      	ldr	r2, [r3, #4]
 80100a6:	4b72      	ldr	r3, [pc, #456]	; (8010270 <tcp_receive+0xbe8>)
 80100a8:	891b      	ldrh	r3, [r3, #8]
 80100aa:	4619      	mov	r1, r3
 80100ac:	4610      	mov	r0, r2
 80100ae:	f7fc f8ef 	bl	800c290 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80100b2:	4b6f      	ldr	r3, [pc, #444]	; (8010270 <tcp_receive+0xbe8>)
 80100b4:	891c      	ldrh	r4, [r3, #8]
 80100b6:	4b6e      	ldr	r3, [pc, #440]	; (8010270 <tcp_receive+0xbe8>)
 80100b8:	68db      	ldr	r3, [r3, #12]
 80100ba:	899b      	ldrh	r3, [r3, #12]
 80100bc:	b29b      	uxth	r3, r3
 80100be:	4618      	mov	r0, r3
 80100c0:	f7f8 ff9c 	bl	8008ffc <lwip_htons>
 80100c4:	4603      	mov	r3, r0
 80100c6:	f003 0303 	and.w	r3, r3, #3
 80100ca:	2b00      	cmp	r3, #0
 80100cc:	d001      	beq.n	80100d2 <tcp_receive+0xa4a>
 80100ce:	2301      	movs	r3, #1
 80100d0:	e000      	b.n	80100d4 <tcp_receive+0xa4c>
 80100d2:	2300      	movs	r3, #0
 80100d4:	4423      	add	r3, r4
 80100d6:	b29a      	uxth	r2, r3
 80100d8:	4b63      	ldr	r3, [pc, #396]	; (8010268 <tcp_receive+0xbe0>)
 80100da:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80100dc:	4b62      	ldr	r3, [pc, #392]	; (8010268 <tcp_receive+0xbe0>)
 80100de:	881b      	ldrh	r3, [r3, #0]
 80100e0:	461a      	mov	r2, r3
 80100e2:	4b62      	ldr	r3, [pc, #392]	; (801026c <tcp_receive+0xbe4>)
 80100e4:	681b      	ldr	r3, [r3, #0]
 80100e6:	441a      	add	r2, r3
 80100e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100ea:	68db      	ldr	r3, [r3, #12]
 80100ec:	685b      	ldr	r3, [r3, #4]
 80100ee:	429a      	cmp	r2, r3
 80100f0:	d006      	beq.n	8010100 <tcp_receive+0xa78>
 80100f2:	4b60      	ldr	r3, [pc, #384]	; (8010274 <tcp_receive+0xbec>)
 80100f4:	f240 52af 	movw	r2, #1455	; 0x5af
 80100f8:	495f      	ldr	r1, [pc, #380]	; (8010278 <tcp_receive+0xbf0>)
 80100fa:	4860      	ldr	r0, [pc, #384]	; (801027c <tcp_receive+0xbf4>)
 80100fc:	f005 fe6a 	bl	8015dd4 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010104:	671a      	str	r2, [r3, #112]	; 0x70
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010106:	4b58      	ldr	r3, [pc, #352]	; (8010268 <tcp_receive+0xbe0>)
 8010108:	881b      	ldrh	r3, [r3, #0]
 801010a:	461a      	mov	r2, r3
 801010c:	4b57      	ldr	r3, [pc, #348]	; (801026c <tcp_receive+0xbe4>)
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	441a      	add	r2, r3
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010116:	687b      	ldr	r3, [r7, #4]
 8010118:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801011a:	4b53      	ldr	r3, [pc, #332]	; (8010268 <tcp_receive+0xbe0>)
 801011c:	881b      	ldrh	r3, [r3, #0]
 801011e:	429a      	cmp	r2, r3
 8010120:	d206      	bcs.n	8010130 <tcp_receive+0xaa8>
 8010122:	4b54      	ldr	r3, [pc, #336]	; (8010274 <tcp_receive+0xbec>)
 8010124:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8010128:	4955      	ldr	r1, [pc, #340]	; (8010280 <tcp_receive+0xbf8>)
 801012a:	4854      	ldr	r0, [pc, #336]	; (801027c <tcp_receive+0xbf4>)
 801012c:	f005 fe52 	bl	8015dd4 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010134:	4b4c      	ldr	r3, [pc, #304]	; (8010268 <tcp_receive+0xbe0>)
 8010136:	881b      	ldrh	r3, [r3, #0]
 8010138:	1ad3      	subs	r3, r2, r3
 801013a:	b29a      	uxth	r2, r3
 801013c:	687b      	ldr	r3, [r7, #4]
 801013e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8010140:	6878      	ldr	r0, [r7, #4]
 8010142:	f7fd f8db 	bl	800d2fc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010146:	4b4a      	ldr	r3, [pc, #296]	; (8010270 <tcp_receive+0xbe8>)
 8010148:	685b      	ldr	r3, [r3, #4]
 801014a:	891b      	ldrh	r3, [r3, #8]
 801014c:	2b00      	cmp	r3, #0
 801014e:	d006      	beq.n	801015e <tcp_receive+0xad6>
          recv_data = inseg.p;
 8010150:	4b47      	ldr	r3, [pc, #284]	; (8010270 <tcp_receive+0xbe8>)
 8010152:	685b      	ldr	r3, [r3, #4]
 8010154:	4a4b      	ldr	r2, [pc, #300]	; (8010284 <tcp_receive+0xbfc>)
 8010156:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010158:	4b45      	ldr	r3, [pc, #276]	; (8010270 <tcp_receive+0xbe8>)
 801015a:	2200      	movs	r2, #0
 801015c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801015e:	4b44      	ldr	r3, [pc, #272]	; (8010270 <tcp_receive+0xbe8>)
 8010160:	68db      	ldr	r3, [r3, #12]
 8010162:	899b      	ldrh	r3, [r3, #12]
 8010164:	b29b      	uxth	r3, r3
 8010166:	4618      	mov	r0, r3
 8010168:	f7f8 ff48 	bl	8008ffc <lwip_htons>
 801016c:	4603      	mov	r3, r0
 801016e:	f003 0301 	and.w	r3, r3, #1
 8010172:	2b00      	cmp	r3, #0
 8010174:	f000 80b4 	beq.w	80102e0 <tcp_receive+0xc58>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010178:	4b43      	ldr	r3, [pc, #268]	; (8010288 <tcp_receive+0xc00>)
 801017a:	781b      	ldrb	r3, [r3, #0]
 801017c:	f043 0320 	orr.w	r3, r3, #32
 8010180:	b2da      	uxtb	r2, r3
 8010182:	4b41      	ldr	r3, [pc, #260]	; (8010288 <tcp_receive+0xc00>)
 8010184:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8010186:	e0ab      	b.n	80102e0 <tcp_receive+0xc58>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          cseg = pcb->ooseq;
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801018c:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010192:	68db      	ldr	r3, [r3, #12]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	4a35      	ldr	r2, [pc, #212]	; (801026c <tcp_receive+0xbe4>)
 8010198:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801019a:	68bb      	ldr	r3, [r7, #8]
 801019c:	891b      	ldrh	r3, [r3, #8]
 801019e:	461c      	mov	r4, r3
 80101a0:	68bb      	ldr	r3, [r7, #8]
 80101a2:	68db      	ldr	r3, [r3, #12]
 80101a4:	899b      	ldrh	r3, [r3, #12]
 80101a6:	b29b      	uxth	r3, r3
 80101a8:	4618      	mov	r0, r3
 80101aa:	f7f8 ff27 	bl	8008ffc <lwip_htons>
 80101ae:	4603      	mov	r3, r0
 80101b0:	f003 0303 	and.w	r3, r3, #3
 80101b4:	2b00      	cmp	r3, #0
 80101b6:	d001      	beq.n	80101bc <tcp_receive+0xb34>
 80101b8:	2301      	movs	r3, #1
 80101ba:	e000      	b.n	80101be <tcp_receive+0xb36>
 80101bc:	2300      	movs	r3, #0
 80101be:	4423      	add	r3, r4
 80101c0:	687a      	ldr	r2, [r7, #4]
 80101c2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80101c4:	441a      	add	r2, r3
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80101ca:	687b      	ldr	r3, [r7, #4]
 80101cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80101ce:	461c      	mov	r4, r3
 80101d0:	68bb      	ldr	r3, [r7, #8]
 80101d2:	891b      	ldrh	r3, [r3, #8]
 80101d4:	461d      	mov	r5, r3
 80101d6:	68bb      	ldr	r3, [r7, #8]
 80101d8:	68db      	ldr	r3, [r3, #12]
 80101da:	899b      	ldrh	r3, [r3, #12]
 80101dc:	b29b      	uxth	r3, r3
 80101de:	4618      	mov	r0, r3
 80101e0:	f7f8 ff0c 	bl	8008ffc <lwip_htons>
 80101e4:	4603      	mov	r3, r0
 80101e6:	f003 0303 	and.w	r3, r3, #3
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d001      	beq.n	80101f2 <tcp_receive+0xb6a>
 80101ee:	2301      	movs	r3, #1
 80101f0:	e000      	b.n	80101f4 <tcp_receive+0xb6c>
 80101f2:	2300      	movs	r3, #0
 80101f4:	442b      	add	r3, r5
 80101f6:	429c      	cmp	r4, r3
 80101f8:	d206      	bcs.n	8010208 <tcp_receive+0xb80>
 80101fa:	4b1e      	ldr	r3, [pc, #120]	; (8010274 <tcp_receive+0xbec>)
 80101fc:	f240 52de 	movw	r2, #1502	; 0x5de
 8010200:	4922      	ldr	r1, [pc, #136]	; (801028c <tcp_receive+0xc04>)
 8010202:	481e      	ldr	r0, [pc, #120]	; (801027c <tcp_receive+0xbf4>)
 8010204:	f005 fde6 	bl	8015dd4 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8010208:	68bb      	ldr	r3, [r7, #8]
 801020a:	891b      	ldrh	r3, [r3, #8]
 801020c:	461c      	mov	r4, r3
 801020e:	68bb      	ldr	r3, [r7, #8]
 8010210:	68db      	ldr	r3, [r3, #12]
 8010212:	899b      	ldrh	r3, [r3, #12]
 8010214:	b29b      	uxth	r3, r3
 8010216:	4618      	mov	r0, r3
 8010218:	f7f8 fef0 	bl	8008ffc <lwip_htons>
 801021c:	4603      	mov	r3, r0
 801021e:	f003 0303 	and.w	r3, r3, #3
 8010222:	2b00      	cmp	r3, #0
 8010224:	d001      	beq.n	801022a <tcp_receive+0xba2>
 8010226:	2301      	movs	r3, #1
 8010228:	e000      	b.n	801022c <tcp_receive+0xba4>
 801022a:	2300      	movs	r3, #0
 801022c:	18e1      	adds	r1, r4, r3
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010232:	b28b      	uxth	r3, r1
 8010234:	1ad3      	subs	r3, r2, r3
 8010236:	b29a      	uxth	r2, r3
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f7fd f85d 	bl	800d2fc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010242:	68bb      	ldr	r3, [r7, #8]
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	891b      	ldrh	r3, [r3, #8]
 8010248:	2b00      	cmp	r3, #0
 801024a:	d028      	beq.n	801029e <tcp_receive+0xc16>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801024c:	4b0d      	ldr	r3, [pc, #52]	; (8010284 <tcp_receive+0xbfc>)
 801024e:	681b      	ldr	r3, [r3, #0]
 8010250:	2b00      	cmp	r3, #0
 8010252:	d01d      	beq.n	8010290 <tcp_receive+0xc08>
              pbuf_cat(recv_data, cseg->p);
 8010254:	4b0b      	ldr	r3, [pc, #44]	; (8010284 <tcp_receive+0xbfc>)
 8010256:	681a      	ldr	r2, [r3, #0]
 8010258:	68bb      	ldr	r3, [r7, #8]
 801025a:	685b      	ldr	r3, [r3, #4]
 801025c:	4619      	mov	r1, r3
 801025e:	4610      	mov	r0, r2
 8010260:	f7fc fa64 	bl	800c72c <pbuf_cat>
 8010264:	e018      	b.n	8010298 <tcp_receive+0xc10>
 8010266:	bf00      	nop
 8010268:	2000413e 	.word	0x2000413e
 801026c:	20004134 	.word	0x20004134
 8010270:	20004114 	.word	0x20004114
 8010274:	080199cc 	.word	0x080199cc
 8010278:	08019cd0 	.word	0x08019cd0
 801027c:	08019a10 	.word	0x08019a10
 8010280:	08019d0c 	.word	0x08019d0c
 8010284:	20004144 	.word	0x20004144
 8010288:	20004141 	.word	0x20004141
 801028c:	08019d2c 	.word	0x08019d2c
            } else {
              recv_data = cseg->p;
 8010290:	68bb      	ldr	r3, [r7, #8]
 8010292:	685b      	ldr	r3, [r3, #4]
 8010294:	4a71      	ldr	r2, [pc, #452]	; (801045c <tcp_receive+0xdd4>)
 8010296:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8010298:	68bb      	ldr	r3, [r7, #8]
 801029a:	2200      	movs	r2, #0
 801029c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801029e:	68bb      	ldr	r3, [r7, #8]
 80102a0:	68db      	ldr	r3, [r3, #12]
 80102a2:	899b      	ldrh	r3, [r3, #12]
 80102a4:	b29b      	uxth	r3, r3
 80102a6:	4618      	mov	r0, r3
 80102a8:	f7f8 fea8 	bl	8008ffc <lwip_htons>
 80102ac:	4603      	mov	r3, r0
 80102ae:	f003 0301 	and.w	r3, r3, #1
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	d00d      	beq.n	80102d2 <tcp_receive+0xc4a>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80102b6:	4b6a      	ldr	r3, [pc, #424]	; (8010460 <tcp_receive+0xdd8>)
 80102b8:	781b      	ldrb	r3, [r3, #0]
 80102ba:	f043 0320 	orr.w	r3, r3, #32
 80102be:	b2da      	uxtb	r2, r3
 80102c0:	4b67      	ldr	r3, [pc, #412]	; (8010460 <tcp_receive+0xdd8>)
 80102c2:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80102c4:	687b      	ldr	r3, [r7, #4]
 80102c6:	7d1b      	ldrb	r3, [r3, #20]
 80102c8:	2b04      	cmp	r3, #4
 80102ca:	d102      	bne.n	80102d2 <tcp_receive+0xc4a>
              pcb->state = CLOSE_WAIT;
 80102cc:	687b      	ldr	r3, [r7, #4]
 80102ce:	2207      	movs	r2, #7
 80102d0:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80102d2:	68bb      	ldr	r3, [r7, #8]
 80102d4:	681a      	ldr	r2, [r3, #0]
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	671a      	str	r2, [r3, #112]	; 0x70
          tcp_seg_free(cseg);
 80102da:	68b8      	ldr	r0, [r7, #8]
 80102dc:	f7fd fca3 	bl	800dc26 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80102e0:	687b      	ldr	r3, [r7, #4]
 80102e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d008      	beq.n	80102fa <tcp_receive+0xc72>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102ec:	68db      	ldr	r3, [r3, #12]
 80102ee:	685a      	ldr	r2, [r3, #4]
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80102f4:	429a      	cmp	r2, r3
 80102f6:	f43f af47 	beq.w	8010188 <tcp_receive+0xb00>
        }
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	7e9b      	ldrb	r3, [r3, #26]
 80102fe:	f003 0301 	and.w	r3, r3, #1
 8010302:	2b00      	cmp	r3, #0
 8010304:	d00e      	beq.n	8010324 <tcp_receive+0xc9c>
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	7e9b      	ldrb	r3, [r3, #26]
 801030a:	f023 0301 	bic.w	r3, r3, #1
 801030e:	b2da      	uxtb	r2, r3
 8010310:	687b      	ldr	r3, [r7, #4]
 8010312:	769a      	strb	r2, [r3, #26]
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	7e9b      	ldrb	r3, [r3, #26]
 8010318:	f043 0302 	orr.w	r3, r3, #2
 801031c:	b2da      	uxtb	r2, r3
 801031e:	687b      	ldr	r3, [r7, #4]
 8010320:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010322:	e180      	b.n	8010626 <tcp_receive+0xf9e>
        tcp_ack(pcb);
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	7e9b      	ldrb	r3, [r3, #26]
 8010328:	f043 0301 	orr.w	r3, r3, #1
 801032c:	b2da      	uxtb	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	769a      	strb	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010332:	e178      	b.n	8010626 <tcp_receive+0xf9e>
        }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      } else {
        /* We get here if the incoming segment is out-of-sequence. */
        tcp_send_empty_ack(pcb);
 8010334:	6878      	ldr	r0, [r7, #4]
 8010336:	f001 f8c7 	bl	80114c8 <tcp_send_empty_ack>
#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801033a:	687b      	ldr	r3, [r7, #4]
 801033c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801033e:	2b00      	cmp	r3, #0
 8010340:	d106      	bne.n	8010350 <tcp_receive+0xcc8>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010342:	4848      	ldr	r0, [pc, #288]	; (8010464 <tcp_receive+0xddc>)
 8010344:	f7fd fc87 	bl	800dc56 <tcp_seg_copy>
 8010348:	4602      	mov	r2, r0
 801034a:	687b      	ldr	r3, [r7, #4]
 801034c:	671a      	str	r2, [r3, #112]	; 0x70
      if (pcb->rcv_nxt == seqno) {
 801034e:	e16a      	b.n	8010626 <tcp_receive+0xf9e>

             If the incoming segment has the same sequence number as a
             segment on the ->ooseq queue, we discard the segment that
             contains less data. */

          prev = NULL;
 8010350:	2300      	movs	r3, #0
 8010352:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010358:	62fb      	str	r3, [r7, #44]	; 0x2c
 801035a:	e14f      	b.n	80105fc <tcp_receive+0xf74>
            if (seqno == next->tcphdr->seqno) {
 801035c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801035e:	68db      	ldr	r3, [r3, #12]
 8010360:	685a      	ldr	r2, [r3, #4]
 8010362:	4b41      	ldr	r3, [pc, #260]	; (8010468 <tcp_receive+0xde0>)
 8010364:	681b      	ldr	r3, [r3, #0]
 8010366:	429a      	cmp	r2, r3
 8010368:	d11d      	bne.n	80103a6 <tcp_receive+0xd1e>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801036a:	4b3e      	ldr	r3, [pc, #248]	; (8010464 <tcp_receive+0xddc>)
 801036c:	891a      	ldrh	r2, [r3, #8]
 801036e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010370:	891b      	ldrh	r3, [r3, #8]
 8010372:	429a      	cmp	r2, r3
 8010374:	f240 8147 	bls.w	8010606 <tcp_receive+0xf7e>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                cseg = tcp_seg_copy(&inseg);
 8010378:	483a      	ldr	r0, [pc, #232]	; (8010464 <tcp_receive+0xddc>)
 801037a:	f7fd fc6c 	bl	800dc56 <tcp_seg_copy>
 801037e:	60b8      	str	r0, [r7, #8]
                if (cseg != NULL) {
 8010380:	68bb      	ldr	r3, [r7, #8]
 8010382:	2b00      	cmp	r3, #0
 8010384:	f000 8141 	beq.w	801060a <tcp_receive+0xf82>
                  if (prev != NULL) {
 8010388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801038a:	2b00      	cmp	r3, #0
 801038c:	d003      	beq.n	8010396 <tcp_receive+0xd0e>
                    prev->next = cseg;
 801038e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010390:	68ba      	ldr	r2, [r7, #8]
 8010392:	601a      	str	r2, [r3, #0]
 8010394:	e002      	b.n	801039c <tcp_receive+0xd14>
                  } else {
                    pcb->ooseq = cseg;
 8010396:	687b      	ldr	r3, [r7, #4]
 8010398:	68ba      	ldr	r2, [r7, #8]
 801039a:	671a      	str	r2, [r3, #112]	; 0x70
                  }
                  tcp_oos_insert_segment(cseg, next);
 801039c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801039e:	68b8      	ldr	r0, [r7, #8]
 80103a0:	f7ff f8fc 	bl	800f59c <tcp_oos_insert_segment>
                }
                break;
 80103a4:	e131      	b.n	801060a <tcp_receive+0xf82>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80103a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103a8:	2b00      	cmp	r3, #0
 80103aa:	d117      	bne.n	80103dc <tcp_receive+0xd54>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80103ac:	4b2e      	ldr	r3, [pc, #184]	; (8010468 <tcp_receive+0xde0>)
 80103ae:	681a      	ldr	r2, [r3, #0]
 80103b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	685b      	ldr	r3, [r3, #4]
 80103b6:	1ad3      	subs	r3, r2, r3
 80103b8:	2b00      	cmp	r3, #0
 80103ba:	da57      	bge.n	801046c <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  cseg = tcp_seg_copy(&inseg);
 80103bc:	4829      	ldr	r0, [pc, #164]	; (8010464 <tcp_receive+0xddc>)
 80103be:	f7fd fc4a 	bl	800dc56 <tcp_seg_copy>
 80103c2:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 80103c4:	68bb      	ldr	r3, [r7, #8]
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	f000 8121 	beq.w	801060e <tcp_receive+0xf86>
                    pcb->ooseq = cseg;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	68ba      	ldr	r2, [r7, #8]
 80103d0:	671a      	str	r2, [r3, #112]	; 0x70
                    tcp_oos_insert_segment(cseg, next);
 80103d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80103d4:	68b8      	ldr	r0, [r7, #8]
 80103d6:	f7ff f8e1 	bl	800f59c <tcp_oos_insert_segment>
                  }
                  break;
 80103da:	e118      	b.n	801060e <tcp_receive+0xf86>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno+1, next->tcphdr->seqno-1)) {
 80103dc:	4b22      	ldr	r3, [pc, #136]	; (8010468 <tcp_receive+0xde0>)
 80103de:	681a      	ldr	r2, [r3, #0]
 80103e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80103e2:	68db      	ldr	r3, [r3, #12]
 80103e4:	685b      	ldr	r3, [r3, #4]
 80103e6:	1ad3      	subs	r3, r2, r3
 80103e8:	3b01      	subs	r3, #1
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	db3e      	blt.n	801046c <tcp_receive+0xde4>
 80103ee:	4b1e      	ldr	r3, [pc, #120]	; (8010468 <tcp_receive+0xde0>)
 80103f0:	681a      	ldr	r2, [r3, #0]
 80103f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103f4:	68db      	ldr	r3, [r3, #12]
 80103f6:	685b      	ldr	r3, [r3, #4]
 80103f8:	1ad3      	subs	r3, r2, r3
 80103fa:	3301      	adds	r3, #1
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	dc35      	bgt.n	801046c <tcp_receive+0xde4>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  cseg = tcp_seg_copy(&inseg);
 8010400:	4818      	ldr	r0, [pc, #96]	; (8010464 <tcp_receive+0xddc>)
 8010402:	f7fd fc28 	bl	800dc56 <tcp_seg_copy>
 8010406:	60b8      	str	r0, [r7, #8]
                  if (cseg != NULL) {
 8010408:	68bb      	ldr	r3, [r7, #8]
 801040a:	2b00      	cmp	r3, #0
 801040c:	f000 8101 	beq.w	8010612 <tcp_receive+0xf8a>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010412:	68db      	ldr	r3, [r3, #12]
 8010414:	685b      	ldr	r3, [r3, #4]
 8010416:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010418:	8912      	ldrh	r2, [r2, #8]
 801041a:	441a      	add	r2, r3
 801041c:	4b12      	ldr	r3, [pc, #72]	; (8010468 <tcp_receive+0xde0>)
 801041e:	681b      	ldr	r3, [r3, #0]
 8010420:	1ad3      	subs	r3, r2, r3
 8010422:	2b00      	cmp	r3, #0
 8010424:	dd12      	ble.n	801044c <tcp_receive+0xdc4>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010426:	4b10      	ldr	r3, [pc, #64]	; (8010468 <tcp_receive+0xde0>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	b29a      	uxth	r2, r3
 801042c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801042e:	68db      	ldr	r3, [r3, #12]
 8010430:	685b      	ldr	r3, [r3, #4]
 8010432:	b29b      	uxth	r3, r3
 8010434:	1ad3      	subs	r3, r2, r3
 8010436:	b29a      	uxth	r2, r3
 8010438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801043c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801043e:	685a      	ldr	r2, [r3, #4]
 8010440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010442:	891b      	ldrh	r3, [r3, #8]
 8010444:	4619      	mov	r1, r3
 8010446:	4610      	mov	r0, r2
 8010448:	f7fb ff22 	bl	800c290 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801044c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801044e:	68ba      	ldr	r2, [r7, #8]
 8010450:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010454:	68b8      	ldr	r0, [r7, #8]
 8010456:	f7ff f8a1 	bl	800f59c <tcp_oos_insert_segment>
                  }
                  break;
 801045a:	e0da      	b.n	8010612 <tcp_receive+0xf8a>
 801045c:	20004144 	.word	0x20004144
 8010460:	20004141 	.word	0x20004141
 8010464:	20004114 	.word	0x20004114
 8010468:	20004134 	.word	0x20004134
                }
              }
              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801046c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801046e:	681b      	ldr	r3, [r3, #0]
 8010470:	2b00      	cmp	r3, #0
 8010472:	f040 80be 	bne.w	80105f2 <tcp_receive+0xf6a>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8010476:	4b7b      	ldr	r3, [pc, #492]	; (8010664 <tcp_receive+0xfdc>)
 8010478:	681a      	ldr	r2, [r3, #0]
 801047a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801047c:	68db      	ldr	r3, [r3, #12]
 801047e:	685b      	ldr	r3, [r3, #4]
 8010480:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8010482:	2b00      	cmp	r3, #0
 8010484:	f340 80b5 	ble.w	80105f2 <tcp_receive+0xf6a>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8010488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801048a:	68db      	ldr	r3, [r3, #12]
 801048c:	899b      	ldrh	r3, [r3, #12]
 801048e:	b29b      	uxth	r3, r3
 8010490:	4618      	mov	r0, r3
 8010492:	f7f8 fdb3 	bl	8008ffc <lwip_htons>
 8010496:	4603      	mov	r3, r0
 8010498:	f003 0301 	and.w	r3, r3, #1
 801049c:	2b00      	cmp	r3, #0
 801049e:	f040 80ba 	bne.w	8010616 <tcp_receive+0xf8e>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80104a2:	4871      	ldr	r0, [pc, #452]	; (8010668 <tcp_receive+0xfe0>)
 80104a4:	f7fd fbd7 	bl	800dc56 <tcp_seg_copy>
 80104a8:	4602      	mov	r2, r0
 80104aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ac:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80104ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	f000 80b1 	beq.w	801061a <tcp_receive+0xf92>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80104b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	685b      	ldr	r3, [r3, #4]
 80104be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104c0:	8912      	ldrh	r2, [r2, #8]
 80104c2:	441a      	add	r2, r3
 80104c4:	4b67      	ldr	r3, [pc, #412]	; (8010664 <tcp_receive+0xfdc>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	1ad3      	subs	r3, r2, r3
 80104ca:	2b00      	cmp	r3, #0
 80104cc:	dd12      	ble.n	80104f4 <tcp_receive+0xe6c>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80104ce:	4b65      	ldr	r3, [pc, #404]	; (8010664 <tcp_receive+0xfdc>)
 80104d0:	681b      	ldr	r3, [r3, #0]
 80104d2:	b29a      	uxth	r2, r3
 80104d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104d6:	68db      	ldr	r3, [r3, #12]
 80104d8:	685b      	ldr	r3, [r3, #4]
 80104da:	b29b      	uxth	r3, r3
 80104dc:	1ad3      	subs	r3, r2, r3
 80104de:	b29a      	uxth	r2, r3
 80104e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 80104e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104e6:	685a      	ldr	r2, [r3, #4]
 80104e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104ea:	891b      	ldrh	r3, [r3, #8]
 80104ec:	4619      	mov	r1, r3
 80104ee:	4610      	mov	r0, r2
 80104f0:	f7fb fece 	bl	800c290 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80104f4:	4b5d      	ldr	r3, [pc, #372]	; (801066c <tcp_receive+0xfe4>)
 80104f6:	881b      	ldrh	r3, [r3, #0]
 80104f8:	461a      	mov	r2, r3
 80104fa:	4b5a      	ldr	r3, [pc, #360]	; (8010664 <tcp_receive+0xfdc>)
 80104fc:	681b      	ldr	r3, [r3, #0]
 80104fe:	441a      	add	r2, r3
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010504:	6879      	ldr	r1, [r7, #4]
 8010506:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010508:	440b      	add	r3, r1
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	2b00      	cmp	r3, #0
 801050e:	f340 8084 	ble.w	801061a <tcp_receive+0xf92>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	68db      	ldr	r3, [r3, #12]
 8010518:	899b      	ldrh	r3, [r3, #12]
 801051a:	b29b      	uxth	r3, r3
 801051c:	4618      	mov	r0, r3
 801051e:	f7f8 fd6d 	bl	8008ffc <lwip_htons>
 8010522:	4603      	mov	r3, r0
 8010524:	f003 0301 	and.w	r3, r3, #1
 8010528:	2b00      	cmp	r3, #0
 801052a:	d01d      	beq.n	8010568 <tcp_receive+0xee0>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801052c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801052e:	681b      	ldr	r3, [r3, #0]
 8010530:	68dc      	ldr	r4, [r3, #12]
 8010532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	68db      	ldr	r3, [r3, #12]
 8010538:	899b      	ldrh	r3, [r3, #12]
 801053a:	b29b      	uxth	r3, r3
 801053c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010540:	b29d      	uxth	r5, r3
 8010542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010544:	681b      	ldr	r3, [r3, #0]
 8010546:	68db      	ldr	r3, [r3, #12]
 8010548:	899b      	ldrh	r3, [r3, #12]
 801054a:	b29b      	uxth	r3, r3
 801054c:	4618      	mov	r0, r3
 801054e:	f7f8 fd55 	bl	8008ffc <lwip_htons>
 8010552:	4603      	mov	r3, r0
 8010554:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010558:	b29b      	uxth	r3, r3
 801055a:	4618      	mov	r0, r3
 801055c:	f7f8 fd4e 	bl	8008ffc <lwip_htons>
 8010560:	4603      	mov	r3, r0
 8010562:	432b      	orrs	r3, r5
 8010564:	b29b      	uxth	r3, r3
 8010566:	81a3      	strh	r3, [r4, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801056a:	681b      	ldr	r3, [r3, #0]
 801056c:	687a      	ldr	r2, [r7, #4]
 801056e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010570:	b291      	uxth	r1, r2
 8010572:	687a      	ldr	r2, [r7, #4]
 8010574:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8010576:	440a      	add	r2, r1
 8010578:	b291      	uxth	r1, r2
 801057a:	4a3a      	ldr	r2, [pc, #232]	; (8010664 <tcp_receive+0xfdc>)
 801057c:	6812      	ldr	r2, [r2, #0]
 801057e:	b292      	uxth	r2, r2
 8010580:	1a8a      	subs	r2, r1, r2
 8010582:	b292      	uxth	r2, r2
 8010584:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010588:	681b      	ldr	r3, [r3, #0]
 801058a:	685a      	ldr	r2, [r3, #4]
 801058c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	891b      	ldrh	r3, [r3, #8]
 8010592:	4619      	mov	r1, r3
 8010594:	4610      	mov	r0, r2
 8010596:	f7fb fe7b 	bl	800c290 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801059a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801059c:	681b      	ldr	r3, [r3, #0]
 801059e:	891c      	ldrh	r4, [r3, #8]
 80105a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105a2:	681b      	ldr	r3, [r3, #0]
 80105a4:	68db      	ldr	r3, [r3, #12]
 80105a6:	899b      	ldrh	r3, [r3, #12]
 80105a8:	b29b      	uxth	r3, r3
 80105aa:	4618      	mov	r0, r3
 80105ac:	f7f8 fd26 	bl	8008ffc <lwip_htons>
 80105b0:	4603      	mov	r3, r0
 80105b2:	f003 0303 	and.w	r3, r3, #3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <tcp_receive+0xf36>
 80105ba:	2301      	movs	r3, #1
 80105bc:	e000      	b.n	80105c0 <tcp_receive+0xf38>
 80105be:	2300      	movs	r3, #0
 80105c0:	4423      	add	r3, r4
 80105c2:	b29a      	uxth	r2, r3
 80105c4:	4b29      	ldr	r3, [pc, #164]	; (801066c <tcp_receive+0xfe4>)
 80105c6:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 80105c8:	4b28      	ldr	r3, [pc, #160]	; (801066c <tcp_receive+0xfe4>)
 80105ca:	881b      	ldrh	r3, [r3, #0]
 80105cc:	461a      	mov	r2, r3
 80105ce:	4b25      	ldr	r3, [pc, #148]	; (8010664 <tcp_receive+0xfdc>)
 80105d0:	681b      	ldr	r3, [r3, #0]
 80105d2:	441a      	add	r2, r3
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80105d8:	6879      	ldr	r1, [r7, #4]
 80105da:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80105dc:	440b      	add	r3, r1
 80105de:	429a      	cmp	r2, r3
 80105e0:	d01b      	beq.n	801061a <tcp_receive+0xf92>
 80105e2:	4b23      	ldr	r3, [pc, #140]	; (8010670 <tcp_receive+0xfe8>)
 80105e4:	f240 627b 	movw	r2, #1659	; 0x67b
 80105e8:	4922      	ldr	r1, [pc, #136]	; (8010674 <tcp_receive+0xfec>)
 80105ea:	4823      	ldr	r0, [pc, #140]	; (8010678 <tcp_receive+0xff0>)
 80105ec:	f005 fbf2 	bl	8015dd4 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80105f0:	e013      	b.n	801061a <tcp_receive+0xf92>
              }
            }
            prev = next;
 80105f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f4:	62bb      	str	r3, [r7, #40]	; 0x28
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80105f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105f8:	681b      	ldr	r3, [r3, #0]
 80105fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80105fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80105fe:	2b00      	cmp	r3, #0
 8010600:	f47f aeac 	bne.w	801035c <tcp_receive+0xcd4>
      if (pcb->rcv_nxt == seqno) {
 8010604:	e00f      	b.n	8010626 <tcp_receive+0xf9e>
                break;
 8010606:	bf00      	nop
 8010608:	e00d      	b.n	8010626 <tcp_receive+0xf9e>
                break;
 801060a:	bf00      	nop
 801060c:	e00b      	b.n	8010626 <tcp_receive+0xf9e>
                  break;
 801060e:	bf00      	nop
 8010610:	e009      	b.n	8010626 <tcp_receive+0xf9e>
                  break;
 8010612:	bf00      	nop
 8010614:	e007      	b.n	8010626 <tcp_receive+0xf9e>
                  break;
 8010616:	bf00      	nop
 8010618:	e005      	b.n	8010626 <tcp_receive+0xf9e>
                break;
 801061a:	bf00      	nop
      if (pcb->rcv_nxt == seqno) {
 801061c:	e003      	b.n	8010626 <tcp_receive+0xf9e>
#endif /* TCP_OOSEQ_MAX_BYTES || TCP_OOSEQ_MAX_PBUFS */
#endif /* TCP_QUEUE_OOSEQ */
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801061e:	6878      	ldr	r0, [r7, #4]
 8010620:	f000 ff52 	bl	80114c8 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010624:	e01a      	b.n	801065c <tcp_receive+0xfd4>
 8010626:	e019      	b.n	801065c <tcp_receive+0xfd4>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010628:	4b0e      	ldr	r3, [pc, #56]	; (8010664 <tcp_receive+0xfdc>)
 801062a:	681a      	ldr	r2, [r3, #0]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010630:	1ad3      	subs	r3, r2, r3
 8010632:	2b00      	cmp	r3, #0
 8010634:	db0a      	blt.n	801064c <tcp_receive+0xfc4>
 8010636:	4b0b      	ldr	r3, [pc, #44]	; (8010664 <tcp_receive+0xfdc>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801063e:	6879      	ldr	r1, [r7, #4]
 8010640:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010642:	440b      	add	r3, r1
 8010644:	1ad3      	subs	r3, r2, r3
 8010646:	3301      	adds	r3, #1
 8010648:	2b00      	cmp	r3, #0
 801064a:	dd07      	ble.n	801065c <tcp_receive+0xfd4>
      tcp_ack_now(pcb);
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	7e9b      	ldrb	r3, [r3, #26]
 8010650:	f043 0302 	orr.w	r3, r3, #2
 8010654:	b2da      	uxtb	r2, r3
 8010656:	687b      	ldr	r3, [r7, #4]
 8010658:	769a      	strb	r2, [r3, #26]
    }
  }
}
 801065a:	e7ff      	b.n	801065c <tcp_receive+0xfd4>
 801065c:	bf00      	nop
 801065e:	3734      	adds	r7, #52	; 0x34
 8010660:	46bd      	mov	sp, r7
 8010662:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010664:	20004134 	.word	0x20004134
 8010668:	20004114 	.word	0x20004114
 801066c:	2000413e 	.word	0x2000413e
 8010670:	080199cc 	.word	0x080199cc
 8010674:	08019c98 	.word	0x08019c98
 8010678:	08019a10 	.word	0x08019a10

0801067c <tcp_getoptbyte>:

static u8_t
tcp_getoptbyte(void)
{
 801067c:	b480      	push	{r7}
 801067e:	b083      	sub	sp, #12
 8010680:	af00      	add	r7, sp, #0
  if ((tcphdr_opt2 == NULL) || (tcp_optidx < tcphdr_opt1len)) {
 8010682:	4b18      	ldr	r3, [pc, #96]	; (80106e4 <tcp_getoptbyte+0x68>)
 8010684:	681b      	ldr	r3, [r3, #0]
 8010686:	2b00      	cmp	r3, #0
 8010688:	d005      	beq.n	8010696 <tcp_getoptbyte+0x1a>
 801068a:	4b17      	ldr	r3, [pc, #92]	; (80106e8 <tcp_getoptbyte+0x6c>)
 801068c:	881a      	ldrh	r2, [r3, #0]
 801068e:	4b17      	ldr	r3, [pc, #92]	; (80106ec <tcp_getoptbyte+0x70>)
 8010690:	881b      	ldrh	r3, [r3, #0]
 8010692:	429a      	cmp	r2, r3
 8010694:	d20e      	bcs.n	80106b4 <tcp_getoptbyte+0x38>
    u8_t* opts = (u8_t *)tcphdr + TCP_HLEN;
 8010696:	4b16      	ldr	r3, [pc, #88]	; (80106f0 <tcp_getoptbyte+0x74>)
 8010698:	681b      	ldr	r3, [r3, #0]
 801069a:	3314      	adds	r3, #20
 801069c:	603b      	str	r3, [r7, #0]
    return opts[tcp_optidx++];
 801069e:	4b12      	ldr	r3, [pc, #72]	; (80106e8 <tcp_getoptbyte+0x6c>)
 80106a0:	881b      	ldrh	r3, [r3, #0]
 80106a2:	1c5a      	adds	r2, r3, #1
 80106a4:	b291      	uxth	r1, r2
 80106a6:	4a10      	ldr	r2, [pc, #64]	; (80106e8 <tcp_getoptbyte+0x6c>)
 80106a8:	8011      	strh	r1, [r2, #0]
 80106aa:	461a      	mov	r2, r3
 80106ac:	683b      	ldr	r3, [r7, #0]
 80106ae:	4413      	add	r3, r2
 80106b0:	781b      	ldrb	r3, [r3, #0]
 80106b2:	e010      	b.n	80106d6 <tcp_getoptbyte+0x5a>
  } else {
    u8_t idx = (u8_t)(tcp_optidx++ - tcphdr_opt1len);
 80106b4:	4b0c      	ldr	r3, [pc, #48]	; (80106e8 <tcp_getoptbyte+0x6c>)
 80106b6:	881b      	ldrh	r3, [r3, #0]
 80106b8:	1c5a      	adds	r2, r3, #1
 80106ba:	b291      	uxth	r1, r2
 80106bc:	4a0a      	ldr	r2, [pc, #40]	; (80106e8 <tcp_getoptbyte+0x6c>)
 80106be:	8011      	strh	r1, [r2, #0]
 80106c0:	b2da      	uxtb	r2, r3
 80106c2:	4b0a      	ldr	r3, [pc, #40]	; (80106ec <tcp_getoptbyte+0x70>)
 80106c4:	881b      	ldrh	r3, [r3, #0]
 80106c6:	b2db      	uxtb	r3, r3
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	71fb      	strb	r3, [r7, #7]
    return tcphdr_opt2[idx];
 80106cc:	4b05      	ldr	r3, [pc, #20]	; (80106e4 <tcp_getoptbyte+0x68>)
 80106ce:	681a      	ldr	r2, [r3, #0]
 80106d0:	79fb      	ldrb	r3, [r7, #7]
 80106d2:	4413      	add	r3, r2
 80106d4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80106d6:	4618      	mov	r0, r3
 80106d8:	370c      	adds	r7, #12
 80106da:	46bd      	mov	sp, r7
 80106dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106e0:	4770      	bx	lr
 80106e2:	bf00      	nop
 80106e4:	2000412c 	.word	0x2000412c
 80106e8:	20004130 	.word	0x20004130
 80106ec:	2000412a 	.word	0x2000412a
 80106f0:	20004124 	.word	0x20004124

080106f4 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80106f4:	b580      	push	{r7, lr}
 80106f6:	b084      	sub	sp, #16
 80106f8:	af00      	add	r7, sp, #0
 80106fa:	6078      	str	r0, [r7, #4]
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80106fc:	4b2d      	ldr	r3, [pc, #180]	; (80107b4 <tcp_parseopt+0xc0>)
 80106fe:	881b      	ldrh	r3, [r3, #0]
 8010700:	2b00      	cmp	r3, #0
 8010702:	d053      	beq.n	80107ac <tcp_parseopt+0xb8>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010704:	4b2c      	ldr	r3, [pc, #176]	; (80107b8 <tcp_parseopt+0xc4>)
 8010706:	2200      	movs	r2, #0
 8010708:	801a      	strh	r2, [r3, #0]
 801070a:	e043      	b.n	8010794 <tcp_parseopt+0xa0>
      u8_t opt = tcp_getoptbyte();
 801070c:	f7ff ffb6 	bl	801067c <tcp_getoptbyte>
 8010710:	4603      	mov	r3, r0
 8010712:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010714:	7bfb      	ldrb	r3, [r7, #15]
 8010716:	2b01      	cmp	r3, #1
 8010718:	d03c      	beq.n	8010794 <tcp_parseopt+0xa0>
 801071a:	2b02      	cmp	r3, #2
 801071c:	d002      	beq.n	8010724 <tcp_parseopt+0x30>
 801071e:	2b00      	cmp	r3, #0
 8010720:	d03f      	beq.n	80107a2 <tcp_parseopt+0xae>
 8010722:	e026      	b.n	8010772 <tcp_parseopt+0x7e>
        /* NOP option. */
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
        break;
      case LWIP_TCP_OPT_MSS:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
        if (tcp_getoptbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010724:	f7ff ffaa 	bl	801067c <tcp_getoptbyte>
 8010728:	4603      	mov	r3, r0
 801072a:	2b04      	cmp	r3, #4
 801072c:	d13b      	bne.n	80107a6 <tcp_parseopt+0xb2>
 801072e:	4b22      	ldr	r3, [pc, #136]	; (80107b8 <tcp_parseopt+0xc4>)
 8010730:	881b      	ldrh	r3, [r3, #0]
 8010732:	3302      	adds	r3, #2
 8010734:	4a1f      	ldr	r2, [pc, #124]	; (80107b4 <tcp_parseopt+0xc0>)
 8010736:	8812      	ldrh	r2, [r2, #0]
 8010738:	4293      	cmp	r3, r2
 801073a:	dc34      	bgt.n	80107a6 <tcp_parseopt+0xb2>
          /* Bad length */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
          return;
        }
        /* An MSS option with the right option length. */
        mss = (tcp_getoptbyte() << 8);
 801073c:	f7ff ff9e 	bl	801067c <tcp_getoptbyte>
 8010740:	4603      	mov	r3, r0
 8010742:	b29b      	uxth	r3, r3
 8010744:	021b      	lsls	r3, r3, #8
 8010746:	81bb      	strh	r3, [r7, #12]
        mss |= tcp_getoptbyte();
 8010748:	f7ff ff98 	bl	801067c <tcp_getoptbyte>
 801074c:	4603      	mov	r3, r0
 801074e:	b29a      	uxth	r2, r3
 8010750:	89bb      	ldrh	r3, [r7, #12]
 8010752:	4313      	orrs	r3, r2
 8010754:	81bb      	strh	r3, [r7, #12]
        /* Limit the mss to the configured TCP_MSS and prevent division by zero */
        pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010756:	89bb      	ldrh	r3, [r7, #12]
 8010758:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801075c:	d804      	bhi.n	8010768 <tcp_parseopt+0x74>
 801075e:	89bb      	ldrh	r3, [r7, #12]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d001      	beq.n	8010768 <tcp_parseopt+0x74>
 8010764:	89ba      	ldrh	r2, [r7, #12]
 8010766:	e001      	b.n	801076c <tcp_parseopt+0x78>
 8010768:	f44f 7206 	mov.w	r2, #536	; 0x218
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	865a      	strh	r2, [r3, #50]	; 0x32
        break;
 8010770:	e010      	b.n	8010794 <tcp_parseopt+0xa0>
        tcp_optidx += LWIP_TCP_OPT_LEN_TS - 6;
        break;
#endif
      default:
        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
        data = tcp_getoptbyte();
 8010772:	f7ff ff83 	bl	801067c <tcp_getoptbyte>
 8010776:	4603      	mov	r3, r0
 8010778:	72fb      	strb	r3, [r7, #11]
        if (data < 2) {
 801077a:	7afb      	ldrb	r3, [r7, #11]
 801077c:	2b01      	cmp	r3, #1
 801077e:	d914      	bls.n	80107aa <tcp_parseopt+0xb6>
             and we don't process them further. */
          return;
        }
        /* All other options have a length field, so that we easily
           can skip past them. */
        tcp_optidx += data - 2;
 8010780:	7afb      	ldrb	r3, [r7, #11]
 8010782:	b29a      	uxth	r2, r3
 8010784:	4b0c      	ldr	r3, [pc, #48]	; (80107b8 <tcp_parseopt+0xc4>)
 8010786:	881b      	ldrh	r3, [r3, #0]
 8010788:	4413      	add	r3, r2
 801078a:	b29b      	uxth	r3, r3
 801078c:	3b02      	subs	r3, #2
 801078e:	b29a      	uxth	r2, r3
 8010790:	4b09      	ldr	r3, [pc, #36]	; (80107b8 <tcp_parseopt+0xc4>)
 8010792:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010794:	4b08      	ldr	r3, [pc, #32]	; (80107b8 <tcp_parseopt+0xc4>)
 8010796:	881a      	ldrh	r2, [r3, #0]
 8010798:	4b06      	ldr	r3, [pc, #24]	; (80107b4 <tcp_parseopt+0xc0>)
 801079a:	881b      	ldrh	r3, [r3, #0]
 801079c:	429a      	cmp	r2, r3
 801079e:	d3b5      	bcc.n	801070c <tcp_parseopt+0x18>
 80107a0:	e004      	b.n	80107ac <tcp_parseopt+0xb8>
        return;
 80107a2:	bf00      	nop
 80107a4:	e002      	b.n	80107ac <tcp_parseopt+0xb8>
          return;
 80107a6:	bf00      	nop
 80107a8:	e000      	b.n	80107ac <tcp_parseopt+0xb8>
          return;
 80107aa:	bf00      	nop
      }
    }
  }
}
 80107ac:	3710      	adds	r7, #16
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	20004128 	.word	0x20004128
 80107b8:	20004130 	.word	0x20004130

080107bc <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 80107bc:	b480      	push	{r7}
 80107be:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80107c0:	4b05      	ldr	r3, [pc, #20]	; (80107d8 <tcp_trigger_input_pcb_close+0x1c>)
 80107c2:	781b      	ldrb	r3, [r3, #0]
 80107c4:	f043 0310 	orr.w	r3, r3, #16
 80107c8:	b2da      	uxtb	r2, r3
 80107ca:	4b03      	ldr	r3, [pc, #12]	; (80107d8 <tcp_trigger_input_pcb_close+0x1c>)
 80107cc:	701a      	strb	r2, [r3, #0]
}
 80107ce:	bf00      	nop
 80107d0:	46bd      	mov	sp, r7
 80107d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d6:	4770      	bx	lr
 80107d8:	20004141 	.word	0x20004141

080107dc <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                      u32_t seqno_be /* already in network byte order */)
{
 80107dc:	b580      	push	{r7, lr}
 80107de:	b086      	sub	sp, #24
 80107e0:	af00      	add	r7, sp, #0
 80107e2:	60f8      	str	r0, [r7, #12]
 80107e4:	607b      	str	r3, [r7, #4]
 80107e6:	460b      	mov	r3, r1
 80107e8:	817b      	strh	r3, [r7, #10]
 80107ea:	4613      	mov	r3, r2
 80107ec:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80107ee:	897a      	ldrh	r2, [r7, #10]
 80107f0:	893b      	ldrh	r3, [r7, #8]
 80107f2:	4413      	add	r3, r2
 80107f4:	b29b      	uxth	r3, r3
 80107f6:	3314      	adds	r3, #20
 80107f8:	b29b      	uxth	r3, r3
 80107fa:	2200      	movs	r2, #0
 80107fc:	4619      	mov	r1, r3
 80107fe:	2001      	movs	r0, #1
 8010800:	f7fb fb48 	bl	800be94 <pbuf_alloc>
 8010804:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8010806:	697b      	ldr	r3, [r7, #20]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d057      	beq.n	80108bc <tcp_output_alloc_header+0xe0>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801080c:	697b      	ldr	r3, [r7, #20]
 801080e:	895b      	ldrh	r3, [r3, #10]
 8010810:	461a      	mov	r2, r3
 8010812:	897b      	ldrh	r3, [r7, #10]
 8010814:	3314      	adds	r3, #20
 8010816:	429a      	cmp	r2, r3
 8010818:	da05      	bge.n	8010826 <tcp_output_alloc_header+0x4a>
 801081a:	4b2b      	ldr	r3, [pc, #172]	; (80108c8 <tcp_output_alloc_header+0xec>)
 801081c:	2273      	movs	r2, #115	; 0x73
 801081e:	492b      	ldr	r1, [pc, #172]	; (80108cc <tcp_output_alloc_header+0xf0>)
 8010820:	482b      	ldr	r0, [pc, #172]	; (80108d0 <tcp_output_alloc_header+0xf4>)
 8010822:	f005 fad7 	bl	8015dd4 <iprintf>
                 (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8010826:	697b      	ldr	r3, [r7, #20]
 8010828:	685b      	ldr	r3, [r3, #4]
 801082a:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(pcb->local_port);
 801082c:	68fb      	ldr	r3, [r7, #12]
 801082e:	8adb      	ldrh	r3, [r3, #22]
 8010830:	4618      	mov	r0, r3
 8010832:	f7f8 fbe3 	bl	8008ffc <lwip_htons>
 8010836:	4603      	mov	r3, r0
 8010838:	461a      	mov	r2, r3
 801083a:	693b      	ldr	r3, [r7, #16]
 801083c:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(pcb->remote_port);
 801083e:	68fb      	ldr	r3, [r7, #12]
 8010840:	8b1b      	ldrh	r3, [r3, #24]
 8010842:	4618      	mov	r0, r3
 8010844:	f7f8 fbda 	bl	8008ffc <lwip_htons>
 8010848:	4603      	mov	r3, r0
 801084a:	461a      	mov	r2, r3
 801084c:	693b      	ldr	r3, [r7, #16]
 801084e:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8010850:	693b      	ldr	r3, [r7, #16]
 8010852:	687a      	ldr	r2, [r7, #4]
 8010854:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801085a:	4618      	mov	r0, r3
 801085c:	f7f8 fbdc 	bl	8009018 <lwip_htonl>
 8010860:	4602      	mov	r2, r0
 8010862:	693b      	ldr	r3, [r7, #16]
 8010864:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), TCP_ACK);
 8010866:	897b      	ldrh	r3, [r7, #10]
 8010868:	089b      	lsrs	r3, r3, #2
 801086a:	b29b      	uxth	r3, r3
 801086c:	3305      	adds	r3, #5
 801086e:	b29b      	uxth	r3, r3
 8010870:	031b      	lsls	r3, r3, #12
 8010872:	b29b      	uxth	r3, r3
 8010874:	f043 0310 	orr.w	r3, r3, #16
 8010878:	b29b      	uxth	r3, r3
 801087a:	4618      	mov	r0, r3
 801087c:	f7f8 fbbe 	bl	8008ffc <lwip_htons>
 8010880:	4603      	mov	r3, r0
 8010882:	461a      	mov	r2, r3
 8010884:	693b      	ldr	r3, [r7, #16]
 8010886:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8010888:	68fb      	ldr	r3, [r7, #12]
 801088a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801088c:	4618      	mov	r0, r3
 801088e:	f7f8 fbb5 	bl	8008ffc <lwip_htons>
 8010892:	4603      	mov	r3, r0
 8010894:	461a      	mov	r2, r3
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801089a:	693b      	ldr	r3, [r7, #16]
 801089c:	2200      	movs	r2, #0
 801089e:	741a      	strb	r2, [r3, #16]
 80108a0:	2200      	movs	r2, #0
 80108a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	2200      	movs	r2, #0
 80108a8:	749a      	strb	r2, [r3, #18]
 80108aa:	2200      	movs	r2, #0
 80108ac:	74da      	strb	r2, [r3, #19]

    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80108ae:	68fb      	ldr	r3, [r7, #12]
 80108b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80108b2:	68fa      	ldr	r2, [r7, #12]
 80108b4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 80108b6:	441a      	add	r2, r3
 80108b8:	68fb      	ldr	r3, [r7, #12]
 80108ba:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80108bc:	697b      	ldr	r3, [r7, #20]
}
 80108be:	4618      	mov	r0, r3
 80108c0:	3718      	adds	r7, #24
 80108c2:	46bd      	mov	sp, r7
 80108c4:	bd80      	pop	{r7, pc}
 80108c6:	bf00      	nop
 80108c8:	08019d54 	.word	0x08019d54
 80108cc:	08019d88 	.word	0x08019d88
 80108d0:	08019db8 	.word	0x08019db8

080108d4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80108d4:	b5b0      	push	{r4, r5, r7, lr}
 80108d6:	b084      	sub	sp, #16
 80108d8:	af00      	add	r7, sp, #0
 80108da:	6078      	str	r0, [r7, #4]
  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d02c      	beq.n	801093e <tcp_send_fin+0x6a>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80108e4:	687b      	ldr	r3, [r7, #4]
 80108e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80108e8:	60fb      	str	r3, [r7, #12]
 80108ea:	e002      	b.n	80108f2 <tcp_send_fin+0x1e>
         last_unsent = last_unsent->next);
 80108ec:	68fb      	ldr	r3, [r7, #12]
 80108ee:	681b      	ldr	r3, [r3, #0]
 80108f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80108f2:	68fb      	ldr	r3, [r7, #12]
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d1f8      	bne.n	80108ec <tcp_send_fin+0x18>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	68db      	ldr	r3, [r3, #12]
 80108fe:	899b      	ldrh	r3, [r3, #12]
 8010900:	b29b      	uxth	r3, r3
 8010902:	4618      	mov	r0, r3
 8010904:	f7f8 fb7a 	bl	8008ffc <lwip_htons>
 8010908:	4603      	mov	r3, r0
 801090a:	f003 0307 	and.w	r3, r3, #7
 801090e:	2b00      	cmp	r3, #0
 8010910:	d115      	bne.n	801093e <tcp_send_fin+0x6a>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8010912:	68fb      	ldr	r3, [r7, #12]
 8010914:	68dc      	ldr	r4, [r3, #12]
 8010916:	68fb      	ldr	r3, [r7, #12]
 8010918:	68db      	ldr	r3, [r3, #12]
 801091a:	899b      	ldrh	r3, [r3, #12]
 801091c:	b29d      	uxth	r5, r3
 801091e:	2001      	movs	r0, #1
 8010920:	f7f8 fb6c 	bl	8008ffc <lwip_htons>
 8010924:	4603      	mov	r3, r0
 8010926:	432b      	orrs	r3, r5
 8010928:	b29b      	uxth	r3, r3
 801092a:	81a3      	strh	r3, [r4, #12]
      pcb->flags |= TF_FIN;
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	7e9b      	ldrb	r3, [r3, #26]
 8010930:	f043 0320 	orr.w	r3, r3, #32
 8010934:	b2da      	uxtb	r2, r3
 8010936:	687b      	ldr	r3, [r7, #4]
 8010938:	769a      	strb	r2, [r3, #26]
      return ERR_OK;
 801093a:	2300      	movs	r3, #0
 801093c:	e004      	b.n	8010948 <tcp_send_fin+0x74>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801093e:	2101      	movs	r1, #1
 8010940:	6878      	ldr	r0, [r7, #4]
 8010942:	f000 fcc3 	bl	80112cc <tcp_enqueue_flags>
 8010946:	4603      	mov	r3, r0
}
 8010948:	4618      	mov	r0, r3
 801094a:	3710      	adds	r7, #16
 801094c:	46bd      	mov	sp, r7
 801094e:	bdb0      	pop	{r4, r5, r7, pc}

08010950 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(struct tcp_pcb *pcb, struct pbuf *p, u8_t flags, u32_t seqno, u8_t optflags)
{
 8010950:	b590      	push	{r4, r7, lr}
 8010952:	b087      	sub	sp, #28
 8010954:	af00      	add	r7, sp, #0
 8010956:	60f8      	str	r0, [r7, #12]
 8010958:	60b9      	str	r1, [r7, #8]
 801095a:	603b      	str	r3, [r7, #0]
 801095c:	4613      	mov	r3, r2
 801095e:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8010960:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010964:	f003 0301 	and.w	r3, r3, #1
 8010968:	2b00      	cmp	r3, #0
 801096a:	d001      	beq.n	8010970 <tcp_create_segment+0x20>
 801096c:	2304      	movs	r3, #4
 801096e:	e000      	b.n	8010972 <tcp_create_segment+0x22>
 8010970:	2300      	movs	r3, #0
 8010972:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010974:	2003      	movs	r0, #3
 8010976:	f7fb f853 	bl	800ba20 <memp_malloc>
 801097a:	6138      	str	r0, [r7, #16]
 801097c:	693b      	ldr	r3, [r7, #16]
 801097e:	2b00      	cmp	r3, #0
 8010980:	d104      	bne.n	801098c <tcp_create_segment+0x3c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010982:	68b8      	ldr	r0, [r7, #8]
 8010984:	f7fb fdf8 	bl	800c578 <pbuf_free>
    return NULL;
 8010988:	2300      	movs	r3, #0
 801098a:	e061      	b.n	8010a50 <tcp_create_segment+0x100>
  }
  seg->flags = optflags;
 801098c:	693b      	ldr	r3, [r7, #16]
 801098e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010992:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010994:	693b      	ldr	r3, [r7, #16]
 8010996:	2200      	movs	r2, #0
 8010998:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	68ba      	ldr	r2, [r7, #8]
 801099e:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	891a      	ldrh	r2, [r3, #8]
 80109a4:	7dfb      	ldrb	r3, [r7, #23]
 80109a6:	b29b      	uxth	r3, r3
 80109a8:	429a      	cmp	r2, r3
 80109aa:	d205      	bcs.n	80109b8 <tcp_create_segment+0x68>
 80109ac:	4b2a      	ldr	r3, [pc, #168]	; (8010a58 <tcp_create_segment+0x108>)
 80109ae:	22ba      	movs	r2, #186	; 0xba
 80109b0:	492a      	ldr	r1, [pc, #168]	; (8010a5c <tcp_create_segment+0x10c>)
 80109b2:	482b      	ldr	r0, [pc, #172]	; (8010a60 <tcp_create_segment+0x110>)
 80109b4:	f005 fa0e 	bl	8015dd4 <iprintf>
  seg->len = p->tot_len - optlen;
 80109b8:	68bb      	ldr	r3, [r7, #8]
 80109ba:	891a      	ldrh	r2, [r3, #8]
 80109bc:	7dfb      	ldrb	r3, [r7, #23]
 80109be:	b29b      	uxth	r3, r3
 80109c0:	1ad3      	subs	r3, r2, r3
 80109c2:	b29a      	uxth	r2, r3
 80109c4:	693b      	ldr	r3, [r7, #16]
 80109c6:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_header(p, TCP_HLEN)) {
 80109c8:	2114      	movs	r1, #20
 80109ca:	68b8      	ldr	r0, [r7, #8]
 80109cc:	f7fb fdb0 	bl	800c530 <pbuf_header>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d004      	beq.n	80109e0 <tcp_create_segment+0x90>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 80109d6:	6938      	ldr	r0, [r7, #16]
 80109d8:	f7fd f925 	bl	800dc26 <tcp_seg_free>
    return NULL;
 80109dc:	2300      	movs	r3, #0
 80109de:	e037      	b.n	8010a50 <tcp_create_segment+0x100>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	685a      	ldr	r2, [r3, #4]
 80109e6:	693b      	ldr	r3, [r7, #16]
 80109e8:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80109ea:	693b      	ldr	r3, [r7, #16]
 80109ec:	68dc      	ldr	r4, [r3, #12]
 80109ee:	68fb      	ldr	r3, [r7, #12]
 80109f0:	8adb      	ldrh	r3, [r3, #22]
 80109f2:	4618      	mov	r0, r3
 80109f4:	f7f8 fb02 	bl	8008ffc <lwip_htons>
 80109f8:	4603      	mov	r3, r0
 80109fa:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80109fc:	693b      	ldr	r3, [r7, #16]
 80109fe:	68dc      	ldr	r4, [r3, #12]
 8010a00:	68fb      	ldr	r3, [r7, #12]
 8010a02:	8b1b      	ldrh	r3, [r3, #24]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f7f8 faf9 	bl	8008ffc <lwip_htons>
 8010a0a:	4603      	mov	r3, r0
 8010a0c:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010a0e:	693b      	ldr	r3, [r7, #16]
 8010a10:	68dc      	ldr	r4, [r3, #12]
 8010a12:	6838      	ldr	r0, [r7, #0]
 8010a14:	f7f8 fb00 	bl	8009018 <lwip_htonl>
 8010a18:	4603      	mov	r3, r0
 8010a1a:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), flags);
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	68dc      	ldr	r4, [r3, #12]
 8010a20:	7dfb      	ldrb	r3, [r7, #23]
 8010a22:	089b      	lsrs	r3, r3, #2
 8010a24:	b2db      	uxtb	r3, r3
 8010a26:	b29b      	uxth	r3, r3
 8010a28:	3305      	adds	r3, #5
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	031b      	lsls	r3, r3, #12
 8010a2e:	b29a      	uxth	r2, r3
 8010a30:	79fb      	ldrb	r3, [r7, #7]
 8010a32:	b29b      	uxth	r3, r3
 8010a34:	4313      	orrs	r3, r2
 8010a36:	b29b      	uxth	r3, r3
 8010a38:	4618      	mov	r0, r3
 8010a3a:	f7f8 fadf 	bl	8008ffc <lwip_htons>
 8010a3e:	4603      	mov	r3, r0
 8010a40:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010a42:	693b      	ldr	r3, [r7, #16]
 8010a44:	68db      	ldr	r3, [r3, #12]
 8010a46:	2200      	movs	r2, #0
 8010a48:	749a      	strb	r2, [r3, #18]
 8010a4a:	2200      	movs	r2, #0
 8010a4c:	74da      	strb	r2, [r3, #19]
  return seg;
 8010a4e:	693b      	ldr	r3, [r7, #16]
}
 8010a50:	4618      	mov	r0, r3
 8010a52:	371c      	adds	r7, #28
 8010a54:	46bd      	mov	sp, r7
 8010a56:	bd90      	pop	{r4, r7, pc}
 8010a58:	08019d54 	.word	0x08019d54
 8010a5c:	08019de0 	.word	0x08019de0
 8010a60:	08019db8 	.word	0x08019db8

08010a64 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010a64:	b580      	push	{r7, lr}
 8010a66:	b086      	sub	sp, #24
 8010a68:	af00      	add	r7, sp, #0
 8010a6a:	607b      	str	r3, [r7, #4]
 8010a6c:	4603      	mov	r3, r0
 8010a6e:	73fb      	strb	r3, [r7, #15]
 8010a70:	460b      	mov	r3, r1
 8010a72:	81bb      	strh	r3, [r7, #12]
 8010a74:	4613      	mov	r3, r2
 8010a76:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010a78:	89bb      	ldrh	r3, [r7, #12]
 8010a7a:	82fb      	strh	r3, [r7, #22]
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010a7c:	89ba      	ldrh	r2, [r7, #12]
 8010a7e:	897b      	ldrh	r3, [r7, #10]
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d221      	bcs.n	8010ac8 <tcp_pbuf_prealloc+0x64>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a84:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010a88:	f003 0302 	and.w	r3, r3, #2
 8010a8c:	2b00      	cmp	r3, #0
 8010a8e:	d111      	bne.n	8010ab4 <tcp_pbuf_prealloc+0x50>
        (!(pcb->flags & TF_NODELAY) &&
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	7e9b      	ldrb	r3, [r3, #26]
 8010a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d115      	bne.n	8010ac8 <tcp_pbuf_prealloc+0x64>
        (!(pcb->flags & TF_NODELAY) &&
 8010a9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010aa0:	2b00      	cmp	r3, #0
 8010aa2:	d007      	beq.n	8010ab4 <tcp_pbuf_prealloc+0x50>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010aa4:	6a3b      	ldr	r3, [r7, #32]
 8010aa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
         (!first_seg ||
 8010aa8:	2b00      	cmp	r3, #0
 8010aaa:	d103      	bne.n	8010ab4 <tcp_pbuf_prealloc+0x50>
          pcb->unacked != NULL))) {
 8010aac:	6a3b      	ldr	r3, [r7, #32]
 8010aae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
          pcb->unsent != NULL ||
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d009      	beq.n	8010ac8 <tcp_pbuf_prealloc+0x64>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010ab4:	89bb      	ldrh	r3, [r7, #12]
 8010ab6:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010aba:	f023 0203 	bic.w	r2, r3, #3
 8010abe:	897b      	ldrh	r3, [r7, #10]
 8010ac0:	4293      	cmp	r3, r2
 8010ac2:	bf28      	it	cs
 8010ac4:	4613      	movcs	r3, r2
 8010ac6:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010ac8:	8af9      	ldrh	r1, [r7, #22]
 8010aca:	7bfb      	ldrb	r3, [r7, #15]
 8010acc:	2200      	movs	r2, #0
 8010ace:	4618      	mov	r0, r3
 8010ad0:	f7fb f9e0 	bl	800be94 <pbuf_alloc>
 8010ad4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010ad6:	693b      	ldr	r3, [r7, #16]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d101      	bne.n	8010ae0 <tcp_pbuf_prealloc+0x7c>
    return NULL;
 8010adc:	2300      	movs	r3, #0
 8010ade:	e019      	b.n	8010b14 <tcp_pbuf_prealloc+0xb0>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010ae0:	693b      	ldr	r3, [r7, #16]
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	2b00      	cmp	r3, #0
 8010ae6:	d006      	beq.n	8010af6 <tcp_pbuf_prealloc+0x92>
 8010ae8:	4b0c      	ldr	r3, [pc, #48]	; (8010b1c <tcp_pbuf_prealloc+0xb8>)
 8010aea:	f44f 7288 	mov.w	r2, #272	; 0x110
 8010aee:	490c      	ldr	r1, [pc, #48]	; (8010b20 <tcp_pbuf_prealloc+0xbc>)
 8010af0:	480c      	ldr	r0, [pc, #48]	; (8010b24 <tcp_pbuf_prealloc+0xc0>)
 8010af2:	f005 f96f 	bl	8015dd4 <iprintf>
  *oversize = p->len - length;
 8010af6:	693b      	ldr	r3, [r7, #16]
 8010af8:	895a      	ldrh	r2, [r3, #10]
 8010afa:	89bb      	ldrh	r3, [r7, #12]
 8010afc:	1ad3      	subs	r3, r2, r3
 8010afe:	b29a      	uxth	r2, r3
 8010b00:	687b      	ldr	r3, [r7, #4]
 8010b02:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010b04:	693b      	ldr	r3, [r7, #16]
 8010b06:	89ba      	ldrh	r2, [r7, #12]
 8010b08:	811a      	strh	r2, [r3, #8]
 8010b0a:	693b      	ldr	r3, [r7, #16]
 8010b0c:	891a      	ldrh	r2, [r3, #8]
 8010b0e:	693b      	ldr	r3, [r7, #16]
 8010b10:	815a      	strh	r2, [r3, #10]
  return p;
 8010b12:	693b      	ldr	r3, [r7, #16]
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	3718      	adds	r7, #24
 8010b18:	46bd      	mov	sp, r7
 8010b1a:	bd80      	pop	{r7, pc}
 8010b1c:	08019d54 	.word	0x08019d54
 8010b20:	08019df8 	.word	0x08019df8
 8010b24:	08019db8 	.word	0x08019db8

08010b28 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010b28:	b580      	push	{r7, lr}
 8010b2a:	b082      	sub	sp, #8
 8010b2c:	af00      	add	r7, sp, #0
 8010b2e:	6078      	str	r0, [r7, #4]
 8010b30:	460b      	mov	r3, r1
 8010b32:	807b      	strh	r3, [r7, #2]
  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	7d1b      	ldrb	r3, [r3, #20]
 8010b38:	2b04      	cmp	r3, #4
 8010b3a:	d00e      	beq.n	8010b5a <tcp_write_checks+0x32>
      (pcb->state != CLOSE_WAIT) &&
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010b40:	2b07      	cmp	r3, #7
 8010b42:	d00a      	beq.n	8010b5a <tcp_write_checks+0x32>
      (pcb->state != SYN_SENT) &&
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010b48:	2b02      	cmp	r3, #2
 8010b4a:	d006      	beq.n	8010b5a <tcp_write_checks+0x32>
      (pcb->state != SYN_RCVD)) {
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010b50:	2b03      	cmp	r3, #3
 8010b52:	d002      	beq.n	8010b5a <tcp_write_checks+0x32>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010b54:	f06f 030a 	mvn.w	r3, #10
 8010b58:	e04f      	b.n	8010bfa <tcp_write_checks+0xd2>
  } else if (len == 0) {
 8010b5a:	887b      	ldrh	r3, [r7, #2]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d101      	bne.n	8010b64 <tcp_write_checks+0x3c>
    return ERR_OK;
 8010b60:	2300      	movs	r3, #0
 8010b62:	e04a      	b.n	8010bfa <tcp_write_checks+0xd2>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010b64:	687b      	ldr	r3, [r7, #4]
 8010b66:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b6a:	887a      	ldrh	r2, [r7, #2]
 8010b6c:	429a      	cmp	r2, r3
 8010b6e:	d909      	bls.n	8010b84 <tcp_write_checks+0x5c>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
      len, pcb->snd_buf));
    pcb->flags |= TF_NAGLEMEMERR;
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	7e9b      	ldrb	r3, [r3, #26]
 8010b74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010b78:	b2da      	uxtb	r2, r3
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010b7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010b82:	e03a      	b.n	8010bfa <tcp_write_checks+0xd2>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if ((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b8a:	2b08      	cmp	r3, #8
 8010b8c:	d806      	bhi.n	8010b9c <tcp_write_checks+0x74>
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010b94:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8010b98:	4293      	cmp	r3, r2
 8010b9a:	d909      	bls.n	8010bb0 <tcp_write_checks+0x88>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
      pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 8010b9c:	687b      	ldr	r3, [r7, #4]
 8010b9e:	7e9b      	ldrb	r3, [r3, #26]
 8010ba0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8010ba4:	b2da      	uxtb	r2, r3
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8010baa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010bae:	e024      	b.n	8010bfa <tcp_write_checks+0xd2>
  }
  if (pcb->snd_queuelen != 0) {
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d00f      	beq.n	8010bda <tcp_write_checks+0xb2>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8010bba:	687b      	ldr	r3, [r7, #4]
 8010bbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bbe:	2b00      	cmp	r3, #0
 8010bc0:	d11a      	bne.n	8010bf8 <tcp_write_checks+0xd0>
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d116      	bne.n	8010bf8 <tcp_write_checks+0xd0>
 8010bca:	4b0e      	ldr	r3, [pc, #56]	; (8010c04 <tcp_write_checks+0xdc>)
 8010bcc:	f44f 72ab 	mov.w	r2, #342	; 0x156
 8010bd0:	490d      	ldr	r1, [pc, #52]	; (8010c08 <tcp_write_checks+0xe0>)
 8010bd2:	480e      	ldr	r0, [pc, #56]	; (8010c0c <tcp_write_checks+0xe4>)
 8010bd4:	f005 f8fe 	bl	8015dd4 <iprintf>
 8010bd8:	e00e      	b.n	8010bf8 <tcp_write_checks+0xd0>
      pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d103      	bne.n	8010bea <tcp_write_checks+0xc2>
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010be6:	2b00      	cmp	r3, #0
 8010be8:	d006      	beq.n	8010bf8 <tcp_write_checks+0xd0>
 8010bea:	4b06      	ldr	r3, [pc, #24]	; (8010c04 <tcp_write_checks+0xdc>)
 8010bec:	f240 1259 	movw	r2, #345	; 0x159
 8010bf0:	4907      	ldr	r1, [pc, #28]	; (8010c10 <tcp_write_checks+0xe8>)
 8010bf2:	4806      	ldr	r0, [pc, #24]	; (8010c0c <tcp_write_checks+0xe4>)
 8010bf4:	f005 f8ee 	bl	8015dd4 <iprintf>
      pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8010bf8:	2300      	movs	r3, #0
}
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	08019d54 	.word	0x08019d54
 8010c08:	08019e0c 	.word	0x08019e0c
 8010c0c:	08019db8 	.word	0x08019db8
 8010c10:	08019e48 	.word	0x08019e48

08010c14 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8010c14:	b5b0      	push	{r4, r5, r7, lr}
 8010c16:	b09a      	sub	sp, #104	; 0x68
 8010c18:	af04      	add	r7, sp, #16
 8010c1a:	60f8      	str	r0, [r7, #12]
 8010c1c:	60b9      	str	r1, [r7, #8]
 8010c1e:	4611      	mov	r1, r2
 8010c20:	461a      	mov	r2, r3
 8010c22:	460b      	mov	r3, r1
 8010c24:	80fb      	strh	r3, [r7, #6]
 8010c26:	4613      	mov	r3, r2
 8010c28:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8010c2a:	2300      	movs	r3, #0
 8010c2c:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8010c2e:	2300      	movs	r3, #0
 8010c30:	653b      	str	r3, [r7, #80]	; 0x50
 8010c32:	2300      	movs	r3, #0
 8010c34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c36:	2300      	movs	r3, #0
 8010c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8010c3e:	2300      	movs	r3, #0
 8010c40:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen = 0;
 8010c44:	2300      	movs	r3, #0
 8010c46:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u8_t optflags = 0;
 8010c4a:	2300      	movs	r3, #0
 8010c4c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8010c50:	2300      	movs	r3, #0
 8010c52:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8010c54:	2300      	movs	r3, #0
 8010c56:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8010c58:	2300      	movs	r3, #0
 8010c5a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u8_t concat_chksum_swapped = 0;
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  /* don't allocate segments bigger than half the maximum window we ever received */
  u16_t mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max/2));
 8010c5c:	68fb      	ldr	r3, [r7, #12]
 8010c5e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8010c62:	085b      	lsrs	r3, r3, #1
 8010c64:	b29a      	uxth	r2, r3
 8010c66:	68fb      	ldr	r3, [r7, #12]
 8010c68:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c6a:	4293      	cmp	r3, r2
 8010c6c:	bf28      	it	cs
 8010c6e:	4613      	movcs	r3, r2
 8010c70:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8010c72:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d102      	bne.n	8010c7e <tcp_write+0x6a>
 8010c78:	68fb      	ldr	r3, [r7, #12]
 8010c7a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010c7c:	e000      	b.n	8010c80 <tcp_write+0x6c>
 8010c7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010c80:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
    (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	2b00      	cmp	r3, #0
 8010c86:	d109      	bne.n	8010c9c <tcp_write+0x88>
 8010c88:	4b94      	ldr	r3, [pc, #592]	; (8010edc <tcp_write+0x2c8>)
 8010c8a:	f44f 72c9 	mov.w	r2, #402	; 0x192
 8010c8e:	4994      	ldr	r1, [pc, #592]	; (8010ee0 <tcp_write+0x2cc>)
 8010c90:	4894      	ldr	r0, [pc, #592]	; (8010ee4 <tcp_write+0x2d0>)
 8010c92:	f005 f89f 	bl	8015dd4 <iprintf>
 8010c96:	f06f 030f 	mvn.w	r3, #15
 8010c9a:	e30d      	b.n	80112b8 <tcp_write+0x6a4>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8010c9c:	88fb      	ldrh	r3, [r7, #6]
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	68f8      	ldr	r0, [r7, #12]
 8010ca2:	f7ff ff41 	bl	8010b28 <tcp_write_checks>
 8010ca6:	4603      	mov	r3, r0
 8010ca8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8010cac:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010cb0:	2b00      	cmp	r3, #0
 8010cb2:	d002      	beq.n	8010cba <tcp_write+0xa6>
    return err;
 8010cb4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8010cb8:	e2fe      	b.n	80112b8 <tcp_write+0x6a4>
  }
  queuelen = pcb->snd_queuelen;
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8010cc0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8010cc4:	68fb      	ldr	r3, [r7, #12]
 8010cc6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cc8:	2b00      	cmp	r3, #0
 8010cca:	f000 80f8 	beq.w	8010ebe <tcp_write+0x2aa>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cce:	68fb      	ldr	r3, [r7, #12]
 8010cd0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8010cd2:	653b      	str	r3, [r7, #80]	; 0x50
 8010cd4:	e002      	b.n	8010cdc <tcp_write+0xc8>
         last_unsent = last_unsent->next);
 8010cd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cd8:	681b      	ldr	r3, [r3, #0]
 8010cda:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8010cdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cde:	681b      	ldr	r3, [r3, #0]
 8010ce0:	2b00      	cmp	r3, #0
 8010ce2:	d1f8      	bne.n	8010cd6 <tcp_write+0xc2>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH(last_unsent->flags);
 8010ce4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010ce6:	7a9b      	ldrb	r3, [r3, #10]
 8010ce8:	f003 0301 	and.w	r3, r3, #1
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d001      	beq.n	8010cf4 <tcp_write+0xe0>
 8010cf0:	2304      	movs	r3, #4
 8010cf2:	e000      	b.n	8010cf6 <tcp_write+0xe2>
 8010cf4:	2300      	movs	r3, #0
 8010cf6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8010cf8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010cfc:	891b      	ldrh	r3, [r3, #8]
 8010cfe:	4619      	mov	r1, r3
 8010d00:	8c3b      	ldrh	r3, [r7, #32]
 8010d02:	440b      	add	r3, r1
 8010d04:	429a      	cmp	r2, r3
 8010d06:	da06      	bge.n	8010d16 <tcp_write+0x102>
 8010d08:	4b74      	ldr	r3, [pc, #464]	; (8010edc <tcp_write+0x2c8>)
 8010d0a:	f240 12c7 	movw	r2, #455	; 0x1c7
 8010d0e:	4976      	ldr	r1, [pc, #472]	; (8010ee8 <tcp_write+0x2d4>)
 8010d10:	4874      	ldr	r0, [pc, #464]	; (8010ee4 <tcp_write+0x2d0>)
 8010d12:	f005 f85f 	bl	8015dd4 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8010d16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d18:	891a      	ldrh	r2, [r3, #8]
 8010d1a:	8c3b      	ldrh	r3, [r7, #32]
 8010d1c:	4413      	add	r3, r2
 8010d1e:	b29b      	uxth	r3, r3
 8010d20:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010d2c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8010d2e:	8a7b      	ldrh	r3, [r7, #18]
 8010d30:	2b00      	cmp	r3, #0
 8010d32:	d027      	beq.n	8010d84 <tcp_write+0x170>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8010d34:	8a7b      	ldrh	r3, [r7, #18]
 8010d36:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d38:	429a      	cmp	r2, r3
 8010d3a:	d206      	bcs.n	8010d4a <tcp_write+0x136>
 8010d3c:	4b67      	ldr	r3, [pc, #412]	; (8010edc <tcp_write+0x2c8>)
 8010d3e:	f240 12d9 	movw	r2, #473	; 0x1d9
 8010d42:	496a      	ldr	r1, [pc, #424]	; (8010eec <tcp_write+0x2d8>)
 8010d44:	4867      	ldr	r0, [pc, #412]	; (8010ee4 <tcp_write+0x2d0>)
 8010d46:	f005 f845 	bl	8015dd4 <iprintf>
      seg = last_unsent;
 8010d4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d4c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8010d4e:	8a7b      	ldrh	r3, [r7, #18]
 8010d50:	88fa      	ldrh	r2, [r7, #6]
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d901      	bls.n	8010d5a <tcp_write+0x146>
 8010d56:	8a7b      	ldrh	r3, [r7, #18]
 8010d58:	e000      	b.n	8010d5c <tcp_write+0x148>
 8010d5a:	88fb      	ldrh	r3, [r7, #6]
 8010d5c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d5e:	4293      	cmp	r3, r2
 8010d60:	bfa8      	it	ge
 8010d62:	4613      	movge	r3, r2
 8010d64:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8010d66:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d6a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d6c:	4413      	add	r3, r2
 8010d6e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8010d72:	8a7a      	ldrh	r2, [r7, #18]
 8010d74:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d76:	1ad3      	subs	r3, r2, r3
 8010d78:	b29b      	uxth	r3, r3
 8010d7a:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8010d7c:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010d7e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8010d80:	1ad3      	subs	r3, r2, r3
 8010d82:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8010d84:	8a7b      	ldrh	r3, [r7, #18]
 8010d86:	2b00      	cmp	r3, #0
 8010d88:	d00b      	beq.n	8010da2 <tcp_write+0x18e>
 8010d8a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010d8e:	88fb      	ldrh	r3, [r7, #6]
 8010d90:	429a      	cmp	r2, r3
 8010d92:	d006      	beq.n	8010da2 <tcp_write+0x18e>
 8010d94:	4b51      	ldr	r3, [pc, #324]	; (8010edc <tcp_write+0x2c8>)
 8010d96:	f240 12e1 	movw	r2, #481	; 0x1e1
 8010d9a:	4955      	ldr	r1, [pc, #340]	; (8010ef0 <tcp_write+0x2dc>)
 8010d9c:	4851      	ldr	r0, [pc, #324]	; (8010ee4 <tcp_write+0x2d0>)
 8010d9e:	f005 f819 	bl	8015dd4 <iprintf>
     *
     * We don't extend segments containing SYN/FIN flags or options
     * (len==0). The new pbuf is kept in concat_p and pbuf_cat'ed at
     * the end.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8010da2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010da6:	88fb      	ldrh	r3, [r7, #6]
 8010da8:	429a      	cmp	r2, r3
 8010daa:	f080 8169 	bcs.w	8011080 <tcp_write+0x46c>
 8010dae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	f000 8165 	beq.w	8011080 <tcp_write+0x46c>
 8010db6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010db8:	891b      	ldrh	r3, [r3, #8]
 8010dba:	2b00      	cmp	r3, #0
 8010dbc:	f000 8160 	beq.w	8011080 <tcp_write+0x46c>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8010dc0:	88fa      	ldrh	r2, [r7, #6]
 8010dc2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010dc6:	1ad2      	subs	r2, r2, r3
 8010dc8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8010dca:	4293      	cmp	r3, r2
 8010dcc:	bfa8      	it	ge
 8010dce:	4613      	movge	r3, r2
 8010dd0:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8010dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010dd4:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010dd6:	797b      	ldrb	r3, [r7, #5]
 8010dd8:	f003 0301 	and.w	r3, r3, #1
 8010ddc:	2b00      	cmp	r3, #0
 8010dde:	d027      	beq.n	8010e30 <tcp_write+0x21c>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8010de0:	f107 0012 	add.w	r0, r7, #18
 8010de4:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8010de6:	8bf9      	ldrh	r1, [r7, #30]
 8010de8:	2301      	movs	r3, #1
 8010dea:	9302      	str	r3, [sp, #8]
 8010dec:	797b      	ldrb	r3, [r7, #5]
 8010dee:	9301      	str	r3, [sp, #4]
 8010df0:	68fb      	ldr	r3, [r7, #12]
 8010df2:	9300      	str	r3, [sp, #0]
 8010df4:	4603      	mov	r3, r0
 8010df6:	2004      	movs	r0, #4
 8010df8:	f7ff fe34 	bl	8010a64 <tcp_pbuf_prealloc>
 8010dfc:	6578      	str	r0, [r7, #84]	; 0x54
 8010dfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e00:	2b00      	cmp	r3, #0
 8010e02:	f000 8227 	beq.w	8011254 <tcp_write+0x640>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t*)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8010e06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e08:	6858      	ldr	r0, [r3, #4]
 8010e0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e0e:	68ba      	ldr	r2, [r7, #8]
 8010e10:	4413      	add	r3, r2
 8010e12:	8bfa      	ldrh	r2, [r7, #30]
 8010e14:	4619      	mov	r1, r3
 8010e16:	f004 ffca 	bl	8015dae <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8010e1a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e1c:	f7fb fc46 	bl	800c6ac <pbuf_clen>
 8010e20:	4603      	mov	r3, r0
 8010e22:	461a      	mov	r2, r3
 8010e24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010e28:	4413      	add	r3, r2
 8010e2a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8010e2e:	e03f      	b.n	8010eb0 <tcp_write+0x29c>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 8010e30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010e32:	685b      	ldr	r3, [r3, #4]
 8010e34:	637b      	str	r3, [r7, #52]	; 0x34
 8010e36:	e002      	b.n	8010e3e <tcp_write+0x22a>
 8010e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e3a:	681b      	ldr	r3, [r3, #0]
 8010e3c:	637b      	str	r3, [r7, #52]	; 0x34
 8010e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e40:	681b      	ldr	r3, [r3, #0]
 8010e42:	2b00      	cmp	r3, #0
 8010e44:	d1f8      	bne.n	8010e38 <tcp_write+0x224>
        if (p->type == PBUF_ROM && (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 8010e46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e48:	7b1b      	ldrb	r3, [r3, #12]
 8010e4a:	2b01      	cmp	r3, #1
 8010e4c:	d115      	bne.n	8010e7a <tcp_write+0x266>
 8010e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010e50:	685b      	ldr	r3, [r3, #4]
 8010e52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010e54:	8952      	ldrh	r2, [r2, #10]
 8010e56:	441a      	add	r2, r3
 8010e58:	68bb      	ldr	r3, [r7, #8]
 8010e5a:	429a      	cmp	r2, r3
 8010e5c:	d10d      	bne.n	8010e7a <tcp_write+0x266>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 8010e5e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d006      	beq.n	8010e74 <tcp_write+0x260>
 8010e66:	4b1d      	ldr	r3, [pc, #116]	; (8010edc <tcp_write+0x2c8>)
 8010e68:	f44f 7203 	mov.w	r2, #524	; 0x20c
 8010e6c:	4921      	ldr	r1, [pc, #132]	; (8010ef4 <tcp_write+0x2e0>)
 8010e6e:	481d      	ldr	r0, [pc, #116]	; (8010ee4 <tcp_write+0x2d0>)
 8010e70:	f004 ffb0 	bl	8015dd4 <iprintf>
          extendlen = seglen;
 8010e74:	8bfb      	ldrh	r3, [r7, #30]
 8010e76:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8010e78:	e01a      	b.n	8010eb0 <tcp_write+0x29c>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8010e7a:	8bfb      	ldrh	r3, [r7, #30]
 8010e7c:	2201      	movs	r2, #1
 8010e7e:	4619      	mov	r1, r3
 8010e80:	2004      	movs	r0, #4
 8010e82:	f7fb f807 	bl	800be94 <pbuf_alloc>
 8010e86:	6578      	str	r0, [r7, #84]	; 0x54
 8010e88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	f000 81e4 	beq.w	8011258 <tcp_write+0x644>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom*)concat_p)->payload = (const u8_t*)arg + pos;
 8010e90:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010e94:	68ba      	ldr	r2, [r7, #8]
 8010e96:	441a      	add	r2, r3
 8010e98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010e9a:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8010e9c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8010e9e:	f7fb fc05 	bl	800c6ac <pbuf_clen>
 8010ea2:	4603      	mov	r3, r0
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8010eaa:	4413      	add	r3, r2
 8010eac:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
          &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8010eb0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010eb4:	8bfb      	ldrh	r3, [r7, #30]
 8010eb6:	4413      	add	r3, r2
 8010eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8010ebc:	e0e0      	b.n	8011080 <tcp_write+0x46c>
    }
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	f000 80db 	beq.w	8011080 <tcp_write+0x46c>
 8010eca:	4b04      	ldr	r3, [pc, #16]	; (8010edc <tcp_write+0x2c8>)
 8010ecc:	f240 2225 	movw	r2, #549	; 0x225
 8010ed0:	4909      	ldr	r1, [pc, #36]	; (8010ef8 <tcp_write+0x2e4>)
 8010ed2:	4804      	ldr	r0, [pc, #16]	; (8010ee4 <tcp_write+0x2d0>)
 8010ed4:	f004 ff7e 	bl	8015dd4 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8010ed8:	e0d2      	b.n	8011080 <tcp_write+0x46c>
 8010eda:	bf00      	nop
 8010edc:	08019d54 	.word	0x08019d54
 8010ee0:	08019e7c 	.word	0x08019e7c
 8010ee4:	08019db8 	.word	0x08019db8
 8010ee8:	08019eb0 	.word	0x08019eb0
 8010eec:	08019ec8 	.word	0x08019ec8
 8010ef0:	08019ee8 	.word	0x08019ee8
 8010ef4:	08019f08 	.word	0x08019f08
 8010ef8:	08019f34 	.word	0x08019f34
    struct pbuf *p;
    u16_t left = len - pos;
 8010efc:	88fa      	ldrh	r2, [r7, #6]
 8010efe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f02:	1ad3      	subs	r3, r2, r3
 8010f04:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8010f06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f0a:	b29b      	uxth	r3, r3
 8010f0c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8010f12:	8b7a      	ldrh	r2, [r7, #26]
 8010f14:	8bbb      	ldrh	r3, [r7, #28]
 8010f16:	4293      	cmp	r3, r2
 8010f18:	bf28      	it	cs
 8010f1a:	4613      	movcs	r3, r2
 8010f1c:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 8010f1e:	797b      	ldrb	r3, [r7, #5]
 8010f20:	f003 0301 	and.w	r3, r3, #1
 8010f24:	2b00      	cmp	r3, #0
 8010f26:	d036      	beq.n	8010f96 <tcp_write+0x382>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 8010f28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f2c:	b29a      	uxth	r2, r3
 8010f2e:	8b3b      	ldrh	r3, [r7, #24]
 8010f30:	4413      	add	r3, r2
 8010f32:	b299      	uxth	r1, r3
 8010f34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f36:	2b00      	cmp	r3, #0
 8010f38:	bf0c      	ite	eq
 8010f3a:	2301      	moveq	r3, #1
 8010f3c:	2300      	movne	r3, #0
 8010f3e:	b2db      	uxtb	r3, r3
 8010f40:	f107 0012 	add.w	r0, r7, #18
 8010f44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8010f46:	9302      	str	r3, [sp, #8]
 8010f48:	797b      	ldrb	r3, [r7, #5]
 8010f4a:	9301      	str	r3, [sp, #4]
 8010f4c:	68fb      	ldr	r3, [r7, #12]
 8010f4e:	9300      	str	r3, [sp, #0]
 8010f50:	4603      	mov	r3, r0
 8010f52:	2000      	movs	r0, #0
 8010f54:	f7ff fd86 	bl	8010a64 <tcp_pbuf_prealloc>
 8010f58:	6338      	str	r0, [r7, #48]	; 0x30
 8010f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f5c:	2b00      	cmp	r3, #0
 8010f5e:	f000 817d 	beq.w	801125c <tcp_write+0x648>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 8010f62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f64:	895b      	ldrh	r3, [r3, #10]
 8010f66:	8b3a      	ldrh	r2, [r7, #24]
 8010f68:	429a      	cmp	r2, r3
 8010f6a:	d906      	bls.n	8010f7a <tcp_write+0x366>
 8010f6c:	4b8f      	ldr	r3, [pc, #572]	; (80111ac <tcp_write+0x598>)
 8010f6e:	f240 2241 	movw	r2, #577	; 0x241
 8010f72:	498f      	ldr	r1, [pc, #572]	; (80111b0 <tcp_write+0x59c>)
 8010f74:	488f      	ldr	r0, [pc, #572]	; (80111b4 <tcp_write+0x5a0>)
 8010f76:	f004 ff2d 	bl	8015dd4 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t*)arg + pos, seglen, &chksum, &chksum_swapped);
 8010f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010f7c:	685a      	ldr	r2, [r3, #4]
 8010f7e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f82:	18d0      	adds	r0, r2, r3
 8010f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010f88:	68ba      	ldr	r2, [r7, #8]
 8010f8a:	4413      	add	r3, r2
 8010f8c:	8b3a      	ldrh	r2, [r7, #24]
 8010f8e:	4619      	mov	r1, r3
 8010f90:	f004 ff0d 	bl	8015dae <memcpy>
 8010f94:	e02e      	b.n	8010ff4 <tcp_write+0x3e0>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8010f96:	8a7b      	ldrh	r3, [r7, #18]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	d006      	beq.n	8010faa <tcp_write+0x396>
 8010f9c:	4b83      	ldr	r3, [pc, #524]	; (80111ac <tcp_write+0x598>)
 8010f9e:	f240 224b 	movw	r2, #587	; 0x24b
 8010fa2:	4985      	ldr	r1, [pc, #532]	; (80111b8 <tcp_write+0x5a4>)
 8010fa4:	4883      	ldr	r0, [pc, #524]	; (80111b4 <tcp_write+0x5a0>)
 8010fa6:	f004 ff15 	bl	8015dd4 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8010faa:	8b3b      	ldrh	r3, [r7, #24]
 8010fac:	2201      	movs	r2, #1
 8010fae:	4619      	mov	r1, r3
 8010fb0:	2000      	movs	r0, #0
 8010fb2:	f7fa ff6f 	bl	800be94 <pbuf_alloc>
 8010fb6:	6178      	str	r0, [r7, #20]
 8010fb8:	697b      	ldr	r3, [r7, #20]
 8010fba:	2b00      	cmp	r3, #0
 8010fbc:	f000 8150 	beq.w	8011260 <tcp_write+0x64c>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom*)p2)->payload = (const u8_t*)arg + pos;
 8010fc0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8010fc4:	68ba      	ldr	r2, [r7, #8]
 8010fc6:	441a      	add	r2, r3
 8010fc8:	697b      	ldr	r3, [r7, #20]
 8010fca:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8010fcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010fd0:	b29b      	uxth	r3, r3
 8010fd2:	2200      	movs	r2, #0
 8010fd4:	4619      	mov	r1, r3
 8010fd6:	2000      	movs	r0, #0
 8010fd8:	f7fa ff5c 	bl	800be94 <pbuf_alloc>
 8010fdc:	6338      	str	r0, [r7, #48]	; 0x30
 8010fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010fe0:	2b00      	cmp	r3, #0
 8010fe2:	d103      	bne.n	8010fec <tcp_write+0x3d8>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8010fe4:	6978      	ldr	r0, [r7, #20]
 8010fe6:	f7fb fac7 	bl	800c578 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8010fea:	e13c      	b.n	8011266 <tcp_write+0x652>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8010fec:	6979      	ldr	r1, [r7, #20]
 8010fee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff0:	f7fb fb9c 	bl	800c72c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8010ff4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010ff6:	f7fb fb59 	bl	800c6ac <pbuf_clen>
 8010ffa:	4603      	mov	r3, r0
 8010ffc:	461a      	mov	r2, r3
 8010ffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011002:	4413      	add	r3, r2
 8011004:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if ((queuelen > TCP_SND_QUEUELEN) || (queuelen > TCP_SNDQUEUELEN_OVERFLOW)) {
 8011008:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801100c:	2b09      	cmp	r3, #9
 801100e:	d805      	bhi.n	801101c <tcp_write+0x408>
 8011010:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011014:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 8011018:	4293      	cmp	r3, r2
 801101a:	d903      	bls.n	8011024 <tcp_write+0x410>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
        queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801101c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801101e:	f7fb faab 	bl	800c578 <pbuf_free>
      goto memerr;
 8011022:	e120      	b.n	8011266 <tcp_write+0x652>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8011028:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801102c:	441a      	add	r2, r3
 801102e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8011032:	9300      	str	r3, [sp, #0]
 8011034:	4613      	mov	r3, r2
 8011036:	2200      	movs	r2, #0
 8011038:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801103a:	68f8      	ldr	r0, [r7, #12]
 801103c:	f7ff fc88 	bl	8010950 <tcp_create_segment>
 8011040:	64f8      	str	r0, [r7, #76]	; 0x4c
 8011042:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011044:	2b00      	cmp	r3, #0
 8011046:	f000 810d 	beq.w	8011264 <tcp_write+0x650>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801104a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801104c:	2b00      	cmp	r3, #0
 801104e:	d102      	bne.n	8011056 <tcp_write+0x442>
      queue = seg;
 8011050:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011052:	647b      	str	r3, [r7, #68]	; 0x44
 8011054:	e00c      	b.n	8011070 <tcp_write+0x45c>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 8011056:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011058:	2b00      	cmp	r3, #0
 801105a:	d106      	bne.n	801106a <tcp_write+0x456>
 801105c:	4b53      	ldr	r3, [pc, #332]	; (80111ac <tcp_write+0x598>)
 801105e:	f240 2285 	movw	r2, #645	; 0x285
 8011062:	4956      	ldr	r1, [pc, #344]	; (80111bc <tcp_write+0x5a8>)
 8011064:	4853      	ldr	r0, [pc, #332]	; (80111b4 <tcp_write+0x5a0>)
 8011066:	f004 feb5 	bl	8015dd4 <iprintf>
      prev_seg->next = seg;
 801106a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801106c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801106e:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 8011070:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011072:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
      lwip_ntohl(seg->tcphdr->seqno),
      lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 8011074:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011078:	8b3b      	ldrh	r3, [r7, #24]
 801107a:	4413      	add	r3, r2
 801107c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011080:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011084:	88fb      	ldrh	r3, [r7, #6]
 8011086:	429a      	cmp	r2, r3
 8011088:	f4ff af38 	bcc.w	8010efc <tcp_write+0x2e8>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801108c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801108e:	2b00      	cmp	r3, #0
 8011090:	d02c      	beq.n	80110ec <tcp_write+0x4d8>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011094:	685b      	ldr	r3, [r3, #4]
 8011096:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011098:	e01e      	b.n	80110d8 <tcp_write+0x4c4>
      p->tot_len += oversize_used;
 801109a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801109c:	891a      	ldrh	r2, [r3, #8]
 801109e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110a0:	4413      	add	r3, r2
 80110a2:	b29a      	uxth	r2, r3
 80110a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110a6:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 80110a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110aa:	681b      	ldr	r3, [r3, #0]
 80110ac:	2b00      	cmp	r3, #0
 80110ae:	d110      	bne.n	80110d2 <tcp_write+0x4be>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 80110b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110b2:	685b      	ldr	r3, [r3, #4]
 80110b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80110b6:	8952      	ldrh	r2, [r2, #10]
 80110b8:	4413      	add	r3, r2
 80110ba:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80110bc:	68b9      	ldr	r1, [r7, #8]
 80110be:	4618      	mov	r0, r3
 80110c0:	f004 fe75 	bl	8015dae <memcpy>
        p->len += oversize_used;
 80110c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110c6:	895a      	ldrh	r2, [r3, #10]
 80110c8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110ca:	4413      	add	r3, r2
 80110cc:	b29a      	uxth	r2, r3
 80110ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d0:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 80110d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110d4:	681b      	ldr	r3, [r3, #0]
 80110d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80110d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d1dd      	bne.n	801109a <tcp_write+0x486>
      }
    }
    last_unsent->len += oversize_used;
 80110de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110e0:	891a      	ldrh	r2, [r3, #8]
 80110e2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80110e4:	4413      	add	r3, r2
 80110e6:	b29a      	uxth	r2, r3
 80110e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110ea:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 80110ec:	8a7a      	ldrh	r2, [r7, #18]
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 80110f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80110f6:	2b00      	cmp	r3, #0
 80110f8:	d018      	beq.n	801112c <tcp_write+0x518>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 80110fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d106      	bne.n	801110e <tcp_write+0x4fa>
 8011100:	4b2a      	ldr	r3, [pc, #168]	; (80111ac <tcp_write+0x598>)
 8011102:	f240 22bb 	movw	r2, #699	; 0x2bb
 8011106:	492e      	ldr	r1, [pc, #184]	; (80111c0 <tcp_write+0x5ac>)
 8011108:	482a      	ldr	r0, [pc, #168]	; (80111b4 <tcp_write+0x5a0>)
 801110a:	f004 fe63 	bl	8015dd4 <iprintf>
      (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801110e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011110:	685b      	ldr	r3, [r3, #4]
 8011112:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011114:	4618      	mov	r0, r3
 8011116:	f7fb fb09 	bl	800c72c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801111a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801111c:	891a      	ldrh	r2, [r3, #8]
 801111e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011120:	891b      	ldrh	r3, [r3, #8]
 8011122:	4413      	add	r3, r2
 8011124:	b29a      	uxth	r2, r3
 8011126:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011128:	811a      	strh	r2, [r3, #8]
 801112a:	e037      	b.n	801119c <tcp_write+0x588>
  } else if (extendlen > 0) {
 801112c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801112e:	2b00      	cmp	r3, #0
 8011130:	d034      	beq.n	801119c <tcp_write+0x588>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 8011132:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011134:	2b00      	cmp	r3, #0
 8011136:	d003      	beq.n	8011140 <tcp_write+0x52c>
 8011138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801113a:	685b      	ldr	r3, [r3, #4]
 801113c:	2b00      	cmp	r3, #0
 801113e:	d106      	bne.n	801114e <tcp_write+0x53a>
 8011140:	4b1a      	ldr	r3, [pc, #104]	; (80111ac <tcp_write+0x598>)
 8011142:	f240 22c1 	movw	r2, #705	; 0x2c1
 8011146:	491f      	ldr	r1, [pc, #124]	; (80111c4 <tcp_write+0x5b0>)
 8011148:	481a      	ldr	r0, [pc, #104]	; (80111b4 <tcp_write+0x5a0>)
 801114a:	f004 fe43 	bl	8015dd4 <iprintf>
      last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801114e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011150:	685b      	ldr	r3, [r3, #4]
 8011152:	62bb      	str	r3, [r7, #40]	; 0x28
 8011154:	e009      	b.n	801116a <tcp_write+0x556>
      p->tot_len += extendlen;
 8011156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011158:	891a      	ldrh	r2, [r3, #8]
 801115a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801115c:	4413      	add	r3, r2
 801115e:	b29a      	uxth	r2, r3
 8011160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011162:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 8011164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	62bb      	str	r3, [r7, #40]	; 0x28
 801116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1f1      	bne.n	8011156 <tcp_write+0x542>
    }
    p->tot_len += extendlen;
 8011172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011174:	891a      	ldrh	r2, [r3, #8]
 8011176:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011178:	4413      	add	r3, r2
 801117a:	b29a      	uxth	r2, r3
 801117c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801117e:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011182:	895a      	ldrh	r2, [r3, #10]
 8011184:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011186:	4413      	add	r3, r2
 8011188:	b29a      	uxth	r2, r3
 801118a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801118c:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801118e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011190:	891a      	ldrh	r2, [r3, #8]
 8011192:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011194:	4413      	add	r3, r2
 8011196:	b29a      	uxth	r2, r3
 8011198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119a:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801119c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801119e:	2b00      	cmp	r3, #0
 80111a0:	d112      	bne.n	80111c8 <tcp_write+0x5b4>
    pcb->unsent = queue;
 80111a2:	68fb      	ldr	r3, [r7, #12]
 80111a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111a6:	669a      	str	r2, [r3, #104]	; 0x68
 80111a8:	e011      	b.n	80111ce <tcp_write+0x5ba>
 80111aa:	bf00      	nop
 80111ac:	08019d54 	.word	0x08019d54
 80111b0:	08019f64 	.word	0x08019f64
 80111b4:	08019db8 	.word	0x08019db8
 80111b8:	08019fa4 	.word	0x08019fa4
 80111bc:	08019fb4 	.word	0x08019fb4
 80111c0:	08019fc8 	.word	0x08019fc8
 80111c4:	0801a000 	.word	0x0801a000
  } else {
    last_unsent->next = queue;
 80111c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80111cc:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80111d2:	88fb      	ldrh	r3, [r7, #6]
 80111d4:	441a      	add	r2, r3
 80111d6:	68fb      	ldr	r3, [r7, #12]
 80111d8:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_buf -= len;
 80111da:	68fb      	ldr	r3, [r7, #12]
 80111dc:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80111e0:	88fb      	ldrh	r3, [r7, #6]
 80111e2:	1ad3      	subs	r3, r2, r3
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	68fb      	ldr	r3, [r7, #12]
 80111e8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  pcb->snd_queuelen = queuelen;
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80111f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
    pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80111fc:	2b00      	cmp	r3, #0
 80111fe:	d00e      	beq.n	801121e <tcp_write+0x60a>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011200:	68fb      	ldr	r3, [r7, #12]
 8011202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011204:	2b00      	cmp	r3, #0
 8011206:	d10a      	bne.n	801121e <tcp_write+0x60a>
 8011208:	68fb      	ldr	r3, [r7, #12]
 801120a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801120c:	2b00      	cmp	r3, #0
 801120e:	d106      	bne.n	801121e <tcp_write+0x60a>
 8011210:	4b2b      	ldr	r3, [pc, #172]	; (80112c0 <tcp_write+0x6ac>)
 8011212:	f240 22ed 	movw	r2, #749	; 0x2ed
 8011216:	492b      	ldr	r1, [pc, #172]	; (80112c4 <tcp_write+0x6b0>)
 8011218:	482b      	ldr	r0, [pc, #172]	; (80112c8 <tcp_write+0x6b4>)
 801121a:	f004 fddb 	bl	8015dd4 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE)==0)) {
 801121e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011220:	2b00      	cmp	r3, #0
 8011222:	d015      	beq.n	8011250 <tcp_write+0x63c>
 8011224:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011226:	68db      	ldr	r3, [r3, #12]
 8011228:	2b00      	cmp	r3, #0
 801122a:	d011      	beq.n	8011250 <tcp_write+0x63c>
 801122c:	797b      	ldrb	r3, [r7, #5]
 801122e:	f003 0302 	and.w	r3, r3, #2
 8011232:	2b00      	cmp	r3, #0
 8011234:	d10c      	bne.n	8011250 <tcp_write+0x63c>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 8011236:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011238:	68dc      	ldr	r4, [r3, #12]
 801123a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801123c:	68db      	ldr	r3, [r3, #12]
 801123e:	899b      	ldrh	r3, [r3, #12]
 8011240:	b29d      	uxth	r5, r3
 8011242:	2008      	movs	r0, #8
 8011244:	f7f7 feda 	bl	8008ffc <lwip_htons>
 8011248:	4603      	mov	r3, r0
 801124a:	432b      	orrs	r3, r5
 801124c:	b29b      	uxth	r3, r3
 801124e:	81a3      	strh	r3, [r4, #12]
  }

  return ERR_OK;
 8011250:	2300      	movs	r3, #0
 8011252:	e031      	b.n	80112b8 <tcp_write+0x6a4>
          goto memerr;
 8011254:	bf00      	nop
 8011256:	e006      	b.n	8011266 <tcp_write+0x652>
            goto memerr;
 8011258:	bf00      	nop
 801125a:	e004      	b.n	8011266 <tcp_write+0x652>
        goto memerr;
 801125c:	bf00      	nop
 801125e:	e002      	b.n	8011266 <tcp_write+0x652>
        goto memerr;
 8011260:	bf00      	nop
 8011262:	e000      	b.n	8011266 <tcp_write+0x652>
      goto memerr;
 8011264:	bf00      	nop
memerr:
  pcb->flags |= TF_NAGLEMEMERR;
 8011266:	68fb      	ldr	r3, [r7, #12]
 8011268:	7e9b      	ldrb	r3, [r3, #26]
 801126a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801126e:	b2da      	uxtb	r2, r3
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	769a      	strb	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 8011274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011276:	2b00      	cmp	r3, #0
 8011278:	d002      	beq.n	8011280 <tcp_write+0x66c>
    pbuf_free(concat_p);
 801127a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801127c:	f7fb f97c 	bl	800c578 <pbuf_free>
  }
  if (queue != NULL) {
 8011280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011282:	2b00      	cmp	r3, #0
 8011284:	d002      	beq.n	801128c <tcp_write+0x678>
    tcp_segs_free(queue);
 8011286:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8011288:	f7fc fcb9 	bl	800dbfe <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801128c:	68fb      	ldr	r3, [r7, #12]
 801128e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011292:	2b00      	cmp	r3, #0
 8011294:	d00e      	beq.n	80112b4 <tcp_write+0x6a0>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011296:	68fb      	ldr	r3, [r7, #12]
 8011298:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801129a:	2b00      	cmp	r3, #0
 801129c:	d10a      	bne.n	80112b4 <tcp_write+0x6a0>
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80112a2:	2b00      	cmp	r3, #0
 80112a4:	d106      	bne.n	80112b4 <tcp_write+0x6a0>
 80112a6:	4b06      	ldr	r3, [pc, #24]	; (80112c0 <tcp_write+0x6ac>)
 80112a8:	f240 3202 	movw	r2, #770	; 0x302
 80112ac:	4905      	ldr	r1, [pc, #20]	; (80112c4 <tcp_write+0x6b0>)
 80112ae:	4806      	ldr	r0, [pc, #24]	; (80112c8 <tcp_write+0x6b4>)
 80112b0:	f004 fd90 	bl	8015dd4 <iprintf>
      pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 80112b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3758      	adds	r7, #88	; 0x58
 80112bc:	46bd      	mov	sp, r7
 80112be:	bdb0      	pop	{r4, r5, r7, pc}
 80112c0:	08019d54 	.word	0x08019d54
 80112c4:	0801a038 	.word	0x0801a038
 80112c8:	08019db8 	.word	0x08019db8

080112cc <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80112cc:	b580      	push	{r7, lr}
 80112ce:	b08a      	sub	sp, #40	; 0x28
 80112d0:	af02      	add	r7, sp, #8
 80112d2:	6078      	str	r0, [r7, #4]
 80112d4:	460b      	mov	r3, r1
 80112d6:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80112d8:	2300      	movs	r3, #0
 80112da:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80112dc:	2300      	movs	r3, #0
 80112de:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80112e0:	78fb      	ldrb	r3, [r7, #3]
 80112e2:	f003 0303 	and.w	r3, r3, #3
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d106      	bne.n	80112f8 <tcp_enqueue_flags+0x2c>
 80112ea:	4b70      	ldr	r3, [pc, #448]	; (80114ac <tcp_enqueue_flags+0x1e0>)
 80112ec:	f240 321b 	movw	r2, #795	; 0x31b
 80112f0:	496f      	ldr	r1, [pc, #444]	; (80114b0 <tcp_enqueue_flags+0x1e4>)
 80112f2:	4870      	ldr	r0, [pc, #448]	; (80114b4 <tcp_enqueue_flags+0x1e8>)
 80112f4:	f004 fd6e 	bl	8015dd4 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);

  /* check for configured max queuelen and possible overflow (FIN flag should always come through!) */
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 80112f8:	687b      	ldr	r3, [r7, #4]
 80112fa:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80112fe:	2b08      	cmp	r3, #8
 8011300:	d806      	bhi.n	8011310 <tcp_enqueue_flags+0x44>
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011308:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 801130c:	4293      	cmp	r3, r2
 801130e:	d90e      	bls.n	801132e <tcp_enqueue_flags+0x62>
      ((flags & TCP_FIN) == 0)) {
 8011310:	78fb      	ldrb	r3, [r7, #3]
 8011312:	f003 0301 	and.w	r3, r3, #1
  if (((pcb->snd_queuelen >= TCP_SND_QUEUELEN) || (pcb->snd_queuelen > TCP_SNDQUEUELEN_OVERFLOW)) &&
 8011316:	2b00      	cmp	r3, #0
 8011318:	d109      	bne.n	801132e <tcp_enqueue_flags+0x62>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_enqueue_flags: too long queue %"U16_F" (max %"U16_F")\n",
                                       pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    pcb->flags |= TF_NAGLEMEMERR;
 801131a:	687b      	ldr	r3, [r7, #4]
 801131c:	7e9b      	ldrb	r3, [r3, #26]
 801131e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011322:	b2da      	uxtb	r2, r3
 8011324:	687b      	ldr	r3, [r7, #4]
 8011326:	769a      	strb	r2, [r3, #26]
    return ERR_MEM;
 8011328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801132c:	e0ba      	b.n	80114a4 <tcp_enqueue_flags+0x1d8>
  }

  if (flags & TCP_SYN) {
 801132e:	78fb      	ldrb	r3, [r7, #3]
 8011330:	f003 0302 	and.w	r3, r3, #2
 8011334:	2b00      	cmp	r3, #0
 8011336:	d001      	beq.n	801133c <tcp_enqueue_flags+0x70>
    optflags = TF_SEG_OPTS_MSS;
 8011338:	2301      	movs	r3, #1
 801133a:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host. */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801133c:	7ffb      	ldrb	r3, [r7, #31]
 801133e:	f003 0301 	and.w	r3, r3, #1
 8011342:	2b00      	cmp	r3, #0
 8011344:	d001      	beq.n	801134a <tcp_enqueue_flags+0x7e>
 8011346:	2304      	movs	r3, #4
 8011348:	e000      	b.n	801134c <tcp_enqueue_flags+0x80>
 801134a:	2300      	movs	r3, #0
 801134c:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801134e:	7dfb      	ldrb	r3, [r7, #23]
 8011350:	b29b      	uxth	r3, r3
 8011352:	2200      	movs	r2, #0
 8011354:	4619      	mov	r1, r3
 8011356:	2000      	movs	r0, #0
 8011358:	f7fa fd9c 	bl	800be94 <pbuf_alloc>
 801135c:	6138      	str	r0, [r7, #16]
 801135e:	693b      	ldr	r3, [r7, #16]
 8011360:	2b00      	cmp	r3, #0
 8011362:	d109      	bne.n	8011378 <tcp_enqueue_flags+0xac>
    pcb->flags |= TF_NAGLEMEMERR;
 8011364:	687b      	ldr	r3, [r7, #4]
 8011366:	7e9b      	ldrb	r3, [r3, #26]
 8011368:	f063 037f 	orn	r3, r3, #127	; 0x7f
 801136c:	b2da      	uxtb	r2, r3
 801136e:	687b      	ldr	r3, [r7, #4]
 8011370:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011372:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011376:	e095      	b.n	80114a4 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011378:	693b      	ldr	r3, [r7, #16]
 801137a:	895a      	ldrh	r2, [r3, #10]
 801137c:	7dfb      	ldrb	r3, [r7, #23]
 801137e:	b29b      	uxth	r3, r3
 8011380:	429a      	cmp	r2, r3
 8011382:	d206      	bcs.n	8011392 <tcp_enqueue_flags+0xc6>
 8011384:	4b49      	ldr	r3, [pc, #292]	; (80114ac <tcp_enqueue_flags+0x1e0>)
 8011386:	f240 3241 	movw	r2, #833	; 0x341
 801138a:	494b      	ldr	r1, [pc, #300]	; (80114b8 <tcp_enqueue_flags+0x1ec>)
 801138c:	4849      	ldr	r0, [pc, #292]	; (80114b4 <tcp_enqueue_flags+0x1e8>)
 801138e:	f004 fd21 	bl	8015dd4 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	6d99      	ldr	r1, [r3, #88]	; 0x58
 8011396:	78fa      	ldrb	r2, [r7, #3]
 8011398:	7ffb      	ldrb	r3, [r7, #31]
 801139a:	9300      	str	r3, [sp, #0]
 801139c:	460b      	mov	r3, r1
 801139e:	6939      	ldr	r1, [r7, #16]
 80113a0:	6878      	ldr	r0, [r7, #4]
 80113a2:	f7ff fad5 	bl	8010950 <tcp_create_segment>
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	68fb      	ldr	r3, [r7, #12]
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d109      	bne.n	80113c2 <tcp_enqueue_flags+0xf6>
    pcb->flags |= TF_NAGLEMEMERR;
 80113ae:	687b      	ldr	r3, [r7, #4]
 80113b0:	7e9b      	ldrb	r3, [r3, #26]
 80113b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80113b6:	b2da      	uxtb	r2, r3
 80113b8:	687b      	ldr	r3, [r7, #4]
 80113ba:	769a      	strb	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80113bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80113c0:	e070      	b.n	80114a4 <tcp_enqueue_flags+0x1d8>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80113c2:	68fb      	ldr	r3, [r7, #12]
 80113c4:	68db      	ldr	r3, [r3, #12]
 80113c6:	f003 0303 	and.w	r3, r3, #3
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d006      	beq.n	80113dc <tcp_enqueue_flags+0x110>
 80113ce:	4b37      	ldr	r3, [pc, #220]	; (80114ac <tcp_enqueue_flags+0x1e0>)
 80113d0:	f240 3249 	movw	r2, #841	; 0x349
 80113d4:	4939      	ldr	r1, [pc, #228]	; (80114bc <tcp_enqueue_flags+0x1f0>)
 80113d6:	4837      	ldr	r0, [pc, #220]	; (80114b4 <tcp_enqueue_flags+0x1e8>)
 80113d8:	f004 fcfc 	bl	8015dd4 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 80113dc:	68fb      	ldr	r3, [r7, #12]
 80113de:	891b      	ldrh	r3, [r3, #8]
 80113e0:	2b00      	cmp	r3, #0
 80113e2:	d006      	beq.n	80113f2 <tcp_enqueue_flags+0x126>
 80113e4:	4b31      	ldr	r3, [pc, #196]	; (80114ac <tcp_enqueue_flags+0x1e0>)
 80113e6:	f240 324a 	movw	r2, #842	; 0x34a
 80113ea:	4935      	ldr	r1, [pc, #212]	; (80114c0 <tcp_enqueue_flags+0x1f4>)
 80113ec:	4831      	ldr	r0, [pc, #196]	; (80114b4 <tcp_enqueue_flags+0x1e8>)
 80113ee:	f004 fcf1 	bl	8015dd4 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80113f2:	687b      	ldr	r3, [r7, #4]
 80113f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80113f6:	2b00      	cmp	r3, #0
 80113f8:	d103      	bne.n	8011402 <tcp_enqueue_flags+0x136>
    pcb->unsent = seg;
 80113fa:	687b      	ldr	r3, [r7, #4]
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	669a      	str	r2, [r3, #104]	; 0x68
 8011400:	e00d      	b.n	801141e <tcp_enqueue_flags+0x152>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011402:	687b      	ldr	r3, [r7, #4]
 8011404:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011406:	61bb      	str	r3, [r7, #24]
 8011408:	e002      	b.n	8011410 <tcp_enqueue_flags+0x144>
 801140a:	69bb      	ldr	r3, [r7, #24]
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	61bb      	str	r3, [r7, #24]
 8011410:	69bb      	ldr	r3, [r7, #24]
 8011412:	681b      	ldr	r3, [r3, #0]
 8011414:	2b00      	cmp	r3, #0
 8011416:	d1f8      	bne.n	801140a <tcp_enqueue_flags+0x13e>
    useg->next = seg;
 8011418:	69bb      	ldr	r3, [r7, #24]
 801141a:	68fa      	ldr	r2, [r7, #12]
 801141c:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	2200      	movs	r2, #0
 8011422:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011426:	78fb      	ldrb	r3, [r7, #3]
 8011428:	f003 0302 	and.w	r3, r3, #2
 801142c:	2b00      	cmp	r3, #0
 801142e:	d104      	bne.n	801143a <tcp_enqueue_flags+0x16e>
 8011430:	78fb      	ldrb	r3, [r7, #3]
 8011432:	f003 0301 	and.w	r3, r3, #1
 8011436:	2b00      	cmp	r3, #0
 8011438:	d004      	beq.n	8011444 <tcp_enqueue_flags+0x178>
    pcb->snd_lbb++;
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801143e:	1c5a      	adds	r2, r3, #1
 8011440:	687b      	ldr	r3, [r7, #4]
 8011442:	659a      	str	r2, [r3, #88]	; 0x58
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011444:	78fb      	ldrb	r3, [r7, #3]
 8011446:	f003 0301 	and.w	r3, r3, #1
 801144a:	2b00      	cmp	r3, #0
 801144c:	d006      	beq.n	801145c <tcp_enqueue_flags+0x190>
    pcb->flags |= TF_FIN;
 801144e:	687b      	ldr	r3, [r7, #4]
 8011450:	7e9b      	ldrb	r3, [r3, #26]
 8011452:	f043 0320 	orr.w	r3, r3, #32
 8011456:	b2da      	uxtb	r2, r3
 8011458:	687b      	ldr	r3, [r7, #4]
 801145a:	769a      	strb	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801145c:	68fb      	ldr	r3, [r7, #12]
 801145e:	685b      	ldr	r3, [r3, #4]
 8011460:	4618      	mov	r0, r3
 8011462:	f7fb f923 	bl	800c6ac <pbuf_clen>
 8011466:	4603      	mov	r3, r0
 8011468:	461a      	mov	r2, r3
 801146a:	687b      	ldr	r3, [r7, #4]
 801146c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011470:	4413      	add	r3, r2
 8011472:	b29a      	uxth	r2, r3
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801147a:	687b      	ldr	r3, [r7, #4]
 801147c:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011480:	2b00      	cmp	r3, #0
 8011482:	d00e      	beq.n	80114a2 <tcp_enqueue_flags+0x1d6>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011484:	687b      	ldr	r3, [r7, #4]
 8011486:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011488:	2b00      	cmp	r3, #0
 801148a:	d10a      	bne.n	80114a2 <tcp_enqueue_flags+0x1d6>
 801148c:	687b      	ldr	r3, [r7, #4]
 801148e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011490:	2b00      	cmp	r3, #0
 8011492:	d106      	bne.n	80114a2 <tcp_enqueue_flags+0x1d6>
 8011494:	4b05      	ldr	r3, [pc, #20]	; (80114ac <tcp_enqueue_flags+0x1e0>)
 8011496:	f240 326d 	movw	r2, #877	; 0x36d
 801149a:	490a      	ldr	r1, [pc, #40]	; (80114c4 <tcp_enqueue_flags+0x1f8>)
 801149c:	4805      	ldr	r0, [pc, #20]	; (80114b4 <tcp_enqueue_flags+0x1e8>)
 801149e:	f004 fc99 	bl	8015dd4 <iprintf>
      pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80114a2:	2300      	movs	r3, #0
}
 80114a4:	4618      	mov	r0, r3
 80114a6:	3720      	adds	r7, #32
 80114a8:	46bd      	mov	sp, r7
 80114aa:	bd80      	pop	{r7, pc}
 80114ac:	08019d54 	.word	0x08019d54
 80114b0:	0801a058 	.word	0x0801a058
 80114b4:	08019db8 	.word	0x08019db8
 80114b8:	0801a0b0 	.word	0x0801a0b0
 80114bc:	0801a0ec 	.word	0x0801a0ec
 80114c0:	0801a104 	.word	0x0801a104
 80114c4:	0801a130 	.word	0x0801a130

080114c8 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80114c8:	b590      	push	{r4, r7, lr}
 80114ca:	b08b      	sub	sp, #44	; 0x2c
 80114cc:	af04      	add	r7, sp, #16
 80114ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = 0;
 80114d0:	2300      	movs	r3, #0
 80114d2:	75bb      	strb	r3, [r7, #22]
  if (pcb->flags & TF_TIMESTAMP) {
    optlen = LWIP_TCP_OPT_LENGTH(TF_SEG_OPTS_TS);
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80114d4:	7dbb      	ldrb	r3, [r7, #22]
 80114d6:	b29c      	uxth	r4, r3
 80114d8:	687b      	ldr	r3, [r7, #4]
 80114da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80114dc:	4618      	mov	r0, r3
 80114de:	f7f7 fd9b 	bl	8009018 <lwip_htonl>
 80114e2:	4603      	mov	r3, r0
 80114e4:	2200      	movs	r2, #0
 80114e6:	4621      	mov	r1, r4
 80114e8:	6878      	ldr	r0, [r7, #4]
 80114ea:	f7ff f977 	bl	80107dc <tcp_output_alloc_header>
 80114ee:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80114f0:	693b      	ldr	r3, [r7, #16]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	d109      	bne.n	801150a <tcp_send_empty_ack+0x42>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 80114f6:	687b      	ldr	r3, [r7, #4]
 80114f8:	7e9b      	ldrb	r3, [r3, #26]
 80114fa:	f043 0303 	orr.w	r3, r3, #3
 80114fe:	b2da      	uxtb	r2, r3
 8011500:	687b      	ldr	r3, [r7, #4]
 8011502:	769a      	strb	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8011504:	f06f 0301 	mvn.w	r3, #1
 8011508:	e036      	b.n	8011578 <tcp_send_empty_ack+0xb0>
  if (pcb->flags & TF_TIMESTAMP) {
    tcp_build_timestamp_option(pcb, (u32_t *)(tcphdr + 1));
  }
#endif

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801150a:	687b      	ldr	r3, [r7, #4]
 801150c:	3304      	adds	r3, #4
 801150e:	4618      	mov	r0, r3
 8011510:	f7f8 fe56 	bl	800a1c0 <ip4_route>
 8011514:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2b00      	cmp	r3, #0
 801151a:	d102      	bne.n	8011522 <tcp_send_empty_ack+0x5a>
    err = ERR_RTE;
 801151c:	23fc      	movs	r3, #252	; 0xfc
 801151e:	75fb      	strb	r3, [r7, #23]
 8011520:	e012      	b.n	8011548 <tcp_send_empty_ack+0x80>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
        &pcb->local_ip, &pcb->remote_ip);
    }
#endif
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip,
 8011522:	6879      	ldr	r1, [r7, #4]
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	1d18      	adds	r0, r3, #4
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	7a9c      	ldrb	r4, [r3, #10]
 801152c:	687b      	ldr	r3, [r7, #4]
 801152e:	7a5b      	ldrb	r3, [r3, #9]
 8011530:	68fa      	ldr	r2, [r7, #12]
 8011532:	9202      	str	r2, [sp, #8]
 8011534:	2206      	movs	r2, #6
 8011536:	9201      	str	r2, [sp, #4]
 8011538:	9300      	str	r3, [sp, #0]
 801153a:	4623      	mov	r3, r4
 801153c:	4602      	mov	r2, r0
 801153e:	6938      	ldr	r0, [r7, #16]
 8011540:	f7f8 ffe2 	bl	800a508 <ip4_output_if>
 8011544:	4603      	mov	r3, r0
 8011546:	75fb      	strb	r3, [r7, #23]
      pcb->ttl, pcb->tos, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011548:	6938      	ldr	r0, [r7, #16]
 801154a:	f7fb f815 	bl	800c578 <pbuf_free>

  if (err != ERR_OK) {
 801154e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8011552:	2b00      	cmp	r3, #0
 8011554:	d007      	beq.n	8011566 <tcp_send_empty_ack+0x9e>
    /* let tcp_fasttmr retry sending this ACK */
    pcb->flags |= (TF_ACK_DELAY | TF_ACK_NOW);
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	7e9b      	ldrb	r3, [r3, #26]
 801155a:	f043 0303 	orr.w	r3, r3, #3
 801155e:	b2da      	uxtb	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	769a      	strb	r2, [r3, #26]
 8011564:	e006      	b.n	8011574 <tcp_send_empty_ack+0xac>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 8011566:	687b      	ldr	r3, [r7, #4]
 8011568:	7e9b      	ldrb	r3, [r3, #26]
 801156a:	f023 0303 	bic.w	r3, r3, #3
 801156e:	b2da      	uxtb	r2, r3
 8011570:	687b      	ldr	r3, [r7, #4]
 8011572:	769a      	strb	r2, [r3, #26]
  }

  return err;
 8011574:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011578:	4618      	mov	r0, r3
 801157a:	371c      	adds	r7, #28
 801157c:	46bd      	mov	sp, r7
 801157e:	bd90      	pop	{r4, r7, pc}

08011580 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011580:	b5b0      	push	{r4, r5, r7, lr}
 8011582:	b08a      	sub	sp, #40	; 0x28
 8011584:	af00      	add	r7, sp, #0
 8011586:	6078      	str	r0, [r7, #4]
#if TCP_CWND_DEBUG
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011588:	687b      	ldr	r3, [r7, #4]
 801158a:	7d1b      	ldrb	r3, [r3, #20]
 801158c:	2b01      	cmp	r3, #1
 801158e:	d106      	bne.n	801159e <tcp_output+0x1e>
 8011590:	4b9b      	ldr	r3, [pc, #620]	; (8011800 <tcp_output+0x280>)
 8011592:	f240 32ed 	movw	r2, #1005	; 0x3ed
 8011596:	499b      	ldr	r1, [pc, #620]	; (8011804 <tcp_output+0x284>)
 8011598:	489b      	ldr	r0, [pc, #620]	; (8011808 <tcp_output+0x288>)
 801159a:	f004 fc1b 	bl	8015dd4 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801159e:	4b9b      	ldr	r3, [pc, #620]	; (801180c <tcp_output+0x28c>)
 80115a0:	681a      	ldr	r2, [r3, #0]
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	429a      	cmp	r2, r3
 80115a6:	d101      	bne.n	80115ac <tcp_output+0x2c>
    return ERR_OK;
 80115a8:	2300      	movs	r3, #0
 80115aa:	e1cd      	b.n	8011948 <tcp_output+0x3c8>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115b8:	429a      	cmp	r2, r3
 80115ba:	d203      	bcs.n	80115c4 <tcp_output+0x44>
 80115bc:	687b      	ldr	r3, [r7, #4]
 80115be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80115c2:	e002      	b.n	80115ca <tcp_output+0x4a>
 80115c4:	687b      	ldr	r3, [r7, #4]
 80115c6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80115ca:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80115d0:	627b      	str	r3, [r7, #36]	; 0x24
   * because the ->unsent queue is empty or because the window does
   * not allow it), construct an empty ACK segment and send it.
   *
   * If data is to be sent, we will just piggyback the ACK (see below).
   */
  if (pcb->flags & TF_ACK_NOW &&
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	7e9b      	ldrb	r3, [r3, #26]
 80115d6:	f003 0302 	and.w	r3, r3, #2
 80115da:	2b00      	cmp	r3, #0
 80115dc:	d017      	beq.n	801160e <tcp_output+0x8e>
 80115de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d00f      	beq.n	8011604 <tcp_output+0x84>
     (seg == NULL ||
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd)) {
 80115e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80115e6:	68db      	ldr	r3, [r3, #12]
 80115e8:	685b      	ldr	r3, [r3, #4]
 80115ea:	4618      	mov	r0, r3
 80115ec:	f7f7 fd14 	bl	8009018 <lwip_htonl>
 80115f0:	4602      	mov	r2, r0
 80115f2:	687b      	ldr	r3, [r7, #4]
 80115f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80115f6:	1ad3      	subs	r3, r2, r3
 80115f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80115fa:	8912      	ldrh	r2, [r2, #8]
 80115fc:	441a      	add	r2, r3
     (seg == NULL ||
 80115fe:	69bb      	ldr	r3, [r7, #24]
 8011600:	429a      	cmp	r2, r3
 8011602:	d904      	bls.n	801160e <tcp_output+0x8e>
     return tcp_send_empty_ack(pcb);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f7ff ff5f 	bl	80114c8 <tcp_send_empty_ack>
 801160a:	4603      	mov	r3, r0
 801160c:	e19c      	b.n	8011948 <tcp_output+0x3c8>
  }

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801160e:	687b      	ldr	r3, [r7, #4]
 8011610:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011612:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011614:	6a3b      	ldr	r3, [r7, #32]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d007      	beq.n	801162a <tcp_output+0xaa>
    for (; useg->next != NULL; useg = useg->next);
 801161a:	e002      	b.n	8011622 <tcp_output+0xa2>
 801161c:	6a3b      	ldr	r3, [r7, #32]
 801161e:	681b      	ldr	r3, [r3, #0]
 8011620:	623b      	str	r3, [r7, #32]
 8011622:	6a3b      	ldr	r3, [r7, #32]
 8011624:	681b      	ldr	r3, [r3, #0]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d1f8      	bne.n	801161c <tcp_output+0x9c>
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 801162a:	687b      	ldr	r3, [r7, #4]
 801162c:	3304      	adds	r3, #4
 801162e:	4618      	mov	r0, r3
 8011630:	f7f8 fdc6 	bl	800a1c0 <ip4_route>
 8011634:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011636:	697b      	ldr	r3, [r7, #20]
 8011638:	2b00      	cmp	r3, #0
 801163a:	d102      	bne.n	8011642 <tcp_output+0xc2>
    return ERR_RTE;
 801163c:	f06f 0303 	mvn.w	r3, #3
 8011640:	e182      	b.n	8011948 <tcp_output+0x3c8>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011642:	687b      	ldr	r3, [r7, #4]
 8011644:	2b00      	cmp	r3, #0
 8011646:	d003      	beq.n	8011650 <tcp_output+0xd0>
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	681b      	ldr	r3, [r3, #0]
 801164c:	2b00      	cmp	r3, #0
 801164e:	d111      	bne.n	8011674 <tcp_output+0xf4>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011650:	697b      	ldr	r3, [r7, #20]
 8011652:	2b00      	cmp	r3, #0
 8011654:	d002      	beq.n	801165c <tcp_output+0xdc>
 8011656:	697b      	ldr	r3, [r7, #20]
 8011658:	3304      	adds	r3, #4
 801165a:	e000      	b.n	801165e <tcp_output+0xde>
 801165c:	2300      	movs	r3, #0
 801165e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011660:	693b      	ldr	r3, [r7, #16]
 8011662:	2b00      	cmp	r3, #0
 8011664:	d102      	bne.n	801166c <tcp_output+0xec>
      return ERR_RTE;
 8011666:	f06f 0303 	mvn.w	r3, #3
 801166a:	e16d      	b.n	8011948 <tcp_output+0x3c8>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801166c:	693b      	ldr	r3, [r7, #16]
 801166e:	681a      	ldr	r2, [r3, #0]
 8011670:	687b      	ldr	r3, [r7, #4]
 8011672:	601a      	str	r2, [r3, #0]
   * with part of the unsent segment (which will engage zero-window probing upon
   * reception of the zero window update from the receiver). This ensures the
   * subsequent window update is reliably received. With the goal of being lightweight,
   * we avoid splitting the unsent segment and treat the window as already zero.
   */
  if (seg != NULL &&
 8011674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011676:	2b00      	cmp	r3, #0
 8011678:	f000 813e 	beq.w	80118f8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167e:	68db      	ldr	r3, [r3, #12]
 8011680:	685b      	ldr	r3, [r3, #4]
 8011682:	4618      	mov	r0, r3
 8011684:	f7f7 fcc8 	bl	8009018 <lwip_htonl>
 8011688:	4602      	mov	r2, r0
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801168e:	1ad3      	subs	r3, r2, r3
 8011690:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011692:	8912      	ldrh	r2, [r2, #8]
 8011694:	441a      	add	r2, r3
  if (seg != NULL &&
 8011696:	69bb      	ldr	r3, [r7, #24]
 8011698:	429a      	cmp	r2, r3
 801169a:	f240 812d 	bls.w	80118f8 <tcp_output+0x378>
      lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd &&
 801169e:	69bb      	ldr	r3, [r7, #24]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	f000 8129 	beq.w	80118f8 <tcp_output+0x378>
      wnd > 0 && wnd == pcb->snd_wnd && pcb->unacked == NULL) {
 80116a6:	687b      	ldr	r3, [r7, #4]
 80116a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80116ac:	461a      	mov	r2, r3
 80116ae:	69bb      	ldr	r3, [r7, #24]
 80116b0:	429a      	cmp	r2, r3
 80116b2:	f040 8121 	bne.w	80118f8 <tcp_output+0x378>
 80116b6:	687b      	ldr	r3, [r7, #4]
 80116b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	f040 811c 	bne.w	80118f8 <tcp_output+0x378>
    /* Start the persist timer */
    if (pcb->persist_backoff == 0) {
 80116c0:	687b      	ldr	r3, [r7, #4]
 80116c2:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	f040 812b 	bne.w	8011922 <tcp_output+0x3a2>
      pcb->persist_cnt = 0;
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	2200      	movs	r2, #0
 80116d0:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
      pcb->persist_backoff = 1;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	2201      	movs	r2, #1
 80116d8:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
    }
    goto output_done;
 80116dc:	e121      	b.n	8011922 <tcp_output+0x3a2>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80116de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116e0:	68db      	ldr	r3, [r3, #12]
 80116e2:	899b      	ldrh	r3, [r3, #12]
 80116e4:	b29b      	uxth	r3, r3
 80116e6:	4618      	mov	r0, r3
 80116e8:	f7f7 fc88 	bl	8008ffc <lwip_htons>
 80116ec:	4603      	mov	r3, r0
 80116ee:	f003 0304 	and.w	r3, r3, #4
 80116f2:	2b00      	cmp	r3, #0
 80116f4:	d006      	beq.n	8011704 <tcp_output+0x184>
 80116f6:	4b42      	ldr	r3, [pc, #264]	; (8011800 <tcp_output+0x280>)
 80116f8:	f240 4246 	movw	r2, #1094	; 0x446
 80116fc:	4944      	ldr	r1, [pc, #272]	; (8011810 <tcp_output+0x290>)
 80116fe:	4842      	ldr	r0, [pc, #264]	; (8011808 <tcp_output+0x288>)
 8011700:	f004 fb68 	bl	8015dd4 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011708:	2b00      	cmp	r3, #0
 801170a:	d01f      	beq.n	801174c <tcp_output+0x1cc>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	7e9b      	ldrb	r3, [r3, #26]
 8011710:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011714:	2b00      	cmp	r3, #0
 8011716:	d119      	bne.n	801174c <tcp_output+0x1cc>
 8011718:	687b      	ldr	r3, [r7, #4]
 801171a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801171c:	2b00      	cmp	r3, #0
 801171e:	d00b      	beq.n	8011738 <tcp_output+0x1b8>
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011724:	681b      	ldr	r3, [r3, #0]
 8011726:	2b00      	cmp	r3, #0
 8011728:	d110      	bne.n	801174c <tcp_output+0x1cc>
 801172a:	687b      	ldr	r3, [r7, #4]
 801172c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801172e:	891a      	ldrh	r2, [r3, #8]
 8011730:	687b      	ldr	r3, [r7, #4]
 8011732:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011734:	429a      	cmp	r2, r3
 8011736:	d209      	bcs.n	801174c <tcp_output+0x1cc>
 8011738:	687b      	ldr	r3, [r7, #4]
 801173a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801173e:	2b00      	cmp	r3, #0
 8011740:	d004      	beq.n	801174c <tcp_output+0x1cc>
 8011742:	687b      	ldr	r3, [r7, #4]
 8011744:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011748:	2b08      	cmp	r3, #8
 801174a:	d901      	bls.n	8011750 <tcp_output+0x1d0>
 801174c:	2301      	movs	r3, #1
 801174e:	e000      	b.n	8011752 <tcp_output+0x1d2>
 8011750:	2300      	movs	r3, #0
 8011752:	2b00      	cmp	r3, #0
 8011754:	d106      	bne.n	8011764 <tcp_output+0x1e4>
      ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011756:	687b      	ldr	r3, [r7, #4]
 8011758:	7e9b      	ldrb	r3, [r3, #26]
 801175a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801175e:	2b00      	cmp	r3, #0
 8011760:	f000 80e1 	beq.w	8011926 <tcp_output+0x3a6>
                            pcb->lastack,
                            lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011764:	687b      	ldr	r3, [r7, #4]
 8011766:	7d1b      	ldrb	r3, [r3, #20]
 8011768:	2b02      	cmp	r3, #2
 801176a:	d00c      	beq.n	8011786 <tcp_output+0x206>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801176c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801176e:	68dc      	ldr	r4, [r3, #12]
 8011770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011772:	68db      	ldr	r3, [r3, #12]
 8011774:	899b      	ldrh	r3, [r3, #12]
 8011776:	b29d      	uxth	r5, r3
 8011778:	2010      	movs	r0, #16
 801177a:	f7f7 fc3f 	bl	8008ffc <lwip_htons>
 801177e:	4603      	mov	r3, r0
 8011780:	432b      	orrs	r3, r5
 8011782:	b29b      	uxth	r3, r3
 8011784:	81a3      	strh	r3, [r4, #12]
    }

#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    err = tcp_output_segment(seg, pcb, netif);
 8011786:	697a      	ldr	r2, [r7, #20]
 8011788:	6879      	ldr	r1, [r7, #4]
 801178a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801178c:	f000 f8e0 	bl	8011950 <tcp_output_segment>
 8011790:	4603      	mov	r3, r0
 8011792:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011794:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011798:	2b00      	cmp	r3, #0
 801179a:	d009      	beq.n	80117b0 <tcp_output+0x230>
      /* segment could not be sent, for whatever reason */
      pcb->flags |= TF_NAGLEMEMERR;
 801179c:	687b      	ldr	r3, [r7, #4]
 801179e:	7e9b      	ldrb	r3, [r3, #26]
 80117a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80117a4:	b2da      	uxtb	r2, r3
 80117a6:	687b      	ldr	r3, [r7, #4]
 80117a8:	769a      	strb	r2, [r3, #26]
      return err;
 80117aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80117ae:	e0cb      	b.n	8011948 <tcp_output+0x3c8>
    }
    pcb->unsent = seg->next;
 80117b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117b2:	681a      	ldr	r2, [r3, #0]
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	669a      	str	r2, [r3, #104]	; 0x68
    if (pcb->state != SYN_SENT) {
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	7d1b      	ldrb	r3, [r3, #20]
 80117bc:	2b02      	cmp	r3, #2
 80117be:	d006      	beq.n	80117ce <tcp_output+0x24e>
      pcb->flags &= ~(TF_ACK_DELAY | TF_ACK_NOW);
 80117c0:	687b      	ldr	r3, [r7, #4]
 80117c2:	7e9b      	ldrb	r3, [r3, #26]
 80117c4:	f023 0303 	bic.w	r3, r3, #3
 80117c8:	b2da      	uxtb	r2, r3
 80117ca:	687b      	ldr	r3, [r7, #4]
 80117cc:	769a      	strb	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80117ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d0:	68db      	ldr	r3, [r3, #12]
 80117d2:	685b      	ldr	r3, [r3, #4]
 80117d4:	4618      	mov	r0, r3
 80117d6:	f7f7 fc1f 	bl	8009018 <lwip_htonl>
 80117da:	4604      	mov	r4, r0
 80117dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117de:	891b      	ldrh	r3, [r3, #8]
 80117e0:	461d      	mov	r5, r3
 80117e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	899b      	ldrh	r3, [r3, #12]
 80117e8:	b29b      	uxth	r3, r3
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7f7 fc06 	bl	8008ffc <lwip_htons>
 80117f0:	4603      	mov	r3, r0
 80117f2:	f003 0303 	and.w	r3, r3, #3
 80117f6:	2b00      	cmp	r3, #0
 80117f8:	d00c      	beq.n	8011814 <tcp_output+0x294>
 80117fa:	2301      	movs	r3, #1
 80117fc:	e00b      	b.n	8011816 <tcp_output+0x296>
 80117fe:	bf00      	nop
 8011800:	08019d54 	.word	0x08019d54
 8011804:	0801a158 	.word	0x0801a158
 8011808:	08019db8 	.word	0x08019db8
 801180c:	20007948 	.word	0x20007948
 8011810:	0801a180 	.word	0x0801a180
 8011814:	2300      	movs	r3, #0
 8011816:	442b      	add	r3, r5
 8011818:	4423      	add	r3, r4
 801181a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801181c:	687b      	ldr	r3, [r7, #4]
 801181e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011820:	68bb      	ldr	r3, [r7, #8]
 8011822:	1ad3      	subs	r3, r2, r3
 8011824:	2b00      	cmp	r3, #0
 8011826:	da02      	bge.n	801182e <tcp_output+0x2ae>
      pcb->snd_nxt = snd_nxt;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801182e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011830:	891b      	ldrh	r3, [r3, #8]
 8011832:	461c      	mov	r4, r3
 8011834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011836:	68db      	ldr	r3, [r3, #12]
 8011838:	899b      	ldrh	r3, [r3, #12]
 801183a:	b29b      	uxth	r3, r3
 801183c:	4618      	mov	r0, r3
 801183e:	f7f7 fbdd 	bl	8008ffc <lwip_htons>
 8011842:	4603      	mov	r3, r0
 8011844:	f003 0303 	and.w	r3, r3, #3
 8011848:	2b00      	cmp	r3, #0
 801184a:	d001      	beq.n	8011850 <tcp_output+0x2d0>
 801184c:	2301      	movs	r3, #1
 801184e:	e000      	b.n	8011852 <tcp_output+0x2d2>
 8011850:	2300      	movs	r3, #0
 8011852:	4423      	add	r3, r4
 8011854:	2b00      	cmp	r3, #0
 8011856:	d049      	beq.n	80118ec <tcp_output+0x36c>
      seg->next = NULL;
 8011858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801185a:	2200      	movs	r2, #0
 801185c:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011862:	2b00      	cmp	r3, #0
 8011864:	d105      	bne.n	8011872 <tcp_output+0x2f2>
        pcb->unacked = seg;
 8011866:	687b      	ldr	r3, [r7, #4]
 8011868:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801186a:	66da      	str	r2, [r3, #108]	; 0x6c
        useg = seg;
 801186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801186e:	623b      	str	r3, [r7, #32]
 8011870:	e03f      	b.n	80118f2 <tcp_output+0x372>
      /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011874:	68db      	ldr	r3, [r3, #12]
 8011876:	685b      	ldr	r3, [r3, #4]
 8011878:	4618      	mov	r0, r3
 801187a:	f7f7 fbcd 	bl	8009018 <lwip_htonl>
 801187e:	4604      	mov	r4, r0
 8011880:	6a3b      	ldr	r3, [r7, #32]
 8011882:	68db      	ldr	r3, [r3, #12]
 8011884:	685b      	ldr	r3, [r3, #4]
 8011886:	4618      	mov	r0, r3
 8011888:	f7f7 fbc6 	bl	8009018 <lwip_htonl>
 801188c:	4603      	mov	r3, r0
 801188e:	1ae3      	subs	r3, r4, r3
 8011890:	2b00      	cmp	r3, #0
 8011892:	da24      	bge.n	80118de <tcp_output+0x35e>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011894:	687b      	ldr	r3, [r7, #4]
 8011896:	336c      	adds	r3, #108	; 0x6c
 8011898:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801189a:	e002      	b.n	80118a2 <tcp_output+0x322>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
              cur_seg = &((*cur_seg)->next );
 801189c:	69fb      	ldr	r3, [r7, #28]
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80118a2:	69fb      	ldr	r3, [r7, #28]
 80118a4:	681b      	ldr	r3, [r3, #0]
 80118a6:	2b00      	cmp	r3, #0
 80118a8:	d011      	beq.n	80118ce <tcp_output+0x34e>
            TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80118aa:	69fb      	ldr	r3, [r7, #28]
 80118ac:	681b      	ldr	r3, [r3, #0]
 80118ae:	68db      	ldr	r3, [r3, #12]
 80118b0:	685b      	ldr	r3, [r3, #4]
 80118b2:	4618      	mov	r0, r3
 80118b4:	f7f7 fbb0 	bl	8009018 <lwip_htonl>
 80118b8:	4604      	mov	r4, r0
 80118ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118bc:	68db      	ldr	r3, [r3, #12]
 80118be:	685b      	ldr	r3, [r3, #4]
 80118c0:	4618      	mov	r0, r3
 80118c2:	f7f7 fba9 	bl	8009018 <lwip_htonl>
 80118c6:	4603      	mov	r3, r0
 80118c8:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	dbe6      	blt.n	801189c <tcp_output+0x31c>
          }
          seg->next = (*cur_seg);
 80118ce:	69fb      	ldr	r3, [r7, #28]
 80118d0:	681a      	ldr	r2, [r3, #0]
 80118d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118d4:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80118d6:	69fb      	ldr	r3, [r7, #28]
 80118d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118da:	601a      	str	r2, [r3, #0]
 80118dc:	e009      	b.n	80118f2 <tcp_output+0x372>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80118de:	6a3b      	ldr	r3, [r7, #32]
 80118e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80118e2:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80118e4:	6a3b      	ldr	r3, [r7, #32]
 80118e6:	681b      	ldr	r3, [r3, #0]
 80118e8:	623b      	str	r3, [r7, #32]
 80118ea:	e002      	b.n	80118f2 <tcp_output+0x372>
        }
      }
    /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 80118ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80118ee:	f7fc f99a 	bl	800dc26 <tcp_seg_free>
    }
    seg = pcb->unsent;
 80118f2:	687b      	ldr	r3, [r7, #4]
 80118f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80118f6:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 80118f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d014      	beq.n	8011928 <tcp_output+0x3a8>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 80118fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011900:	68db      	ldr	r3, [r3, #12]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	4618      	mov	r0, r3
 8011906:	f7f7 fb87 	bl	8009018 <lwip_htonl>
 801190a:	4602      	mov	r2, r0
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011910:	1ad3      	subs	r3, r2, r3
 8011912:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011914:	8912      	ldrh	r2, [r2, #8]
 8011916:	441a      	add	r2, r3
  while (seg != NULL &&
 8011918:	69bb      	ldr	r3, [r7, #24]
 801191a:	429a      	cmp	r2, r3
 801191c:	f67f aedf 	bls.w	80116de <tcp_output+0x15e>
 8011920:	e002      	b.n	8011928 <tcp_output+0x3a8>
    goto output_done;
 8011922:	bf00      	nop
 8011924:	e000      	b.n	8011928 <tcp_output+0x3a8>
      break;
 8011926:	bf00      	nop
  }
output_done:
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8011928:	687b      	ldr	r3, [r7, #4]
 801192a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 801192c:	2b00      	cmp	r3, #0
 801192e:	d103      	bne.n	8011938 <tcp_output+0x3b8>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011930:	687b      	ldr	r3, [r7, #4]
 8011932:	2200      	movs	r2, #0
 8011934:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  pcb->flags &= ~TF_NAGLEMEMERR;
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	7e9b      	ldrb	r3, [r3, #26]
 801193c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011940:	b2da      	uxtb	r2, r3
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	769a      	strb	r2, [r3, #26]
  return ERR_OK;
 8011946:	2300      	movs	r3, #0
}
 8011948:	4618      	mov	r0, r3
 801194a:	3728      	adds	r7, #40	; 0x28
 801194c:	46bd      	mov	sp, r7
 801194e:	bdb0      	pop	{r4, r5, r7, pc}

08011950 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8011950:	b5b0      	push	{r4, r5, r7, lr}
 8011952:	b08c      	sub	sp, #48	; 0x30
 8011954:	af04      	add	r7, sp, #16
 8011956:	60f8      	str	r0, [r7, #12]
 8011958:	60b9      	str	r1, [r7, #8]
 801195a:	607a      	str	r2, [r7, #4]
  err_t err;
  u16_t len;
  u32_t *opts;

  if (seg->p->ref != 1) {
 801195c:	68fb      	ldr	r3, [r7, #12]
 801195e:	685b      	ldr	r3, [r3, #4]
 8011960:	89db      	ldrh	r3, [r3, #14]
 8011962:	2b01      	cmp	r3, #1
 8011964:	d001      	beq.n	801196a <tcp_output_segment+0x1a>
    /* This can happen if the pbuf of this segment is still referenced by the
       netif driver due to deferred transmission. Since this function modifies
       p->len, we must not continue in this case. */
    return ERR_OK;
 8011966:	2300      	movs	r3, #0
 8011968:	e08b      	b.n	8011a82 <tcp_output_segment+0x132>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	68dc      	ldr	r4, [r3, #12]
 801196e:	68bb      	ldr	r3, [r7, #8]
 8011970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011972:	4618      	mov	r0, r3
 8011974:	f7f7 fb50 	bl	8009018 <lwip_htonl>
 8011978:	4603      	mov	r3, r0
 801197a:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801197c:	68fb      	ldr	r3, [r7, #12]
 801197e:	68dc      	ldr	r4, [r3, #12]
 8011980:	68bb      	ldr	r3, [r7, #8]
 8011982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011984:	4618      	mov	r0, r3
 8011986:	f7f7 fb39 	bl	8008ffc <lwip_htons>
 801198a:	4603      	mov	r3, r0
 801198c:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801198e:	68bb      	ldr	r3, [r7, #8]
 8011990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011992:	68ba      	ldr	r2, [r7, #8]
 8011994:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8011996:	441a      	add	r2, r3
 8011998:	68bb      	ldr	r3, [r7, #8]
 801199a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801199c:	68fb      	ldr	r3, [r7, #12]
 801199e:	68db      	ldr	r3, [r3, #12]
 80119a0:	3314      	adds	r3, #20
 80119a2:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80119a4:	68fb      	ldr	r3, [r7, #12]
 80119a6:	7a9b      	ldrb	r3, [r3, #10]
 80119a8:	f003 0301 	and.w	r3, r3, #1
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d014      	beq.n	80119da <tcp_output_segment+0x8a>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss(TCP_MSS, &pcb->local_ip, &pcb->remote_ip);
 80119b0:	68bb      	ldr	r3, [r7, #8]
 80119b2:	3304      	adds	r3, #4
 80119b4:	4619      	mov	r1, r3
 80119b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80119ba:	f7fc fc69 	bl	800e290 <tcp_eff_send_mss_impl>
 80119be:	4603      	mov	r3, r0
 80119c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80119c2:	8b7b      	ldrh	r3, [r7, #26]
 80119c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80119c8:	4618      	mov	r0, r3
 80119ca:	f7f7 fb25 	bl	8009018 <lwip_htonl>
 80119ce:	4602      	mov	r2, r0
 80119d0:	69fb      	ldr	r3, [r7, #28]
 80119d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	3304      	adds	r3, #4
 80119d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80119da:	68bb      	ldr	r3, [r7, #8]
 80119dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80119e0:	2b00      	cmp	r3, #0
 80119e2:	da02      	bge.n	80119ea <tcp_output_segment+0x9a>
    pcb->rtime = 0;
 80119e4:	68bb      	ldr	r3, [r7, #8]
 80119e6:	2200      	movs	r2, #0
 80119e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80119ea:	68bb      	ldr	r3, [r7, #8]
 80119ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d10c      	bne.n	8011a0c <tcp_output_segment+0xbc>
    pcb->rttest = tcp_ticks;
 80119f2:	4b26      	ldr	r3, [pc, #152]	; (8011a8c <tcp_output_segment+0x13c>)
 80119f4:	681a      	ldr	r2, [r3, #0]
 80119f6:	68bb      	ldr	r3, [r7, #8]
 80119f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	68db      	ldr	r3, [r3, #12]
 80119fe:	685b      	ldr	r3, [r3, #4]
 8011a00:	4618      	mov	r0, r3
 8011a02:	f7f7 fb09 	bl	8009018 <lwip_htonl>
 8011a06:	4602      	mov	r2, r0
 8011a08:	68bb      	ldr	r3, [r7, #8]
 8011a0a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
          lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
          seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	68db      	ldr	r3, [r3, #12]
 8011a10:	461a      	mov	r2, r3
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	685b      	ldr	r3, [r3, #4]
 8011a16:	685b      	ldr	r3, [r3, #4]
 8011a18:	1ad3      	subs	r3, r2, r3
 8011a1a:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	685b      	ldr	r3, [r3, #4]
 8011a20:	68fa      	ldr	r2, [r7, #12]
 8011a22:	6852      	ldr	r2, [r2, #4]
 8011a24:	8951      	ldrh	r1, [r2, #10]
 8011a26:	8b3a      	ldrh	r2, [r7, #24]
 8011a28:	1a8a      	subs	r2, r1, r2
 8011a2a:	b292      	uxth	r2, r2
 8011a2c:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	685b      	ldr	r3, [r3, #4]
 8011a32:	68fa      	ldr	r2, [r7, #12]
 8011a34:	6852      	ldr	r2, [r2, #4]
 8011a36:	8911      	ldrh	r1, [r2, #8]
 8011a38:	8b3a      	ldrh	r2, [r7, #24]
 8011a3a:	1a8a      	subs	r2, r1, r2
 8011a3c:	b292      	uxth	r2, r2
 8011a3e:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	685b      	ldr	r3, [r3, #4]
 8011a44:	68fa      	ldr	r2, [r7, #12]
 8011a46:	68d2      	ldr	r2, [r2, #12]
 8011a48:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8011a4a:	68fb      	ldr	r3, [r7, #12]
 8011a4c:	68db      	ldr	r3, [r3, #12]
 8011a4e:	2200      	movs	r2, #0
 8011a50:	741a      	strb	r2, [r3, #16]
 8011a52:	2200      	movs	r2, #0
 8011a54:	745a      	strb	r2, [r3, #17]
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011a56:	68fb      	ldr	r3, [r7, #12]
 8011a58:	6858      	ldr	r0, [r3, #4]
 8011a5a:	68b9      	ldr	r1, [r7, #8]
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	1d1c      	adds	r4, r3, #4
 8011a60:	68bb      	ldr	r3, [r7, #8]
 8011a62:	7a9d      	ldrb	r5, [r3, #10]
 8011a64:	68bb      	ldr	r3, [r7, #8]
 8011a66:	7a5b      	ldrb	r3, [r3, #9]
 8011a68:	687a      	ldr	r2, [r7, #4]
 8011a6a:	9202      	str	r2, [sp, #8]
 8011a6c:	2206      	movs	r2, #6
 8011a6e:	9201      	str	r2, [sp, #4]
 8011a70:	9300      	str	r3, [sp, #0]
 8011a72:	462b      	mov	r3, r5
 8011a74:	4622      	mov	r2, r4
 8011a76:	f7f8 fd47 	bl	800a508 <ip4_output_if>
 8011a7a:	4603      	mov	r3, r0
 8011a7c:	75fb      	strb	r3, [r7, #23]
    pcb->tos, IP_PROTO_TCP, netif);
  NETIF_SET_HWADDRHINT(netif, NULL);
  return err;
 8011a7e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011a82:	4618      	mov	r0, r3
 8011a84:	3720      	adds	r7, #32
 8011a86:	46bd      	mov	sp, r7
 8011a88:	bdb0      	pop	{r4, r5, r7, pc}
 8011a8a:	bf00      	nop
 8011a8c:	20007938 	.word	0x20007938

08011a90 <tcp_rst>:
 */
void
tcp_rst(u32_t seqno, u32_t ackno,
  const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
  u16_t local_port, u16_t remote_port)
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b08c      	sub	sp, #48	; 0x30
 8011a94:	af04      	add	r7, sp, #16
 8011a96:	60f8      	str	r0, [r7, #12]
 8011a98:	60b9      	str	r1, [r7, #8]
 8011a9a:	607a      	str	r2, [r7, #4]
 8011a9c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  struct tcp_hdr *tcphdr;
  struct netif *netif;
  p = pbuf_alloc(PBUF_IP, TCP_HLEN, PBUF_RAM);
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	2114      	movs	r1, #20
 8011aa2:	2001      	movs	r0, #1
 8011aa4:	f7fa f9f6 	bl	800be94 <pbuf_alloc>
 8011aa8:	61f8      	str	r0, [r7, #28]
  if (p == NULL) {
 8011aaa:	69fb      	ldr	r3, [r7, #28]
 8011aac:	2b00      	cmp	r3, #0
 8011aae:	d05b      	beq.n	8011b68 <tcp_rst+0xd8>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8011ab0:	69fb      	ldr	r3, [r7, #28]
 8011ab2:	895b      	ldrh	r3, [r3, #10]
 8011ab4:	2b13      	cmp	r3, #19
 8011ab6:	d806      	bhi.n	8011ac6 <tcp_rst+0x36>
 8011ab8:	4b2d      	ldr	r3, [pc, #180]	; (8011b70 <tcp_rst+0xe0>)
 8011aba:	f240 524d 	movw	r2, #1357	; 0x54d
 8011abe:	492d      	ldr	r1, [pc, #180]	; (8011b74 <tcp_rst+0xe4>)
 8011ac0:	482d      	ldr	r0, [pc, #180]	; (8011b78 <tcp_rst+0xe8>)
 8011ac2:	f004 f987 	bl	8015dd4 <iprintf>
              (p->len >= sizeof(struct tcp_hdr)));

  tcphdr = (struct tcp_hdr *)p->payload;
 8011ac6:	69fb      	ldr	r3, [r7, #28]
 8011ac8:	685b      	ldr	r3, [r3, #4]
 8011aca:	61bb      	str	r3, [r7, #24]
  tcphdr->src = lwip_htons(local_port);
 8011acc:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8011ace:	4618      	mov	r0, r3
 8011ad0:	f7f7 fa94 	bl	8008ffc <lwip_htons>
 8011ad4:	4603      	mov	r3, r0
 8011ad6:	461a      	mov	r2, r3
 8011ad8:	69bb      	ldr	r3, [r7, #24]
 8011ada:	801a      	strh	r2, [r3, #0]
  tcphdr->dest = lwip_htons(remote_port);
 8011adc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8011ade:	4618      	mov	r0, r3
 8011ae0:	f7f7 fa8c 	bl	8008ffc <lwip_htons>
 8011ae4:	4603      	mov	r3, r0
 8011ae6:	461a      	mov	r2, r3
 8011ae8:	69bb      	ldr	r3, [r7, #24]
 8011aea:	805a      	strh	r2, [r3, #2]
  tcphdr->seqno = lwip_htonl(seqno);
 8011aec:	68f8      	ldr	r0, [r7, #12]
 8011aee:	f7f7 fa93 	bl	8009018 <lwip_htonl>
 8011af2:	4602      	mov	r2, r0
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	605a      	str	r2, [r3, #4]
  tcphdr->ackno = lwip_htonl(ackno);
 8011af8:	68b8      	ldr	r0, [r7, #8]
 8011afa:	f7f7 fa8d 	bl	8009018 <lwip_htonl>
 8011afe:	4602      	mov	r2, r0
 8011b00:	69bb      	ldr	r3, [r7, #24]
 8011b02:	609a      	str	r2, [r3, #8]
  TCPH_HDRLEN_FLAGS_SET(tcphdr, TCP_HLEN/4, TCP_RST | TCP_ACK);
 8011b04:	f245 0014 	movw	r0, #20500	; 0x5014
 8011b08:	f7f7 fa78 	bl	8008ffc <lwip_htons>
 8011b0c:	4603      	mov	r3, r0
 8011b0e:	461a      	mov	r2, r3
 8011b10:	69bb      	ldr	r3, [r7, #24]
 8011b12:	819a      	strh	r2, [r3, #12]
#if LWIP_WND_SCALE
  tcphdr->wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  tcphdr->wnd = PP_HTONS(TCP_WND);
 8011b14:	69bb      	ldr	r3, [r7, #24]
 8011b16:	2200      	movs	r2, #0
 8011b18:	f042 0208 	orr.w	r2, r2, #8
 8011b1c:	739a      	strb	r2, [r3, #14]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8011b24:	73da      	strb	r2, [r3, #15]
#endif
  tcphdr->chksum = 0;
 8011b26:	69bb      	ldr	r3, [r7, #24]
 8011b28:	2200      	movs	r2, #0
 8011b2a:	741a      	strb	r2, [r3, #16]
 8011b2c:	2200      	movs	r2, #0
 8011b2e:	745a      	strb	r2, [r3, #17]
  tcphdr->urgp = 0;
 8011b30:	69bb      	ldr	r3, [r7, #24]
 8011b32:	2200      	movs	r2, #0
 8011b34:	749a      	strb	r2, [r3, #18]
 8011b36:	2200      	movs	r2, #0
 8011b38:	74da      	strb	r2, [r3, #19]

  TCP_STATS_INC(tcp.xmit);
  MIB2_STATS_INC(mib2.tcpoutrsts);

  netif = ip_route(local_ip, remote_ip);
 8011b3a:	6838      	ldr	r0, [r7, #0]
 8011b3c:	f7f8 fb40 	bl	800a1c0 <ip4_route>
 8011b40:	6178      	str	r0, [r7, #20]
  if (netif != NULL) {
 8011b42:	697b      	ldr	r3, [r7, #20]
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d00b      	beq.n	8011b60 <tcp_rst+0xd0>
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        local_ip, remote_ip);
    }
#endif
    /* Send output with hardcoded TTL/HL since we have no access to the pcb */
    ip_output_if(p, local_ip, remote_ip, TCP_TTL, 0, IP_PROTO_TCP, netif);
 8011b48:	697b      	ldr	r3, [r7, #20]
 8011b4a:	9302      	str	r3, [sp, #8]
 8011b4c:	2306      	movs	r3, #6
 8011b4e:	9301      	str	r3, [sp, #4]
 8011b50:	2300      	movs	r3, #0
 8011b52:	9300      	str	r3, [sp, #0]
 8011b54:	23ff      	movs	r3, #255	; 0xff
 8011b56:	683a      	ldr	r2, [r7, #0]
 8011b58:	6879      	ldr	r1, [r7, #4]
 8011b5a:	69f8      	ldr	r0, [r7, #28]
 8011b5c:	f7f8 fcd4 	bl	800a508 <ip4_output_if>
  }
  pbuf_free(p);
 8011b60:	69f8      	ldr	r0, [r7, #28]
 8011b62:	f7fa fd09 	bl	800c578 <pbuf_free>
 8011b66:	e000      	b.n	8011b6a <tcp_rst+0xda>
    return;
 8011b68:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8011b6a:	3720      	adds	r7, #32
 8011b6c:	46bd      	mov	sp, r7
 8011b6e:	bd80      	pop	{r7, pc}
 8011b70:	08019d54 	.word	0x08019d54
 8011b74:	08019d88 	.word	0x08019d88
 8011b78:	08019db8 	.word	0x08019db8

08011b7c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8011b7c:	b580      	push	{r7, lr}
 8011b7e:	b084      	sub	sp, #16
 8011b80:	af00      	add	r7, sp, #0
 8011b82:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  if (pcb->unacked == NULL) {
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d029      	beq.n	8011be0 <tcp_rexmit_rto+0x64>
    return;
  }

  /* Move all unacked segments to the head of the unsent queue */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next);
 8011b8c:	687b      	ldr	r3, [r7, #4]
 8011b8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b90:	60fb      	str	r3, [r7, #12]
 8011b92:	e002      	b.n	8011b9a <tcp_rexmit_rto+0x1e>
 8011b94:	68fb      	ldr	r3, [r7, #12]
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	60fb      	str	r3, [r7, #12]
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	681b      	ldr	r3, [r3, #0]
 8011b9e:	2b00      	cmp	r3, #0
 8011ba0:	d1f8      	bne.n	8011b94 <tcp_rexmit_rto+0x18>
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8011ba2:	687b      	ldr	r3, [r7, #4]
 8011ba4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8011bae:	687b      	ldr	r3, [r7, #4]
 8011bb0:	669a      	str	r2, [r3, #104]	; 0x68
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8011bb2:	687b      	ldr	r3, [r7, #4]
 8011bb4:	2200      	movs	r2, #0
 8011bb6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8011bb8:	687b      	ldr	r3, [r7, #4]
 8011bba:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bbe:	2bff      	cmp	r3, #255	; 0xff
 8011bc0:	d007      	beq.n	8011bd2 <tcp_rexmit_rto+0x56>
    ++pcb->nrtx;
 8011bc2:	687b      	ldr	r3, [r7, #4]
 8011bc4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011bc8:	3301      	adds	r3, #1
 8011bca:	b2da      	uxtb	r2, r3
 8011bcc:	687b      	ldr	r3, [r7, #4]
 8011bce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8011bd2:	687b      	ldr	r3, [r7, #4]
 8011bd4:	2200      	movs	r2, #0
 8011bd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission */
  tcp_output(pcb);
 8011bd8:	6878      	ldr	r0, [r7, #4]
 8011bda:	f7ff fcd1 	bl	8011580 <tcp_output>
 8011bde:	e000      	b.n	8011be2 <tcp_rexmit_rto+0x66>
    return;
 8011be0:	bf00      	nop
}
 8011be2:	3710      	adds	r7, #16
 8011be4:	46bd      	mov	sp, r7
 8011be6:	bd80      	pop	{r7, pc}

08011be8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit(struct tcp_pcb *pcb)
{
 8011be8:	b590      	push	{r4, r7, lr}
 8011bea:	b085      	sub	sp, #20
 8011bec:	af00      	add	r7, sp, #0
 8011bee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  if (pcb->unacked == NULL) {
 8011bf0:	687b      	ldr	r3, [r7, #4]
 8011bf2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bf4:	2b00      	cmp	r3, #0
 8011bf6:	d043      	beq.n	8011c80 <tcp_rexmit+0x98>
    return;
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  seg = pcb->unacked;
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bfc:	60bb      	str	r3, [r7, #8]
  pcb->unacked = seg->next;
 8011bfe:	68bb      	ldr	r3, [r7, #8]
 8011c00:	681a      	ldr	r2, [r3, #0]
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	66da      	str	r2, [r3, #108]	; 0x6c

  cur_seg = &(pcb->unsent);
 8011c06:	687b      	ldr	r3, [r7, #4]
 8011c08:	3368      	adds	r3, #104	; 0x68
 8011c0a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011c0c:	e002      	b.n	8011c14 <tcp_rexmit+0x2c>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
      cur_seg = &((*cur_seg)->next );
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	681b      	ldr	r3, [r3, #0]
 8011c12:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8011c14:	68fb      	ldr	r3, [r7, #12]
 8011c16:	681b      	ldr	r3, [r3, #0]
 8011c18:	2b00      	cmp	r3, #0
 8011c1a:	d011      	beq.n	8011c40 <tcp_rexmit+0x58>
    TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	68db      	ldr	r3, [r3, #12]
 8011c22:	685b      	ldr	r3, [r3, #4]
 8011c24:	4618      	mov	r0, r3
 8011c26:	f7f7 f9f7 	bl	8009018 <lwip_htonl>
 8011c2a:	4604      	mov	r4, r0
 8011c2c:	68bb      	ldr	r3, [r7, #8]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	685b      	ldr	r3, [r3, #4]
 8011c32:	4618      	mov	r0, r3
 8011c34:	f7f7 f9f0 	bl	8009018 <lwip_htonl>
 8011c38:	4603      	mov	r3, r0
 8011c3a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8011c3c:	2b00      	cmp	r3, #0
 8011c3e:	dbe6      	blt.n	8011c0e <tcp_rexmit+0x26>
  }
  seg->next = *cur_seg;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	681a      	ldr	r2, [r3, #0]
 8011c44:	68bb      	ldr	r3, [r7, #8]
 8011c46:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8011c48:	68fb      	ldr	r3, [r7, #12]
 8011c4a:	68ba      	ldr	r2, [r7, #8]
 8011c4c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	681b      	ldr	r3, [r3, #0]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	d103      	bne.n	8011c5e <tcp_rexmit+0x76>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	2200      	movs	r2, #0
 8011c5a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8011c5e:	687b      	ldr	r3, [r7, #4]
 8011c60:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c64:	2bff      	cmp	r3, #255	; 0xff
 8011c66:	d007      	beq.n	8011c78 <tcp_rexmit+0x90>
    ++pcb->nrtx;
 8011c68:	687b      	ldr	r3, [r7, #4]
 8011c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011c6e:	3301      	adds	r3, #1
 8011c70:	b2da      	uxtb	r2, r3
 8011c72:	687b      	ldr	r3, [r7, #4]
 8011c74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	2200      	movs	r2, #0
 8011c7c:	635a      	str	r2, [r3, #52]	; 0x34
 8011c7e:	e000      	b.n	8011c82 <tcp_rexmit+0x9a>
    return;
 8011c80:	bf00      	nop

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
}
 8011c82:	3714      	adds	r7, #20
 8011c84:	46bd      	mov	sp, r7
 8011c86:	bd90      	pop	{r4, r7, pc}

08011c88 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8011c88:	b580      	push	{r7, lr}
 8011c8a:	b082      	sub	sp, #8
 8011c8c:	af00      	add	r7, sp, #0
 8011c8e:	6078      	str	r0, [r7, #4]
  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c94:	2b00      	cmp	r3, #0
 8011c96:	d04c      	beq.n	8011d32 <tcp_rexmit_fast+0xaa>
 8011c98:	687b      	ldr	r3, [r7, #4]
 8011c9a:	7e9b      	ldrb	r3, [r3, #26]
 8011c9c:	f003 0304 	and.w	r3, r3, #4
 8011ca0:	2b00      	cmp	r3, #0
 8011ca2:	d146      	bne.n	8011d32 <tcp_rexmit_fast+0xaa>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    tcp_rexmit(pcb);
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7ff ff9f 	bl	8011be8 <tcp_rexmit>

    /* Set ssthresh to half of the minimum of the current
     * cwnd and the advertised window */
    pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8011caa:	687b      	ldr	r3, [r7, #4]
 8011cac:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011cb0:	687b      	ldr	r3, [r7, #4]
 8011cb2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cb6:	429a      	cmp	r2, r3
 8011cb8:	d208      	bcs.n	8011ccc <tcp_rexmit_fast+0x44>
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8011cc0:	2b00      	cmp	r3, #0
 8011cc2:	da00      	bge.n	8011cc6 <tcp_rexmit_fast+0x3e>
 8011cc4:	3301      	adds	r3, #1
 8011cc6:	105b      	asrs	r3, r3, #1
 8011cc8:	b29b      	uxth	r3, r3
 8011cca:	e007      	b.n	8011cdc <tcp_rexmit_fast+0x54>
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	da00      	bge.n	8011cd8 <tcp_rexmit_fast+0x50>
 8011cd6:	3301      	adds	r3, #1
 8011cd8:	105b      	asrs	r3, r3, #1
 8011cda:	b29b      	uxth	r3, r3
 8011cdc:	687a      	ldr	r2, [r7, #4]
 8011cde:	f8a2 304a 	strh.w	r3, [r2, #74]	; 0x4a

    /* The minimum value for ssthresh should be 2 MSS */
    if (pcb->ssthresh < (2U * pcb->mss)) {
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8011ce8:	461a      	mov	r2, r3
 8011cea:	687b      	ldr	r3, [r7, #4]
 8011cec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cee:	005b      	lsls	r3, r3, #1
 8011cf0:	429a      	cmp	r2, r3
 8011cf2:	d206      	bcs.n	8011d02 <tcp_rexmit_fast+0x7a>
      LWIP_DEBUGF(TCP_FR_DEBUG,
                  ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                   " should be min 2 mss %"U16_F"...\n",
                   pcb->ssthresh, (u16_t)(2*pcb->mss)));
      pcb->ssthresh = 2*pcb->mss;
 8011cf4:	687b      	ldr	r3, [r7, #4]
 8011cf6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011cf8:	005b      	lsls	r3, r3, #1
 8011cfa:	b29a      	uxth	r2, r3
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    }

    pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8011d02:	687b      	ldr	r3, [r7, #4]
 8011d04:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011d0c:	4619      	mov	r1, r3
 8011d0e:	0049      	lsls	r1, r1, #1
 8011d10:	440b      	add	r3, r1
 8011d12:	b29b      	uxth	r3, r3
 8011d14:	4413      	add	r3, r2
 8011d16:	b29a      	uxth	r2, r3
 8011d18:	687b      	ldr	r3, [r7, #4]
 8011d1a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->flags |= TF_INFR;
 8011d1e:	687b      	ldr	r3, [r7, #4]
 8011d20:	7e9b      	ldrb	r3, [r3, #26]
 8011d22:	f043 0304 	orr.w	r3, r3, #4
 8011d26:	b2da      	uxtb	r2, r3
 8011d28:	687b      	ldr	r3, [r7, #4]
 8011d2a:	769a      	strb	r2, [r3, #26]

    /* Reset the retransmission timer to prevent immediate rto retransmissions */
    pcb->rtime = 0;
 8011d2c:	687b      	ldr	r3, [r7, #4]
 8011d2e:	2200      	movs	r2, #0
 8011d30:	861a      	strh	r2, [r3, #48]	; 0x30
  }
}
 8011d32:	bf00      	nop
 8011d34:	3708      	adds	r7, #8
 8011d36:	46bd      	mov	sp, r7
 8011d38:	bd80      	pop	{r7, pc}

08011d3a <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8011d3a:	b580      	push	{r7, lr}
 8011d3c:	b08a      	sub	sp, #40	; 0x28
 8011d3e:	af04      	add	r7, sp, #16
 8011d40:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, 0, 0, lwip_htonl(pcb->snd_nxt - 1));
 8011d42:	687b      	ldr	r3, [r7, #4]
 8011d44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011d46:	3b01      	subs	r3, #1
 8011d48:	4618      	mov	r0, r3
 8011d4a:	f7f7 f965 	bl	8009018 <lwip_htonl>
 8011d4e:	4603      	mov	r3, r0
 8011d50:	2200      	movs	r2, #0
 8011d52:	2100      	movs	r1, #0
 8011d54:	6878      	ldr	r0, [r7, #4]
 8011d56:	f7fe fd41 	bl	80107dc <tcp_output_alloc_header>
 8011d5a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d102      	bne.n	8011d68 <tcp_keepalive+0x2e>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8011d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011d66:	e021      	b.n	8011dac <tcp_keepalive+0x72>
  }
  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011d68:	687b      	ldr	r3, [r7, #4]
 8011d6a:	3304      	adds	r3, #4
 8011d6c:	4618      	mov	r0, r3
 8011d6e:	f7f8 fa27 	bl	800a1c0 <ip4_route>
 8011d72:	60f8      	str	r0, [r7, #12]
  if (netif == NULL) {
 8011d74:	68fb      	ldr	r3, [r7, #12]
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d102      	bne.n	8011d80 <tcp_keepalive+0x46>
    err = ERR_RTE;
 8011d7a:	23fc      	movs	r3, #252	; 0xfc
 8011d7c:	75fb      	strb	r3, [r7, #23]
 8011d7e:	e010      	b.n	8011da2 <tcp_keepalive+0x68>
#endif /* CHECKSUM_GEN_TCP */
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl, 0, IP_PROTO_TCP, netif);
 8011d80:	6879      	ldr	r1, [r7, #4]
 8011d82:	687b      	ldr	r3, [r7, #4]
 8011d84:	1d1a      	adds	r2, r3, #4
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	7a98      	ldrb	r0, [r3, #10]
 8011d8a:	68fb      	ldr	r3, [r7, #12]
 8011d8c:	9302      	str	r3, [sp, #8]
 8011d8e:	2306      	movs	r3, #6
 8011d90:	9301      	str	r3, [sp, #4]
 8011d92:	2300      	movs	r3, #0
 8011d94:	9300      	str	r3, [sp, #0]
 8011d96:	4603      	mov	r3, r0
 8011d98:	6938      	ldr	r0, [r7, #16]
 8011d9a:	f7f8 fbb5 	bl	800a508 <ip4_output_if>
 8011d9e:	4603      	mov	r3, r0
 8011da0:	75fb      	strb	r3, [r7, #23]
    NETIF_SET_HWADDRHINT(netif, NULL);
  }
  pbuf_free(p);
 8011da2:	6938      	ldr	r0, [r7, #16]
 8011da4:	f7fa fbe8 	bl	800c578 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8011dac:	4618      	mov	r0, r3
 8011dae:	3718      	adds	r7, #24
 8011db0:	46bd      	mov	sp, r7
 8011db2:	bd80      	pop	{r7, pc}

08011db4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8011db4:	b590      	push	{r4, r7, lr}
 8011db6:	b08f      	sub	sp, #60	; 0x3c
 8011db8:	af04      	add	r7, sp, #16
 8011dba:	6078      	str	r0, [r7, #4]
  LWIP_DEBUGF(TCP_DEBUG,
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  seg = pcb->unacked;
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dc0:	623b      	str	r3, [r7, #32]

  if (seg == NULL) {
 8011dc2:	6a3b      	ldr	r3, [r7, #32]
 8011dc4:	2b00      	cmp	r3, #0
 8011dc6:	d102      	bne.n	8011dce <tcp_zero_window_probe+0x1a>
    seg = pcb->unsent;
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011dcc:	623b      	str	r3, [r7, #32]
  }
  if (seg == NULL) {
 8011dce:	6a3b      	ldr	r3, [r7, #32]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d101      	bne.n	8011dd8 <tcp_zero_window_probe+0x24>
    /* nothing to send, zero window probe not needed */
    return ERR_OK;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	e085      	b.n	8011ee4 <tcp_zero_window_probe+0x130>
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8011dd8:	6a3b      	ldr	r3, [r7, #32]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	899b      	ldrh	r3, [r3, #12]
 8011dde:	b29b      	uxth	r3, r3
 8011de0:	4618      	mov	r0, r3
 8011de2:	f7f7 f90b 	bl	8008ffc <lwip_htons>
 8011de6:	4603      	mov	r3, r0
 8011de8:	f003 0301 	and.w	r3, r3, #1
 8011dec:	2b00      	cmp	r3, #0
 8011dee:	d005      	beq.n	8011dfc <tcp_zero_window_probe+0x48>
 8011df0:	6a3b      	ldr	r3, [r7, #32]
 8011df2:	891b      	ldrh	r3, [r3, #8]
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d101      	bne.n	8011dfc <tcp_zero_window_probe+0x48>
 8011df8:	2301      	movs	r3, #1
 8011dfa:	e000      	b.n	8011dfe <tcp_zero_window_probe+0x4a>
 8011dfc:	2300      	movs	r3, #0
 8011dfe:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8011e00:	7ffb      	ldrb	r3, [r7, #31]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	bf0c      	ite	eq
 8011e06:	2301      	moveq	r3, #1
 8011e08:	2300      	movne	r3, #0
 8011e0a:	b2db      	uxtb	r3, r3
 8011e0c:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, 0, len, seg->tcphdr->seqno);
 8011e0e:	6a3b      	ldr	r3, [r7, #32]
 8011e10:	68db      	ldr	r3, [r3, #12]
 8011e12:	685b      	ldr	r3, [r3, #4]
 8011e14:	8bba      	ldrh	r2, [r7, #28]
 8011e16:	2100      	movs	r1, #0
 8011e18:	6878      	ldr	r0, [r7, #4]
 8011e1a:	f7fe fcdf 	bl	80107dc <tcp_output_alloc_header>
 8011e1e:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8011e20:	69bb      	ldr	r3, [r7, #24]
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d102      	bne.n	8011e2c <tcp_zero_window_probe+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8011e26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e2a:	e05b      	b.n	8011ee4 <tcp_zero_window_probe+0x130>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8011e2c:	69bb      	ldr	r3, [r7, #24]
 8011e2e:	685b      	ldr	r3, [r3, #4]
 8011e30:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8011e32:	7ffb      	ldrb	r3, [r7, #31]
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d00e      	beq.n	8011e56 <tcp_zero_window_probe+0xa2>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8011e38:	697b      	ldr	r3, [r7, #20]
 8011e3a:	899b      	ldrh	r3, [r3, #12]
 8011e3c:	b29b      	uxth	r3, r3
 8011e3e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011e42:	b29c      	uxth	r4, r3
 8011e44:	2011      	movs	r0, #17
 8011e46:	f7f7 f8d9 	bl	8008ffc <lwip_htons>
 8011e4a:	4603      	mov	r3, r0
 8011e4c:	4323      	orrs	r3, r4
 8011e4e:	b29a      	uxth	r2, r3
 8011e50:	697b      	ldr	r3, [r7, #20]
 8011e52:	819a      	strh	r2, [r3, #12]
 8011e54:	e010      	b.n	8011e78 <tcp_zero_window_probe+0xc4>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8011e56:	69bb      	ldr	r3, [r7, #24]
 8011e58:	685b      	ldr	r3, [r3, #4]
 8011e5a:	3314      	adds	r3, #20
 8011e5c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8011e5e:	6a3b      	ldr	r3, [r7, #32]
 8011e60:	6858      	ldr	r0, [r3, #4]
 8011e62:	6a3b      	ldr	r3, [r7, #32]
 8011e64:	685b      	ldr	r3, [r3, #4]
 8011e66:	891a      	ldrh	r2, [r3, #8]
 8011e68:	6a3b      	ldr	r3, [r7, #32]
 8011e6a:	891b      	ldrh	r3, [r3, #8]
 8011e6c:	1ad3      	subs	r3, r2, r3
 8011e6e:	b29b      	uxth	r3, r3
 8011e70:	2201      	movs	r2, #1
 8011e72:	6939      	ldr	r1, [r7, #16]
 8011e74:	f7fa fd7c 	bl	800c970 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8011e78:	6a3b      	ldr	r3, [r7, #32]
 8011e7a:	68db      	ldr	r3, [r3, #12]
 8011e7c:	685b      	ldr	r3, [r3, #4]
 8011e7e:	4618      	mov	r0, r3
 8011e80:	f7f7 f8ca 	bl	8009018 <lwip_htonl>
 8011e84:	4603      	mov	r3, r0
 8011e86:	3301      	adds	r3, #1
 8011e88:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011e8a:	687b      	ldr	r3, [r7, #4]
 8011e8c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8011e8e:	68fb      	ldr	r3, [r7, #12]
 8011e90:	1ad3      	subs	r3, r2, r3
 8011e92:	2b00      	cmp	r3, #0
 8011e94:	da02      	bge.n	8011e9c <tcp_zero_window_probe+0xe8>
    pcb->snd_nxt = snd_nxt;
 8011e96:	687b      	ldr	r3, [r7, #4]
 8011e98:	68fa      	ldr	r2, [r7, #12]
 8011e9a:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8011e9c:	687b      	ldr	r3, [r7, #4]
 8011e9e:	3304      	adds	r3, #4
 8011ea0:	4618      	mov	r0, r3
 8011ea2:	f7f8 f98d 	bl	800a1c0 <ip4_route>
 8011ea6:	60b8      	str	r0, [r7, #8]
  if (netif == NULL) {
 8011ea8:	68bb      	ldr	r3, [r7, #8]
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d103      	bne.n	8011eb6 <tcp_zero_window_probe+0x102>
    err = ERR_RTE;
 8011eae:	23fc      	movs	r3, #252	; 0xfc
 8011eb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011eb4:	e011      	b.n	8011eda <tcp_zero_window_probe+0x126>
#endif
    TCP_STATS_INC(tcp.xmit);

    /* Send output to IP */
    NETIF_SET_HWADDRHINT(netif, &(pcb->addr_hint));
    err = ip_output_if(p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8011eb6:	6879      	ldr	r1, [r7, #4]
 8011eb8:	687b      	ldr	r3, [r7, #4]
 8011eba:	1d1a      	adds	r2, r3, #4
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	7a98      	ldrb	r0, [r3, #10]
 8011ec0:	68bb      	ldr	r3, [r7, #8]
 8011ec2:	9302      	str	r3, [sp, #8]
 8011ec4:	2306      	movs	r3, #6
 8011ec6:	9301      	str	r3, [sp, #4]
 8011ec8:	2300      	movs	r3, #0
 8011eca:	9300      	str	r3, [sp, #0]
 8011ecc:	4603      	mov	r3, r0
 8011ece:	69b8      	ldr	r0, [r7, #24]
 8011ed0:	f7f8 fb1a 	bl	800a508 <ip4_output_if>
 8011ed4:	4603      	mov	r3, r0
 8011ed6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      0, IP_PROTO_TCP, netif);
    NETIF_SET_HWADDRHINT(netif, NULL);
  }

  pbuf_free(p);
 8011eda:	69b8      	ldr	r0, [r7, #24]
 8011edc:	f7fa fb4c 	bl	800c578 <pbuf_free>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8011ee0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8011ee4:	4618      	mov	r0, r3
 8011ee6:	372c      	adds	r7, #44	; 0x2c
 8011ee8:	46bd      	mov	sp, r7
 8011eea:	bd90      	pop	{r4, r7, pc}

08011eec <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8011eec:	b580      	push	{r7, lr}
 8011eee:	b082      	sub	sp, #8
 8011ef0:	af00      	add	r7, sp, #0
 8011ef2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8011ef4:	f7fa fdbe 	bl	800ca74 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8011ef8:	4b0a      	ldr	r3, [pc, #40]	; (8011f24 <tcpip_tcp_timer+0x38>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	2b00      	cmp	r3, #0
 8011efe:	d103      	bne.n	8011f08 <tcpip_tcp_timer+0x1c>
 8011f00:	4b09      	ldr	r3, [pc, #36]	; (8011f28 <tcpip_tcp_timer+0x3c>)
 8011f02:	681b      	ldr	r3, [r3, #0]
 8011f04:	2b00      	cmp	r3, #0
 8011f06:	d005      	beq.n	8011f14 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f08:	2200      	movs	r2, #0
 8011f0a:	4908      	ldr	r1, [pc, #32]	; (8011f2c <tcpip_tcp_timer+0x40>)
 8011f0c:	20fa      	movs	r0, #250	; 0xfa
 8011f0e:	f000 f86f 	bl	8011ff0 <sys_timeout>
 8011f12:	e002      	b.n	8011f1a <tcpip_tcp_timer+0x2e>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8011f14:	4b06      	ldr	r3, [pc, #24]	; (8011f30 <tcpip_tcp_timer+0x44>)
 8011f16:	2200      	movs	r2, #0
 8011f18:	601a      	str	r2, [r3, #0]
  }
}
 8011f1a:	bf00      	nop
 8011f1c:	3708      	adds	r7, #8
 8011f1e:	46bd      	mov	sp, r7
 8011f20:	bd80      	pop	{r7, pc}
 8011f22:	bf00      	nop
 8011f24:	20007934 	.word	0x20007934
 8011f28:	20007944 	.word	0x20007944
 8011f2c:	08011eed 	.word	0x08011eed
 8011f30:	20004150 	.word	0x20004150

08011f34 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8011f34:	b580      	push	{r7, lr}
 8011f36:	af00      	add	r7, sp, #0
  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8011f38:	4b0a      	ldr	r3, [pc, #40]	; (8011f64 <tcp_timer_needed+0x30>)
 8011f3a:	681b      	ldr	r3, [r3, #0]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d10f      	bne.n	8011f60 <tcp_timer_needed+0x2c>
 8011f40:	4b09      	ldr	r3, [pc, #36]	; (8011f68 <tcp_timer_needed+0x34>)
 8011f42:	681b      	ldr	r3, [r3, #0]
 8011f44:	2b00      	cmp	r3, #0
 8011f46:	d103      	bne.n	8011f50 <tcp_timer_needed+0x1c>
 8011f48:	4b08      	ldr	r3, [pc, #32]	; (8011f6c <tcp_timer_needed+0x38>)
 8011f4a:	681b      	ldr	r3, [r3, #0]
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d007      	beq.n	8011f60 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8011f50:	4b04      	ldr	r3, [pc, #16]	; (8011f64 <tcp_timer_needed+0x30>)
 8011f52:	2201      	movs	r2, #1
 8011f54:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8011f56:	2200      	movs	r2, #0
 8011f58:	4905      	ldr	r1, [pc, #20]	; (8011f70 <tcp_timer_needed+0x3c>)
 8011f5a:	20fa      	movs	r0, #250	; 0xfa
 8011f5c:	f000 f848 	bl	8011ff0 <sys_timeout>
  }
}
 8011f60:	bf00      	nop
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	20004150 	.word	0x20004150
 8011f68:	20007934 	.word	0x20007934
 8011f6c:	20007944 	.word	0x20007944
 8011f70:	08011eed 	.word	0x08011eed

08011f74 <cyclic_timer>:
 *
 * @param arg unused argument
 */
static void
cyclic_timer(void *arg)
{
 8011f74:	b580      	push	{r7, lr}
 8011f76:	b084      	sub	sp, #16
 8011f78:	af00      	add	r7, sp, #0
 8011f7a:	6078      	str	r0, [r7, #4]
  const struct lwip_cyclic_timer* cyclic = (const struct lwip_cyclic_timer*)arg;
 8011f7c:	687b      	ldr	r3, [r7, #4]
 8011f7e:	60fb      	str	r3, [r7, #12]
#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8011f80:	68fb      	ldr	r3, [r7, #12]
 8011f82:	685b      	ldr	r3, [r3, #4]
 8011f84:	4798      	blx	r3
  sys_timeout(cyclic->interval_ms, cyclic_timer, arg);
 8011f86:	68fb      	ldr	r3, [r7, #12]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	4903      	ldr	r1, [pc, #12]	; (8011f9c <cyclic_timer+0x28>)
 8011f8e:	4618      	mov	r0, r3
 8011f90:	f000 f82e 	bl	8011ff0 <sys_timeout>
}
 8011f94:	bf00      	nop
 8011f96:	3710      	adds	r7, #16
 8011f98:	46bd      	mov	sp, r7
 8011f9a:	bd80      	pop	{r7, pc}
 8011f9c:	08011f75 	.word	0x08011f75

08011fa0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8011fa0:	b580      	push	{r7, lr}
 8011fa2:	b082      	sub	sp, #8
 8011fa4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fa6:	2301      	movs	r3, #1
 8011fa8:	607b      	str	r3, [r7, #4]
 8011faa:	e00e      	b.n	8011fca <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, cyclic_timer, LWIP_CONST_CAST(void*, &lwip_cyclic_timers[i]));
 8011fac:	4a0d      	ldr	r2, [pc, #52]	; (8011fe4 <sys_timeouts_init+0x44>)
 8011fae:	687b      	ldr	r3, [r7, #4]
 8011fb0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8011fb4:	687b      	ldr	r3, [r7, #4]
 8011fb6:	00db      	lsls	r3, r3, #3
 8011fb8:	4a0a      	ldr	r2, [pc, #40]	; (8011fe4 <sys_timeouts_init+0x44>)
 8011fba:	4413      	add	r3, r2
 8011fbc:	461a      	mov	r2, r3
 8011fbe:	490a      	ldr	r1, [pc, #40]	; (8011fe8 <sys_timeouts_init+0x48>)
 8011fc0:	f000 f816 	bl	8011ff0 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8011fc4:	687b      	ldr	r3, [r7, #4]
 8011fc6:	3301      	adds	r3, #1
 8011fc8:	607b      	str	r3, [r7, #4]
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	2b02      	cmp	r3, #2
 8011fce:	d9ed      	bls.n	8011fac <sys_timeouts_init+0xc>
  }

  /* Initialise timestamp for sys_check_timeouts */
  timeouts_last_time = sys_now();
 8011fd0:	f001 fb28 	bl	8013624 <sys_now>
 8011fd4:	4602      	mov	r2, r0
 8011fd6:	4b05      	ldr	r3, [pc, #20]	; (8011fec <sys_timeouts_init+0x4c>)
 8011fd8:	601a      	str	r2, [r3, #0]
}
 8011fda:	bf00      	nop
 8011fdc:	3708      	adds	r7, #8
 8011fde:	46bd      	mov	sp, r7
 8011fe0:	bd80      	pop	{r7, pc}
 8011fe2:	bf00      	nop
 8011fe4:	0801a5b4 	.word	0x0801a5b4
 8011fe8:	08011f75 	.word	0x08011f75
 8011fec:	2000414c 	.word	0x2000414c

08011ff0 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char* handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8011ff0:	b580      	push	{r7, lr}
 8011ff2:	b088      	sub	sp, #32
 8011ff4:	af00      	add	r7, sp, #0
 8011ff6:	60f8      	str	r0, [r7, #12]
 8011ff8:	60b9      	str	r1, [r7, #8]
 8011ffa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;
  u32_t now, diff;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8011ffc:	200a      	movs	r0, #10
 8011ffe:	f7f9 fd0f 	bl	800ba20 <memp_malloc>
 8012002:	6178      	str	r0, [r7, #20]
  if (timeout == NULL) {
 8012004:	697b      	ldr	r3, [r7, #20]
 8012006:	2b00      	cmp	r3, #0
 8012008:	d10a      	bne.n	8012020 <sys_timeout+0x30>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801200a:	697b      	ldr	r3, [r7, #20]
 801200c:	2b00      	cmp	r3, #0
 801200e:	f040 8084 	bne.w	801211a <sys_timeout+0x12a>
 8012012:	4b44      	ldr	r3, [pc, #272]	; (8012124 <sys_timeout+0x134>)
 8012014:	22d4      	movs	r2, #212	; 0xd4
 8012016:	4944      	ldr	r1, [pc, #272]	; (8012128 <sys_timeout+0x138>)
 8012018:	4844      	ldr	r0, [pc, #272]	; (801212c <sys_timeout+0x13c>)
 801201a:	f003 fedb 	bl	8015dd4 <iprintf>
    return;
 801201e:	e07c      	b.n	801211a <sys_timeout+0x12a>
  }

  now = sys_now();
 8012020:	f001 fb00 	bl	8013624 <sys_now>
 8012024:	6138      	str	r0, [r7, #16]
  if (next_timeout == NULL) {
 8012026:	4b42      	ldr	r3, [pc, #264]	; (8012130 <sys_timeout+0x140>)
 8012028:	681b      	ldr	r3, [r3, #0]
 801202a:	2b00      	cmp	r3, #0
 801202c:	d105      	bne.n	801203a <sys_timeout+0x4a>
    diff = 0;
 801202e:	2300      	movs	r3, #0
 8012030:	61bb      	str	r3, [r7, #24]
    timeouts_last_time = now;
 8012032:	4a40      	ldr	r2, [pc, #256]	; (8012134 <sys_timeout+0x144>)
 8012034:	693b      	ldr	r3, [r7, #16]
 8012036:	6013      	str	r3, [r2, #0]
 8012038:	e004      	b.n	8012044 <sys_timeout+0x54>
  } else {
    diff = now - timeouts_last_time;
 801203a:	4b3e      	ldr	r3, [pc, #248]	; (8012134 <sys_timeout+0x144>)
 801203c:	681b      	ldr	r3, [r3, #0]
 801203e:	693a      	ldr	r2, [r7, #16]
 8012040:	1ad3      	subs	r3, r2, r3
 8012042:	61bb      	str	r3, [r7, #24]
  }

  timeout->next = NULL;
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	2200      	movs	r2, #0
 8012048:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	68ba      	ldr	r2, [r7, #8]
 801204e:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012050:	697b      	ldr	r3, [r7, #20]
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	60da      	str	r2, [r3, #12]
  timeout->time = msecs + diff;
 8012056:	68fa      	ldr	r2, [r7, #12]
 8012058:	69bb      	ldr	r3, [r7, #24]
 801205a:	441a      	add	r2, r3
 801205c:	697b      	ldr	r3, [r7, #20]
 801205e:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p msecs=%"U32_F" handler=%s arg=%p\n",
    (void *)timeout, msecs, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012060:	4b33      	ldr	r3, [pc, #204]	; (8012130 <sys_timeout+0x140>)
 8012062:	681b      	ldr	r3, [r3, #0]
 8012064:	2b00      	cmp	r3, #0
 8012066:	d103      	bne.n	8012070 <sys_timeout+0x80>
    next_timeout = timeout;
 8012068:	4a31      	ldr	r2, [pc, #196]	; (8012130 <sys_timeout+0x140>)
 801206a:	697b      	ldr	r3, [r7, #20]
 801206c:	6013      	str	r3, [r2, #0]
    return;
 801206e:	e055      	b.n	801211c <sys_timeout+0x12c>
  }

  if (next_timeout->time > msecs) {
 8012070:	4b2f      	ldr	r3, [pc, #188]	; (8012130 <sys_timeout+0x140>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	685a      	ldr	r2, [r3, #4]
 8012076:	68fb      	ldr	r3, [r7, #12]
 8012078:	429a      	cmp	r2, r3
 801207a:	d90f      	bls.n	801209c <sys_timeout+0xac>
    next_timeout->time -= msecs;
 801207c:	4b2c      	ldr	r3, [pc, #176]	; (8012130 <sys_timeout+0x140>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	4a2b      	ldr	r2, [pc, #172]	; (8012130 <sys_timeout+0x140>)
 8012082:	6812      	ldr	r2, [r2, #0]
 8012084:	6851      	ldr	r1, [r2, #4]
 8012086:	68fa      	ldr	r2, [r7, #12]
 8012088:	1a8a      	subs	r2, r1, r2
 801208a:	605a      	str	r2, [r3, #4]
    timeout->next = next_timeout;
 801208c:	4b28      	ldr	r3, [pc, #160]	; (8012130 <sys_timeout+0x140>)
 801208e:	681a      	ldr	r2, [r3, #0]
 8012090:	697b      	ldr	r3, [r7, #20]
 8012092:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012094:	4a26      	ldr	r2, [pc, #152]	; (8012130 <sys_timeout+0x140>)
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	6013      	str	r3, [r2, #0]
 801209a:	e03f      	b.n	801211c <sys_timeout+0x12c>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801209c:	4b24      	ldr	r3, [pc, #144]	; (8012130 <sys_timeout+0x140>)
 801209e:	681b      	ldr	r3, [r3, #0]
 80120a0:	61fb      	str	r3, [r7, #28]
 80120a2:	e036      	b.n	8012112 <sys_timeout+0x122>
      timeout->time -= t->time;
 80120a4:	697b      	ldr	r3, [r7, #20]
 80120a6:	685a      	ldr	r2, [r3, #4]
 80120a8:	69fb      	ldr	r3, [r7, #28]
 80120aa:	685b      	ldr	r3, [r3, #4]
 80120ac:	1ad2      	subs	r2, r2, r3
 80120ae:	697b      	ldr	r3, [r7, #20]
 80120b0:	605a      	str	r2, [r3, #4]
      if (t->next == NULL || t->next->time > timeout->time) {
 80120b2:	69fb      	ldr	r3, [r7, #28]
 80120b4:	681b      	ldr	r3, [r3, #0]
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d006      	beq.n	80120c8 <sys_timeout+0xd8>
 80120ba:	69fb      	ldr	r3, [r7, #28]
 80120bc:	681b      	ldr	r3, [r3, #0]
 80120be:	685a      	ldr	r2, [r3, #4]
 80120c0:	697b      	ldr	r3, [r7, #20]
 80120c2:	685b      	ldr	r3, [r3, #4]
 80120c4:	429a      	cmp	r2, r3
 80120c6:	d921      	bls.n	801210c <sys_timeout+0x11c>
        if (t->next != NULL) {
 80120c8:	69fb      	ldr	r3, [r7, #28]
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d009      	beq.n	80120e4 <sys_timeout+0xf4>
          t->next->time -= timeout->time;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	69fa      	ldr	r2, [r7, #28]
 80120d6:	6812      	ldr	r2, [r2, #0]
 80120d8:	6851      	ldr	r1, [r2, #4]
 80120da:	697a      	ldr	r2, [r7, #20]
 80120dc:	6852      	ldr	r2, [r2, #4]
 80120de:	1a8a      	subs	r2, r1, r2
 80120e0:	605a      	str	r2, [r3, #4]
 80120e2:	e00b      	b.n	80120fc <sys_timeout+0x10c>
        } else if (timeout->time > msecs) {
 80120e4:	697b      	ldr	r3, [r7, #20]
 80120e6:	685a      	ldr	r2, [r3, #4]
 80120e8:	68fb      	ldr	r3, [r7, #12]
 80120ea:	429a      	cmp	r2, r3
 80120ec:	d906      	bls.n	80120fc <sys_timeout+0x10c>
          /* If this is the case, 'timeouts_last_time' and 'now' differs too much.
             This can be due to sys_check_timeouts() not being called at the right
             times, but also when stopping in a breakpoint. Anyway, let's assume
             this is not wanted, so add the first timer's time instead of 'diff' */
          timeout->time = msecs + next_timeout->time;
 80120ee:	4b10      	ldr	r3, [pc, #64]	; (8012130 <sys_timeout+0x140>)
 80120f0:	681b      	ldr	r3, [r3, #0]
 80120f2:	685a      	ldr	r2, [r3, #4]
 80120f4:	68fb      	ldr	r3, [r7, #12]
 80120f6:	441a      	add	r2, r3
 80120f8:	697b      	ldr	r3, [r7, #20]
 80120fa:	605a      	str	r2, [r3, #4]
        }
        timeout->next = t->next;
 80120fc:	69fb      	ldr	r3, [r7, #28]
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	697b      	ldr	r3, [r7, #20]
 8012102:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012104:	69fb      	ldr	r3, [r7, #28]
 8012106:	697a      	ldr	r2, [r7, #20]
 8012108:	601a      	str	r2, [r3, #0]
        break;
 801210a:	e007      	b.n	801211c <sys_timeout+0x12c>
    for (t = next_timeout; t != NULL; t = t->next) {
 801210c:	69fb      	ldr	r3, [r7, #28]
 801210e:	681b      	ldr	r3, [r3, #0]
 8012110:	61fb      	str	r3, [r7, #28]
 8012112:	69fb      	ldr	r3, [r7, #28]
 8012114:	2b00      	cmp	r3, #0
 8012116:	d1c5      	bne.n	80120a4 <sys_timeout+0xb4>
 8012118:	e000      	b.n	801211c <sys_timeout+0x12c>
    return;
 801211a:	bf00      	nop
      }
    }
  }
}
 801211c:	3720      	adds	r7, #32
 801211e:	46bd      	mov	sp, r7
 8012120:	bd80      	pop	{r7, pc}
 8012122:	bf00      	nop
 8012124:	0801a198 	.word	0x0801a198
 8012128:	0801a1cc 	.word	0x0801a1cc
 801212c:	0801a20c 	.word	0x0801a20c
 8012130:	20004148 	.word	0x20004148
 8012134:	2000414c 	.word	0x2000414c

08012138 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8012138:	b580      	push	{r7, lr}
 801213a:	b084      	sub	sp, #16
 801213c:	af00      	add	r7, sp, #0
 801213e:	6078      	str	r0, [r7, #4]
 8012140:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  if (next_timeout == NULL) {
 8012142:	4b20      	ldr	r3, [pc, #128]	; (80121c4 <sys_untimeout+0x8c>)
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	2b00      	cmp	r3, #0
 8012148:	d037      	beq.n	80121ba <sys_untimeout+0x82>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 801214a:	4b1e      	ldr	r3, [pc, #120]	; (80121c4 <sys_untimeout+0x8c>)
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	60bb      	str	r3, [r7, #8]
 8012150:	2300      	movs	r3, #0
 8012152:	60fb      	str	r3, [r7, #12]
 8012154:	e02c      	b.n	80121b0 <sys_untimeout+0x78>
    if ((t->h == handler) && (t->arg == arg)) {
 8012156:	68bb      	ldr	r3, [r7, #8]
 8012158:	689a      	ldr	r2, [r3, #8]
 801215a:	687b      	ldr	r3, [r7, #4]
 801215c:	429a      	cmp	r2, r3
 801215e:	d122      	bne.n	80121a6 <sys_untimeout+0x6e>
 8012160:	68bb      	ldr	r3, [r7, #8]
 8012162:	68da      	ldr	r2, [r3, #12]
 8012164:	683b      	ldr	r3, [r7, #0]
 8012166:	429a      	cmp	r2, r3
 8012168:	d11d      	bne.n	80121a6 <sys_untimeout+0x6e>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 801216a:	68fb      	ldr	r3, [r7, #12]
 801216c:	2b00      	cmp	r3, #0
 801216e:	d104      	bne.n	801217a <sys_untimeout+0x42>
        next_timeout = t->next;
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	4a13      	ldr	r2, [pc, #76]	; (80121c4 <sys_untimeout+0x8c>)
 8012176:	6013      	str	r3, [r2, #0]
 8012178:	e003      	b.n	8012182 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 801217a:	68bb      	ldr	r3, [r7, #8]
 801217c:	681a      	ldr	r2, [r3, #0]
 801217e:	68fb      	ldr	r3, [r7, #12]
 8012180:	601a      	str	r2, [r3, #0]
      }
      /* If not the last one, add time of this one back to next */
      if (t->next != NULL) {
 8012182:	68bb      	ldr	r3, [r7, #8]
 8012184:	681b      	ldr	r3, [r3, #0]
 8012186:	2b00      	cmp	r3, #0
 8012188:	d008      	beq.n	801219c <sys_untimeout+0x64>
        t->next->time += t->time;
 801218a:	68bb      	ldr	r3, [r7, #8]
 801218c:	681b      	ldr	r3, [r3, #0]
 801218e:	68ba      	ldr	r2, [r7, #8]
 8012190:	6812      	ldr	r2, [r2, #0]
 8012192:	6851      	ldr	r1, [r2, #4]
 8012194:	68ba      	ldr	r2, [r7, #8]
 8012196:	6852      	ldr	r2, [r2, #4]
 8012198:	440a      	add	r2, r1
 801219a:	605a      	str	r2, [r3, #4]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 801219c:	68b9      	ldr	r1, [r7, #8]
 801219e:	200a      	movs	r0, #10
 80121a0:	f7f9 fc90 	bl	800bac4 <memp_free>
      return;
 80121a4:	e00a      	b.n	80121bc <sys_untimeout+0x84>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 80121a6:	68bb      	ldr	r3, [r7, #8]
 80121a8:	60fb      	str	r3, [r7, #12]
 80121aa:	68bb      	ldr	r3, [r7, #8]
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	60bb      	str	r3, [r7, #8]
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	2b00      	cmp	r3, #0
 80121b4:	d1cf      	bne.n	8012156 <sys_untimeout+0x1e>
    }
  }
  return;
 80121b6:	bf00      	nop
 80121b8:	e000      	b.n	80121bc <sys_untimeout+0x84>
    return;
 80121ba:	bf00      	nop
}
 80121bc:	3710      	adds	r7, #16
 80121be:	46bd      	mov	sp, r7
 80121c0:	bd80      	pop	{r7, pc}
 80121c2:	bf00      	nop
 80121c4:	20004148 	.word	0x20004148

080121c8 <sys_check_timeouts>:
#if !NO_SYS && !defined __DOXYGEN__
static
#endif /* !NO_SYS */
void
sys_check_timeouts(void)
{
 80121c8:	b580      	push	{r7, lr}
 80121ca:	b086      	sub	sp, #24
 80121cc:	af00      	add	r7, sp, #0
  if (next_timeout) {
 80121ce:	4b24      	ldr	r3, [pc, #144]	; (8012260 <sys_check_timeouts+0x98>)
 80121d0:	681b      	ldr	r3, [r3, #0]
 80121d2:	2b00      	cmp	r3, #0
 80121d4:	d03f      	beq.n	8012256 <sys_check_timeouts+0x8e>
    sys_timeout_handler handler;
    void *arg;
    u8_t had_one;
    u32_t now;

    now = sys_now();
 80121d6:	f001 fa25 	bl	8013624 <sys_now>
 80121da:	60f8      	str	r0, [r7, #12]
    /* this cares for wraparounds */
    diff = now - timeouts_last_time;
 80121dc:	4b21      	ldr	r3, [pc, #132]	; (8012264 <sys_check_timeouts+0x9c>)
 80121de:	681b      	ldr	r3, [r3, #0]
 80121e0:	68fa      	ldr	r2, [r7, #12]
 80121e2:	1ad3      	subs	r3, r2, r3
 80121e4:	617b      	str	r3, [r7, #20]
    do {
      PBUF_CHECK_FREE_OOSEQ();
      had_one = 0;
 80121e6:	2300      	movs	r3, #0
 80121e8:	74fb      	strb	r3, [r7, #19]
      tmptimeout = next_timeout;
 80121ea:	4b1d      	ldr	r3, [pc, #116]	; (8012260 <sys_check_timeouts+0x98>)
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	60bb      	str	r3, [r7, #8]
      if (tmptimeout && (tmptimeout->time <= diff)) {
 80121f0:	68bb      	ldr	r3, [r7, #8]
 80121f2:	2b00      	cmp	r3, #0
 80121f4:	d02c      	beq.n	8012250 <sys_check_timeouts+0x88>
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	685a      	ldr	r2, [r3, #4]
 80121fa:	697b      	ldr	r3, [r7, #20]
 80121fc:	429a      	cmp	r2, r3
 80121fe:	d827      	bhi.n	8012250 <sys_check_timeouts+0x88>
        /* timeout has expired */
        had_one = 1;
 8012200:	2301      	movs	r3, #1
 8012202:	74fb      	strb	r3, [r7, #19]
        timeouts_last_time += tmptimeout->time;
 8012204:	68bb      	ldr	r3, [r7, #8]
 8012206:	685a      	ldr	r2, [r3, #4]
 8012208:	4b16      	ldr	r3, [pc, #88]	; (8012264 <sys_check_timeouts+0x9c>)
 801220a:	681b      	ldr	r3, [r3, #0]
 801220c:	4413      	add	r3, r2
 801220e:	4a15      	ldr	r2, [pc, #84]	; (8012264 <sys_check_timeouts+0x9c>)
 8012210:	6013      	str	r3, [r2, #0]
        diff -= tmptimeout->time;
 8012212:	68bb      	ldr	r3, [r7, #8]
 8012214:	685b      	ldr	r3, [r3, #4]
 8012216:	697a      	ldr	r2, [r7, #20]
 8012218:	1ad3      	subs	r3, r2, r3
 801221a:	617b      	str	r3, [r7, #20]
        next_timeout = tmptimeout->next;
 801221c:	68bb      	ldr	r3, [r7, #8]
 801221e:	681b      	ldr	r3, [r3, #0]
 8012220:	4a0f      	ldr	r2, [pc, #60]	; (8012260 <sys_check_timeouts+0x98>)
 8012222:	6013      	str	r3, [r2, #0]
        handler = tmptimeout->h;
 8012224:	68bb      	ldr	r3, [r7, #8]
 8012226:	689b      	ldr	r3, [r3, #8]
 8012228:	607b      	str	r3, [r7, #4]
        arg = tmptimeout->arg;
 801222a:	68bb      	ldr	r3, [r7, #8]
 801222c:	68db      	ldr	r3, [r3, #12]
 801222e:	603b      	str	r3, [r7, #0]
        if (handler != NULL) {
          LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s arg=%p\n",
            tmptimeout->handler_name, arg));
        }
#endif /* LWIP_DEBUG_TIMERNAMES */
        memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012230:	68b9      	ldr	r1, [r7, #8]
 8012232:	200a      	movs	r0, #10
 8012234:	f7f9 fc46 	bl	800bac4 <memp_free>
        if (handler != NULL) {
 8012238:	687b      	ldr	r3, [r7, #4]
 801223a:	2b00      	cmp	r3, #0
 801223c:	d008      	beq.n	8012250 <sys_check_timeouts+0x88>
#if !NO_SYS
          /* For LWIP_TCPIP_CORE_LOCKING, lock the core before calling the
             timeout handler function. */
          LOCK_TCPIP_CORE();
 801223e:	480a      	ldr	r0, [pc, #40]	; (8012268 <sys_check_timeouts+0xa0>)
 8012240:	f000 fd48 	bl	8012cd4 <sys_mutex_lock>
#endif /* !NO_SYS */
          handler(arg);
 8012244:	687b      	ldr	r3, [r7, #4]
 8012246:	6838      	ldr	r0, [r7, #0]
 8012248:	4798      	blx	r3
#if !NO_SYS
          UNLOCK_TCPIP_CORE();
 801224a:	4807      	ldr	r0, [pc, #28]	; (8012268 <sys_check_timeouts+0xa0>)
 801224c:	f000 fd51 	bl	8012cf2 <sys_mutex_unlock>
#endif /* !NO_SYS */
        }
        LWIP_TCPIP_THREAD_ALIVE();
      }
    /* repeat until all expired timers have been called */
    } while (had_one);
 8012250:	7cfb      	ldrb	r3, [r7, #19]
 8012252:	2b00      	cmp	r3, #0
 8012254:	d1c7      	bne.n	80121e6 <sys_check_timeouts+0x1e>
  }
}
 8012256:	bf00      	nop
 8012258:	3718      	adds	r7, #24
 801225a:	46bd      	mov	sp, r7
 801225c:	bd80      	pop	{r7, pc}
 801225e:	bf00      	nop
 8012260:	20004148 	.word	0x20004148
 8012264:	2000414c 	.word	0x2000414c
 8012268:	200041e8 	.word	0x200041e8

0801226c <sys_timeouts_sleeptime>:
#if !NO_SYS
static
#endif /* !NO_SYS */
u32_t
sys_timeouts_sleeptime(void)
{
 801226c:	b580      	push	{r7, lr}
 801226e:	b082      	sub	sp, #8
 8012270:	af00      	add	r7, sp, #0
  u32_t diff;
  if (next_timeout == NULL) {
 8012272:	4b0f      	ldr	r3, [pc, #60]	; (80122b0 <sys_timeouts_sleeptime+0x44>)
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	2b00      	cmp	r3, #0
 8012278:	d102      	bne.n	8012280 <sys_timeouts_sleeptime+0x14>
    return 0xffffffff;
 801227a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801227e:	e013      	b.n	80122a8 <sys_timeouts_sleeptime+0x3c>
  }
  diff = sys_now() - timeouts_last_time;
 8012280:	f001 f9d0 	bl	8013624 <sys_now>
 8012284:	4602      	mov	r2, r0
 8012286:	4b0b      	ldr	r3, [pc, #44]	; (80122b4 <sys_timeouts_sleeptime+0x48>)
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	1ad3      	subs	r3, r2, r3
 801228c:	607b      	str	r3, [r7, #4]
  if (diff > next_timeout->time) {
 801228e:	4b08      	ldr	r3, [pc, #32]	; (80122b0 <sys_timeouts_sleeptime+0x44>)
 8012290:	681b      	ldr	r3, [r3, #0]
 8012292:	685a      	ldr	r2, [r3, #4]
 8012294:	687b      	ldr	r3, [r7, #4]
 8012296:	429a      	cmp	r2, r3
 8012298:	d201      	bcs.n	801229e <sys_timeouts_sleeptime+0x32>
    return 0;
 801229a:	2300      	movs	r3, #0
 801229c:	e004      	b.n	80122a8 <sys_timeouts_sleeptime+0x3c>
  } else {
    return next_timeout->time - diff;
 801229e:	4b04      	ldr	r3, [pc, #16]	; (80122b0 <sys_timeouts_sleeptime+0x44>)
 80122a0:	681b      	ldr	r3, [r3, #0]
 80122a2:	685a      	ldr	r2, [r3, #4]
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	1ad3      	subs	r3, r2, r3
  }
}
 80122a8:	4618      	mov	r0, r3
 80122aa:	3708      	adds	r7, #8
 80122ac:	46bd      	mov	sp, r7
 80122ae:	bd80      	pop	{r7, pc}
 80122b0:	20004148 	.word	0x20004148
 80122b4:	2000414c 	.word	0x2000414c

080122b8 <sys_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
void
sys_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80122b8:	b580      	push	{r7, lr}
 80122ba:	b084      	sub	sp, #16
 80122bc:	af00      	add	r7, sp, #0
 80122be:	6078      	str	r0, [r7, #4]
 80122c0:	6039      	str	r1, [r7, #0]
  u32_t sleeptime;

again:
  if (!next_timeout) {
 80122c2:	4b0f      	ldr	r3, [pc, #60]	; (8012300 <sys_timeouts_mbox_fetch+0x48>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	2b00      	cmp	r3, #0
 80122c8:	d105      	bne.n	80122d6 <sys_timeouts_mbox_fetch+0x1e>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80122ca:	2200      	movs	r2, #0
 80122cc:	6839      	ldr	r1, [r7, #0]
 80122ce:	6878      	ldr	r0, [r7, #4]
 80122d0:	f000 fbcf 	bl	8012a72 <sys_arch_mbox_fetch>
    return;
 80122d4:	e011      	b.n	80122fa <sys_timeouts_mbox_fetch+0x42>
  }

  sleeptime = sys_timeouts_sleeptime();
 80122d6:	f7ff ffc9 	bl	801226c <sys_timeouts_sleeptime>
 80122da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == 0 || sys_arch_mbox_fetch(mbox, msg, sleeptime) == SYS_ARCH_TIMEOUT) {
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d008      	beq.n	80122f4 <sys_timeouts_mbox_fetch+0x3c>
 80122e2:	68fa      	ldr	r2, [r7, #12]
 80122e4:	6839      	ldr	r1, [r7, #0]
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f000 fbc3 	bl	8012a72 <sys_arch_mbox_fetch>
 80122ec:	4603      	mov	r3, r0
 80122ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80122f2:	d102      	bne.n	80122fa <sys_timeouts_mbox_fetch+0x42>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80122f4:	f7ff ff68 	bl	80121c8 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80122f8:	e7e3      	b.n	80122c2 <sys_timeouts_mbox_fetch+0xa>
  }
}
 80122fa:	3710      	adds	r7, #16
 80122fc:	46bd      	mov	sp, r7
 80122fe:	bd80      	pop	{r7, pc}
 8012300:	20004148 	.word	0x20004148

08012304 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012304:	b480      	push	{r7}
 8012306:	af00      	add	r7, sp, #0
#if LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND)
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
#endif /* LWIP_RANDOMIZE_INITIAL_LOCAL_PORTS && defined(LWIP_RAND) */
}
 8012308:	bf00      	nop
 801230a:	46bd      	mov	sp, r7
 801230c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012310:	4770      	bx	lr
	...

08012314 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012314:	b480      	push	{r7}
 8012316:	b083      	sub	sp, #12
 8012318:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801231a:	2300      	movs	r3, #0
 801231c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801231e:	4b17      	ldr	r3, [pc, #92]	; (801237c <udp_new_port+0x68>)
 8012320:	881b      	ldrh	r3, [r3, #0]
 8012322:	1c5a      	adds	r2, r3, #1
 8012324:	b291      	uxth	r1, r2
 8012326:	4a15      	ldr	r2, [pc, #84]	; (801237c <udp_new_port+0x68>)
 8012328:	8011      	strh	r1, [r2, #0]
 801232a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801232e:	4293      	cmp	r3, r2
 8012330:	d103      	bne.n	801233a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012332:	4b12      	ldr	r3, [pc, #72]	; (801237c <udp_new_port+0x68>)
 8012334:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012338:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801233a:	4b11      	ldr	r3, [pc, #68]	; (8012380 <udp_new_port+0x6c>)
 801233c:	681b      	ldr	r3, [r3, #0]
 801233e:	603b      	str	r3, [r7, #0]
 8012340:	e011      	b.n	8012366 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012342:	683b      	ldr	r3, [r7, #0]
 8012344:	8a5a      	ldrh	r2, [r3, #18]
 8012346:	4b0d      	ldr	r3, [pc, #52]	; (801237c <udp_new_port+0x68>)
 8012348:	881b      	ldrh	r3, [r3, #0]
 801234a:	429a      	cmp	r2, r3
 801234c:	d108      	bne.n	8012360 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801234e:	88fb      	ldrh	r3, [r7, #6]
 8012350:	3301      	adds	r3, #1
 8012352:	80fb      	strh	r3, [r7, #6]
 8012354:	88fb      	ldrh	r3, [r7, #6]
 8012356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801235a:	d3e0      	bcc.n	801231e <udp_new_port+0xa>
        return 0;
 801235c:	2300      	movs	r3, #0
 801235e:	e007      	b.n	8012370 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012360:	683b      	ldr	r3, [r7, #0]
 8012362:	68db      	ldr	r3, [r3, #12]
 8012364:	603b      	str	r3, [r7, #0]
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	2b00      	cmp	r3, #0
 801236a:	d1ea      	bne.n	8012342 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801236c:	4b03      	ldr	r3, [pc, #12]	; (801237c <udp_new_port+0x68>)
 801236e:	881b      	ldrh	r3, [r3, #0]
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr
 801237c:	20000010 	.word	0x20000010
 8012380:	2000794c 	.word	0x2000794c

08012384 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012384:	b480      	push	{r7}
 8012386:	b085      	sub	sp, #20
 8012388:	af00      	add	r7, sp, #0
 801238a:	60f8      	str	r0, [r7, #12]
 801238c:	60b9      	str	r1, [r7, #8]
 801238e:	4613      	mov	r3, r2
 8012390:	71fb      	strb	r3, [r7, #7]
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012392:	79fb      	ldrb	r3, [r7, #7]
 8012394:	2b00      	cmp	r3, #0
 8012396:	d018      	beq.n	80123ca <udp_input_local_match+0x46>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012398:	68fb      	ldr	r3, [r7, #12]
 801239a:	2b00      	cmp	r3, #0
 801239c:	d013      	beq.n	80123c6 <udp_input_local_match+0x42>
 801239e:	68fb      	ldr	r3, [r7, #12]
 80123a0:	681b      	ldr	r3, [r3, #0]
 80123a2:	2b00      	cmp	r3, #0
 80123a4:	d00f      	beq.n	80123c6 <udp_input_local_match+0x42>
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80123a6:	4b14      	ldr	r3, [pc, #80]	; (80123f8 <udp_input_local_match+0x74>)
 80123a8:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80123aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123ae:	d00a      	beq.n	80123c6 <udp_input_local_match+0x42>
           ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	681a      	ldr	r2, [r3, #0]
 80123b4:	4b10      	ldr	r3, [pc, #64]	; (80123f8 <udp_input_local_match+0x74>)
 80123b6:	695b      	ldr	r3, [r3, #20]
 80123b8:	405a      	eors	r2, r3
 80123ba:	68bb      	ldr	r3, [r7, #8]
 80123bc:	3308      	adds	r3, #8
 80123be:	681b      	ldr	r3, [r3, #0]
 80123c0:	4013      	ands	r3, r2
          ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d110      	bne.n	80123e8 <udp_input_local_match+0x64>
          return 1;
 80123c6:	2301      	movs	r3, #1
 80123c8:	e00f      	b.n	80123ea <udp_input_local_match+0x66>
        }
      }
    } else
#endif /* LWIP_IPV4 */
    /* Handle IPv4 and IPv6: all or exact match */
    if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	2b00      	cmp	r3, #0
 80123ce:	d009      	beq.n	80123e4 <udp_input_local_match+0x60>
 80123d0:	68fb      	ldr	r3, [r7, #12]
 80123d2:	681b      	ldr	r3, [r3, #0]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d005      	beq.n	80123e4 <udp_input_local_match+0x60>
 80123d8:	68fb      	ldr	r3, [r7, #12]
 80123da:	681a      	ldr	r2, [r3, #0]
 80123dc:	4b06      	ldr	r3, [pc, #24]	; (80123f8 <udp_input_local_match+0x74>)
 80123de:	695b      	ldr	r3, [r3, #20]
 80123e0:	429a      	cmp	r2, r3
 80123e2:	d101      	bne.n	80123e8 <udp_input_local_match+0x64>
      return 1;
 80123e4:	2301      	movs	r3, #1
 80123e6:	e000      	b.n	80123ea <udp_input_local_match+0x66>
    }
  }

  return 0;
 80123e8:	2300      	movs	r3, #0
}
 80123ea:	4618      	mov	r0, r3
 80123ec:	3714      	adds	r7, #20
 80123ee:	46bd      	mov	sp, r7
 80123f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123f4:	4770      	bx	lr
 80123f6:	bf00      	nop
 80123f8:	200041ec 	.word	0x200041ec

080123fc <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 80123fc:	b590      	push	{r4, r7, lr}
 80123fe:	b08d      	sub	sp, #52	; 0x34
 8012400:	af02      	add	r7, sp, #8
 8012402:	6078      	str	r0, [r7, #4]
 8012404:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8012406:	2300      	movs	r3, #0
 8012408:	76fb      	strb	r3, [r7, #27]
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	895b      	ldrh	r3, [r3, #10]
 801240e:	2b07      	cmp	r3, #7
 8012410:	d803      	bhi.n	801241a <udp_input+0x1e>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8012412:	6878      	ldr	r0, [r7, #4]
 8012414:	f7fa f8b0 	bl	800c578 <pbuf_free>
    goto end;
 8012418:	e0cd      	b.n	80125b6 <udp_input+0x1ba>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	685b      	ldr	r3, [r3, #4]
 801241e:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8012420:	4b67      	ldr	r3, [pc, #412]	; (80125c0 <udp_input+0x1c4>)
 8012422:	695a      	ldr	r2, [r3, #20]
 8012424:	4b66      	ldr	r3, [pc, #408]	; (80125c0 <udp_input+0x1c4>)
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	4619      	mov	r1, r3
 801242a:	4610      	mov	r0, r2
 801242c:	f7f8 f93e 	bl	800a6ac <ip4_addr_isbroadcast_u32>
 8012430:	4603      	mov	r3, r0
 8012432:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8012434:	697b      	ldr	r3, [r7, #20]
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	b29b      	uxth	r3, r3
 801243a:	4618      	mov	r0, r3
 801243c:	f7f6 fdde 	bl	8008ffc <lwip_htons>
 8012440:	4603      	mov	r3, r0
 8012442:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8012444:	697b      	ldr	r3, [r7, #20]
 8012446:	885b      	ldrh	r3, [r3, #2]
 8012448:	b29b      	uxth	r3, r3
 801244a:	4618      	mov	r0, r3
 801244c:	f7f6 fdd6 	bl	8008ffc <lwip_htons>
 8012450:	4603      	mov	r3, r0
 8012452:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print(UDP_DEBUG, ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print(UDP_DEBUG, ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8012454:	2300      	movs	r3, #0
 8012456:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8012458:	2300      	movs	r3, #0
 801245a:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801245c:	2300      	movs	r3, #0
 801245e:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012460:	4b58      	ldr	r3, [pc, #352]	; (80125c4 <udp_input+0x1c8>)
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	627b      	str	r3, [r7, #36]	; 0x24
 8012466:	e042      	b.n	80124ee <udp_input+0xf2>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print(UDP_DEBUG, &pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8012468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801246a:	8a5b      	ldrh	r3, [r3, #18]
 801246c:	89fa      	ldrh	r2, [r7, #14]
 801246e:	429a      	cmp	r2, r3
 8012470:	d138      	bne.n	80124e4 <udp_input+0xe8>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8012472:	7cfb      	ldrb	r3, [r7, #19]
 8012474:	461a      	mov	r2, r3
 8012476:	6839      	ldr	r1, [r7, #0]
 8012478:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801247a:	f7ff ff83 	bl	8012384 <udp_input_local_match>
 801247e:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8012480:	2b00      	cmp	r3, #0
 8012482:	d02f      	beq.n	80124e4 <udp_input+0xe8>
      if (((pcb->flags & UDP_FLAGS_CONNECTED) == 0) &&
 8012484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012486:	7c1b      	ldrb	r3, [r3, #16]
 8012488:	f003 0304 	and.w	r3, r3, #4
 801248c:	2b00      	cmp	r3, #0
 801248e:	d10b      	bne.n	80124a8 <udp_input+0xac>
 8012490:	69fb      	ldr	r3, [r7, #28]
 8012492:	2b00      	cmp	r3, #0
 8012494:	d006      	beq.n	80124a4 <udp_input+0xa8>
          ((uncon_pcb == NULL)
#if SO_REUSE
          /* prefer specific IPs over cath-all */
          || !ip_addr_isany(&pcb->local_ip)
 8012496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012498:	2b00      	cmp	r3, #0
 801249a:	d005      	beq.n	80124a8 <udp_input+0xac>
 801249c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801249e:	681b      	ldr	r3, [r3, #0]
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d001      	beq.n	80124a8 <udp_input+0xac>
#endif /* SO_REUSE */
          )) {
        /* the first unconnected matching PCB */
        uncon_pcb = pcb;
 80124a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124a6:	61fb      	str	r3, [r7, #28]
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 80124a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124aa:	8a9b      	ldrh	r3, [r3, #20]
 80124ac:	8a3a      	ldrh	r2, [r7, #16]
 80124ae:	429a      	cmp	r2, r3
 80124b0:	d118      	bne.n	80124e4 <udp_input+0xe8>
          (ip_addr_isany_val(pcb->remote_ip) ||
 80124b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124b4:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d005      	beq.n	80124c6 <udp_input+0xca>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 80124ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124bc:	685a      	ldr	r2, [r3, #4]
 80124be:	4b40      	ldr	r3, [pc, #256]	; (80125c0 <udp_input+0x1c4>)
 80124c0:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 80124c2:	429a      	cmp	r2, r3
 80124c4:	d10e      	bne.n	80124e4 <udp_input+0xe8>
        /* the first fully matching PCB */
        if (prev != NULL) {
 80124c6:	6a3b      	ldr	r3, [r7, #32]
 80124c8:	2b00      	cmp	r3, #0
 80124ca:	d014      	beq.n	80124f6 <udp_input+0xfa>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 80124cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ce:	68da      	ldr	r2, [r3, #12]
 80124d0:	6a3b      	ldr	r3, [r7, #32]
 80124d2:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 80124d4:	4b3b      	ldr	r3, [pc, #236]	; (80125c4 <udp_input+0x1c8>)
 80124d6:	681a      	ldr	r2, [r3, #0]
 80124d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124da:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 80124dc:	4a39      	ldr	r2, [pc, #228]	; (80125c4 <udp_input+0x1c8>)
 80124de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80124e2:	e008      	b.n	80124f6 <udp_input+0xfa>
      }
    }

    prev = pcb;
 80124e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124e6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80124e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124ea:	68db      	ldr	r3, [r3, #12]
 80124ec:	627b      	str	r3, [r7, #36]	; 0x24
 80124ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d1b9      	bne.n	8012468 <udp_input+0x6c>
 80124f4:	e000      	b.n	80124f8 <udp_input+0xfc>
        break;
 80124f6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80124f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d101      	bne.n	8012502 <udp_input+0x106>
    pcb = uncon_pcb;
 80124fe:	69fb      	ldr	r3, [r7, #28]
 8012500:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8012502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012504:	2b00      	cmp	r3, #0
 8012506:	d002      	beq.n	801250e <udp_input+0x112>
    for_us = 1;
 8012508:	2301      	movs	r3, #1
 801250a:	76fb      	strb	r3, [r7, #27]
 801250c:	e00a      	b.n	8012524 <udp_input+0x128>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801250e:	683b      	ldr	r3, [r7, #0]
 8012510:	3304      	adds	r3, #4
 8012512:	681a      	ldr	r2, [r3, #0]
 8012514:	4b2a      	ldr	r3, [pc, #168]	; (80125c0 <udp_input+0x1c4>)
 8012516:	695b      	ldr	r3, [r3, #20]
 8012518:	429a      	cmp	r2, r3
 801251a:	bf0c      	ite	eq
 801251c:	2301      	moveq	r3, #1
 801251e:	2300      	movne	r3, #0
 8012520:	b2db      	uxtb	r3, r3
 8012522:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8012524:	7efb      	ldrb	r3, [r7, #27]
 8012526:	2b00      	cmp	r3, #0
 8012528:	d042      	beq.n	80125b0 <udp_input+0x1b4>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_header(p, -UDP_HLEN)) {
 801252a:	f06f 0107 	mvn.w	r1, #7
 801252e:	6878      	ldr	r0, [r7, #4]
 8012530:	f7f9 fffe 	bl	800c530 <pbuf_header>
 8012534:	4603      	mov	r3, r0
 8012536:	2b00      	cmp	r3, #0
 8012538:	d00a      	beq.n	8012550 <udp_input+0x154>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_header failed\n", 0);
 801253a:	4b23      	ldr	r3, [pc, #140]	; (80125c8 <udp_input+0x1cc>)
 801253c:	f240 1255 	movw	r2, #341	; 0x155
 8012540:	4922      	ldr	r1, [pc, #136]	; (80125cc <udp_input+0x1d0>)
 8012542:	4823      	ldr	r0, [pc, #140]	; (80125d0 <udp_input+0x1d4>)
 8012544:	f003 fc46 	bl	8015dd4 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8012548:	6878      	ldr	r0, [r7, #4]
 801254a:	f7fa f815 	bl	800c578 <pbuf_free>
      goto end;
 801254e:	e032      	b.n	80125b6 <udp_input+0x1ba>
    }

    if (pcb != NULL) {
 8012550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012552:	2b00      	cmp	r3, #0
 8012554:	d012      	beq.n	801257c <udp_input+0x180>
          pbuf_header(p, -hdrs_len);
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8012556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012558:	699b      	ldr	r3, [r3, #24]
 801255a:	2b00      	cmp	r3, #0
 801255c:	d00a      	beq.n	8012574 <udp_input+0x178>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801255e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012560:	699c      	ldr	r4, [r3, #24]
 8012562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012564:	69d8      	ldr	r0, [r3, #28]
 8012566:	8a3b      	ldrh	r3, [r7, #16]
 8012568:	9300      	str	r3, [sp, #0]
 801256a:	4b1a      	ldr	r3, [pc, #104]	; (80125d4 <udp_input+0x1d8>)
 801256c:	687a      	ldr	r2, [r7, #4]
 801256e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012570:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8012572:	e021      	b.n	80125b8 <udp_input+0x1bc>
        pbuf_free(p);
 8012574:	6878      	ldr	r0, [r7, #4]
 8012576:	f7f9 ffff 	bl	800c578 <pbuf_free>
        goto end;
 801257a:	e01c      	b.n	80125b6 <udp_input+0x1ba>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801257c:	7cfb      	ldrb	r3, [r7, #19]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d112      	bne.n	80125a8 <udp_input+0x1ac>
 8012582:	4b0f      	ldr	r3, [pc, #60]	; (80125c0 <udp_input+0x1c4>)
 8012584:	695b      	ldr	r3, [r3, #20]
 8012586:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801258a:	2be0      	cmp	r3, #224	; 0xe0
 801258c:	d00c      	beq.n	80125a8 <udp_input+0x1ac>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801258e:	4b0c      	ldr	r3, [pc, #48]	; (80125c0 <udp_input+0x1c4>)
 8012590:	899b      	ldrh	r3, [r3, #12]
 8012592:	3308      	adds	r3, #8
 8012594:	b29b      	uxth	r3, r3
 8012596:	b21b      	sxth	r3, r3
 8012598:	4619      	mov	r1, r3
 801259a:	6878      	ldr	r0, [r7, #4]
 801259c:	f7f9 ffda 	bl	800c554 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80125a0:	2103      	movs	r1, #3
 80125a2:	6878      	ldr	r0, [r7, #4]
 80125a4:	f7f7 fd84 	bl	800a0b0 <icmp_dest_unreach>
      pbuf_free(p);
 80125a8:	6878      	ldr	r0, [r7, #4]
 80125aa:	f7f9 ffe5 	bl	800c578 <pbuf_free>
  return;
 80125ae:	e003      	b.n	80125b8 <udp_input+0x1bc>
    pbuf_free(p);
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f7f9 ffe1 	bl	800c578 <pbuf_free>
  return;
 80125b6:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80125b8:	372c      	adds	r7, #44	; 0x2c
 80125ba:	46bd      	mov	sp, r7
 80125bc:	bd90      	pop	{r4, r7, pc}
 80125be:	bf00      	nop
 80125c0:	200041ec 	.word	0x200041ec
 80125c4:	2000794c 	.word	0x2000794c
 80125c8:	0801a234 	.word	0x0801a234
 80125cc:	0801a264 	.word	0x0801a264
 80125d0:	0801a278 	.word	0x0801a278
 80125d4:	200041fc 	.word	0x200041fc

080125d8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80125d8:	b580      	push	{r7, lr}
 80125da:	b086      	sub	sp, #24
 80125dc:	af00      	add	r7, sp, #0
 80125de:	60f8      	str	r0, [r7, #12]
 80125e0:	60b9      	str	r1, [r7, #8]
 80125e2:	4613      	mov	r3, r2
 80125e4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;
  u8_t rebind;

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80125e6:	68bb      	ldr	r3, [r7, #8]
 80125e8:	2b00      	cmp	r3, #0
 80125ea:	d101      	bne.n	80125f0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80125ec:	4b36      	ldr	r3, [pc, #216]	; (80126c8 <udp_bind+0xf0>)
 80125ee:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  /* still need to check for ipaddr == NULL in IPv6 only case */
  if ((pcb == NULL) || (ipaddr == NULL)) {
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	2b00      	cmp	r3, #0
 80125f4:	d002      	beq.n	80125fc <udp_bind+0x24>
 80125f6:	68bb      	ldr	r3, [r7, #8]
 80125f8:	2b00      	cmp	r3, #0
 80125fa:	d102      	bne.n	8012602 <udp_bind+0x2a>
    return ERR_VAL;
 80125fc:	f06f 0305 	mvn.w	r3, #5
 8012600:	e05e      	b.n	80126c0 <udp_bind+0xe8>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8012602:	2300      	movs	r3, #0
 8012604:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012606:	4b31      	ldr	r3, [pc, #196]	; (80126cc <udp_bind+0xf4>)
 8012608:	681b      	ldr	r3, [r3, #0]
 801260a:	617b      	str	r3, [r7, #20]
 801260c:	e009      	b.n	8012622 <udp_bind+0x4a>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 801260e:	68fa      	ldr	r2, [r7, #12]
 8012610:	697b      	ldr	r3, [r7, #20]
 8012612:	429a      	cmp	r2, r3
 8012614:	d102      	bne.n	801261c <udp_bind+0x44>
      rebind = 1;
 8012616:	2301      	movs	r3, #1
 8012618:	74fb      	strb	r3, [r7, #19]
      break;
 801261a:	e005      	b.n	8012628 <udp_bind+0x50>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801261c:	697b      	ldr	r3, [r7, #20]
 801261e:	68db      	ldr	r3, [r3, #12]
 8012620:	617b      	str	r3, [r7, #20]
 8012622:	697b      	ldr	r3, [r7, #20]
 8012624:	2b00      	cmp	r3, #0
 8012626:	d1f2      	bne.n	801260e <udp_bind+0x36>
    }
  }

  /* no port specified? */
  if (port == 0) {
 8012628:	88fb      	ldrh	r3, [r7, #6]
 801262a:	2b00      	cmp	r3, #0
 801262c:	d109      	bne.n	8012642 <udp_bind+0x6a>
    port = udp_new_port();
 801262e:	f7ff fe71 	bl	8012314 <udp_new_port>
 8012632:	4603      	mov	r3, r0
 8012634:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8012636:	88fb      	ldrh	r3, [r7, #6]
 8012638:	2b00      	cmp	r3, #0
 801263a:	d12a      	bne.n	8012692 <udp_bind+0xba>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801263c:	f06f 0307 	mvn.w	r3, #7
 8012640:	e03e      	b.n	80126c0 <udp_bind+0xe8>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012642:	4b22      	ldr	r3, [pc, #136]	; (80126cc <udp_bind+0xf4>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	617b      	str	r3, [r7, #20]
 8012648:	e020      	b.n	801268c <udp_bind+0xb4>
      if (pcb != ipcb) {
 801264a:	68fa      	ldr	r2, [r7, #12]
 801264c:	697b      	ldr	r3, [r7, #20]
 801264e:	429a      	cmp	r2, r3
 8012650:	d019      	beq.n	8012686 <udp_bind+0xae>
      /* By default, we don't allow to bind to a port that any other udp
         PCB is already bound to, unless *all* PCBs with that port have tha
         REUSEADDR flag set. */
#if SO_REUSE
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	7a1b      	ldrb	r3, [r3, #8]
 8012656:	f003 0304 	and.w	r3, r3, #4
 801265a:	2b00      	cmp	r3, #0
 801265c:	d005      	beq.n	801266a <udp_bind+0x92>
            !ip_get_option(ipcb, SOF_REUSEADDR))
 801265e:	697b      	ldr	r3, [r7, #20]
 8012660:	7a1b      	ldrb	r3, [r3, #8]
 8012662:	f003 0304 	and.w	r3, r3, #4
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
 8012666:	2b00      	cmp	r3, #0
 8012668:	d10d      	bne.n	8012686 <udp_bind+0xae>
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801266a:	697b      	ldr	r3, [r7, #20]
 801266c:	8a5b      	ldrh	r3, [r3, #18]
 801266e:	88fa      	ldrh	r2, [r7, #6]
 8012670:	429a      	cmp	r2, r3
 8012672:	d108      	bne.n	8012686 <udp_bind+0xae>
              /* IP address matches? */
              ip_addr_cmp(&ipcb->local_ip, ipaddr)) {
 8012674:	697b      	ldr	r3, [r7, #20]
 8012676:	681a      	ldr	r2, [r3, #0]
 8012678:	68bb      	ldr	r3, [r7, #8]
 801267a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801267c:	429a      	cmp	r2, r3
 801267e:	d102      	bne.n	8012686 <udp_bind+0xae>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8012680:	f06f 0307 	mvn.w	r3, #7
 8012684:	e01c      	b.n	80126c0 <udp_bind+0xe8>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8012686:	697b      	ldr	r3, [r7, #20]
 8012688:	68db      	ldr	r3, [r3, #12]
 801268a:	617b      	str	r3, [r7, #20]
 801268c:	697b      	ldr	r3, [r7, #20]
 801268e:	2b00      	cmp	r3, #0
 8012690:	d1db      	bne.n	801264a <udp_bind+0x72>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8012692:	68bb      	ldr	r3, [r7, #8]
 8012694:	2b00      	cmp	r3, #0
 8012696:	d002      	beq.n	801269e <udp_bind+0xc6>
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	681b      	ldr	r3, [r3, #0]
 801269c:	e000      	b.n	80126a0 <udp_bind+0xc8>
 801269e:	2300      	movs	r3, #0
 80126a0:	68fa      	ldr	r2, [r7, #12]
 80126a2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	88fa      	ldrh	r2, [r7, #6]
 80126a8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80126aa:	7cfb      	ldrb	r3, [r7, #19]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d106      	bne.n	80126be <udp_bind+0xe6>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80126b0:	4b06      	ldr	r3, [pc, #24]	; (80126cc <udp_bind+0xf4>)
 80126b2:	681a      	ldr	r2, [r3, #0]
 80126b4:	68fb      	ldr	r3, [r7, #12]
 80126b6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80126b8:	4a04      	ldr	r2, [pc, #16]	; (80126cc <udp_bind+0xf4>)
 80126ba:	68fb      	ldr	r3, [r7, #12]
 80126bc:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, &pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80126be:	2300      	movs	r3, #0
}
 80126c0:	4618      	mov	r0, r3
 80126c2:	3718      	adds	r7, #24
 80126c4:	46bd      	mov	sp, r7
 80126c6:	bd80      	pop	{r7, pc}
 80126c8:	0801a4b8 	.word	0x0801a4b8
 80126cc:	2000794c 	.word	0x2000794c

080126d0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80126d0:	b480      	push	{r7}
 80126d2:	b085      	sub	sp, #20
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	60f8      	str	r0, [r7, #12]
 80126d8:	60b9      	str	r1, [r7, #8]
 80126da:	607a      	str	r2, [r7, #4]
  /* remember recv() callback and user data */
  pcb->recv = recv;
 80126dc:	68fb      	ldr	r3, [r7, #12]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80126e2:	68fb      	ldr	r3, [r7, #12]
 80126e4:	687a      	ldr	r2, [r7, #4]
 80126e6:	61da      	str	r2, [r3, #28]
}
 80126e8:	bf00      	nop
 80126ea:	3714      	adds	r7, #20
 80126ec:	46bd      	mov	sp, r7
 80126ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f2:	4770      	bx	lr

080126f4 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b084      	sub	sp, #16
 80126f8:	af00      	add	r7, sp, #0
 80126fa:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80126fc:	4b15      	ldr	r3, [pc, #84]	; (8012754 <udp_remove+0x60>)
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	429a      	cmp	r2, r3
 8012704:	d105      	bne.n	8012712 <udp_remove+0x1e>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8012706:	4b13      	ldr	r3, [pc, #76]	; (8012754 <udp_remove+0x60>)
 8012708:	681b      	ldr	r3, [r3, #0]
 801270a:	68db      	ldr	r3, [r3, #12]
 801270c:	4a11      	ldr	r2, [pc, #68]	; (8012754 <udp_remove+0x60>)
 801270e:	6013      	str	r3, [r2, #0]
 8012710:	e017      	b.n	8012742 <udp_remove+0x4e>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012712:	4b10      	ldr	r3, [pc, #64]	; (8012754 <udp_remove+0x60>)
 8012714:	681b      	ldr	r3, [r3, #0]
 8012716:	60fb      	str	r3, [r7, #12]
 8012718:	e010      	b.n	801273c <udp_remove+0x48>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801271a:	68fb      	ldr	r3, [r7, #12]
 801271c:	68db      	ldr	r3, [r3, #12]
 801271e:	2b00      	cmp	r3, #0
 8012720:	d009      	beq.n	8012736 <udp_remove+0x42>
 8012722:	68fb      	ldr	r3, [r7, #12]
 8012724:	68da      	ldr	r2, [r3, #12]
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	429a      	cmp	r2, r3
 801272a:	d104      	bne.n	8012736 <udp_remove+0x42>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801272c:	687b      	ldr	r3, [r7, #4]
 801272e:	68da      	ldr	r2, [r3, #12]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	60da      	str	r2, [r3, #12]
        break;
 8012734:	e005      	b.n	8012742 <udp_remove+0x4e>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	68db      	ldr	r3, [r3, #12]
 801273a:	60fb      	str	r3, [r7, #12]
 801273c:	68fb      	ldr	r3, [r7, #12]
 801273e:	2b00      	cmp	r3, #0
 8012740:	d1eb      	bne.n	801271a <udp_remove+0x26>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8012742:	6879      	ldr	r1, [r7, #4]
 8012744:	2000      	movs	r0, #0
 8012746:	f7f9 f9bd 	bl	800bac4 <memp_free>
}
 801274a:	bf00      	nop
 801274c:	3710      	adds	r7, #16
 801274e:	46bd      	mov	sp, r7
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	2000794c 	.word	0x2000794c

08012758 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	b082      	sub	sp, #8
 801275c:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;
  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801275e:	2000      	movs	r0, #0
 8012760:	f7f9 f95e 	bl	800ba20 <memp_malloc>
 8012764:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	2b00      	cmp	r3, #0
 801276a:	d007      	beq.n	801277c <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801276c:	2220      	movs	r2, #32
 801276e:	2100      	movs	r1, #0
 8012770:	6878      	ldr	r0, [r7, #4]
 8012772:	f003 fb27 	bl	8015dc4 <memset>
    pcb->ttl = UDP_TTL;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	22ff      	movs	r2, #255	; 0xff
 801277a:	729a      	strb	r2, [r3, #10]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801277c:	687b      	ldr	r3, [r7, #4]
}
 801277e:	4618      	mov	r0, r3
 8012780:	3708      	adds	r7, #8
 8012782:	46bd      	mov	sp, r7
 8012784:	bd80      	pop	{r7, pc}

08012786 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 8012786:	b580      	push	{r7, lr}
 8012788:	b084      	sub	sp, #16
 801278a:	af00      	add	r7, sp, #0
 801278c:	4603      	mov	r3, r0
 801278e:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;
  pcb = udp_new();
 8012790:	f7ff ffe2 	bl	8012758 <udp_new>
 8012794:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 8012796:	68fb      	ldr	r3, [r7, #12]
}
 8012798:	4618      	mov	r0, r3
 801279a:	3710      	adds	r7, #16
 801279c:	46bd      	mov	sp, r7
 801279e:	bd80      	pop	{r7, pc}

080127a0 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t* old_addr, const ip_addr_t* new_addr)
{
 80127a0:	b480      	push	{r7}
 80127a2:	b085      	sub	sp, #20
 80127a4:	af00      	add	r7, sp, #0
 80127a6:	6078      	str	r0, [r7, #4]
 80127a8:	6039      	str	r1, [r7, #0]
  struct udp_pcb* upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	2b00      	cmp	r3, #0
 80127ae:	d01e      	beq.n	80127ee <udp_netif_ip_addr_changed+0x4e>
 80127b0:	687b      	ldr	r3, [r7, #4]
 80127b2:	681b      	ldr	r3, [r3, #0]
 80127b4:	2b00      	cmp	r3, #0
 80127b6:	d01a      	beq.n	80127ee <udp_netif_ip_addr_changed+0x4e>
 80127b8:	683b      	ldr	r3, [r7, #0]
 80127ba:	2b00      	cmp	r3, #0
 80127bc:	d017      	beq.n	80127ee <udp_netif_ip_addr_changed+0x4e>
 80127be:	683b      	ldr	r3, [r7, #0]
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	2b00      	cmp	r3, #0
 80127c4:	d013      	beq.n	80127ee <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80127c6:	4b0d      	ldr	r3, [pc, #52]	; (80127fc <udp_netif_ip_addr_changed+0x5c>)
 80127c8:	681b      	ldr	r3, [r3, #0]
 80127ca:	60fb      	str	r3, [r7, #12]
 80127cc:	e00c      	b.n	80127e8 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	681a      	ldr	r2, [r3, #0]
 80127d2:	687b      	ldr	r3, [r7, #4]
 80127d4:	681b      	ldr	r3, [r3, #0]
 80127d6:	429a      	cmp	r2, r3
 80127d8:	d103      	bne.n	80127e2 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80127da:	683b      	ldr	r3, [r7, #0]
 80127dc:	681a      	ldr	r2, [r3, #0]
 80127de:	68fb      	ldr	r3, [r7, #12]
 80127e0:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	68db      	ldr	r3, [r3, #12]
 80127e6:	60fb      	str	r3, [r7, #12]
 80127e8:	68fb      	ldr	r3, [r7, #12]
 80127ea:	2b00      	cmp	r3, #0
 80127ec:	d1ef      	bne.n	80127ce <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80127ee:	bf00      	nop
 80127f0:	3714      	adds	r7, #20
 80127f2:	46bd      	mov	sp, r7
 80127f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127f8:	4770      	bx	lr
 80127fa:	bf00      	nop
 80127fc:	2000794c 	.word	0x2000794c

08012800 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8012800:	b580      	push	{r7, lr}
 8012802:	b086      	sub	sp, #24
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
 8012808:	6039      	str	r1, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  s16_t ip_hdr_offset = SIZEOF_ETH_HDR;
 801280a:	230e      	movs	r3, #14
 801280c:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  if (p->len <= SIZEOF_ETH_HDR) {
 801280e:	687b      	ldr	r3, [r7, #4]
 8012810:	895b      	ldrh	r3, [r3, #10]
 8012812:	2b0e      	cmp	r3, #14
 8012814:	d977      	bls.n	8012906 <ethernet_input+0x106>
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	685b      	ldr	r3, [r3, #4]
 801281a:	613b      	str	r3, [r7, #16]
     (unsigned)ethhdr->dest.addr[3], (unsigned)ethhdr->dest.addr[4], (unsigned)ethhdr->dest.addr[5],
     (unsigned)ethhdr->src.addr[0],  (unsigned)ethhdr->src.addr[1],  (unsigned)ethhdr->src.addr[2],
     (unsigned)ethhdr->src.addr[3],  (unsigned)ethhdr->src.addr[4],  (unsigned)ethhdr->src.addr[5],
     lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801281c:	693b      	ldr	r3, [r7, #16]
 801281e:	7b1a      	ldrb	r2, [r3, #12]
 8012820:	7b5b      	ldrb	r3, [r3, #13]
 8012822:	021b      	lsls	r3, r3, #8
 8012824:	4313      	orrs	r3, r2
 8012826:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8012828:	693b      	ldr	r3, [r7, #16]
 801282a:	781b      	ldrb	r3, [r3, #0]
 801282c:	f003 0301 	and.w	r3, r3, #1
 8012830:	2b00      	cmp	r3, #0
 8012832:	d023      	beq.n	801287c <ethernet_input+0x7c>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8012834:	693b      	ldr	r3, [r7, #16]
 8012836:	781b      	ldrb	r3, [r3, #0]
 8012838:	2b01      	cmp	r3, #1
 801283a:	d10f      	bne.n	801285c <ethernet_input+0x5c>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801283c:	693b      	ldr	r3, [r7, #16]
 801283e:	785b      	ldrb	r3, [r3, #1]
 8012840:	2b00      	cmp	r3, #0
 8012842:	d11b      	bne.n	801287c <ethernet_input+0x7c>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8012844:	693b      	ldr	r3, [r7, #16]
 8012846:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8012848:	2b5e      	cmp	r3, #94	; 0x5e
 801284a:	d117      	bne.n	801287c <ethernet_input+0x7c>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801284c:	687b      	ldr	r3, [r7, #4]
 801284e:	7b5b      	ldrb	r3, [r3, #13]
 8012850:	f043 0310 	orr.w	r3, r3, #16
 8012854:	b2da      	uxtb	r2, r3
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	735a      	strb	r2, [r3, #13]
 801285a:	e00f      	b.n	801287c <ethernet_input+0x7c>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	2206      	movs	r2, #6
 8012860:	492f      	ldr	r1, [pc, #188]	; (8012920 <ethernet_input+0x120>)
 8012862:	4618      	mov	r0, r3
 8012864:	f003 fa94 	bl	8015d90 <memcmp>
 8012868:	4603      	mov	r3, r0
 801286a:	2b00      	cmp	r3, #0
 801286c:	d106      	bne.n	801287c <ethernet_input+0x7c>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	7b5b      	ldrb	r3, [r3, #13]
 8012872:	f043 0308 	orr.w	r3, r3, #8
 8012876:	b2da      	uxtb	r2, r3
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801287c:	89fb      	ldrh	r3, [r7, #14]
 801287e:	2b08      	cmp	r3, #8
 8012880:	d003      	beq.n	801288a <ethernet_input+0x8a>
 8012882:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8012886:	d01e      	beq.n	80128c6 <ethernet_input+0xc6>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8012888:	e042      	b.n	8012910 <ethernet_input+0x110>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801288a:	683b      	ldr	r3, [r7, #0]
 801288c:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8012890:	f003 0308 	and.w	r3, r3, #8
 8012894:	2b00      	cmp	r3, #0
 8012896:	d038      	beq.n	801290a <ethernet_input+0x10a>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 8012898:	687b      	ldr	r3, [r7, #4]
 801289a:	895b      	ldrh	r3, [r3, #10]
 801289c:	461a      	mov	r2, r3
 801289e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80128a2:	429a      	cmp	r2, r3
 80128a4:	db34      	blt.n	8012910 <ethernet_input+0x110>
 80128a6:	8afb      	ldrh	r3, [r7, #22]
 80128a8:	425b      	negs	r3, r3
 80128aa:	b29b      	uxth	r3, r3
 80128ac:	b21b      	sxth	r3, r3
 80128ae:	4619      	mov	r1, r3
 80128b0:	6878      	ldr	r0, [r7, #4]
 80128b2:	f7f9 fe3d 	bl	800c530 <pbuf_header>
 80128b6:	4603      	mov	r3, r0
 80128b8:	2b00      	cmp	r3, #0
 80128ba:	d129      	bne.n	8012910 <ethernet_input+0x110>
        ip4_input(p, netif);
 80128bc:	6839      	ldr	r1, [r7, #0]
 80128be:	6878      	ldr	r0, [r7, #4]
 80128c0:	f7f7 fce6 	bl	800a290 <ip4_input>
      break;
 80128c4:	e01d      	b.n	8012902 <ethernet_input+0x102>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80128c6:	683b      	ldr	r3, [r7, #0]
 80128c8:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80128cc:	f003 0308 	and.w	r3, r3, #8
 80128d0:	2b00      	cmp	r3, #0
 80128d2:	d01c      	beq.n	801290e <ethernet_input+0x10e>
      if ((p->len < ip_hdr_offset) || pbuf_header(p, (s16_t)-ip_hdr_offset)) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	895b      	ldrh	r3, [r3, #10]
 80128d8:	461a      	mov	r2, r3
 80128da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80128de:	429a      	cmp	r2, r3
 80128e0:	db16      	blt.n	8012910 <ethernet_input+0x110>
 80128e2:	8afb      	ldrh	r3, [r7, #22]
 80128e4:	425b      	negs	r3, r3
 80128e6:	b29b      	uxth	r3, r3
 80128e8:	b21b      	sxth	r3, r3
 80128ea:	4619      	mov	r1, r3
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f7f9 fe1f 	bl	800c530 <pbuf_header>
 80128f2:	4603      	mov	r3, r0
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d10b      	bne.n	8012910 <ethernet_input+0x110>
        etharp_input(p, netif);
 80128f8:	6839      	ldr	r1, [r7, #0]
 80128fa:	6878      	ldr	r0, [r7, #4]
 80128fc:	f7f6 feb6 	bl	800966c <etharp_input>
      break;
 8012900:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8012902:	2300      	movs	r3, #0
 8012904:	e008      	b.n	8012918 <ethernet_input+0x118>
    goto free_and_return;
 8012906:	bf00      	nop
 8012908:	e002      	b.n	8012910 <ethernet_input+0x110>
        goto free_and_return;
 801290a:	bf00      	nop
 801290c:	e000      	b.n	8012910 <ethernet_input+0x110>
        goto free_and_return;
 801290e:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8012910:	6878      	ldr	r0, [r7, #4]
 8012912:	f7f9 fe31 	bl	800c578 <pbuf_free>
  return ERR_OK;
 8012916:	2300      	movs	r3, #0
}
 8012918:	4618      	mov	r0, r3
 801291a:	3718      	adds	r7, #24
 801291c:	46bd      	mov	sp, r7
 801291e:	bd80      	pop	{r7, pc}
 8012920:	0801a5cc 	.word	0x0801a5cc

08012924 <ethernet_output>:
 */
err_t
ethernet_output(struct netif* netif, struct pbuf* p,
                const struct eth_addr* src, const struct eth_addr* dst,
                u16_t eth_type)
{
 8012924:	b580      	push	{r7, lr}
 8012926:	b086      	sub	sp, #24
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
 8012930:	603b      	str	r3, [r7, #0]
  struct eth_hdr* ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8012932:	8c3b      	ldrh	r3, [r7, #32]
 8012934:	4618      	mov	r0, r3
 8012936:	f7f6 fb61 	bl	8008ffc <lwip_htons>
 801293a:	4603      	mov	r3, r0
 801293c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_header(p, SIZEOF_ETH_HDR) != 0) {
 801293e:	210e      	movs	r1, #14
 8012940:	68b8      	ldr	r0, [r7, #8]
 8012942:	f7f9 fdf5 	bl	800c530 <pbuf_header>
 8012946:	4603      	mov	r3, r0
 8012948:	2b00      	cmp	r3, #0
 801294a:	d125      	bne.n	8012998 <ethernet_output+0x74>
      goto pbuf_header_failed;
    }
  }

  ethhdr = (struct eth_hdr*)p->payload;
 801294c:	68bb      	ldr	r3, [r7, #8]
 801294e:	685b      	ldr	r3, [r3, #4]
 8012950:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8012952:	693b      	ldr	r3, [r7, #16]
 8012954:	8afa      	ldrh	r2, [r7, #22]
 8012956:	819a      	strh	r2, [r3, #12]
  ETHADDR32_COPY(&ethhdr->dest, dst);
 8012958:	693b      	ldr	r3, [r7, #16]
 801295a:	2206      	movs	r2, #6
 801295c:	6839      	ldr	r1, [r7, #0]
 801295e:	4618      	mov	r0, r3
 8012960:	f003 fa25 	bl	8015dae <memcpy>
  ETHADDR16_COPY(&ethhdr->src,  src);
 8012964:	693b      	ldr	r3, [r7, #16]
 8012966:	3306      	adds	r3, #6
 8012968:	2206      	movs	r2, #6
 801296a:	6879      	ldr	r1, [r7, #4]
 801296c:	4618      	mov	r0, r3
 801296e:	f003 fa1e 	bl	8015dae <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8012978:	2b06      	cmp	r3, #6
 801297a:	d006      	beq.n	801298a <ethernet_output+0x66>
 801297c:	4b0a      	ldr	r3, [pc, #40]	; (80129a8 <ethernet_output+0x84>)
 801297e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8012982:	490a      	ldr	r1, [pc, #40]	; (80129ac <ethernet_output+0x88>)
 8012984:	480a      	ldr	r0, [pc, #40]	; (80129b0 <ethernet_output+0x8c>)
 8012986:	f003 fa25 	bl	8015dd4 <iprintf>
    (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
    ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801298a:	68fb      	ldr	r3, [r7, #12]
 801298c:	699b      	ldr	r3, [r3, #24]
 801298e:	68b9      	ldr	r1, [r7, #8]
 8012990:	68f8      	ldr	r0, [r7, #12]
 8012992:	4798      	blx	r3
 8012994:	4603      	mov	r3, r0
 8012996:	e002      	b.n	801299e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8012998:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
    ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801299a:	f06f 0301 	mvn.w	r3, #1
}
 801299e:	4618      	mov	r0, r3
 80129a0:	3718      	adds	r7, #24
 80129a2:	46bd      	mov	sp, r7
 80129a4:	bd80      	pop	{r7, pc}
 80129a6:	bf00      	nop
 80129a8:	0801a2d0 	.word	0x0801a2d0
 80129ac:	0801a308 	.word	0x0801a308
 80129b0:	0801a33c 	.word	0x0801a33c

080129b4 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80129b4:	b580      	push	{r7, lr}
 80129b6:	b084      	sub	sp, #16
 80129b8:	af00      	add	r7, sp, #0
 80129ba:	6078      	str	r0, [r7, #4]
 80129bc:	6039      	str	r1, [r7, #0]
  osMessageQDef(QUEUE, size, void *);
 80129be:	683b      	ldr	r3, [r7, #0]
 80129c0:	60bb      	str	r3, [r7, #8]
 80129c2:	2304      	movs	r3, #4
 80129c4:	60fb      	str	r3, [r7, #12]
  
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80129c6:	f107 0308 	add.w	r3, r7, #8
 80129ca:	2100      	movs	r1, #0
 80129cc:	4618      	mov	r0, r3
 80129ce:	f7f1 fd98 	bl	8004502 <osMessageCreate>
 80129d2:	4602      	mov	r2, r0
 80129d4:	687b      	ldr	r3, [r7, #4]
 80129d6:	601a      	str	r2, [r3, #0]
      ++lwip_stats.sys.mbox.used;
      if (lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used) {
         lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
	  }
#endif /* SYS_STATS */
 if (*mbox == NULL)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	681b      	ldr	r3, [r3, #0]
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d102      	bne.n	80129e6 <sys_mbox_new+0x32>
  return ERR_MEM;
 80129e0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80129e4:	e000      	b.n	80129e8 <sys_mbox_new+0x34>
 
 return ERR_OK;
 80129e6:	2300      	movs	r3, #0
}
 80129e8:	4618      	mov	r0, r3
 80129ea:	3710      	adds	r7, #16
 80129ec:	46bd      	mov	sp, r7
 80129ee:	bd80      	pop	{r7, pc}

080129f0 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80129f0:	b580      	push	{r7, lr}
 80129f2:	b082      	sub	sp, #8
 80129f4:	af00      	add	r7, sp, #0
 80129f6:	6078      	str	r0, [r7, #4]
	if( osMessageWaiting(*mbox) )
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	681b      	ldr	r3, [r3, #0]
 80129fc:	4618      	mov	r0, r3
 80129fe:	f7f1 fe52 	bl	80046a6 <osMessageWaiting>
#endif /* SYS_STATS */
			
		// TODO notify the user of failure.
	}

	osMessageDelete(*mbox);
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	4618      	mov	r0, r3
 8012a08:	f7f1 fe63 	bl	80046d2 <osMessageDelete>

#if SYS_STATS
     --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8012a0c:	bf00      	nop
 8012a0e:	3708      	adds	r7, #8
 8012a10:	46bd      	mov	sp, r7
 8012a12:	bd80      	pop	{r7, pc}

08012a14 <sys_mbox_post>:

/*-----------------------------------------------------------------------------------*/
//   Posts the "msg" to the mailbox.
void sys_mbox_post(sys_mbox_t *mbox, void *data)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
 8012a1c:	6039      	str	r1, [r7, #0]
  while(osMessagePut(*mbox, (uint32_t)data, osWaitForever) != osOK);
 8012a1e:	bf00      	nop
 8012a20:	687b      	ldr	r3, [r7, #4]
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	6839      	ldr	r1, [r7, #0]
 8012a26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012a2a:	4618      	mov	r0, r3
 8012a2c:	f7f1 fd7c 	bl	8004528 <osMessagePut>
 8012a30:	4603      	mov	r3, r0
 8012a32:	2b00      	cmp	r3, #0
 8012a34:	d1f4      	bne.n	8012a20 <sys_mbox_post+0xc>
}
 8012a36:	bf00      	nop
 8012a38:	3708      	adds	r7, #8
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}

08012a3e <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8012a3e:	b580      	push	{r7, lr}
 8012a40:	b084      	sub	sp, #16
 8012a42:	af00      	add	r7, sp, #0
 8012a44:	6078      	str	r0, [r7, #4]
 8012a46:	6039      	str	r1, [r7, #0]
err_t result;

   if ( osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	681b      	ldr	r3, [r3, #0]
 8012a4c:	6839      	ldr	r1, [r7, #0]
 8012a4e:	2200      	movs	r2, #0
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7f1 fd69 	bl	8004528 <osMessagePut>
 8012a56:	4603      	mov	r3, r0
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d102      	bne.n	8012a62 <sys_mbox_trypost+0x24>
   {
      result = ERR_OK;
 8012a5c:	2300      	movs	r3, #0
 8012a5e:	73fb      	strb	r3, [r7, #15]
 8012a60:	e001      	b.n	8012a66 <sys_mbox_trypost+0x28>
   }
   else {
      // could not post, queue must be full
      result = ERR_MEM;
 8012a62:	23ff      	movs	r3, #255	; 0xff
 8012a64:	73fb      	strb	r3, [r7, #15]
      lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
			
   }

   return result;
 8012a66:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3710      	adds	r7, #16
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	bd80      	pop	{r7, pc}

08012a72 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8012a72:	b580      	push	{r7, lr}
 8012a74:	b08c      	sub	sp, #48	; 0x30
 8012a76:	af00      	add	r7, sp, #0
 8012a78:	61f8      	str	r0, [r7, #28]
 8012a7a:	61b9      	str	r1, [r7, #24]
 8012a7c:	617a      	str	r2, [r7, #20]
  osEvent event;
  uint32_t starttime = osKernelSysTick();;
 8012a7e:	f7f1 fb92 	bl	80041a6 <osKernelSysTick>
 8012a82:	62f8      	str	r0, [r7, #44]	; 0x2c
  
  if(timeout != 0)
 8012a84:	697b      	ldr	r3, [r7, #20]
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d017      	beq.n	8012aba <sys_arch_mbox_fetch+0x48>
  { 
    event = osMessageGet (*mbox, timeout);
 8012a8a:	69fb      	ldr	r3, [r7, #28]
 8012a8c:	6819      	ldr	r1, [r3, #0]
 8012a8e:	f107 0320 	add.w	r3, r7, #32
 8012a92:	697a      	ldr	r2, [r7, #20]
 8012a94:	4618      	mov	r0, r3
 8012a96:	f7f1 fd87 	bl	80045a8 <osMessageGet>
    
    if(event.status == osEventMessage)
 8012a9a:	6a3b      	ldr	r3, [r7, #32]
 8012a9c:	2b10      	cmp	r3, #16
 8012a9e:	d109      	bne.n	8012ab4 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8012aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012aa2:	461a      	mov	r2, r3
 8012aa4:	69bb      	ldr	r3, [r7, #24]
 8012aa6:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8012aa8:	f7f1 fb7d 	bl	80041a6 <osKernelSysTick>
 8012aac:	4602      	mov	r2, r0
 8012aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ab0:	1ad3      	subs	r3, r2, r3
 8012ab2:	e019      	b.n	8012ae8 <sys_arch_mbox_fetch+0x76>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012ab4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012ab8:	e016      	b.n	8012ae8 <sys_arch_mbox_fetch+0x76>
    } 
  }
  else
  {
    event = osMessageGet (*mbox, osWaitForever);
 8012aba:	69fb      	ldr	r3, [r7, #28]
 8012abc:	6819      	ldr	r1, [r3, #0]
 8012abe:	463b      	mov	r3, r7
 8012ac0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	f7f1 fd6f 	bl	80045a8 <osMessageGet>
 8012aca:	f107 0320 	add.w	r3, r7, #32
 8012ace:	463a      	mov	r2, r7
 8012ad0:	ca07      	ldmia	r2, {r0, r1, r2}
 8012ad2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8012ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ad8:	461a      	mov	r2, r3
 8012ada:	69bb      	ldr	r3, [r7, #24]
 8012adc:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8012ade:	f7f1 fb62 	bl	80041a6 <osKernelSysTick>
 8012ae2:	4602      	mov	r2, r0
 8012ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ae6:	1ad3      	subs	r3, r2, r3
  }
}
 8012ae8:	4618      	mov	r0, r3
 8012aea:	3730      	adds	r7, #48	; 0x30
 8012aec:	46bd      	mov	sp, r7
 8012aee:	bd80      	pop	{r7, pc}

08012af0 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8012af0:	b580      	push	{r7, lr}
 8012af2:	b086      	sub	sp, #24
 8012af4:	af00      	add	r7, sp, #0
 8012af6:	6078      	str	r0, [r7, #4]
 8012af8:	6039      	str	r1, [r7, #0]
  osEvent event;
  
  event = osMessageGet (*mbox, 0);
 8012afa:	687b      	ldr	r3, [r7, #4]
 8012afc:	6819      	ldr	r1, [r3, #0]
 8012afe:	f107 030c 	add.w	r3, r7, #12
 8012b02:	2200      	movs	r2, #0
 8012b04:	4618      	mov	r0, r3
 8012b06:	f7f1 fd4f 	bl	80045a8 <osMessageGet>
  
  if(event.status == osEventMessage)
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2b10      	cmp	r3, #16
 8012b0e:	d105      	bne.n	8012b1c <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	461a      	mov	r2, r3
 8012b14:	683b      	ldr	r3, [r7, #0]
 8012b16:	601a      	str	r2, [r3, #0]
    return ERR_OK;
 8012b18:	2300      	movs	r3, #0
 8012b1a:	e001      	b.n	8012b20 <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8012b1c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8012b20:	4618      	mov	r0, r3
 8012b22:	3718      	adds	r7, #24
 8012b24:	46bd      	mov	sp, r7
 8012b26:	bd80      	pop	{r7, pc}

08012b28 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)          
{      
 8012b28:	b480      	push	{r7}
 8012b2a:	b083      	sub	sp, #12
 8012b2c:	af00      	add	r7, sp, #0
 8012b2e:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL) 
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	681b      	ldr	r3, [r3, #0]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d101      	bne.n	8012b3c <sys_mbox_valid+0x14>
    return 0;
 8012b38:	2300      	movs	r3, #0
 8012b3a:	e000      	b.n	8012b3e <sys_mbox_valid+0x16>
  else
    return 1;
 8012b3c:	2301      	movs	r3, #1
}                                             
 8012b3e:	4618      	mov	r0, r3
 8012b40:	370c      	adds	r7, #12
 8012b42:	46bd      	mov	sp, r7
 8012b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b48:	4770      	bx	lr

08012b4a <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/                                              
void sys_mbox_set_invalid(sys_mbox_t *mbox)   
{                                             
 8012b4a:	b480      	push	{r7}
 8012b4c:	b083      	sub	sp, #12
 8012b4e:	af00      	add	r7, sp, #0
 8012b50:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;                      
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	2200      	movs	r2, #0
 8012b56:	601a      	str	r2, [r3, #0]
}                                             
 8012b58:	bf00      	nop
 8012b5a:	370c      	adds	r7, #12
 8012b5c:	46bd      	mov	sp, r7
 8012b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b62:	4770      	bx	lr

08012b64 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8012b64:	b580      	push	{r7, lr}
 8012b66:	b084      	sub	sp, #16
 8012b68:	af00      	add	r7, sp, #0
 8012b6a:	6078      	str	r0, [r7, #4]
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	70fb      	strb	r3, [r7, #3]
  osSemaphoreDef(SEM);
 8012b70:	2300      	movs	r3, #0
 8012b72:	60fb      	str	r3, [r7, #12]

  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8012b74:	f107 030c 	add.w	r3, r7, #12
 8012b78:	2101      	movs	r1, #1
 8012b7a:	4618      	mov	r0, r3
 8012b7c:	f7f1 fc0a 	bl	8004394 <osSemaphoreCreate>
 8012b80:	4602      	mov	r2, r0
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	601a      	str	r2, [r3, #0]
	
  if(*sem == NULL)
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	2b00      	cmp	r3, #0
 8012b8c:	d102      	bne.n	8012b94 <sys_sem_new+0x30>
  {
#if SYS_STATS
      ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */	
		return ERR_MEM;
 8012b8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012b92:	e009      	b.n	8012ba8 <sys_sem_new+0x44>
  }
	
  if(count == 0)	// Means it can't be taken
 8012b94:	78fb      	ldrb	r3, [r7, #3]
 8012b96:	2b00      	cmp	r3, #0
 8012b98:	d105      	bne.n	8012ba6 <sys_sem_new+0x42>
  {
    osSemaphoreWait(*sem,0);
 8012b9a:	687b      	ldr	r3, [r7, #4]
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	2100      	movs	r1, #0
 8012ba0:	4618      	mov	r0, r3
 8012ba2:	f7f1 fc15 	bl	80043d0 <osSemaphoreWait>
 	if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
		lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
	}
#endif /* SYS_STATS */
		
	return ERR_OK;
 8012ba6:	2300      	movs	r3, #0
}
 8012ba8:	4618      	mov	r0, r3
 8012baa:	3710      	adds	r7, #16
 8012bac:	46bd      	mov	sp, r7
 8012bae:	bd80      	pop	{r7, pc}

08012bb0 <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8012bb0:	b580      	push	{r7, lr}
 8012bb2:	b084      	sub	sp, #16
 8012bb4:	af00      	add	r7, sp, #0
 8012bb6:	6078      	str	r0, [r7, #4]
 8012bb8:	6039      	str	r1, [r7, #0]
  uint32_t starttime = osKernelSysTick();
 8012bba:	f7f1 faf4 	bl	80041a6 <osKernelSysTick>
 8012bbe:	60f8      	str	r0, [r7, #12]
  
  if(timeout != 0)
 8012bc0:	683b      	ldr	r3, [r7, #0]
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d011      	beq.n	8012bea <sys_arch_sem_wait+0x3a>
  {    
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8012bc6:	687b      	ldr	r3, [r7, #4]
 8012bc8:	681b      	ldr	r3, [r3, #0]
 8012bca:	6839      	ldr	r1, [r7, #0]
 8012bcc:	4618      	mov	r0, r3
 8012bce:	f7f1 fbff 	bl	80043d0 <osSemaphoreWait>
 8012bd2:	4603      	mov	r3, r0
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d105      	bne.n	8012be4 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8012bd8:	f7f1 fae5 	bl	80041a6 <osKernelSysTick>
 8012bdc:	4602      	mov	r2, r0
 8012bde:	68fb      	ldr	r3, [r7, #12]
 8012be0:	1ad3      	subs	r3, r2, r3
 8012be2:	e012      	b.n	8012c0a <sys_arch_sem_wait+0x5a>
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8012be4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012be8:	e00f      	b.n	8012c0a <sys_arch_sem_wait+0x5a>
    } 
  }
  else
  {
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8012bea:	bf00      	nop
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012bf4:	4618      	mov	r0, r3
 8012bf6:	f7f1 fbeb 	bl	80043d0 <osSemaphoreWait>
 8012bfa:	4603      	mov	r3, r0
 8012bfc:	2b00      	cmp	r3, #0
 8012bfe:	d1f5      	bne.n	8012bec <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8012c00:	f7f1 fad1 	bl	80041a6 <osKernelSysTick>
 8012c04:	4602      	mov	r2, r0
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	1ad3      	subs	r3, r2, r3
  }
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3710      	adds	r7, #16
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}

08012c12 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8012c12:	b580      	push	{r7, lr}
 8012c14:	b082      	sub	sp, #8
 8012c16:	af00      	add	r7, sp, #0
 8012c18:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8012c1a:	687b      	ldr	r3, [r7, #4]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	4618      	mov	r0, r3
 8012c20:	f7f1 fc26 	bl	8004470 <osSemaphoreRelease>
}
 8012c24:	bf00      	nop
 8012c26:	3708      	adds	r7, #8
 8012c28:	46bd      	mov	sp, r7
 8012c2a:	bd80      	pop	{r7, pc}

08012c2c <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8012c2c:	b580      	push	{r7, lr}
 8012c2e:	b082      	sub	sp, #8
 8012c30:	af00      	add	r7, sp, #0
 8012c32:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */
  
  osSemaphoreDelete(*sem);
 8012c34:	687b      	ldr	r3, [r7, #4]
 8012c36:	681b      	ldr	r3, [r3, #0]
 8012c38:	4618      	mov	r0, r3
 8012c3a:	f7f1 fc4f 	bl	80044dc <osSemaphoreDelete>
}
 8012c3e:	bf00      	nop
 8012c40:	3708      	adds	r7, #8
 8012c42:	46bd      	mov	sp, r7
 8012c44:	bd80      	pop	{r7, pc}

08012c46 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)                                               
{
 8012c46:	b480      	push	{r7}
 8012c48:	b083      	sub	sp, #12
 8012c4a:	af00      	add	r7, sp, #0
 8012c4c:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8012c4e:	687b      	ldr	r3, [r7, #4]
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	2b00      	cmp	r3, #0
 8012c54:	d101      	bne.n	8012c5a <sys_sem_valid+0x14>
    return 0;
 8012c56:	2300      	movs	r3, #0
 8012c58:	e000      	b.n	8012c5c <sys_sem_valid+0x16>
  else
    return 1;                                       
 8012c5a:	2301      	movs	r3, #1
}
 8012c5c:	4618      	mov	r0, r3
 8012c5e:	370c      	adds	r7, #12
 8012c60:	46bd      	mov	sp, r7
 8012c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c66:	4770      	bx	lr

08012c68 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/                                                                                                                                                                
void sys_sem_set_invalid(sys_sem_t *sem)                                        
{                                                                               
 8012c68:	b480      	push	{r7}
 8012c6a:	b083      	sub	sp, #12
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;                                                          
 8012c70:	687b      	ldr	r3, [r7, #4]
 8012c72:	2200      	movs	r2, #0
 8012c74:	601a      	str	r2, [r3, #0]
} 
 8012c76:	bf00      	nop
 8012c78:	370c      	adds	r7, #12
 8012c7a:	46bd      	mov	sp, r7
 8012c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c80:	4770      	bx	lr
	...

08012c84 <sys_init>:
/*-----------------------------------------------------------------------------------*/ 
osMutexId lwip_sys_mutex;
osMutexDef(lwip_sys_mutex);
// Initialize sys arch
void sys_init(void)
{
 8012c84:	b580      	push	{r7, lr}
 8012c86:	af00      	add	r7, sp, #0
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8012c88:	4803      	ldr	r0, [pc, #12]	; (8012c98 <sys_init+0x14>)
 8012c8a:	f7f1 faf1 	bl	8004270 <osMutexCreate>
 8012c8e:	4602      	mov	r2, r0
 8012c90:	4b02      	ldr	r3, [pc, #8]	; (8012c9c <sys_init+0x18>)
 8012c92:	601a      	str	r2, [r3, #0]
}
 8012c94:	bf00      	nop
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	0801a5dc 	.word	0x0801a5dc
 8012c9c:	20007954 	.word	0x20007954

08012ca0 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8012ca0:	b580      	push	{r7, lr}
 8012ca2:	b084      	sub	sp, #16
 8012ca4:	af00      	add	r7, sp, #0
 8012ca6:	6078      	str	r0, [r7, #4]
  
  osMutexDef(MUTEX);
 8012ca8:	2300      	movs	r3, #0
 8012caa:	60fb      	str	r3, [r7, #12]
  
  *mutex = osMutexCreate(osMutex(MUTEX));
 8012cac:	f107 030c 	add.w	r3, r7, #12
 8012cb0:	4618      	mov	r0, r3
 8012cb2:	f7f1 fadd 	bl	8004270 <osMutexCreate>
 8012cb6:	4602      	mov	r2, r0
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	601a      	str	r2, [r3, #0]
  
  
  //*mutex = xSemaphoreCreateMutex();
  if(*mutex == NULL)
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	2b00      	cmp	r3, #0
 8012cc2:	d102      	bne.n	8012cca <sys_mutex_new+0x2a>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */	
    return ERR_MEM;
 8012cc4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012cc8:	e000      	b.n	8012ccc <sys_mutex_new+0x2c>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8012cca:	2300      	movs	r3, #0
}
 8012ccc:	4618      	mov	r0, r3
 8012cce:	3710      	adds	r7, #16
 8012cd0:	46bd      	mov	sp, r7
 8012cd2:	bd80      	pop	{r7, pc}

08012cd4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8012cd4:	b580      	push	{r7, lr}
 8012cd6:	b082      	sub	sp, #8
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  osMutexWait (*mutex, osWaitForever);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	681b      	ldr	r3, [r3, #0]
 8012ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012ce4:	4618      	mov	r0, r3
 8012ce6:	f7f1 facf 	bl	8004288 <osMutexWait>
}
 8012cea:	bf00      	nop
 8012cec:	3708      	adds	r7, #8
 8012cee:	46bd      	mov	sp, r7
 8012cf0:	bd80      	pop	{r7, pc}

08012cf2 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8012cf2:	b580      	push	{r7, lr}
 8012cf4:	b082      	sub	sp, #8
 8012cf6:	af00      	add	r7, sp, #0
 8012cf8:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	681b      	ldr	r3, [r3, #0]
 8012cfe:	4618      	mov	r0, r3
 8012d00:	f7f1 fb12 	bl	8004328 <osMutexRelease>
}
 8012d04:	bf00      	nop
 8012d06:	3708      	adds	r7, #8
 8012d08:	46bd      	mov	sp, r7
 8012d0a:	bd80      	pop	{r7, pc}

08012d0c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b08a      	sub	sp, #40	; 0x28
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
 8012d18:	603b      	str	r3, [r7, #0]
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8012d1a:	68fb      	ldr	r3, [r7, #12]
 8012d1c:	617b      	str	r3, [r7, #20]
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	61bb      	str	r3, [r7, #24]
 8012d22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d24:	b21b      	sxth	r3, r3
 8012d26:	83bb      	strh	r3, [r7, #28]
 8012d28:	2300      	movs	r3, #0
 8012d2a:	623b      	str	r3, [r7, #32]
 8012d2c:	683b      	ldr	r3, [r7, #0]
 8012d2e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8012d30:	f107 0314 	add.w	r3, r7, #20
 8012d34:	6879      	ldr	r1, [r7, #4]
 8012d36:	4618      	mov	r0, r3
 8012d38:	f7f1 fa45 	bl	80041c6 <osThreadCreate>
 8012d3c:	4603      	mov	r3, r0
}
 8012d3e:	4618      	mov	r0, r3
 8012d40:	3728      	adds	r7, #40	; 0x28
 8012d42:	46bd      	mov	sp, r7
 8012d44:	bd80      	pop	{r7, pc}
	...

08012d48 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	af00      	add	r7, sp, #0
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8012d4c:	4b04      	ldr	r3, [pc, #16]	; (8012d60 <sys_arch_protect+0x18>)
 8012d4e:	681b      	ldr	r3, [r3, #0]
 8012d50:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8012d54:	4618      	mov	r0, r3
 8012d56:	f7f1 fa97 	bl	8004288 <osMutexWait>
  return (sys_prot_t)1;
 8012d5a:	2301      	movs	r3, #1
}
 8012d5c:	4618      	mov	r0, r3
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	20007954 	.word	0x20007954

08012d64 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8012d64:	b580      	push	{r7, lr}
 8012d66:	b082      	sub	sp, #8
 8012d68:	af00      	add	r7, sp, #0
 8012d6a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8012d6c:	4b04      	ldr	r3, [pc, #16]	; (8012d80 <sys_arch_unprotect+0x1c>)
 8012d6e:	681b      	ldr	r3, [r3, #0]
 8012d70:	4618      	mov	r0, r3
 8012d72:	f7f1 fad9 	bl	8004328 <osMutexRelease>
}
 8012d76:	bf00      	nop
 8012d78:	3708      	adds	r7, #8
 8012d7a:	46bd      	mov	sp, r7
 8012d7c:	bd80      	pop	{r7, pc}
 8012d7e:	bf00      	nop
 8012d80:	20007954 	.word	0x20007954

08012d84 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8012d84:	b580      	push	{r7, lr}
 8012d86:	b084      	sub	sp, #16
 8012d88:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig;

    /**Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
    */
  hadc1.Instance = ADC1;
 8012d8a:	4b22      	ldr	r3, [pc, #136]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012d8c:	4a22      	ldr	r2, [pc, #136]	; (8012e18 <MX_ADC1_Init+0x94>)
 8012d8e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8012d90:	4b20      	ldr	r3, [pc, #128]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012d92:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8012d96:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8012d98:	4b1e      	ldr	r3, [pc, #120]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012d9a:	2200      	movs	r2, #0
 8012d9c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8012d9e:	4b1d      	ldr	r3, [pc, #116]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012da0:	2200      	movs	r2, #0
 8012da2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8012da4:	4b1b      	ldr	r3, [pc, #108]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012da6:	2201      	movs	r2, #1
 8012da8:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8012daa:	4b1a      	ldr	r3, [pc, #104]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dac:	2200      	movs	r2, #0
 8012dae:	621a      	str	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8012db0:	4b18      	ldr	r3, [pc, #96]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012db2:	2200      	movs	r2, #0
 8012db4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8012db6:	4b17      	ldr	r3, [pc, #92]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012db8:	4a18      	ldr	r2, [pc, #96]	; (8012e1c <MX_ADC1_Init+0x98>)
 8012dba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8012dbc:	4b15      	ldr	r3, [pc, #84]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dbe:	2200      	movs	r2, #0
 8012dc0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8012dc2:	4b14      	ldr	r3, [pc, #80]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dc4:	2201      	movs	r2, #1
 8012dc6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8012dc8:	4b12      	ldr	r3, [pc, #72]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dca:	2200      	movs	r2, #0
 8012dcc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8012dce:	4b11      	ldr	r3, [pc, #68]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dd0:	2200      	movs	r2, #0
 8012dd2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8012dd4:	480f      	ldr	r0, [pc, #60]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dd6:	f7ee f933 	bl	8001040 <HAL_ADC_Init>
 8012dda:	4603      	mov	r3, r0
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d003      	beq.n	8012de8 <MX_ADC1_Init+0x64>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012de0:	2152      	movs	r1, #82	; 0x52
 8012de2:	480f      	ldr	r0, [pc, #60]	; (8012e20 <MX_ADC1_Init+0x9c>)
 8012de4:	f001 f902 	bl	8013fec <_Error_Handler>
  }

    /**Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
    */
  sConfig.Channel = ADC_CHANNEL_8;
 8012de8:	2308      	movs	r3, #8
 8012dea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8012dec:	2301      	movs	r3, #1
 8012dee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8012df0:	2307      	movs	r3, #7
 8012df2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8012df4:	463b      	mov	r3, r7
 8012df6:	4619      	mov	r1, r3
 8012df8:	4806      	ldr	r0, [pc, #24]	; (8012e14 <MX_ADC1_Init+0x90>)
 8012dfa:	f7ee fa99 	bl	8001330 <HAL_ADC_ConfigChannel>
 8012dfe:	4603      	mov	r3, r0
 8012e00:	2b00      	cmp	r3, #0
 8012e02:	d003      	beq.n	8012e0c <MX_ADC1_Init+0x88>
  {
    _Error_Handler(__FILE__, __LINE__);
 8012e04:	215c      	movs	r1, #92	; 0x5c
 8012e06:	4806      	ldr	r0, [pc, #24]	; (8012e20 <MX_ADC1_Init+0x9c>)
 8012e08:	f001 f8f0 	bl	8013fec <_Error_Handler>
  }

}
 8012e0c:	bf00      	nop
 8012e0e:	3710      	adds	r7, #16
 8012e10:	46bd      	mov	sp, r7
 8012e12:	bd80      	pop	{r7, pc}
 8012e14:	20007958 	.word	0x20007958
 8012e18:	40012000 	.word	0x40012000
 8012e1c:	0f000001 	.word	0x0f000001
 8012e20:	0801a364 	.word	0x0801a364

08012e24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b088      	sub	sp, #32
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(adcHandle->Instance==ADC1)
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	4a0f      	ldr	r2, [pc, #60]	; (8012e70 <HAL_ADC_MspInit+0x4c>)
 8012e32:	4293      	cmp	r3, r2
 8012e34:	d117      	bne.n	8012e66 <HAL_ADC_MspInit+0x42>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8012e36:	4a0f      	ldr	r2, [pc, #60]	; (8012e74 <HAL_ADC_MspInit+0x50>)
 8012e38:	4b0e      	ldr	r3, [pc, #56]	; (8012e74 <HAL_ADC_MspInit+0x50>)
 8012e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012e40:	6453      	str	r3, [r2, #68]	; 0x44
 8012e42:	4b0c      	ldr	r3, [pc, #48]	; (8012e74 <HAL_ADC_MspInit+0x50>)
 8012e44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012e46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8012e4a:	60bb      	str	r3, [r7, #8]
 8012e4c:	68bb      	ldr	r3, [r7, #8]
  
    /**ADC1 GPIO Configuration    
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8012e4e:	2301      	movs	r3, #1
 8012e50:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012e52:	2303      	movs	r3, #3
 8012e54:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012e56:	2300      	movs	r3, #0
 8012e58:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8012e5a:	f107 030c 	add.w	r3, r7, #12
 8012e5e:	4619      	mov	r1, r3
 8012e60:	4805      	ldr	r0, [pc, #20]	; (8012e78 <HAL_ADC_MspInit+0x54>)
 8012e62:	f7ef fdab 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8012e66:	bf00      	nop
 8012e68:	3720      	adds	r7, #32
 8012e6a:	46bd      	mov	sp, r7
 8012e6c:	bd80      	pop	{r7, pc}
 8012e6e:	bf00      	nop
 8012e70:	40012000 	.word	0x40012000
 8012e74:	40023800 	.word	0x40023800
 8012e78:	40020400 	.word	0x40020400

08012e7c <init_dac>:
void read_control_dac();
void daisy_dac(uint8_t enabled);
void soft_reset_dac();
void reset_dac();

void init_dac() {
 8012e7c:	b580      	push	{r7, lr}
 8012e7e:	af00      	add	r7, sp, #0
	HAL_SPI_Init(&hspi1);
 8012e80:	480c      	ldr	r0, [pc, #48]	; (8012eb4 <init_dac+0x38>)
 8012e82:	f7f0 fc4b 	bl	800371c <HAL_SPI_Init>
	HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_SET);
 8012e86:	2201      	movs	r2, #1
 8012e88:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012e8c:	480a      	ldr	r0, [pc, #40]	; (8012eb8 <init_dac+0x3c>)
 8012e8e:	f7ef ff57 	bl	8002d40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8012e92:	2001      	movs	r0, #1
 8012e94:	f7ee f8b2 	bl	8000ffc <HAL_Delay>
	reset_dac();
 8012e98:	f000 f8a9 	bl	8012fee <reset_dac>
	HAL_Delay(100);
 8012e9c:	2064      	movs	r0, #100	; 0x64
 8012e9e:	f7ee f8ad 	bl	8000ffc <HAL_Delay>
	soft_reset_dac();
 8012ea2:	f000 f893 	bl	8012fcc <soft_reset_dac>
	HAL_Delay(10);
 8012ea6:	200a      	movs	r0, #10
 8012ea8:	f7ee f8a8 	bl	8000ffc <HAL_Delay>
	//daisy_dac(1);
	send_control_dac();
 8012eac:	f000 f846 	bl	8012f3c <send_control_dac>

}
 8012eb0:	bf00      	nop
 8012eb2:	bd80      	pop	{r7, pc}
 8012eb4:	2000ab74 	.word	0x2000ab74
 8012eb8:	40020400 	.word	0x40020400

08012ebc <init_dac_command>:

void init_dac_command(dac_command_t *command) {
 8012ebc:	b480      	push	{r7}
 8012ebe:	b085      	sub	sp, #20
 8012ec0:	af00      	add	r7, sp, #0
 8012ec2:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < 3; ++i) {
 8012ec4:	2300      	movs	r3, #0
 8012ec6:	60fb      	str	r3, [r7, #12]
 8012ec8:	e007      	b.n	8012eda <init_dac_command+0x1e>
		command->packet[i] = 0;
 8012eca:	687a      	ldr	r2, [r7, #4]
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	4413      	add	r3, r2
 8012ed0:	2200      	movs	r2, #0
 8012ed2:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 3; ++i) {
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	3301      	adds	r3, #1
 8012ed8:	60fb      	str	r3, [r7, #12]
 8012eda:	68fb      	ldr	r3, [r7, #12]
 8012edc:	2b02      	cmp	r3, #2
 8012ede:	ddf4      	ble.n	8012eca <init_dac_command+0xe>
	}
}
 8012ee0:	bf00      	nop
 8012ee2:	3714      	adds	r7, #20
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <send_dac>:
	for (int i = 0; i < 2; ++i) {
		command->packet[i] = ((command->packet[i] & 0x0F) << 4) | ((command->packet[i] & 0xF0) >> 4);
	}
}

void send_dac(dac_command_t *command) {
 8012eec:	b580      	push	{r7, lr}
 8012eee:	b082      	sub	sp, #8
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
	//reorder_dac(command);
	HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_RESET);
 8012ef4:	2200      	movs	r2, #0
 8012ef6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012efa:	480e      	ldr	r0, [pc, #56]	; (8012f34 <send_dac+0x48>)
 8012efc:	f7ef ff20 	bl	8002d40 <HAL_GPIO_WritePin>
	DWT_Delay(1);
 8012f00:	2001      	movs	r0, #1
 8012f02:	f002 fed5 	bl	8015cb0 <DWT_Delay>
	HAL_SPI_Transmit(&hspi1,command->packet,3,1000);
 8012f06:	6879      	ldr	r1, [r7, #4]
 8012f08:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8012f0c:	2203      	movs	r2, #3
 8012f0e:	480a      	ldr	r0, [pc, #40]	; (8012f38 <send_dac+0x4c>)
 8012f10:	f7f0 fc94 	bl	800383c <HAL_SPI_Transmit>
	DWT_Delay(1);
 8012f14:	2001      	movs	r0, #1
 8012f16:	f002 fecb 	bl	8015cb0 <DWT_Delay>
	HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_SET);
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8012f20:	4804      	ldr	r0, [pc, #16]	; (8012f34 <send_dac+0x48>)
 8012f22:	f7ef ff0d 	bl	8002d40 <HAL_GPIO_WritePin>
	DWT_Delay(1);
 8012f26:	2001      	movs	r0, #1
 8012f28:	f002 fec2 	bl	8015cb0 <DWT_Delay>
}
 8012f2c:	bf00      	nop
 8012f2e:	3708      	adds	r7, #8
 8012f30:	46bd      	mov	sp, r7
 8012f32:	bd80      	pop	{r7, pc}
 8012f34:	40020400 	.word	0x40020400
 8012f38:	2000ab74 	.word	0x2000ab74

08012f3c <send_control_dac>:
	DWT_Delay(1);
	HAL_GPIO_WritePin(NSS_PORT, NSS_PIN, GPIO_PIN_SET);
	DWT_Delay(1);
}

void send_control_dac() {
 8012f3c:	b580      	push	{r7, lr}
 8012f3e:	b082      	sub	sp, #8
 8012f40:	af00      	add	r7, sp, #0
	dac_command_t command;
	init_dac_command(&command);
 8012f42:	1d3b      	adds	r3, r7, #4
 8012f44:	4618      	mov	r0, r3
 8012f46:	f7ff ffb9 	bl	8012ebc <init_dac_command>
	command.packet[0] = CONTROL_W;
 8012f4a:	2304      	movs	r3, #4
 8012f4c:	713b      	strb	r3, [r7, #4]
	clear_volt(command.packet, 1);
 8012f4e:	797b      	ldrb	r3, [r7, #5]
 8012f50:	f043 0302 	orr.w	r3, r3, #2
 8012f54:	b2db      	uxtb	r3, r3
 8012f56:	717b      	strb	r3, [r7, #5]
	over_range(command.packet, 0);
 8012f58:	797b      	ldrb	r3, [r7, #5]
 8012f5a:	717b      	strb	r3, [r7, #5]
	bipolar_range(command.packet, 0);
 8012f5c:	79bb      	ldrb	r3, [r7, #6]
 8012f5e:	71bb      	strb	r3, [r7, #6]
	thermal_alert(command.packet, 1);
 8012f60:	79bb      	ldrb	r3, [r7, #6]
 8012f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8012f66:	b2db      	uxtb	r3, r3
 8012f68:	71bb      	strb	r3, [r7, #6]
	internal_ref(command.packet, 1);
 8012f6a:	79bb      	ldrb	r3, [r7, #6]
 8012f6c:	f043 0320 	orr.w	r3, r3, #32
 8012f70:	b2db      	uxtb	r3, r3
 8012f72:	71bb      	strb	r3, [r7, #6]
	power_volt(command.packet, 1);
 8012f74:	79bb      	ldrb	r3, [r7, #6]
 8012f76:	f043 0308 	orr.w	r3, r3, #8
 8012f7a:	b2db      	uxtb	r3, r3
 8012f7c:	71bb      	strb	r3, [r7, #6]
	out_range(command.packet, 0);
 8012f7e:	79bb      	ldrb	r3, [r7, #6]
 8012f80:	71bb      	strb	r3, [r7, #6]
	send_dac(&command);
 8012f82:	1d3b      	adds	r3, r7, #4
 8012f84:	4618      	mov	r0, r3
 8012f86:	f7ff ffb1 	bl	8012eec <send_dac>
}
 8012f8a:	bf00      	nop
 8012f8c:	3708      	adds	r7, #8
 8012f8e:	46bd      	mov	sp, r7
 8012f90:	bd80      	pop	{r7, pc}

08012f92 <set_volt_dac>:

void set_volt_dac(uint16_t voltage) {
 8012f92:	b580      	push	{r7, lr}
 8012f94:	b084      	sub	sp, #16
 8012f96:	af00      	add	r7, sp, #0
 8012f98:	4603      	mov	r3, r0
 8012f9a:	80fb      	strh	r3, [r7, #6]
	dac_command_t command;
	init_dac_command(&command);
 8012f9c:	f107 030c 	add.w	r3, r7, #12
 8012fa0:	4618      	mov	r0, r3
 8012fa2:	f7ff ff8b 	bl	8012ebc <init_dac_command>
	command.packet[0] = DAC_WU;
 8012fa6:	2303      	movs	r3, #3
 8012fa8:	733b      	strb	r3, [r7, #12]
	command.packet[1] = (voltage >> 8) & 0xFF;
 8012faa:	88fb      	ldrh	r3, [r7, #6]
 8012fac:	0a1b      	lsrs	r3, r3, #8
 8012fae:	b29b      	uxth	r3, r3
 8012fb0:	b2db      	uxtb	r3, r3
 8012fb2:	737b      	strb	r3, [r7, #13]
	command.packet[2] = voltage & 0xFF;
 8012fb4:	88fb      	ldrh	r3, [r7, #6]
 8012fb6:	b2db      	uxtb	r3, r3
 8012fb8:	73bb      	strb	r3, [r7, #14]
	send_dac(&command);
 8012fba:	f107 030c 	add.w	r3, r7, #12
 8012fbe:	4618      	mov	r0, r3
 8012fc0:	f7ff ff94 	bl	8012eec <send_dac>
}
 8012fc4:	bf00      	nop
 8012fc6:	3710      	adds	r7, #16
 8012fc8:	46bd      	mov	sp, r7
 8012fca:	bd80      	pop	{r7, pc}

08012fcc <soft_reset_dac>:
	command.packet[0] = DAISY;
	daisy(command.packet, 1);
	send_dac(&command);
}

void soft_reset_dac() {
 8012fcc:	b580      	push	{r7, lr}
 8012fce:	b082      	sub	sp, #8
 8012fd0:	af00      	add	r7, sp, #0
	dac_command_t command;
	init_dac_command(&command);
 8012fd2:	1d3b      	adds	r3, r7, #4
 8012fd4:	4618      	mov	r0, r3
 8012fd6:	f7ff ff71 	bl	8012ebc <init_dac_command>
	command.packet[0] = RESET_S;
 8012fda:	2307      	movs	r3, #7
 8012fdc:	713b      	strb	r3, [r7, #4]
	send_dac(&command);
 8012fde:	1d3b      	adds	r3, r7, #4
 8012fe0:	4618      	mov	r0, r3
 8012fe2:	f7ff ff83 	bl	8012eec <send_dac>
}
 8012fe6:	bf00      	nop
 8012fe8:	3708      	adds	r7, #8
 8012fea:	46bd      	mov	sp, r7
 8012fec:	bd80      	pop	{r7, pc}

08012fee <reset_dac>:

void reset_dac() {
 8012fee:	b580      	push	{r7, lr}
 8012ff0:	b082      	sub	sp, #8
 8012ff2:	af00      	add	r7, sp, #0
	dac_command_t command;
	init_dac_command(&command);
 8012ff4:	1d3b      	adds	r3, r7, #4
 8012ff6:	4618      	mov	r0, r3
 8012ff8:	f7ff ff60 	bl	8012ebc <init_dac_command>
	command.packet[0] = RESET_F;
 8012ffc:	230f      	movs	r3, #15
 8012ffe:	713b      	strb	r3, [r7, #4]
	send_dac(&command);
 8013000:	1d3b      	adds	r3, r7, #4
 8013002:	4618      	mov	r0, r3
 8013004:	f7ff ff72 	bl	8012eec <send_dac>
}
 8013008:	bf00      	nop
 801300a:	3708      	adds	r7, #8
 801300c:	46bd      	mov	sp, r7
 801300e:	bd80      	pop	{r7, pc}

08013010 <HAL_ETH_MspInit>:
/* USER CODE END 3 */

/* Private functions ---------------------------------------------------------*/

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8013010:	b580      	push	{r7, lr}
 8013012:	b08a      	sub	sp, #40	; 0x28
 8013014:	af00      	add	r7, sp, #0
 8013016:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  if(ethHandle->Instance==ETH)
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	4a3a      	ldr	r2, [pc, #232]	; (8013108 <HAL_ETH_MspInit+0xf8>)
 801301e:	4293      	cmp	r3, r2
 8013020:	d16d      	bne.n	80130fe <HAL_ETH_MspInit+0xee>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8013022:	4a3a      	ldr	r2, [pc, #232]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013024:	4b39      	ldr	r3, [pc, #228]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 801302c:	6313      	str	r3, [r2, #48]	; 0x30
 801302e:	4b37      	ldr	r3, [pc, #220]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8013036:	613b      	str	r3, [r7, #16]
 8013038:	693b      	ldr	r3, [r7, #16]
 801303a:	4a34      	ldr	r2, [pc, #208]	; (801310c <HAL_ETH_MspInit+0xfc>)
 801303c:	4b33      	ldr	r3, [pc, #204]	; (801310c <HAL_ETH_MspInit+0xfc>)
 801303e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013040:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8013044:	6313      	str	r3, [r2, #48]	; 0x30
 8013046:	4b31      	ldr	r3, [pc, #196]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801304a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 801304e:	60fb      	str	r3, [r7, #12]
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	4a2e      	ldr	r2, [pc, #184]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013054:	4b2d      	ldr	r3, [pc, #180]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013058:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801305c:	6313      	str	r3, [r2, #48]	; 0x30
 801305e:	4b2b      	ldr	r3, [pc, #172]	; (801310c <HAL_ETH_MspInit+0xfc>)
 8013060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013062:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8013066:	60bb      	str	r3, [r7, #8]
 8013068:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0 
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 801306a:	2332      	movs	r3, #50	; 0x32
 801306c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801306e:	2302      	movs	r3, #2
 8013070:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013072:	2300      	movs	r3, #0
 8013074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013076:	2303      	movs	r3, #3
 8013078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801307a:	230b      	movs	r3, #11
 801307c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 801307e:	f107 0314 	add.w	r3, r7, #20
 8013082:	4619      	mov	r1, r3
 8013084:	4822      	ldr	r0, [pc, #136]	; (8013110 <HAL_ETH_MspInit+0x100>)
 8013086:	f7ef fc99 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 801308a:	2386      	movs	r3, #134	; 0x86
 801308c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801308e:	2302      	movs	r3, #2
 8013090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013092:	2300      	movs	r3, #0
 8013094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8013096:	2303      	movs	r3, #3
 8013098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 801309a:	230b      	movs	r3, #11
 801309c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801309e:	f107 0314 	add.w	r3, r7, #20
 80130a2:	4619      	mov	r1, r3
 80130a4:	481b      	ldr	r0, [pc, #108]	; (8013114 <HAL_ETH_MspInit+0x104>)
 80130a6:	f7ef fc89 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80130aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80130ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130b0:	2302      	movs	r3, #2
 80130b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130b4:	2300      	movs	r3, #0
 80130b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130b8:	2303      	movs	r3, #3
 80130ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80130bc:	230b      	movs	r3, #11
 80130be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80130c0:	f107 0314 	add.w	r3, r7, #20
 80130c4:	4619      	mov	r1, r3
 80130c6:	4814      	ldr	r0, [pc, #80]	; (8013118 <HAL_ETH_MspInit+0x108>)
 80130c8:	f7ef fc78 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80130cc:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80130d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80130d2:	2302      	movs	r3, #2
 80130d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80130d6:	2300      	movs	r3, #0
 80130d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80130da:	2303      	movs	r3, #3
 80130dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80130de:	230b      	movs	r3, #11
 80130e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80130e2:	f107 0314 	add.w	r3, r7, #20
 80130e6:	4619      	mov	r1, r3
 80130e8:	480c      	ldr	r0, [pc, #48]	; (801311c <HAL_ETH_MspInit+0x10c>)
 80130ea:	f7ef fc67 	bl	80029bc <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80130ee:	2200      	movs	r2, #0
 80130f0:	2105      	movs	r1, #5
 80130f2:	203d      	movs	r0, #61	; 0x3d
 80130f4:	f7ee fc1f 	bl	8001936 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 80130f8:	203d      	movs	r0, #61	; 0x3d
 80130fa:	f7ee fc38 	bl	800196e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80130fe:	bf00      	nop
 8013100:	3728      	adds	r7, #40	; 0x28
 8013102:	46bd      	mov	sp, r7
 8013104:	bd80      	pop	{r7, pc}
 8013106:	bf00      	nop
 8013108:	40028000 	.word	0x40028000
 801310c:	40023800 	.word	0x40023800
 8013110:	40020800 	.word	0x40020800
 8013114:	40020000 	.word	0x40020000
 8013118:	40020400 	.word	0x40020400
 801311c:	40021800 	.word	0x40021800

08013120 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  heth: ETH handle
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *heth)
{
 8013120:	b580      	push	{r7, lr}
 8013122:	b082      	sub	sp, #8
 8013124:	af00      	add	r7, sp, #0
 8013126:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(s_xSemaphore);
 8013128:	4b04      	ldr	r3, [pc, #16]	; (801313c <HAL_ETH_RxCpltCallback+0x1c>)
 801312a:	681b      	ldr	r3, [r3, #0]
 801312c:	4618      	mov	r0, r3
 801312e:	f7f1 f99f 	bl	8004470 <osSemaphoreRelease>
}
 8013132:	bf00      	nop
 8013134:	3708      	adds	r7, #8
 8013136:	46bd      	mov	sp, r7
 8013138:	bd80      	pop	{r7, pc}
 801313a:	bf00      	nop
 801313c:	20004154 	.word	0x20004154

08013140 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{ 
 8013140:	b5b0      	push	{r4, r5, r7, lr}
 8013142:	b08c      	sub	sp, #48	; 0x30
 8013144:	af00      	add	r7, sp, #0
 8013146:	6078      	str	r0, [r7, #4]
  uint32_t regvalue = 0;
 8013148:	2300      	movs	r3, #0
 801314a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_StatusTypeDef hal_eth_init_status;
  
/* Init ETH */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 801314c:	4b5a      	ldr	r3, [pc, #360]	; (80132b8 <low_level_init+0x178>)
 801314e:	4a5b      	ldr	r2, [pc, #364]	; (80132bc <low_level_init+0x17c>)
 8013150:	601a      	str	r2, [r3, #0]
  heth.Init.AutoNegotiation = ETH_AUTONEGOTIATION_ENABLE;
 8013152:	4b59      	ldr	r3, [pc, #356]	; (80132b8 <low_level_init+0x178>)
 8013154:	2201      	movs	r2, #1
 8013156:	605a      	str	r2, [r3, #4]
  heth.Init.PhyAddress = LAN8742A_PHY_ADDRESS;
 8013158:	4b57      	ldr	r3, [pc, #348]	; (80132b8 <low_level_init+0x178>)
 801315a:	2200      	movs	r2, #0
 801315c:	821a      	strh	r2, [r3, #16]
  MACAddr[0] = 0x00;
 801315e:	2300      	movs	r3, #0
 8013160:	f887 3020 	strb.w	r3, [r7, #32]
  MACAddr[1] = 0x80;
 8013164:	2380      	movs	r3, #128	; 0x80
 8013166:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  MACAddr[2] = 0xE1;
 801316a:	23e1      	movs	r3, #225	; 0xe1
 801316c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  MACAddr[3] = 0x00;
 8013170:	2300      	movs	r3, #0
 8013172:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  MACAddr[4] = 0x00;
 8013176:	2300      	movs	r3, #0
 8013178:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[5] = 0x00;
 801317c:	2300      	movs	r3, #0
 801317e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  heth.Init.MACAddr = &MACAddr[0];
 8013182:	4a4d      	ldr	r2, [pc, #308]	; (80132b8 <low_level_init+0x178>)
 8013184:	f107 0320 	add.w	r3, r7, #32
 8013188:	6153      	str	r3, [r2, #20]
  heth.Init.RxMode = ETH_RXINTERRUPT_MODE;
 801318a:	4b4b      	ldr	r3, [pc, #300]	; (80132b8 <low_level_init+0x178>)
 801318c:	2201      	movs	r2, #1
 801318e:	619a      	str	r2, [r3, #24]
  heth.Init.ChecksumMode = ETH_CHECKSUM_BY_HARDWARE;
 8013190:	4b49      	ldr	r3, [pc, #292]	; (80132b8 <low_level_init+0x178>)
 8013192:	2200      	movs	r2, #0
 8013194:	61da      	str	r2, [r3, #28]
  heth.Init.MediaInterface = ETH_MEDIA_INTERFACE_RMII;
 8013196:	4b48      	ldr	r3, [pc, #288]	; (80132b8 <low_level_init+0x178>)
 8013198:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 801319c:	621a      	str	r2, [r3, #32]

  /* USER CODE BEGIN MACADDRESS */
    
  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 801319e:	4846      	ldr	r0, [pc, #280]	; (80132b8 <low_level_init+0x178>)
 80131a0:	f7ee fc1c 	bl	80019dc <HAL_ETH_Init>
 80131a4:	4603      	mov	r3, r0
 80131a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  if (hal_eth_init_status == HAL_OK)
 80131aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d108      	bne.n	80131c4 <low_level_init+0x84>
  {
    /* Set netif link flag */  
    netif->flags |= NETIF_FLAG_LINK_UP;
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 80131b8:	f043 0304 	orr.w	r3, r3, #4
 80131bc:	b2da      	uxtb	r2, r3
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  }
  /* Initialize Tx Descriptors list: Chain Mode */
  HAL_ETH_DMATxDescListInit(&heth, DMATxDscrTab, &Tx_Buff[0][0], ETH_TXBUFNB);
 80131c4:	2304      	movs	r3, #4
 80131c6:	4a3e      	ldr	r2, [pc, #248]	; (80132c0 <low_level_init+0x180>)
 80131c8:	493e      	ldr	r1, [pc, #248]	; (80132c4 <low_level_init+0x184>)
 80131ca:	483b      	ldr	r0, [pc, #236]	; (80132b8 <low_level_init+0x178>)
 80131cc:	f7ee fda2 	bl	8001d14 <HAL_ETH_DMATxDescListInit>
     
  /* Initialize Rx Descriptors list: Chain Mode  */
  HAL_ETH_DMARxDescListInit(&heth, DMARxDscrTab, &Rx_Buff[0][0], ETH_RXBUFNB);
 80131d0:	2304      	movs	r3, #4
 80131d2:	4a3d      	ldr	r2, [pc, #244]	; (80132c8 <low_level_init+0x188>)
 80131d4:	493d      	ldr	r1, [pc, #244]	; (80132cc <low_level_init+0x18c>)
 80131d6:	4838      	ldr	r0, [pc, #224]	; (80132b8 <low_level_init+0x178>)
 80131d8:	f7ee fe05 	bl	8001de6 <HAL_ETH_DMARxDescListInit>
 
#if LWIP_ARP || LWIP_ETHERNET 

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	2206      	movs	r2, #6
 80131e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80131e4:	4b34      	ldr	r3, [pc, #208]	; (80132b8 <low_level_init+0x178>)
 80131e6:	695b      	ldr	r3, [r3, #20]
 80131e8:	781a      	ldrb	r2, [r3, #0]
 80131ea:	687b      	ldr	r3, [r7, #4]
 80131ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80131f0:	4b31      	ldr	r3, [pc, #196]	; (80132b8 <low_level_init+0x178>)
 80131f2:	695b      	ldr	r3, [r3, #20]
 80131f4:	785a      	ldrb	r2, [r3, #1]
 80131f6:	687b      	ldr	r3, [r7, #4]
 80131f8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80131fc:	4b2e      	ldr	r3, [pc, #184]	; (80132b8 <low_level_init+0x178>)
 80131fe:	695b      	ldr	r3, [r3, #20]
 8013200:	789a      	ldrb	r2, [r3, #2]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8013208:	4b2b      	ldr	r3, [pc, #172]	; (80132b8 <low_level_init+0x178>)
 801320a:	695b      	ldr	r3, [r3, #20]
 801320c:	78da      	ldrb	r2, [r3, #3]
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8013214:	4b28      	ldr	r3, [pc, #160]	; (80132b8 <low_level_init+0x178>)
 8013216:	695b      	ldr	r3, [r3, #20]
 8013218:	791a      	ldrb	r2, [r3, #4]
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8013220:	4b25      	ldr	r3, [pc, #148]	; (80132b8 <low_level_init+0x178>)
 8013222:	695b      	ldr	r3, [r3, #20]
 8013224:	795a      	ldrb	r2, [r3, #5]
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  
  /* maximum transfer unit */
  netif->mtu = 1500;
 801322c:	687b      	ldr	r3, [r7, #4]
 801322e:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8013232:	845a      	strh	r2, [r3, #34]	; 0x22
  
  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8013234:	687b      	ldr	r3, [r7, #4]
 8013236:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 801323a:	f043 030a 	orr.w	r3, r3, #10
 801323e:	b2da      	uxtb	r2, r3
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b
  #else 
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */
  
/* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(SEM);
 8013246:	2300      	movs	r3, #0
 8013248:	61fb      	str	r3, [r7, #28]
  s_xSemaphore = osSemaphoreCreate(osSemaphore(SEM) , 1 );
 801324a:	f107 031c 	add.w	r3, r7, #28
 801324e:	2101      	movs	r1, #1
 8013250:	4618      	mov	r0, r3
 8013252:	f7f1 f89f 	bl	8004394 <osSemaphoreCreate>
 8013256:	4602      	mov	r2, r0
 8013258:	4b1d      	ldr	r3, [pc, #116]	; (80132d0 <low_level_init+0x190>)
 801325a:	601a      	str	r2, [r3, #0]

/* create the task that handles the ETH_MAC */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 801325c:	4b1d      	ldr	r3, [pc, #116]	; (80132d4 <low_level_init+0x194>)
 801325e:	f107 0408 	add.w	r4, r7, #8
 8013262:	461d      	mov	r5, r3
 8013264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013266:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013268:	682b      	ldr	r3, [r5, #0]
 801326a:	6023      	str	r3, [r4, #0]
  osThreadCreate (osThread(EthIf), netif);
 801326c:	f107 0308 	add.w	r3, r7, #8
 8013270:	6879      	ldr	r1, [r7, #4]
 8013272:	4618      	mov	r0, r3
 8013274:	f7f0 ffa7 	bl	80041c6 <osThreadCreate>
  /* Enable MAC and DMA transmission and reception */
  HAL_ETH_Start(&heth);
 8013278:	480f      	ldr	r0, [pc, #60]	; (80132b8 <low_level_init+0x178>)
 801327a:	f7ef f8dc 	bl	8002436 <HAL_ETH_Start>
    
/* USER CODE END PHY_PRE_CONFIG */
  

  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR, &regvalue);
 801327e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8013282:	461a      	mov	r2, r3
 8013284:	210b      	movs	r1, #11
 8013286:	480c      	ldr	r0, [pc, #48]	; (80132b8 <low_level_init+0x178>)
 8013288:	f7ef f807 	bl	800229a <HAL_ETH_ReadPHYRegister>
  regvalue |= (PHY_ISFR_INT4);
 801328c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801328e:	f043 030b 	orr.w	r3, r3, #11
 8013292:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Enable Interrupt on change of link status */ 
  HAL_ETH_WritePHYRegister(&heth, PHY_ISFR , regvalue );
 8013294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013296:	461a      	mov	r2, r3
 8013298:	210b      	movs	r1, #11
 801329a:	4807      	ldr	r0, [pc, #28]	; (80132b8 <low_level_init+0x178>)
 801329c:	f7ef f865 	bl	800236a <HAL_ETH_WritePHYRegister>
  
  /* Read Register Configuration */
  HAL_ETH_ReadPHYRegister(&heth, PHY_ISFR , &regvalue);
 80132a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80132a4:	461a      	mov	r2, r3
 80132a6:	210b      	movs	r1, #11
 80132a8:	4803      	ldr	r0, [pc, #12]	; (80132b8 <low_level_init+0x178>)
 80132aa:	f7ee fff6 	bl	800229a <HAL_ETH_ReadPHYRegister>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */ 
    
/* USER CODE END LOW_LEVEL_INIT */
}
 80132ae:	bf00      	nop
 80132b0:	3730      	adds	r7, #48	; 0x30
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bdb0      	pop	{r4, r5, r7, pc}
 80132b6:	bf00      	nop
 80132b8:	20009270 	.word	0x20009270
 80132bc:	40028000 	.word	0x40028000
 80132c0:	200092b8 	.word	0x200092b8
 80132c4:	200079a0 	.word	0x200079a0
 80132c8:	20007a20 	.word	0x20007a20
 80132cc:	200091f0 	.word	0x200091f0
 80132d0:	20004154 	.word	0x20004154
 80132d4:	0801a37c 	.word	0x0801a37c

080132d8 <low_level_output>:
 *       to become availale since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b08a      	sub	sp, #40	; 0x28
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  err_t errval;
  struct pbuf *q;
  uint8_t *buffer = (uint8_t *)(heth.TxDesc->Buffer1Addr);
 80132e2:	4b4b      	ldr	r3, [pc, #300]	; (8013410 <low_level_output+0x138>)
 80132e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132e6:	689b      	ldr	r3, [r3, #8]
 80132e8:	61fb      	str	r3, [r7, #28]
  __IO ETH_DMADescTypeDef *DmaTxDesc;
  uint32_t framelength = 0;
 80132ea:	2300      	movs	r3, #0
 80132ec:	617b      	str	r3, [r7, #20]
  uint32_t bufferoffset = 0;
 80132ee:	2300      	movs	r3, #0
 80132f0:	613b      	str	r3, [r7, #16]
  uint32_t byteslefttocopy = 0;
 80132f2:	2300      	movs	r3, #0
 80132f4:	60fb      	str	r3, [r7, #12]
  uint32_t payloadoffset = 0;
 80132f6:	2300      	movs	r3, #0
 80132f8:	60bb      	str	r3, [r7, #8]
  DmaTxDesc = heth.TxDesc;
 80132fa:	4b45      	ldr	r3, [pc, #276]	; (8013410 <low_level_output+0x138>)
 80132fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80132fe:	61bb      	str	r3, [r7, #24]
  bufferoffset = 0;
 8013300:	2300      	movs	r3, #0
 8013302:	613b      	str	r3, [r7, #16]
  
  /* copy frame from pbufs to driver buffers */
  for(q = p; q != NULL; q = q->next)
 8013304:	683b      	ldr	r3, [r7, #0]
 8013306:	623b      	str	r3, [r7, #32]
 8013308:	e05a      	b.n	80133c0 <low_level_output+0xe8>
    {
      /* Is this buffer available? If not, goto error */
      if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 801330a:	69bb      	ldr	r3, [r7, #24]
 801330c:	681b      	ldr	r3, [r3, #0]
 801330e:	2b00      	cmp	r3, #0
 8013310:	da03      	bge.n	801331a <low_level_output+0x42>
      {
        errval = ERR_USE;
 8013312:	23f8      	movs	r3, #248	; 0xf8
 8013314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        goto error;
 8013318:	e05c      	b.n	80133d4 <low_level_output+0xfc>
      }
    
      /* Get bytes in current lwIP buffer */
      byteslefttocopy = q->len;
 801331a:	6a3b      	ldr	r3, [r7, #32]
 801331c:	895b      	ldrh	r3, [r3, #10]
 801331e:	60fb      	str	r3, [r7, #12]
      payloadoffset = 0;
 8013320:	2300      	movs	r3, #0
 8013322:	60bb      	str	r3, [r7, #8]
    
      /* Check if the length of data to copy is bigger than Tx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013324:	e02f      	b.n	8013386 <low_level_output+0xae>
      {
        /* Copy data to Tx buffer*/
        memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), (ETH_TX_BUF_SIZE - bufferoffset) );
 8013326:	69fa      	ldr	r2, [r7, #28]
 8013328:	693b      	ldr	r3, [r7, #16]
 801332a:	18d0      	adds	r0, r2, r3
 801332c:	6a3b      	ldr	r3, [r7, #32]
 801332e:	685a      	ldr	r2, [r3, #4]
 8013330:	68bb      	ldr	r3, [r7, #8]
 8013332:	18d1      	adds	r1, r2, r3
 8013334:	693a      	ldr	r2, [r7, #16]
 8013336:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801333a:	1a9b      	subs	r3, r3, r2
 801333c:	461a      	mov	r2, r3
 801333e:	f002 fd36 	bl	8015dae <memcpy>
      
        /* Point to next descriptor */
        DmaTxDesc = (ETH_DMADescTypeDef *)(DmaTxDesc->Buffer2NextDescAddr);
 8013342:	69bb      	ldr	r3, [r7, #24]
 8013344:	68db      	ldr	r3, [r3, #12]
 8013346:	61bb      	str	r3, [r7, #24]
      
        /* Check if the buffer is available */
        if((DmaTxDesc->Status & ETH_DMATXDESC_OWN) != (uint32_t)RESET)
 8013348:	69bb      	ldr	r3, [r7, #24]
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	da03      	bge.n	8013358 <low_level_output+0x80>
        {
          errval = ERR_USE;
 8013350:	23f8      	movs	r3, #248	; 0xf8
 8013352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          goto error;
 8013356:	e03d      	b.n	80133d4 <low_level_output+0xfc>
        }
      
        buffer = (uint8_t *)(DmaTxDesc->Buffer1Addr);
 8013358:	69bb      	ldr	r3, [r7, #24]
 801335a:	689b      	ldr	r3, [r3, #8]
 801335c:	61fb      	str	r3, [r7, #28]
      
        byteslefttocopy = byteslefttocopy - (ETH_TX_BUF_SIZE - bufferoffset);
 801335e:	693a      	ldr	r2, [r7, #16]
 8013360:	68fb      	ldr	r3, [r7, #12]
 8013362:	4413      	add	r3, r2
 8013364:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 8013368:	60fb      	str	r3, [r7, #12]
        payloadoffset = payloadoffset + (ETH_TX_BUF_SIZE - bufferoffset);
 801336a:	68ba      	ldr	r2, [r7, #8]
 801336c:	693b      	ldr	r3, [r7, #16]
 801336e:	1ad3      	subs	r3, r2, r3
 8013370:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013374:	60bb      	str	r3, [r7, #8]
        framelength = framelength + (ETH_TX_BUF_SIZE - bufferoffset);
 8013376:	697a      	ldr	r2, [r7, #20]
 8013378:	693b      	ldr	r3, [r7, #16]
 801337a:	1ad3      	subs	r3, r2, r3
 801337c:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 8013380:	617b      	str	r3, [r7, #20]
        bufferoffset = 0;
 8013382:	2300      	movs	r3, #0
 8013384:	613b      	str	r3, [r7, #16]
      while( (byteslefttocopy + bufferoffset) > ETH_TX_BUF_SIZE )
 8013386:	68fa      	ldr	r2, [r7, #12]
 8013388:	693b      	ldr	r3, [r7, #16]
 801338a:	4413      	add	r3, r2
 801338c:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8013390:	4293      	cmp	r3, r2
 8013392:	d8c8      	bhi.n	8013326 <low_level_output+0x4e>
      }
    
      /* Copy the remaining bytes */
      memcpy( (uint8_t*)((uint8_t*)buffer + bufferoffset), (uint8_t*)((uint8_t*)q->payload + payloadoffset), byteslefttocopy );
 8013394:	69fa      	ldr	r2, [r7, #28]
 8013396:	693b      	ldr	r3, [r7, #16]
 8013398:	18d0      	adds	r0, r2, r3
 801339a:	6a3b      	ldr	r3, [r7, #32]
 801339c:	685a      	ldr	r2, [r3, #4]
 801339e:	68bb      	ldr	r3, [r7, #8]
 80133a0:	4413      	add	r3, r2
 80133a2:	68fa      	ldr	r2, [r7, #12]
 80133a4:	4619      	mov	r1, r3
 80133a6:	f002 fd02 	bl	8015dae <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80133aa:	693a      	ldr	r2, [r7, #16]
 80133ac:	68fb      	ldr	r3, [r7, #12]
 80133ae:	4413      	add	r3, r2
 80133b0:	613b      	str	r3, [r7, #16]
      framelength = framelength + byteslefttocopy;
 80133b2:	697a      	ldr	r2, [r7, #20]
 80133b4:	68fb      	ldr	r3, [r7, #12]
 80133b6:	4413      	add	r3, r2
 80133b8:	617b      	str	r3, [r7, #20]
  for(q = p; q != NULL; q = q->next)
 80133ba:	6a3b      	ldr	r3, [r7, #32]
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	623b      	str	r3, [r7, #32]
 80133c0:	6a3b      	ldr	r3, [r7, #32]
 80133c2:	2b00      	cmp	r3, #0
 80133c4:	d1a1      	bne.n	801330a <low_level_output+0x32>
    }
  
  /* Prepare transmit descriptors to give to DMA */ 
  HAL_ETH_TransmitFrame(&heth, framelength);
 80133c6:	6979      	ldr	r1, [r7, #20]
 80133c8:	4811      	ldr	r0, [pc, #68]	; (8013410 <low_level_output+0x138>)
 80133ca:	f7ee fd79 	bl	8001ec0 <HAL_ETH_TransmitFrame>
  
  errval = ERR_OK;
 80133ce:	2300      	movs	r3, #0
 80133d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
error:
  
  /* When Transmit Underflow flag is set, clear it and issue a Transmit Poll Demand to resume transmission */
  if ((heth.Instance->DMASR & ETH_DMASR_TUS) != (uint32_t)RESET)
 80133d4:	4b0e      	ldr	r3, [pc, #56]	; (8013410 <low_level_output+0x138>)
 80133d6:	681a      	ldr	r2, [r3, #0]
 80133d8:	f241 0314 	movw	r3, #4116	; 0x1014
 80133dc:	4413      	add	r3, r2
 80133de:	681b      	ldr	r3, [r3, #0]
 80133e0:	f003 0320 	and.w	r3, r3, #32
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d00d      	beq.n	8013404 <low_level_output+0x12c>
  {
    /* Clear TUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_TUS;
 80133e8:	4b09      	ldr	r3, [pc, #36]	; (8013410 <low_level_output+0x138>)
 80133ea:	681a      	ldr	r2, [r3, #0]
 80133ec:	f241 0314 	movw	r3, #4116	; 0x1014
 80133f0:	4413      	add	r3, r2
 80133f2:	2220      	movs	r2, #32
 80133f4:	601a      	str	r2, [r3, #0]

    /* Resume DMA transmission*/
    heth.Instance->DMATPDR = 0;
 80133f6:	4b06      	ldr	r3, [pc, #24]	; (8013410 <low_level_output+0x138>)
 80133f8:	681a      	ldr	r2, [r3, #0]
 80133fa:	f241 0304 	movw	r3, #4100	; 0x1004
 80133fe:	4413      	add	r3, r2
 8013400:	2200      	movs	r2, #0
 8013402:	601a      	str	r2, [r3, #0]
  }
  return errval;
 8013404:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8013408:	4618      	mov	r0, r3
 801340a:	3728      	adds	r7, #40	; 0x28
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	20009270 	.word	0x20009270

08013414 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8013414:	b580      	push	{r7, lr}
 8013416:	b08c      	sub	sp, #48	; 0x30
 8013418:	af00      	add	r7, sp, #0
 801341a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801341c:	2300      	movs	r3, #0
 801341e:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct pbuf *q = NULL;
 8013420:	2300      	movs	r3, #0
 8013422:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t len = 0;
 8013424:	2300      	movs	r3, #0
 8013426:	81fb      	strh	r3, [r7, #14]
  uint8_t *buffer;
  __IO ETH_DMADescTypeDef *dmarxdesc;
  uint32_t bufferoffset = 0;
 8013428:	2300      	movs	r3, #0
 801342a:	61fb      	str	r3, [r7, #28]
  uint32_t payloadoffset = 0;
 801342c:	2300      	movs	r3, #0
 801342e:	61bb      	str	r3, [r7, #24]
  uint32_t byteslefttocopy = 0;
 8013430:	2300      	movs	r3, #0
 8013432:	617b      	str	r3, [r7, #20]
  uint32_t i=0;
 8013434:	2300      	movs	r3, #0
 8013436:	613b      	str	r3, [r7, #16]
  

  /* get received frame */
  if (HAL_ETH_GetReceivedFrame_IT(&heth) != HAL_OK)
 8013438:	484e      	ldr	r0, [pc, #312]	; (8013574 <low_level_input+0x160>)
 801343a:	f7ee fe2b 	bl	8002094 <HAL_ETH_GetReceivedFrame_IT>
 801343e:	4603      	mov	r3, r0
 8013440:	2b00      	cmp	r3, #0
 8013442:	d001      	beq.n	8013448 <low_level_input+0x34>
    return NULL;
 8013444:	2300      	movs	r3, #0
 8013446:	e091      	b.n	801356c <low_level_input+0x158>
  
  /* Obtain the size of the packet and put it into the "len" variable. */
  len = heth.RxFrameInfos.length;
 8013448:	4b4a      	ldr	r3, [pc, #296]	; (8013574 <low_level_input+0x160>)
 801344a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801344c:	81fb      	strh	r3, [r7, #14]
  buffer = (uint8_t *)heth.RxFrameInfos.buffer;
 801344e:	4b49      	ldr	r3, [pc, #292]	; (8013574 <low_level_input+0x160>)
 8013450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013452:	627b      	str	r3, [r7, #36]	; 0x24
  
  if (len > 0)
 8013454:	89fb      	ldrh	r3, [r7, #14]
 8013456:	2b00      	cmp	r3, #0
 8013458:	d006      	beq.n	8013468 <low_level_input+0x54>
  {
    /* We allocate a pbuf chain of pbufs from the Lwip buffer pool */
    p = pbuf_alloc(PBUF_RAW, len, PBUF_POOL);
 801345a:	89fb      	ldrh	r3, [r7, #14]
 801345c:	2203      	movs	r2, #3
 801345e:	4619      	mov	r1, r3
 8013460:	2004      	movs	r0, #4
 8013462:	f7f8 fd17 	bl	800be94 <pbuf_alloc>
 8013466:	62f8      	str	r0, [r7, #44]	; 0x2c
  }
  
  if (p != NULL)
 8013468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801346a:	2b00      	cmp	r3, #0
 801346c:	d04b      	beq.n	8013506 <low_level_input+0xf2>
  {
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 801346e:	4b41      	ldr	r3, [pc, #260]	; (8013574 <low_level_input+0x160>)
 8013470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013472:	623b      	str	r3, [r7, #32]
    bufferoffset = 0;
 8013474:	2300      	movs	r3, #0
 8013476:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 8013478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801347a:	62bb      	str	r3, [r7, #40]	; 0x28
 801347c:	e040      	b.n	8013500 <low_level_input+0xec>
    {
      byteslefttocopy = q->len;
 801347e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013480:	895b      	ldrh	r3, [r3, #10]
 8013482:	617b      	str	r3, [r7, #20]
      payloadoffset = 0;
 8013484:	2300      	movs	r3, #0
 8013486:	61bb      	str	r3, [r7, #24]
      
      /* Check if the length of bytes to copy in current pbuf is bigger than Rx buffer size*/
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 8013488:	e021      	b.n	80134ce <low_level_input+0xba>
      {
        /* Copy data to pbuf */
        memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), (ETH_RX_BUF_SIZE - bufferoffset));
 801348a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801348c:	685a      	ldr	r2, [r3, #4]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	18d0      	adds	r0, r2, r3
 8013492:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8013494:	69fb      	ldr	r3, [r7, #28]
 8013496:	18d1      	adds	r1, r2, r3
 8013498:	69fa      	ldr	r2, [r7, #28]
 801349a:	f240 53f4 	movw	r3, #1524	; 0x5f4
 801349e:	1a9b      	subs	r3, r3, r2
 80134a0:	461a      	mov	r2, r3
 80134a2:	f002 fc84 	bl	8015dae <memcpy>
        
        /* Point to next descriptor */
        dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 80134a6:	6a3b      	ldr	r3, [r7, #32]
 80134a8:	68db      	ldr	r3, [r3, #12]
 80134aa:	623b      	str	r3, [r7, #32]
        buffer = (uint8_t *)(dmarxdesc->Buffer1Addr);
 80134ac:	6a3b      	ldr	r3, [r7, #32]
 80134ae:	689b      	ldr	r3, [r3, #8]
 80134b0:	627b      	str	r3, [r7, #36]	; 0x24
        
        byteslefttocopy = byteslefttocopy - (ETH_RX_BUF_SIZE - bufferoffset);
 80134b2:	69fa      	ldr	r2, [r7, #28]
 80134b4:	697b      	ldr	r3, [r7, #20]
 80134b6:	4413      	add	r3, r2
 80134b8:	f2a3 53f4 	subw	r3, r3, #1524	; 0x5f4
 80134bc:	617b      	str	r3, [r7, #20]
        payloadoffset = payloadoffset + (ETH_RX_BUF_SIZE - bufferoffset);
 80134be:	69ba      	ldr	r2, [r7, #24]
 80134c0:	69fb      	ldr	r3, [r7, #28]
 80134c2:	1ad3      	subs	r3, r2, r3
 80134c4:	f203 53f4 	addw	r3, r3, #1524	; 0x5f4
 80134c8:	61bb      	str	r3, [r7, #24]
        bufferoffset = 0;
 80134ca:	2300      	movs	r3, #0
 80134cc:	61fb      	str	r3, [r7, #28]
      while( (byteslefttocopy + bufferoffset) > ETH_RX_BUF_SIZE )
 80134ce:	697a      	ldr	r2, [r7, #20]
 80134d0:	69fb      	ldr	r3, [r7, #28]
 80134d2:	4413      	add	r3, r2
 80134d4:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80134d8:	4293      	cmp	r3, r2
 80134da:	d8d6      	bhi.n	801348a <low_level_input+0x76>
      }
      /* Copy remaining data in pbuf */
      memcpy( (uint8_t*)((uint8_t*)q->payload + payloadoffset), (uint8_t*)((uint8_t*)buffer + bufferoffset), byteslefttocopy);
 80134dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134de:	685a      	ldr	r2, [r3, #4]
 80134e0:	69bb      	ldr	r3, [r7, #24]
 80134e2:	18d0      	adds	r0, r2, r3
 80134e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80134e6:	69fb      	ldr	r3, [r7, #28]
 80134e8:	4413      	add	r3, r2
 80134ea:	697a      	ldr	r2, [r7, #20]
 80134ec:	4619      	mov	r1, r3
 80134ee:	f002 fc5e 	bl	8015dae <memcpy>
      bufferoffset = bufferoffset + byteslefttocopy;
 80134f2:	69fa      	ldr	r2, [r7, #28]
 80134f4:	697b      	ldr	r3, [r7, #20]
 80134f6:	4413      	add	r3, r2
 80134f8:	61fb      	str	r3, [r7, #28]
    for(q = p; q != NULL; q = q->next)
 80134fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	62bb      	str	r3, [r7, #40]	; 0x28
 8013500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013502:	2b00      	cmp	r3, #0
 8013504:	d1bb      	bne.n	801347e <low_level_input+0x6a>
    }
  }  
  
    /* Release descriptors to DMA */
    /* Point to first descriptor */
    dmarxdesc = heth.RxFrameInfos.FSRxDesc;
 8013506:	4b1b      	ldr	r3, [pc, #108]	; (8013574 <low_level_input+0x160>)
 8013508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801350a:	623b      	str	r3, [r7, #32]
    /* Set Own bit in Rx descriptors: gives the buffers back to DMA */
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 801350c:	2300      	movs	r3, #0
 801350e:	613b      	str	r3, [r7, #16]
 8013510:	e00b      	b.n	801352a <low_level_input+0x116>
    {  
      dmarxdesc->Status |= ETH_DMARXDESC_OWN;
 8013512:	6a3b      	ldr	r3, [r7, #32]
 8013514:	681b      	ldr	r3, [r3, #0]
 8013516:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 801351a:	6a3b      	ldr	r3, [r7, #32]
 801351c:	601a      	str	r2, [r3, #0]
      dmarxdesc = (ETH_DMADescTypeDef *)(dmarxdesc->Buffer2NextDescAddr);
 801351e:	6a3b      	ldr	r3, [r7, #32]
 8013520:	68db      	ldr	r3, [r3, #12]
 8013522:	623b      	str	r3, [r7, #32]
    for (i=0; i< heth.RxFrameInfos.SegCount; i++)
 8013524:	693b      	ldr	r3, [r7, #16]
 8013526:	3301      	adds	r3, #1
 8013528:	613b      	str	r3, [r7, #16]
 801352a:	4b12      	ldr	r3, [pc, #72]	; (8013574 <low_level_input+0x160>)
 801352c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801352e:	693b      	ldr	r3, [r7, #16]
 8013530:	429a      	cmp	r2, r3
 8013532:	d8ee      	bhi.n	8013512 <low_level_input+0xfe>
    }
    
    /* Clear Segment_Count */
    heth.RxFrameInfos.SegCount =0;  
 8013534:	4b0f      	ldr	r3, [pc, #60]	; (8013574 <low_level_input+0x160>)
 8013536:	2200      	movs	r2, #0
 8013538:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* When Rx Buffer unavailable flag is set: clear it and resume reception */
  if ((heth.Instance->DMASR & ETH_DMASR_RBUS) != (uint32_t)RESET)  
 801353a:	4b0e      	ldr	r3, [pc, #56]	; (8013574 <low_level_input+0x160>)
 801353c:	681a      	ldr	r2, [r3, #0]
 801353e:	f241 0314 	movw	r3, #4116	; 0x1014
 8013542:	4413      	add	r3, r2
 8013544:	681b      	ldr	r3, [r3, #0]
 8013546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801354a:	2b00      	cmp	r3, #0
 801354c:	d00d      	beq.n	801356a <low_level_input+0x156>
  {
    /* Clear RBUS ETHERNET DMA flag */
    heth.Instance->DMASR = ETH_DMASR_RBUS;
 801354e:	4b09      	ldr	r3, [pc, #36]	; (8013574 <low_level_input+0x160>)
 8013550:	681a      	ldr	r2, [r3, #0]
 8013552:	f241 0314 	movw	r3, #4116	; 0x1014
 8013556:	4413      	add	r3, r2
 8013558:	2280      	movs	r2, #128	; 0x80
 801355a:	601a      	str	r2, [r3, #0]
    /* Resume DMA reception */
    heth.Instance->DMARPDR = 0;
 801355c:	4b05      	ldr	r3, [pc, #20]	; (8013574 <low_level_input+0x160>)
 801355e:	681a      	ldr	r2, [r3, #0]
 8013560:	f241 0308 	movw	r3, #4104	; 0x1008
 8013564:	4413      	add	r3, r2
 8013566:	2200      	movs	r2, #0
 8013568:	601a      	str	r2, [r3, #0]
  }
  return p;
 801356a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 801356c:	4618      	mov	r0, r3
 801356e:	3730      	adds	r7, #48	; 0x30
 8013570:	46bd      	mov	sp, r7
 8013572:	bd80      	pop	{r7, pc}
 8013574:	20009270 	.word	0x20009270

08013578 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input( void const * argument ) 
{
 8013578:	b580      	push	{r7, lr}
 801357a:	b084      	sub	sp, #16
 801357c:	af00      	add	r7, sp, #0
 801357e:	6078      	str	r0, [r7, #4]
  struct pbuf *p;
  struct netif *netif = (struct netif *) argument;
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	60fb      	str	r3, [r7, #12]
  
  for( ;; )
  {
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 8013584:	4b0f      	ldr	r3, [pc, #60]	; (80135c4 <ethernetif_input+0x4c>)
 8013586:	681b      	ldr	r3, [r3, #0]
 8013588:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 801358c:	4618      	mov	r0, r3
 801358e:	f7f0 ff1f 	bl	80043d0 <osSemaphoreWait>
 8013592:	4603      	mov	r3, r0
 8013594:	2b00      	cmp	r3, #0
 8013596:	d1f5      	bne.n	8013584 <ethernetif_input+0xc>
    {
      do
      {   
        p = low_level_input( netif );
 8013598:	68f8      	ldr	r0, [r7, #12]
 801359a:	f7ff ff3b 	bl	8013414 <low_level_input>
 801359e:	60b8      	str	r0, [r7, #8]
        if   (p != NULL)
 80135a0:	68bb      	ldr	r3, [r7, #8]
 80135a2:	2b00      	cmp	r3, #0
 80135a4:	d00a      	beq.n	80135bc <ethernetif_input+0x44>
        {
          if (netif->input( p, netif) != ERR_OK )
 80135a6:	68fb      	ldr	r3, [r7, #12]
 80135a8:	691b      	ldr	r3, [r3, #16]
 80135aa:	68f9      	ldr	r1, [r7, #12]
 80135ac:	68b8      	ldr	r0, [r7, #8]
 80135ae:	4798      	blx	r3
 80135b0:	4603      	mov	r3, r0
 80135b2:	2b00      	cmp	r3, #0
 80135b4:	d002      	beq.n	80135bc <ethernetif_input+0x44>
          {
            pbuf_free(p);
 80135b6:	68b8      	ldr	r0, [r7, #8]
 80135b8:	f7f8 ffde 	bl	800c578 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	2b00      	cmp	r3, #0
 80135c0:	d1ea      	bne.n	8013598 <ethernetif_input+0x20>
    if (osSemaphoreWait( s_xSemaphore, TIME_WAITING_FOR_INPUT)==osOK)
 80135c2:	e7df      	b.n	8013584 <ethernetif_input+0xc>
 80135c4:	20004154 	.word	0x20004154

080135c8 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80135c8:	b580      	push	{r7, lr}
 80135ca:	b082      	sub	sp, #8
 80135cc:	af00      	add	r7, sp, #0
 80135ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	2b00      	cmp	r3, #0
 80135d4:	d106      	bne.n	80135e4 <ethernetif_init+0x1c>
 80135d6:	4b0e      	ldr	r3, [pc, #56]	; (8013610 <ethernetif_init+0x48>)
 80135d8:	f240 2247 	movw	r2, #583	; 0x247
 80135dc:	490d      	ldr	r1, [pc, #52]	; (8013614 <ethernetif_init+0x4c>)
 80135de:	480e      	ldr	r0, [pc, #56]	; (8013618 <ethernetif_init+0x50>)
 80135e0:	f002 fbf8 	bl	8015dd4 <iprintf>
#if LWIP_NETIF_HOSTNAME
  /* Initialize interface hostname */
  netif->hostname = "lwip";
#endif /* LWIP_NETIF_HOSTNAME */

  netif->name[0] = IFNAME0;
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2273      	movs	r2, #115	; 0x73
 80135e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  netif->name[1] = IFNAME1;
 80135ec:	687b      	ldr	r3, [r7, #4]
 80135ee:	2274      	movs	r2, #116	; 0x74
 80135f0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 80135f4:	687b      	ldr	r3, [r7, #4]
 80135f6:	4a09      	ldr	r2, [pc, #36]	; (801361c <ethernetif_init+0x54>)
 80135f8:	615a      	str	r2, [r3, #20]
 
#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	4a08      	ldr	r2, [pc, #32]	; (8013620 <ethernetif_init+0x58>)
 80135fe:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8013600:	6878      	ldr	r0, [r7, #4]
 8013602:	f7ff fd9d 	bl	8013140 <low_level_init>

  return ERR_OK;
 8013606:	2300      	movs	r3, #0
}
 8013608:	4618      	mov	r0, r3
 801360a:	3708      	adds	r7, #8
 801360c:	46bd      	mov	sp, r7
 801360e:	bd80      	pop	{r7, pc}
 8013610:	0801a390 	.word	0x0801a390
 8013614:	0801a3a4 	.word	0x0801a3a4
 8013618:	0801a3b4 	.word	0x0801a3b4
 801361c:	080098b5 	.word	0x080098b5
 8013620:	080132d9 	.word	0x080132d9

08013624 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Time
*/
u32_t sys_now(void)
{
 8013624:	b580      	push	{r7, lr}
 8013626:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8013628:	f7ed fcdc 	bl	8000fe4 <HAL_GetTick>
 801362c:	4603      	mov	r3, r0
}
 801362e:	4618      	mov	r0, r3
 8013630:	bd80      	pop	{r7, pc}
	...

08013634 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8013634:	b5b0      	push	{r4, r5, r7, lr}
 8013636:	b09e      	sub	sp, #120	; 0x78
 8013638:	af00      	add	r7, sp, #0
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityAboveNormal, 0, 128);
 801363a:	4b2c      	ldr	r3, [pc, #176]	; (80136ec <MX_FREERTOS_Init+0xb8>)
 801363c:	f107 0464 	add.w	r4, r7, #100	; 0x64
 8013640:	461d      	mov	r5, r3
 8013642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013646:	682b      	ldr	r3, [r5, #0]
 8013648:	6023      	str	r3, [r4, #0]
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 801364a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 801364e:	2100      	movs	r1, #0
 8013650:	4618      	mov	r0, r3
 8013652:	f7f0 fdb8 	bl	80041c6 <osThreadCreate>
 8013656:	4602      	mov	r2, r0
 8013658:	4b25      	ldr	r3, [pc, #148]	; (80136f0 <MX_FREERTOS_Init+0xbc>)
 801365a:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	osThreadDef(TCP_SERVER, tcp_server, osPriorityNormal, 0, configMINIMAL_STACK_SIZE * 2);
 801365c:	4b25      	ldr	r3, [pc, #148]	; (80136f4 <MX_FREERTOS_Init+0xc0>)
 801365e:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8013662:	461d      	mov	r5, r3
 8013664:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013666:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013668:	682b      	ldr	r3, [r5, #0]
 801366a:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(TCP_SERVER), NULL);
 801366c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013670:	2100      	movs	r1, #0
 8013672:	4618      	mov	r0, r3
 8013674:	f7f0 fda7 	bl	80041c6 <osThreadCreate>

	osThreadDef(MODES_THREAD, run_modes, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 8013678:	4b1f      	ldr	r3, [pc, #124]	; (80136f8 <MX_FREERTOS_Init+0xc4>)
 801367a:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 801367e:	461d      	mov	r5, r3
 8013680:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8013682:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8013684:	682b      	ldr	r3, [r5, #0]
 8013686:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(MODES_THREAD), NULL);
 8013688:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 801368c:	2100      	movs	r1, #0
 801368e:	4618      	mov	r0, r3
 8013690:	f7f0 fd99 	bl	80041c6 <osThreadCreate>

	osThreadDef(POSITION, position_updater, osPriorityHigh, 0, configMINIMAL_STACK_SIZE * 2);
 8013694:	4b19      	ldr	r3, [pc, #100]	; (80136fc <MX_FREERTOS_Init+0xc8>)
 8013696:	f107 0428 	add.w	r4, r7, #40	; 0x28
 801369a:	461d      	mov	r5, r3
 801369c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801369e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136a0:	682b      	ldr	r3, [r5, #0]
 80136a2:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(POSITION), NULL);
 80136a4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80136a8:	2100      	movs	r1, #0
 80136aa:	4618      	mov	r0, r3
 80136ac:	f7f0 fd8b 	bl	80041c6 <osThreadCreate>

	osThreadDef(SPEED, speed_updater, osPriorityHigh, 0, configMINIMAL_STACK_SIZE * 2);
 80136b0:	4b13      	ldr	r3, [pc, #76]	; (8013700 <MX_FREERTOS_Init+0xcc>)
 80136b2:	f107 0414 	add.w	r4, r7, #20
 80136b6:	461d      	mov	r5, r3
 80136b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136bc:	682b      	ldr	r3, [r5, #0]
 80136be:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(SPEED), NULL);
 80136c0:	f107 0314 	add.w	r3, r7, #20
 80136c4:	2100      	movs	r1, #0
 80136c6:	4618      	mov	r0, r3
 80136c8:	f7f0 fd7d 	bl	80041c6 <osThreadCreate>

	osThreadDef(LIMITS, limits_controller, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE * 2);
 80136cc:	4b0d      	ldr	r3, [pc, #52]	; (8013704 <MX_FREERTOS_Init+0xd0>)
 80136ce:	463c      	mov	r4, r7
 80136d0:	461d      	mov	r5, r3
 80136d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80136d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80136d6:	682b      	ldr	r3, [r5, #0]
 80136d8:	6023      	str	r3, [r4, #0]
	osThreadCreate(osThread(LIMITS), NULL);
 80136da:	463b      	mov	r3, r7
 80136dc:	2100      	movs	r1, #0
 80136de:	4618      	mov	r0, r3
 80136e0:	f7f0 fd71 	bl	80041c6 <osThreadCreate>
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_QUEUES */
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */
}
 80136e4:	bf00      	nop
 80136e6:	3778      	adds	r7, #120	; 0x78
 80136e8:	46bd      	mov	sp, r7
 80136ea:	bdb0      	pop	{r4, r5, r7, pc}
 80136ec:	0801a3e8 	.word	0x0801a3e8
 80136f0:	2000aa88 	.word	0x2000aa88
 80136f4:	0801a408 	.word	0x0801a408
 80136f8:	0801a42c 	.word	0x0801a42c
 80136fc:	0801a44c 	.word	0x0801a44c
 8013700:	0801a468 	.word	0x0801a468
 8013704:	0801a484 	.word	0x0801a484

08013708 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8013708:	b580      	push	{r7, lr}
 801370a:	b082      	sub	sp, #8
 801370c:	af00      	add	r7, sp, #0
 801370e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8013710:	f000 fa94 	bl	8013c3c <MX_LWIP_Init>

  /* USER CODE BEGIN StartDefaultTask */
	for (;;) {
		osThreadTerminate(NULL);
 8013714:	2000      	movs	r0, #0
 8013716:	f7f0 fd7d 	bl	8004214 <osThreadTerminate>
 801371a:	e7fb      	b.n	8013714 <StartDefaultTask+0xc>

0801371c <set_basic_config>:
advanced_config_t advanced_config;
system_config_t system_config;

uint8_t axis_selected = 0;

uint16_t set_basic_config(char* buf) {
 801371c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801371e:	b083      	sub	sp, #12
 8013720:	af00      	add	r7, sp, #0
 8013722:	6078      	str	r0, [r7, #4]
	memcpy(&basic_config.packet, buf, sizeof(basic_config.packet));
 8013724:	4a0f      	ldr	r2, [pc, #60]	; (8013764 <set_basic_config+0x48>)
 8013726:	687b      	ldr	r3, [r7, #4]
 8013728:	4610      	mov	r0, r2
 801372a:	f103 0430 	add.w	r4, r3, #48	; 0x30
 801372e:	4602      	mov	r2, r0
 8013730:	4619      	mov	r1, r3
 8013732:	f8d1 e000 	ldr.w	lr, [r1]
 8013736:	684e      	ldr	r6, [r1, #4]
 8013738:	688d      	ldr	r5, [r1, #8]
 801373a:	68c9      	ldr	r1, [r1, #12]
 801373c:	f8c2 e000 	str.w	lr, [r2]
 8013740:	6056      	str	r6, [r2, #4]
 8013742:	6095      	str	r5, [r2, #8]
 8013744:	60d1      	str	r1, [r2, #12]
 8013746:	3310      	adds	r3, #16
 8013748:	3010      	adds	r0, #16
 801374a:	42a3      	cmp	r3, r4
 801374c:	d1ef      	bne.n	801372e <set_basic_config+0x12>
 801374e:	4602      	mov	r2, r0
 8013750:	6819      	ldr	r1, [r3, #0]
 8013752:	685b      	ldr	r3, [r3, #4]
 8013754:	6011      	str	r1, [r2, #0]
 8013756:	6053      	str	r3, [r2, #4]
	return sizeof(basic_config.packet);
 8013758:	2338      	movs	r3, #56	; 0x38
}
 801375a:	4618      	mov	r0, r3
 801375c:	370c      	adds	r7, #12
 801375e:	46bd      	mov	sp, r7
 8013760:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013762:	bf00      	nop
 8013764:	2000aa8c 	.word	0x2000aa8c

08013768 <set_advanced_config>:

uint16_t set_advanced_config(char* buf) {
 8013768:	b4b0      	push	{r4, r5, r7}
 801376a:	b083      	sub	sp, #12
 801376c:	af00      	add	r7, sp, #0
 801376e:	6078      	str	r0, [r7, #4]
	memcpy(&advanced_config.packet, buf, sizeof(advanced_config.packet));
 8013770:	4b0b      	ldr	r3, [pc, #44]	; (80137a0 <set_advanced_config+0x38>)
 8013772:	687a      	ldr	r2, [r7, #4]
 8013774:	6815      	ldr	r5, [r2, #0]
 8013776:	6854      	ldr	r4, [r2, #4]
 8013778:	6890      	ldr	r0, [r2, #8]
 801377a:	68d1      	ldr	r1, [r2, #12]
 801377c:	601d      	str	r5, [r3, #0]
 801377e:	605c      	str	r4, [r3, #4]
 8013780:	6098      	str	r0, [r3, #8]
 8013782:	60d9      	str	r1, [r3, #12]
 8013784:	6915      	ldr	r5, [r2, #16]
 8013786:	6954      	ldr	r4, [r2, #20]
 8013788:	6990      	ldr	r0, [r2, #24]
 801378a:	69d1      	ldr	r1, [r2, #28]
 801378c:	611d      	str	r5, [r3, #16]
 801378e:	615c      	str	r4, [r3, #20]
 8013790:	6198      	str	r0, [r3, #24]
 8013792:	61d9      	str	r1, [r3, #28]
	return sizeof(advanced_config.packet);
 8013794:	2320      	movs	r3, #32
}
 8013796:	4618      	mov	r0, r3
 8013798:	370c      	adds	r7, #12
 801379a:	46bd      	mov	sp, r7
 801379c:	bcb0      	pop	{r4, r5, r7}
 801379e:	4770      	bx	lr
 80137a0:	2000aacc 	.word	0x2000aacc

080137a4 <set_system_config>:

uint16_t set_system_config(char* buf) {
 80137a4:	b480      	push	{r7}
 80137a6:	b083      	sub	sp, #12
 80137a8:	af00      	add	r7, sp, #0
 80137aa:	6078      	str	r0, [r7, #4]
	memcpy(&system_config.packet, buf, sizeof(system_config.packet));
 80137ac:	4b06      	ldr	r3, [pc, #24]	; (80137c8 <set_system_config+0x24>)
 80137ae:	687a      	ldr	r2, [r7, #4]
 80137b0:	6811      	ldr	r1, [r2, #0]
 80137b2:	6852      	ldr	r2, [r2, #4]
 80137b4:	6019      	str	r1, [r3, #0]
 80137b6:	605a      	str	r2, [r3, #4]
	return sizeof(system_config.packet);
 80137b8:	2308      	movs	r3, #8
}
 80137ba:	4618      	mov	r0, r3
 80137bc:	370c      	adds	r7, #12
 80137be:	46bd      	mov	sp, r7
 80137c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137c4:	4770      	bx	lr
 80137c6:	bf00      	nop
 80137c8:	2000aac4 	.word	0x2000aac4

080137cc <set_axis>:

uint16_t set_axis(char* buf) {
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
	memcpy(&axis_selected, buf, sizeof(axis_selected));
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	781a      	ldrb	r2, [r3, #0]
 80137d8:	4b05      	ldr	r3, [pc, #20]	; (80137f0 <set_axis+0x24>)
 80137da:	701a      	strb	r2, [r3, #0]
	select_axis(axis_selected);
 80137dc:	4b04      	ldr	r3, [pc, #16]	; (80137f0 <set_axis+0x24>)
 80137de:	781b      	ldrb	r3, [r3, #0]
 80137e0:	4618      	mov	r0, r3
 80137e2:	f001 fae7 	bl	8014db4 <select_axis>
	return sizeof(axis_selected);
 80137e6:	2301      	movs	r3, #1
}
 80137e8:	4618      	mov	r0, r3
 80137ea:	3708      	adds	r7, #8
 80137ec:	46bd      	mov	sp, r7
 80137ee:	bd80      	pop	{r7, pc}
 80137f0:	20004158 	.word	0x20004158

080137f4 <axisType>:



axis_type_t axisType() {
 80137f4:	b480      	push	{r7}
 80137f6:	af00      	add	r7, sp, #0
	return advanced_config.bf.axisType;
 80137f8:	4b03      	ldr	r3, [pc, #12]	; (8013808 <axisType+0x14>)
 80137fa:	7f1b      	ldrb	r3, [r3, #28]
}
 80137fc:	4618      	mov	r0, r3
 80137fe:	46bd      	mov	sp, r7
 8013800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013804:	4770      	bx	lr
 8013806:	bf00      	nop
 8013808:	2000aacc 	.word	0x2000aacc

0801380c <upperRange>:

float upperRange() {
 801380c:	b480      	push	{r7}
 801380e:	af00      	add	r7, sp, #0
	return advanced_config.bf.upperRange;
 8013810:	4b04      	ldr	r3, [pc, #16]	; (8013824 <upperRange+0x18>)
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	ee07 3a90 	vmov	s15, r3
}
 8013818:	eeb0 0a67 	vmov.f32	s0, s15
 801381c:	46bd      	mov	sp, r7
 801381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013822:	4770      	bx	lr
 8013824:	2000aacc 	.word	0x2000aacc

08013828 <lowerRange>:

float lowerRange() {
 8013828:	b480      	push	{r7}
 801382a:	af00      	add	r7, sp, #0
	return advanced_config.bf.lowerRange;
 801382c:	4b04      	ldr	r3, [pc, #16]	; (8013840 <lowerRange+0x18>)
 801382e:	685b      	ldr	r3, [r3, #4]
 8013830:	ee07 3a90 	vmov	s15, r3
}
 8013834:	eeb0 0a67 	vmov.f32	s0, s15
 8013838:	46bd      	mov	sp, r7
 801383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801383e:	4770      	bx	lr
 8013840:	2000aacc 	.word	0x2000aacc

08013844 <acceleration>:

float acceleration() {
 8013844:	b480      	push	{r7}
 8013846:	af00      	add	r7, sp, #0
	return basic_config.bf.acceleration;
 8013848:	4b04      	ldr	r3, [pc, #16]	; (801385c <acceleration+0x18>)
 801384a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801384c:	ee07 3a90 	vmov	s15, r3
}
 8013850:	eeb0 0a67 	vmov.f32	s0, s15
 8013854:	46bd      	mov	sp, r7
 8013856:	f85d 7b04 	ldr.w	r7, [sp], #4
 801385a:	4770      	bx	lr
 801385c:	2000aa8c 	.word	0x2000aa8c

08013860 <deceleration>:

float deceleration() {
 8013860:	b480      	push	{r7}
 8013862:	af00      	add	r7, sp, #0
	return basic_config.bf.deceleration;
 8013864:	4b04      	ldr	r3, [pc, #16]	; (8013878 <deceleration+0x18>)
 8013866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8013868:	ee07 3a90 	vmov	s15, r3
}
 801386c:	eeb0 0a67 	vmov.f32	s0, s15
 8013870:	46bd      	mov	sp, r7
 8013872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013876:	4770      	bx	lr
 8013878:	2000aa8c 	.word	0x2000aa8c

0801387c <positionWindow>:

float positionWindow() {
 801387c:	b480      	push	{r7}
 801387e:	af00      	add	r7, sp, #0
	return basic_config.bf.posWindow;
 8013880:	4b04      	ldr	r3, [pc, #16]	; (8013894 <positionWindow+0x18>)
 8013882:	69db      	ldr	r3, [r3, #28]
 8013884:	ee07 3a90 	vmov	s15, r3
}
 8013888:	eeb0 0a67 	vmov.f32	s0, s15
 801388c:	46bd      	mov	sp, r7
 801388e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013892:	4770      	bx	lr
 8013894:	2000aa8c 	.word	0x2000aa8c

08013898 <minSpeed>:

float minSpeed() {
 8013898:	b480      	push	{r7}
 801389a:	af00      	add	r7, sp, #0
	return basic_config.bf.minSpeed;
 801389c:	4b04      	ldr	r3, [pc, #16]	; (80138b0 <minSpeed+0x18>)
 801389e:	695b      	ldr	r3, [r3, #20]
 80138a0:	ee07 3a90 	vmov	s15, r3
}
 80138a4:	eeb0 0a67 	vmov.f32	s0, s15
 80138a8:	46bd      	mov	sp, r7
 80138aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ae:	4770      	bx	lr
 80138b0:	2000aa8c 	.word	0x2000aa8c

080138b4 <maxSpeed>:

float maxSpeed() {
 80138b4:	b480      	push	{r7}
 80138b6:	af00      	add	r7, sp, #0
	return basic_config.bf.maxSpeed;
 80138b8:	4b04      	ldr	r3, [pc, #16]	; (80138cc <maxSpeed+0x18>)
 80138ba:	691b      	ldr	r3, [r3, #16]
 80138bc:	ee07 3a90 	vmov	s15, r3
}
 80138c0:	eeb0 0a67 	vmov.f32	s0, s15
 80138c4:	46bd      	mov	sp, r7
 80138c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138ca:	4770      	bx	lr
 80138cc:	2000aa8c 	.word	0x2000aa8c

080138d0 <maxVolt>:

float maxVolt() {
 80138d0:	b480      	push	{r7}
 80138d2:	af00      	add	r7, sp, #0
	return advanced_config.bf.maxVolt;
 80138d4:	4b04      	ldr	r3, [pc, #16]	; (80138e8 <maxVolt+0x18>)
 80138d6:	68db      	ldr	r3, [r3, #12]
 80138d8:	ee07 3a90 	vmov	s15, r3
}
 80138dc:	eeb0 0a67 	vmov.f32	s0, s15
 80138e0:	46bd      	mov	sp, r7
 80138e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138e6:	4770      	bx	lr
 80138e8:	2000aacc 	.word	0x2000aacc

080138ec <axisSelected>:

uint8_t limited() {
	return basic_config.bf.limited;
}

uint8_t axisSelected() {
 80138ec:	b480      	push	{r7}
 80138ee:	af00      	add	r7, sp, #0
	return axis_selected;
 80138f0:	4b03      	ldr	r3, [pc, #12]	; (8013900 <axisSelected+0x14>)
 80138f2:	781b      	ldrb	r3, [r3, #0]
}
 80138f4:	4618      	mov	r0, r3
 80138f6:	46bd      	mov	sp, r7
 80138f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80138fc:	4770      	bx	lr
 80138fe:	bf00      	nop
 8013900:	20004158 	.word	0x20004158

08013904 <TTL_flank>:

uint32_t TTL_flank() {
 8013904:	b480      	push	{r7}
 8013906:	af00      	add	r7, sp, #0
	return system_config.bf.ttlFlank;
 8013908:	4b03      	ldr	r3, [pc, #12]	; (8013918 <TTL_flank+0x14>)
 801390a:	685b      	ldr	r3, [r3, #4]
}
 801390c:	4618      	mov	r0, r3
 801390e:	46bd      	mov	sp, r7
 8013910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013914:	4770      	bx	lr
 8013916:	bf00      	nop
 8013918:	2000aac4 	.word	0x2000aac4

0801391c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 801391c:	b580      	push	{r7, lr}
 801391e:	b08e      	sub	sp, #56	; 0x38
 8013920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8013922:	4ab5      	ldr	r2, [pc, #724]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013924:	4bb4      	ldr	r3, [pc, #720]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013928:	f043 0310 	orr.w	r3, r3, #16
 801392c:	6313      	str	r3, [r2, #48]	; 0x30
 801392e:	4bb2      	ldr	r3, [pc, #712]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013932:	f003 0310 	and.w	r3, r3, #16
 8013936:	623b      	str	r3, [r7, #32]
 8013938:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 801393a:	4aaf      	ldr	r2, [pc, #700]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801393c:	4bae      	ldr	r3, [pc, #696]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801393e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013940:	f043 0304 	orr.w	r3, r3, #4
 8013944:	6313      	str	r3, [r2, #48]	; 0x30
 8013946:	4bac      	ldr	r3, [pc, #688]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801394a:	f003 0304 	and.w	r3, r3, #4
 801394e:	61fb      	str	r3, [r7, #28]
 8013950:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8013952:	4aa9      	ldr	r2, [pc, #676]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013954:	4ba8      	ldr	r3, [pc, #672]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013956:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013958:	f043 0320 	orr.w	r3, r3, #32
 801395c:	6313      	str	r3, [r2, #48]	; 0x30
 801395e:	4ba6      	ldr	r3, [pc, #664]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013962:	f003 0320 	and.w	r3, r3, #32
 8013966:	61bb      	str	r3, [r7, #24]
 8013968:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 801396a:	4aa3      	ldr	r2, [pc, #652]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801396c:	4ba2      	ldr	r3, [pc, #648]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8013974:	6313      	str	r3, [r2, #48]	; 0x30
 8013976:	4ba0      	ldr	r3, [pc, #640]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801397a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801397e:	617b      	str	r3, [r7, #20]
 8013980:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8013982:	4a9d      	ldr	r2, [pc, #628]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013984:	4b9c      	ldr	r3, [pc, #624]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013988:	f043 0301 	orr.w	r3, r3, #1
 801398c:	6313      	str	r3, [r2, #48]	; 0x30
 801398e:	4b9a      	ldr	r3, [pc, #616]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 8013990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8013992:	f003 0301 	and.w	r3, r3, #1
 8013996:	613b      	str	r3, [r7, #16]
 8013998:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801399a:	4a97      	ldr	r2, [pc, #604]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801399c:	4b96      	ldr	r3, [pc, #600]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 801399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139a0:	f043 0302 	orr.w	r3, r3, #2
 80139a4:	6313      	str	r3, [r2, #48]	; 0x30
 80139a6:	4b94      	ldr	r3, [pc, #592]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139aa:	f003 0302 	and.w	r3, r3, #2
 80139ae:	60fb      	str	r3, [r7, #12]
 80139b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80139b2:	4a91      	ldr	r2, [pc, #580]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139b4:	4b90      	ldr	r3, [pc, #576]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80139bc:	6313      	str	r3, [r2, #48]	; 0x30
 80139be:	4b8e      	ldr	r3, [pc, #568]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80139c6:	60bb      	str	r3, [r7, #8]
 80139c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80139ca:	4a8b      	ldr	r2, [pc, #556]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139cc:	4b8a      	ldr	r3, [pc, #552]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139d0:	f043 0308 	orr.w	r3, r3, #8
 80139d4:	6313      	str	r3, [r2, #48]	; 0x30
 80139d6:	4b88      	ldr	r3, [pc, #544]	; (8013bf8 <MX_GPIO_Init+0x2dc>)
 80139d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80139da:	f003 0308 	and.w	r3, r3, #8
 80139de:	607b      	str	r3, [r7, #4]
 80139e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3, GPIO_PIN_RESET);
 80139e2:	2200      	movs	r2, #0
 80139e4:	f24c 0108 	movw	r1, #49160	; 0xc008
 80139e8:	4884      	ldr	r0, [pc, #528]	; (8013bfc <MX_GPIO_Init+0x2e0>)
 80139ea:	f7ef f9a9 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 80139ee:	2200      	movs	r2, #0
 80139f0:	2180      	movs	r1, #128	; 0x80
 80139f2:	4883      	ldr	r0, [pc, #524]	; (8013c00 <MX_GPIO_Init+0x2e4>)
 80139f4:	f7ef f9a4 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80139f8:	2200      	movs	r2, #0
 80139fa:	f248 4108 	movw	r1, #33800	; 0x8408
 80139fe:	4881      	ldr	r0, [pc, #516]	; (8013c04 <MX_GPIO_Init+0x2e8>)
 8013a00:	f7ef f99e 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SPI_NSS_Pin|LD3_Pin|GPIO_PIN_3|GPIO_PIN_4 
 8013a04:	2200      	movs	r2, #0
 8013a06:	f245 0198 	movw	r1, #20632	; 0x5098
 8013a0a:	487f      	ldr	r0, [pc, #508]	; (8013c08 <MX_GPIO_Init+0x2ec>)
 8013a0c:	f7ef f998 	bl	8002d40 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13|GPIO_PIN_4, GPIO_PIN_RESET);
 8013a10:	2200      	movs	r2, #0
 8013a12:	f242 0110 	movw	r1, #8208	; 0x2010
 8013a16:	487d      	ldr	r0, [pc, #500]	; (8013c0c <MX_GPIO_Init+0x2f0>)
 8013a18:	f7ef f992 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_4|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 8013a1c:	2200      	movs	r2, #0
 8013a1e:	f248 6110 	movw	r1, #34320	; 0x8610
 8013a22:	487b      	ldr	r0, [pc, #492]	; (8013c10 <MX_GPIO_Init+0x2f4>)
 8013a24:	f7ef f98c 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8013a28:	2201      	movs	r2, #1
 8013a2a:	2120      	movs	r1, #32
 8013a2c:	4876      	ldr	r0, [pc, #472]	; (8013c08 <MX_GPIO_Init+0x2ec>)
 8013a2e:	f7ef f987 	bl	8002d40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 PE4 PE5 
                           PE6 PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5 
 8013a32:	237e      	movs	r3, #126	; 0x7e
 8013a34:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_6|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013a36:	2300      	movs	r3, #0
 8013a38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a3a:	2300      	movs	r3, #0
 8013a3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8013a3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a42:	4619      	mov	r1, r3
 8013a44:	4873      	ldr	r0, [pc, #460]	; (8013c14 <MX_GPIO_Init+0x2f8>)
 8013a46:	f7ee ffb9 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13 PC0 PC2 PC7 
                           PC10 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_7 
 8013a4a:	f643 4385 	movw	r3, #15493	; 0x3c85
 8013a4e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013a50:	2300      	movs	r3, #0
 8013a52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a54:	2300      	movs	r3, #0
 8013a56:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013a58:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a5c:	4619      	mov	r1, r3
 8013a5e:	4867      	ldr	r0, [pc, #412]	; (8013bfc <MX_GPIO_Init+0x2e0>)
 8013a60:	f7ee ffac 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PC14 PC15 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3;
 8013a64:	f24c 0308 	movw	r3, #49160	; 0xc008
 8013a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013a6a:	2301      	movs	r3, #1
 8013a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a6e:	2300      	movs	r3, #0
 8013a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013a72:	2300      	movs	r3, #0
 8013a74:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8013a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a7a:	4619      	mov	r1, r3
 8013a7c:	485f      	ldr	r0, [pc, #380]	; (8013bfc <MX_GPIO_Init+0x2e0>)
 8013a7e:	f7ee ff9d 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF6 PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6|GPIO_PIN_9;
 8013a82:	f44f 7311 	mov.w	r3, #580	; 0x244
 8013a86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013a8c:	2300      	movs	r3, #0
 8013a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013a90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013a94:	4619      	mov	r1, r3
 8013a96:	485a      	ldr	r0, [pc, #360]	; (8013c00 <MX_GPIO_Init+0x2e4>)
 8013a98:	f7ee ff90 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8013a9c:	2380      	movs	r3, #128	; 0x80
 8013a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013aa0:	2301      	movs	r3, #1
 8013aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013aa4:	2300      	movs	r3, #0
 8013aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013aa8:	2300      	movs	r3, #0
 8013aaa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8013aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ab0:	4619      	mov	r1, r3
 8013ab2:	4853      	ldr	r0, [pc, #332]	; (8013c00 <MX_GPIO_Init+0x2e4>)
 8013ab4:	f7ee ff82 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_10;
 8013ab8:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8013abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013abe:	2311      	movs	r3, #17
 8013ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ac2:	2300      	movs	r3, #0
 8013ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013ac6:	2300      	movs	r3, #0
 8013ac8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013aca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ace:	4619      	mov	r1, r3
 8013ad0:	484c      	ldr	r0, [pc, #304]	; (8013c04 <MX_GPIO_Init+0x2e8>)
 8013ad2:	f7ee ff73 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 
                           PG12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8013ad6:	f241 030f 	movw	r3, #4111	; 0x100f
 8013ada:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013adc:	2300      	movs	r3, #0
 8013ade:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ae0:	2300      	movs	r3, #0
 8013ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013ae4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013ae8:	4619      	mov	r1, r3
 8013aea:	4849      	ldr	r0, [pc, #292]	; (8013c10 <MX_GPIO_Init+0x2f4>)
 8013aec:	f7ee ff66 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PB7 */
  GPIO_InitStruct.Pin = SPI_NSS_Pin|LD3_Pin|GPIO_PIN_7;
 8013af0:	f44f 43a1 	mov.w	r3, #20608	; 0x5080
 8013af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013af6:	2301      	movs	r3, #1
 8013af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013afa:	2300      	movs	r3, #0
 8013afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013afe:	2300      	movs	r3, #0
 8013b00:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013b02:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b06:	4619      	mov	r1, r3
 8013b08:	483f      	ldr	r0, [pc, #252]	; (8013c08 <MX_GPIO_Init+0x2ec>)
 8013b0a:	f7ee ff57 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8013b0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8013b12:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013b14:	2311      	movs	r3, #17
 8013b16:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b18:	2300      	movs	r3, #0
 8013b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b1c:	2300      	movs	r3, #0
 8013b1e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013b20:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b24:	4619      	mov	r1, r3
 8013b26:	4839      	ldr	r0, [pc, #228]	; (8013c0c <MX_GPIO_Init+0x2f0>)
 8013b28:	f7ee ff48 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PG4 PG10 PG15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_10|GPIO_PIN_15;
 8013b2c:	f248 4310 	movw	r3, #33808	; 0x8410
 8013b30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b32:	2301      	movs	r3, #1
 8013b34:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8013b36:	2302      	movs	r3, #2
 8013b38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013b3e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b42:	4619      	mov	r1, r3
 8013b44:	4832      	ldr	r0, [pc, #200]	; (8013c10 <MX_GPIO_Init+0x2f4>)
 8013b46:	f7ee ff39 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8013b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013b4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b50:	2301      	movs	r3, #1
 8013b52:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b54:	2300      	movs	r3, #0
 8013b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b58:	2300      	movs	r3, #0
 8013b5a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013b5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b60:	4619      	mov	r1, r3
 8013b62:	4828      	ldr	r0, [pc, #160]	; (8013c04 <MX_GPIO_Init+0x2e8>)
 8013b64:	f7ee ff2a 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 
                           PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3 
 8013b68:	236f      	movs	r3, #111	; 0x6f
 8013b6a:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_5|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b70:	2300      	movs	r3, #0
 8013b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013b74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b78:	4619      	mov	r1, r3
 8013b7a:	4824      	ldr	r0, [pc, #144]	; (8013c0c <MX_GPIO_Init+0x2f0>)
 8013b7c:	f7ee ff1e 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8013b80:	2310      	movs	r3, #16
 8013b82:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013b84:	2301      	movs	r3, #1
 8013b86:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013b88:	2300      	movs	r3, #0
 8013b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013b8c:	2300      	movs	r3, #0
 8013b8e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8013b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013b94:	4619      	mov	r1, r3
 8013b96:	481d      	ldr	r0, [pc, #116]	; (8013c0c <MX_GPIO_Init+0x2f0>)
 8013b98:	f7ee ff10 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PG9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8013b9c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8013ba0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8013ba2:	2301      	movs	r3, #1
 8013ba4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013ba6:	2300      	movs	r3, #0
 8013ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013baa:	2300      	movs	r3, #0
 8013bac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8013bae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013bb2:	4619      	mov	r1, r3
 8013bb4:	4816      	ldr	r0, [pc, #88]	; (8013c10 <MX_GPIO_Init+0x2f4>)
 8013bb6:	f7ee ff01 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8013bba:	2318      	movs	r3, #24
 8013bbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013bbe:	2311      	movs	r3, #17
 8013bc0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013bc2:	2300      	movs	r3, #0
 8013bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013bc6:	2300      	movs	r3, #0
 8013bc8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013bca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013bce:	4619      	mov	r1, r3
 8013bd0:	480d      	ldr	r0, [pc, #52]	; (8013c08 <MX_GPIO_Init+0x2ec>)
 8013bd2:	f7ee fef3 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8013bd6:	2320      	movs	r3, #32
 8013bd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8013bda:	2311      	movs	r3, #17
 8013bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8013bde:	2301      	movs	r3, #1
 8013be0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013be2:	2300      	movs	r3, #0
 8013be4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013be6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013bea:	4619      	mov	r1, r3
 8013bec:	4806      	ldr	r0, [pc, #24]	; (8013c08 <MX_GPIO_Init+0x2ec>)
 8013bee:	f7ee fee5 	bl	80029bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8013bf2:	2340      	movs	r3, #64	; 0x40
 8013bf4:	e010      	b.n	8013c18 <MX_GPIO_Init+0x2fc>
 8013bf6:	bf00      	nop
 8013bf8:	40023800 	.word	0x40023800
 8013bfc:	40020800 	.word	0x40020800
 8013c00:	40021400 	.word	0x40021400
 8013c04:	40020000 	.word	0x40020000
 8013c08:	40020400 	.word	0x40020400
 8013c0c:	40020c00 	.word	0x40020c00
 8013c10:	40021800 	.word	0x40021800
 8013c14:	40021000 	.word	0x40021000
 8013c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8013c1a:	2300      	movs	r3, #0
 8013c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013c1e:	2300      	movs	r3, #0
 8013c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8013c22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013c26:	4619      	mov	r1, r3
 8013c28:	4803      	ldr	r0, [pc, #12]	; (8013c38 <MX_GPIO_Init+0x31c>)
 8013c2a:	f7ee fec7 	bl	80029bc <HAL_GPIO_Init>

}
 8013c2e:	bf00      	nop
 8013c30:	3738      	adds	r7, #56	; 0x38
 8013c32:	46bd      	mov	sp, r7
 8013c34:	bd80      	pop	{r7, pc}
 8013c36:	bf00      	nop
 8013c38:	40020400 	.word	0x40020400

08013c3c <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8013c3c:	b580      	push	{r7, lr}
 8013c3e:	b084      	sub	sp, #16
 8013c40:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 10;
 8013c42:	4b8b      	ldr	r3, [pc, #556]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c44:	220a      	movs	r2, #10
 8013c46:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 42;
 8013c48:	4b89      	ldr	r3, [pc, #548]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c4a:	222a      	movs	r2, #42	; 0x2a
 8013c4c:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 8013c4e:	4b88      	ldr	r3, [pc, #544]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c50:	2200      	movs	r2, #0
 8013c52:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 8013c54:	4b86      	ldr	r3, [pc, #536]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c56:	2202      	movs	r2, #2
 8013c58:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8013c5a:	4b86      	ldr	r3, [pc, #536]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013c5c:	22ff      	movs	r2, #255	; 0xff
 8013c5e:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8013c60:	4b84      	ldr	r3, [pc, #528]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013c62:	22ff      	movs	r2, #255	; 0xff
 8013c64:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8013c66:	4b83      	ldr	r3, [pc, #524]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013c68:	22ff      	movs	r2, #255	; 0xff
 8013c6a:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8013c6c:	4b81      	ldr	r3, [pc, #516]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013c6e:	2200      	movs	r2, #0
 8013c70:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 10;
 8013c72:	4b81      	ldr	r3, [pc, #516]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013c74:	220a      	movs	r2, #10
 8013c76:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 42;
 8013c78:	4b7f      	ldr	r3, [pc, #508]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013c7a:	222a      	movs	r2, #42	; 0x2a
 8013c7c:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 8013c7e:	4b7e      	ldr	r3, [pc, #504]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013c80:	2200      	movs	r2, #0
 8013c82:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8013c84:	4b7c      	ldr	r3, [pc, #496]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013c86:	2201      	movs	r2, #1
 8013c88:	70da      	strb	r2, [r3, #3]
  
  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8013c8a:	2100      	movs	r1, #0
 8013c8c:	2000      	movs	r0, #0
 8013c8e:	f7f5 f96b 	bl	8008f68 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8013c92:	4b77      	ldr	r3, [pc, #476]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c94:	781b      	ldrb	r3, [r3, #0]
 8013c96:	061a      	lsls	r2, r3, #24
 8013c98:	4b75      	ldr	r3, [pc, #468]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013c9a:	785b      	ldrb	r3, [r3, #1]
 8013c9c:	041b      	lsls	r3, r3, #16
 8013c9e:	431a      	orrs	r2, r3
 8013ca0:	4b73      	ldr	r3, [pc, #460]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013ca2:	789b      	ldrb	r3, [r3, #2]
 8013ca4:	021b      	lsls	r3, r3, #8
 8013ca6:	4313      	orrs	r3, r2
 8013ca8:	4a71      	ldr	r2, [pc, #452]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013caa:	78d2      	ldrb	r2, [r2, #3]
 8013cac:	4313      	orrs	r3, r2
 8013cae:	061a      	lsls	r2, r3, #24
 8013cb0:	4b6f      	ldr	r3, [pc, #444]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cb2:	781b      	ldrb	r3, [r3, #0]
 8013cb4:	0619      	lsls	r1, r3, #24
 8013cb6:	4b6e      	ldr	r3, [pc, #440]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cb8:	785b      	ldrb	r3, [r3, #1]
 8013cba:	041b      	lsls	r3, r3, #16
 8013cbc:	4319      	orrs	r1, r3
 8013cbe:	4b6c      	ldr	r3, [pc, #432]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cc0:	789b      	ldrb	r3, [r3, #2]
 8013cc2:	021b      	lsls	r3, r3, #8
 8013cc4:	430b      	orrs	r3, r1
 8013cc6:	496a      	ldr	r1, [pc, #424]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cc8:	78c9      	ldrb	r1, [r1, #3]
 8013cca:	430b      	orrs	r3, r1
 8013ccc:	021b      	lsls	r3, r3, #8
 8013cce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013cd2:	431a      	orrs	r2, r3
 8013cd4:	4b66      	ldr	r3, [pc, #408]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cd6:	781b      	ldrb	r3, [r3, #0]
 8013cd8:	0619      	lsls	r1, r3, #24
 8013cda:	4b65      	ldr	r3, [pc, #404]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cdc:	785b      	ldrb	r3, [r3, #1]
 8013cde:	041b      	lsls	r3, r3, #16
 8013ce0:	4319      	orrs	r1, r3
 8013ce2:	4b63      	ldr	r3, [pc, #396]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013ce4:	789b      	ldrb	r3, [r3, #2]
 8013ce6:	021b      	lsls	r3, r3, #8
 8013ce8:	430b      	orrs	r3, r1
 8013cea:	4961      	ldr	r1, [pc, #388]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cec:	78c9      	ldrb	r1, [r1, #3]
 8013cee:	430b      	orrs	r3, r1
 8013cf0:	0a1b      	lsrs	r3, r3, #8
 8013cf2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013cf6:	431a      	orrs	r2, r3
 8013cf8:	4b5d      	ldr	r3, [pc, #372]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013cfa:	781b      	ldrb	r3, [r3, #0]
 8013cfc:	0619      	lsls	r1, r3, #24
 8013cfe:	4b5c      	ldr	r3, [pc, #368]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013d00:	785b      	ldrb	r3, [r3, #1]
 8013d02:	041b      	lsls	r3, r3, #16
 8013d04:	4319      	orrs	r1, r3
 8013d06:	4b5a      	ldr	r3, [pc, #360]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013d08:	789b      	ldrb	r3, [r3, #2]
 8013d0a:	021b      	lsls	r3, r3, #8
 8013d0c:	430b      	orrs	r3, r1
 8013d0e:	4958      	ldr	r1, [pc, #352]	; (8013e70 <MX_LWIP_Init+0x234>)
 8013d10:	78c9      	ldrb	r1, [r1, #3]
 8013d12:	430b      	orrs	r3, r1
 8013d14:	0e1b      	lsrs	r3, r3, #24
 8013d16:	4313      	orrs	r3, r2
 8013d18:	4a58      	ldr	r2, [pc, #352]	; (8013e7c <MX_LWIP_Init+0x240>)
 8013d1a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8013d1c:	4b55      	ldr	r3, [pc, #340]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d1e:	781b      	ldrb	r3, [r3, #0]
 8013d20:	061a      	lsls	r2, r3, #24
 8013d22:	4b54      	ldr	r3, [pc, #336]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d24:	785b      	ldrb	r3, [r3, #1]
 8013d26:	041b      	lsls	r3, r3, #16
 8013d28:	431a      	orrs	r2, r3
 8013d2a:	4b52      	ldr	r3, [pc, #328]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d2c:	789b      	ldrb	r3, [r3, #2]
 8013d2e:	021b      	lsls	r3, r3, #8
 8013d30:	4313      	orrs	r3, r2
 8013d32:	4a50      	ldr	r2, [pc, #320]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d34:	78d2      	ldrb	r2, [r2, #3]
 8013d36:	4313      	orrs	r3, r2
 8013d38:	061a      	lsls	r2, r3, #24
 8013d3a:	4b4e      	ldr	r3, [pc, #312]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d3c:	781b      	ldrb	r3, [r3, #0]
 8013d3e:	0619      	lsls	r1, r3, #24
 8013d40:	4b4c      	ldr	r3, [pc, #304]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d42:	785b      	ldrb	r3, [r3, #1]
 8013d44:	041b      	lsls	r3, r3, #16
 8013d46:	4319      	orrs	r1, r3
 8013d48:	4b4a      	ldr	r3, [pc, #296]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d4a:	789b      	ldrb	r3, [r3, #2]
 8013d4c:	021b      	lsls	r3, r3, #8
 8013d4e:	430b      	orrs	r3, r1
 8013d50:	4948      	ldr	r1, [pc, #288]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d52:	78c9      	ldrb	r1, [r1, #3]
 8013d54:	430b      	orrs	r3, r1
 8013d56:	021b      	lsls	r3, r3, #8
 8013d58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013d5c:	431a      	orrs	r2, r3
 8013d5e:	4b45      	ldr	r3, [pc, #276]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d60:	781b      	ldrb	r3, [r3, #0]
 8013d62:	0619      	lsls	r1, r3, #24
 8013d64:	4b43      	ldr	r3, [pc, #268]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d66:	785b      	ldrb	r3, [r3, #1]
 8013d68:	041b      	lsls	r3, r3, #16
 8013d6a:	4319      	orrs	r1, r3
 8013d6c:	4b41      	ldr	r3, [pc, #260]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d6e:	789b      	ldrb	r3, [r3, #2]
 8013d70:	021b      	lsls	r3, r3, #8
 8013d72:	430b      	orrs	r3, r1
 8013d74:	493f      	ldr	r1, [pc, #252]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d76:	78c9      	ldrb	r1, [r1, #3]
 8013d78:	430b      	orrs	r3, r1
 8013d7a:	0a1b      	lsrs	r3, r3, #8
 8013d7c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013d80:	431a      	orrs	r2, r3
 8013d82:	4b3c      	ldr	r3, [pc, #240]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d84:	781b      	ldrb	r3, [r3, #0]
 8013d86:	0619      	lsls	r1, r3, #24
 8013d88:	4b3a      	ldr	r3, [pc, #232]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d8a:	785b      	ldrb	r3, [r3, #1]
 8013d8c:	041b      	lsls	r3, r3, #16
 8013d8e:	4319      	orrs	r1, r3
 8013d90:	4b38      	ldr	r3, [pc, #224]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d92:	789b      	ldrb	r3, [r3, #2]
 8013d94:	021b      	lsls	r3, r3, #8
 8013d96:	430b      	orrs	r3, r1
 8013d98:	4936      	ldr	r1, [pc, #216]	; (8013e74 <MX_LWIP_Init+0x238>)
 8013d9a:	78c9      	ldrb	r1, [r1, #3]
 8013d9c:	430b      	orrs	r3, r1
 8013d9e:	0e1b      	lsrs	r3, r3, #24
 8013da0:	4313      	orrs	r3, r2
 8013da2:	4a37      	ldr	r2, [pc, #220]	; (8013e80 <MX_LWIP_Init+0x244>)
 8013da4:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8013da6:	4b34      	ldr	r3, [pc, #208]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013da8:	781b      	ldrb	r3, [r3, #0]
 8013daa:	061a      	lsls	r2, r3, #24
 8013dac:	4b32      	ldr	r3, [pc, #200]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dae:	785b      	ldrb	r3, [r3, #1]
 8013db0:	041b      	lsls	r3, r3, #16
 8013db2:	431a      	orrs	r2, r3
 8013db4:	4b30      	ldr	r3, [pc, #192]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013db6:	789b      	ldrb	r3, [r3, #2]
 8013db8:	021b      	lsls	r3, r3, #8
 8013dba:	4313      	orrs	r3, r2
 8013dbc:	4a2e      	ldr	r2, [pc, #184]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dbe:	78d2      	ldrb	r2, [r2, #3]
 8013dc0:	4313      	orrs	r3, r2
 8013dc2:	061a      	lsls	r2, r3, #24
 8013dc4:	4b2c      	ldr	r3, [pc, #176]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dc6:	781b      	ldrb	r3, [r3, #0]
 8013dc8:	0619      	lsls	r1, r3, #24
 8013dca:	4b2b      	ldr	r3, [pc, #172]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dcc:	785b      	ldrb	r3, [r3, #1]
 8013dce:	041b      	lsls	r3, r3, #16
 8013dd0:	4319      	orrs	r1, r3
 8013dd2:	4b29      	ldr	r3, [pc, #164]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dd4:	789b      	ldrb	r3, [r3, #2]
 8013dd6:	021b      	lsls	r3, r3, #8
 8013dd8:	430b      	orrs	r3, r1
 8013dda:	4927      	ldr	r1, [pc, #156]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013ddc:	78c9      	ldrb	r1, [r1, #3]
 8013dde:	430b      	orrs	r3, r1
 8013de0:	021b      	lsls	r3, r3, #8
 8013de2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8013de6:	431a      	orrs	r2, r3
 8013de8:	4b23      	ldr	r3, [pc, #140]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013dea:	781b      	ldrb	r3, [r3, #0]
 8013dec:	0619      	lsls	r1, r3, #24
 8013dee:	4b22      	ldr	r3, [pc, #136]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013df0:	785b      	ldrb	r3, [r3, #1]
 8013df2:	041b      	lsls	r3, r3, #16
 8013df4:	4319      	orrs	r1, r3
 8013df6:	4b20      	ldr	r3, [pc, #128]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013df8:	789b      	ldrb	r3, [r3, #2]
 8013dfa:	021b      	lsls	r3, r3, #8
 8013dfc:	430b      	orrs	r3, r1
 8013dfe:	491e      	ldr	r1, [pc, #120]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013e00:	78c9      	ldrb	r1, [r1, #3]
 8013e02:	430b      	orrs	r3, r1
 8013e04:	0a1b      	lsrs	r3, r3, #8
 8013e06:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8013e0a:	431a      	orrs	r2, r3
 8013e0c:	4b1a      	ldr	r3, [pc, #104]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013e0e:	781b      	ldrb	r3, [r3, #0]
 8013e10:	0619      	lsls	r1, r3, #24
 8013e12:	4b19      	ldr	r3, [pc, #100]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013e14:	785b      	ldrb	r3, [r3, #1]
 8013e16:	041b      	lsls	r3, r3, #16
 8013e18:	4319      	orrs	r1, r3
 8013e1a:	4b17      	ldr	r3, [pc, #92]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013e1c:	789b      	ldrb	r3, [r3, #2]
 8013e1e:	021b      	lsls	r3, r3, #8
 8013e20:	430b      	orrs	r3, r1
 8013e22:	4915      	ldr	r1, [pc, #84]	; (8013e78 <MX_LWIP_Init+0x23c>)
 8013e24:	78c9      	ldrb	r1, [r1, #3]
 8013e26:	430b      	orrs	r3, r1
 8013e28:	0e1b      	lsrs	r3, r3, #24
 8013e2a:	4313      	orrs	r3, r2
 8013e2c:	4a15      	ldr	r2, [pc, #84]	; (8013e84 <MX_LWIP_Init+0x248>)
 8013e2e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8013e30:	4b15      	ldr	r3, [pc, #84]	; (8013e88 <MX_LWIP_Init+0x24c>)
 8013e32:	9302      	str	r3, [sp, #8]
 8013e34:	4b15      	ldr	r3, [pc, #84]	; (8013e8c <MX_LWIP_Init+0x250>)
 8013e36:	9301      	str	r3, [sp, #4]
 8013e38:	2300      	movs	r3, #0
 8013e3a:	9300      	str	r3, [sp, #0]
 8013e3c:	4b11      	ldr	r3, [pc, #68]	; (8013e84 <MX_LWIP_Init+0x248>)
 8013e3e:	4a10      	ldr	r2, [pc, #64]	; (8013e80 <MX_LWIP_Init+0x244>)
 8013e40:	490e      	ldr	r1, [pc, #56]	; (8013e7c <MX_LWIP_Init+0x240>)
 8013e42:	4813      	ldr	r0, [pc, #76]	; (8013e90 <MX_LWIP_Init+0x254>)
 8013e44:	f7f7 fe70 	bl	800bb28 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8013e48:	4811      	ldr	r0, [pc, #68]	; (8013e90 <MX_LWIP_Init+0x254>)
 8013e4a:	f7f7 ff4d 	bl	800bce8 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8013e4e:	4b10      	ldr	r3, [pc, #64]	; (8013e90 <MX_LWIP_Init+0x254>)
 8013e50:	f893 302b 	ldrb.w	r3, [r3, #43]	; 0x2b
 8013e54:	f003 0304 	and.w	r3, r3, #4
 8013e58:	2b00      	cmp	r3, #0
 8013e5a:	d003      	beq.n	8013e64 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8013e5c:	480c      	ldr	r0, [pc, #48]	; (8013e90 <MX_LWIP_Init+0x254>)
 8013e5e:	f7f7 ff53 	bl	800bd08 <netif_set_up>
  }

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8013e62:	e002      	b.n	8013e6a <MX_LWIP_Init+0x22e>
    netif_set_down(&gnetif);
 8013e64:	480a      	ldr	r0, [pc, #40]	; (8013e90 <MX_LWIP_Init+0x254>)
 8013e66:	f7f7 ff93 	bl	800bd90 <netif_set_down>
}
 8013e6a:	bf00      	nop
 8013e6c:	46bd      	mov	sp, r7
 8013e6e:	bd80      	pop	{r7, pc}
 8013e70:	2000ab28 	.word	0x2000ab28
 8013e74:	2000ab24 	.word	0x2000ab24
 8013e78:	2000aaec 	.word	0x2000aaec
 8013e7c:	2000ab20 	.word	0x2000ab20
 8013e80:	2000ab2c 	.word	0x2000ab2c
 8013e84:	2000ab30 	.word	0x2000ab30
 8013e88:	08008e65 	.word	0x08008e65
 8013e8c:	080135c9 	.word	0x080135c9
 8013e90:	2000aaf0 	.word	0x2000aaf0

08013e94 <main>:
  * @brief  The application entry point.
  *
  * @retval None
  */
int main(void)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration----------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8013e98:	f7ed f882 	bl	8000fa0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8013e9c:	f000 f81a 	bl	8013ed4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8013ea0:	f7ff fd3c 	bl	801391c <MX_GPIO_Init>
  MX_ADC1_Init();
 8013ea4:	f7fe ff6e 	bl	8012d84 <MX_ADC1_Init>
  MX_SPI1_Init();
 8013ea8:	f001 f96a 	bl	8015180 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  init_peripherials();
 8013eac:	f000 ff40 	bl	8014d30 <init_peripherials>
  DWT_Init();
 8013eb0:	f001 fee6 	bl	8015c80 <DWT_Init>
  init_dac();
 8013eb4:	f7fe ffe2 	bl	8012e7c <init_dac>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, 1);
 8013eb8:	2201      	movs	r2, #1
 8013eba:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8013ebe:	4804      	ldr	r0, [pc, #16]	; (8013ed0 <main+0x3c>)
 8013ec0:	f7ee ff3e 	bl	8002d40 <HAL_GPIO_WritePin>
  //set_axis(&axis);

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8013ec4:	f7ff fbb6 	bl	8013634 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8013ec8:	f7f0 f966 	bl	8004198 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8013ecc:	e7fe      	b.n	8013ecc <main+0x38>
 8013ece:	bf00      	nop
 8013ed0:	40020400 	.word	0x40020400

08013ed4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8013ed4:	b580      	push	{r7, lr}
 8013ed6:	b094      	sub	sp, #80	; 0x50
 8013ed8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct;
  RCC_ClkInitTypeDef RCC_ClkInitStruct;

    /**Configure the main internal regulator output voltage 
    */
  __HAL_RCC_PWR_CLK_ENABLE();
 8013eda:	4a37      	ldr	r2, [pc, #220]	; (8013fb8 <SystemClock_Config+0xe4>)
 8013edc:	4b36      	ldr	r3, [pc, #216]	; (8013fb8 <SystemClock_Config+0xe4>)
 8013ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8013ee6:	4b34      	ldr	r3, [pc, #208]	; (8013fb8 <SystemClock_Config+0xe4>)
 8013ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8013eee:	607b      	str	r3, [r7, #4]
 8013ef0:	687b      	ldr	r3, [r7, #4]

  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8013ef2:	4a32      	ldr	r2, [pc, #200]	; (8013fbc <SystemClock_Config+0xe8>)
 8013ef4:	4b31      	ldr	r3, [pc, #196]	; (8013fbc <SystemClock_Config+0xe8>)
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8013efc:	6013      	str	r3, [r2, #0]
 8013efe:	4b2f      	ldr	r3, [pc, #188]	; (8013fbc <SystemClock_Config+0xe8>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8013f06:	603b      	str	r3, [r7, #0]
 8013f08:	683b      	ldr	r3, [r7, #0]

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8013f0a:	2302      	movs	r3, #2
 8013f0c:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8013f0e:	2301      	movs	r3, #1
 8013f10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = 16;
 8013f12:	2310      	movs	r3, #16
 8013f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8013f16:	2302      	movs	r3, #2
 8013f18:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8013f1a:	2300      	movs	r3, #0
 8013f1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8013f1e:	2308      	movs	r3, #8
 8013f20:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8013f22:	23d8      	movs	r3, #216	; 0xd8
 8013f24:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8013f26:	2302      	movs	r3, #2
 8013f28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8013f2a:	2304      	movs	r3, #4
 8013f2c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8013f2e:	f107 031c 	add.w	r3, r7, #28
 8013f32:	4618      	mov	r0, r3
 8013f34:	f7ee ff6e 	bl	8002e14 <HAL_RCC_OscConfig>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b00      	cmp	r3, #0
 8013f3c:	d003      	beq.n	8013f46 <SystemClock_Config+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 8013f3e:	21b2      	movs	r1, #178	; 0xb2
 8013f40:	481f      	ldr	r0, [pc, #124]	; (8013fc0 <SystemClock_Config+0xec>)
 8013f42:	f000 f853 	bl	8013fec <_Error_Handler>
  }

    /**Activate the Over-Drive mode 
    */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8013f46:	f7ee ff15 	bl	8002d74 <HAL_PWREx_EnableOverDrive>
 8013f4a:	4603      	mov	r3, r0
 8013f4c:	2b00      	cmp	r3, #0
 8013f4e:	d003      	beq.n	8013f58 <SystemClock_Config+0x84>
  {
    _Error_Handler(__FILE__, __LINE__);
 8013f50:	21b9      	movs	r1, #185	; 0xb9
 8013f52:	481b      	ldr	r0, [pc, #108]	; (8013fc0 <SystemClock_Config+0xec>)
 8013f54:	f000 f84a 	bl	8013fec <_Error_Handler>
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8013f58:	230f      	movs	r3, #15
 8013f5a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8013f5c:	2302      	movs	r3, #2
 8013f5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8013f60:	2300      	movs	r3, #0
 8013f62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8013f64:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8013f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8013f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8013f6e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8013f70:	f107 0308 	add.w	r3, r7, #8
 8013f74:	2107      	movs	r1, #7
 8013f76:	4618      	mov	r0, r3
 8013f78:	f7ef f9be 	bl	80032f8 <HAL_RCC_ClockConfig>
 8013f7c:	4603      	mov	r3, r0
 8013f7e:	2b00      	cmp	r3, #0
 8013f80:	d003      	beq.n	8013f8a <SystemClock_Config+0xb6>
  {
    _Error_Handler(__FILE__, __LINE__);
 8013f82:	21c7      	movs	r1, #199	; 0xc7
 8013f84:	480e      	ldr	r0, [pc, #56]	; (8013fc0 <SystemClock_Config+0xec>)
 8013f86:	f000 f831 	bl	8013fec <_Error_Handler>
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8013f8a:	f7ef fb75 	bl	8003678 <HAL_RCC_GetHCLKFreq>
 8013f8e:	4602      	mov	r2, r0
 8013f90:	4b0c      	ldr	r3, [pc, #48]	; (8013fc4 <SystemClock_Config+0xf0>)
 8013f92:	fba3 2302 	umull	r2, r3, r3, r2
 8013f96:	099b      	lsrs	r3, r3, #6
 8013f98:	4618      	mov	r0, r3
 8013f9a:	f7ed fcf6 	bl	800198a <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8013f9e:	2004      	movs	r0, #4
 8013fa0:	f7ed fd00 	bl	80019a4 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 8013fa4:	2200      	movs	r2, #0
 8013fa6:	210f      	movs	r1, #15
 8013fa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013fac:	f7ed fcc3 	bl	8001936 <HAL_NVIC_SetPriority>
}
 8013fb0:	bf00      	nop
 8013fb2:	3750      	adds	r7, #80	; 0x50
 8013fb4:	46bd      	mov	sp, r7
 8013fb6:	bd80      	pop	{r7, pc}
 8013fb8:	40023800 	.word	0x40023800
 8013fbc:	40007000 	.word	0x40007000
 8013fc0:	0801a498 	.word	0x0801a498
 8013fc4:	10624dd3 	.word	0x10624dd3

08013fc8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8013fc8:	b580      	push	{r7, lr}
 8013fca:	b082      	sub	sp, #8
 8013fcc:	af00      	add	r7, sp, #0
 8013fce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4a04      	ldr	r2, [pc, #16]	; (8013fe8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d101      	bne.n	8013fde <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8013fda:	f7ec ffef 	bl	8000fbc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8013fde:	bf00      	nop
 8013fe0:	3708      	adds	r7, #8
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
 8013fe6:	bf00      	nop
 8013fe8:	40010000 	.word	0x40010000

08013fec <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8013fec:	b480      	push	{r7}
 8013fee:	b083      	sub	sp, #12
 8013ff0:	af00      	add	r7, sp, #0
 8013ff2:	6078      	str	r0, [r7, #4]
 8013ff4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 8013ff6:	e7fe      	b.n	8013ff6 <_Error_Handler+0xa>

08013ff8 <run_modes>:

position_params_t position_params;
register_params_t register_params;
manual_params_t manual_params;

void run_modes(void const * argument) {
 8013ff8:	b580      	push	{r7, lr}
 8013ffa:	b082      	sub	sp, #8
 8013ffc:	af00      	add	r7, sp, #0
 8013ffe:	6078      	str	r0, [r7, #4]

	while (1) {
		switch (mode) {
 8014000:	4b25      	ldr	r3, [pc, #148]	; (8014098 <run_modes+0xa0>)
 8014002:	881b      	ldrh	r3, [r3, #0]
 8014004:	2b03      	cmp	r3, #3
 8014006:	d841      	bhi.n	801408c <run_modes+0x94>
 8014008:	a201      	add	r2, pc, #4	; (adr r2, 8014010 <run_modes+0x18>)
 801400a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801400e:	bf00      	nop
 8014010:	08014021 	.word	0x08014021
 8014014:	0801402d 	.word	0x0801402d
 8014018:	0801404d 	.word	0x0801404d
 801401c:	0801406d 	.word	0x0801406d
		case IDLE:
			send_state(mode);
 8014020:	4b1d      	ldr	r3, [pc, #116]	; (8014098 <run_modes+0xa0>)
 8014022:	881b      	ldrh	r3, [r3, #0]
 8014024:	4618      	mov	r0, r3
 8014026:	f001 fc75 	bl	8015914 <send_state>
			break;
 801402a:	e030      	b.n	801408e <run_modes+0x96>

		case POSITION_MODE:
			send_state(mode);
 801402c:	4b1a      	ldr	r3, [pc, #104]	; (8014098 <run_modes+0xa0>)
 801402e:	881b      	ldrh	r3, [r3, #0]
 8014030:	4618      	mov	r0, r3
 8014032:	f001 fc6f 	bl	8015914 <send_state>
			position_mode();
 8014036:	f000 f89f 	bl	8014178 <position_mode>
			mode = IDLE;
 801403a:	4b17      	ldr	r3, [pc, #92]	; (8014098 <run_modes+0xa0>)
 801403c:	2200      	movs	r2, #0
 801403e:	801a      	strh	r2, [r3, #0]
			send_state(mode);
 8014040:	4b15      	ldr	r3, [pc, #84]	; (8014098 <run_modes+0xa0>)
 8014042:	881b      	ldrh	r3, [r3, #0]
 8014044:	4618      	mov	r0, r3
 8014046:	f001 fc65 	bl	8015914 <send_state>
			break;
 801404a:	e020      	b.n	801408e <run_modes+0x96>

		case REGISTER_MODE:
			send_state(mode);
 801404c:	4b12      	ldr	r3, [pc, #72]	; (8014098 <run_modes+0xa0>)
 801404e:	881b      	ldrh	r3, [r3, #0]
 8014050:	4618      	mov	r0, r3
 8014052:	f001 fc5f 	bl	8015914 <send_state>
			register_mode();
 8014056:	f000 f97f 	bl	8014358 <register_mode>
			mode = IDLE;
 801405a:	4b0f      	ldr	r3, [pc, #60]	; (8014098 <run_modes+0xa0>)
 801405c:	2200      	movs	r2, #0
 801405e:	801a      	strh	r2, [r3, #0]
			send_state(mode);
 8014060:	4b0d      	ldr	r3, [pc, #52]	; (8014098 <run_modes+0xa0>)
 8014062:	881b      	ldrh	r3, [r3, #0]
 8014064:	4618      	mov	r0, r3
 8014066:	f001 fc55 	bl	8015914 <send_state>
			break;
 801406a:	e010      	b.n	801408e <run_modes+0x96>

		case MANUAL_MODE:
			send_state(mode);
 801406c:	4b0a      	ldr	r3, [pc, #40]	; (8014098 <run_modes+0xa0>)
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	4618      	mov	r0, r3
 8014072:	f001 fc4f 	bl	8015914 <send_state>
			manual_mode();
 8014076:	f000 fa8b 	bl	8014590 <manual_mode>
			mode = IDLE;
 801407a:	4b07      	ldr	r3, [pc, #28]	; (8014098 <run_modes+0xa0>)
 801407c:	2200      	movs	r2, #0
 801407e:	801a      	strh	r2, [r3, #0]
			send_state(mode);
 8014080:	4b05      	ldr	r3, [pc, #20]	; (8014098 <run_modes+0xa0>)
 8014082:	881b      	ldrh	r3, [r3, #0]
 8014084:	4618      	mov	r0, r3
 8014086:	f001 fc45 	bl	8015914 <send_state>
			break;
 801408a:	e000      	b.n	801408e <run_modes+0x96>

		default:
			break;
 801408c:	bf00      	nop
		}
		osDelay(100);
 801408e:	2064      	movs	r0, #100	; 0x64
 8014090:	f7f0 f8cc 	bl	800422c <osDelay>
		switch (mode) {
 8014094:	e7b4      	b.n	8014000 <run_modes+0x8>
 8014096:	bf00      	nop
 8014098:	2000415a 	.word	0x2000415a

0801409c <run_position_mode>:
	}

	osThreadTerminate(NULL);
}

uint16_t run_position_mode(char* buf) {
 801409c:	b480      	push	{r7}
 801409e:	b083      	sub	sp, #12
 80140a0:	af00      	add	r7, sp, #0
 80140a2:	6078      	str	r0, [r7, #4]
	if (mode == IDLE) {
 80140a4:	4b0a      	ldr	r3, [pc, #40]	; (80140d0 <run_position_mode+0x34>)
 80140a6:	881b      	ldrh	r3, [r3, #0]
 80140a8:	2b00      	cmp	r3, #0
 80140aa:	d10a      	bne.n	80140c2 <run_position_mode+0x26>
		memcpy(&position_params.packet, buf, sizeof(position_params.packet));
 80140ac:	4b09      	ldr	r3, [pc, #36]	; (80140d4 <run_position_mode+0x38>)
 80140ae:	687a      	ldr	r2, [r7, #4]
 80140b0:	6810      	ldr	r0, [r2, #0]
 80140b2:	6851      	ldr	r1, [r2, #4]
 80140b4:	6018      	str	r0, [r3, #0]
 80140b6:	6059      	str	r1, [r3, #4]
 80140b8:	8912      	ldrh	r2, [r2, #8]
 80140ba:	811a      	strh	r2, [r3, #8]
		mode = POSITION_MODE;
 80140bc:	4b04      	ldr	r3, [pc, #16]	; (80140d0 <run_position_mode+0x34>)
 80140be:	2201      	movs	r2, #1
 80140c0:	801a      	strh	r2, [r3, #0]
	}
	return sizeof(position_params.packet);
 80140c2:	230a      	movs	r3, #10
}
 80140c4:	4618      	mov	r0, r3
 80140c6:	370c      	adds	r7, #12
 80140c8:	46bd      	mov	sp, r7
 80140ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80140ce:	4770      	bx	lr
 80140d0:	2000415a 	.word	0x2000415a
 80140d4:	2000ab54 	.word	0x2000ab54

080140d8 <run_register_mode>:

uint16_t run_register_mode(char* buf) {
 80140d8:	b4b0      	push	{r4, r5, r7}
 80140da:	b083      	sub	sp, #12
 80140dc:	af00      	add	r7, sp, #0
 80140de:	6078      	str	r0, [r7, #4]
	if (mode == IDLE) {
 80140e0:	4b0e      	ldr	r3, [pc, #56]	; (801411c <run_register_mode+0x44>)
 80140e2:	881b      	ldrh	r3, [r3, #0]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d112      	bne.n	801410e <run_register_mode+0x36>
		memcpy(&register_params.packet, buf, sizeof(register_params.packet));
 80140e8:	4b0d      	ldr	r3, [pc, #52]	; (8014120 <run_register_mode+0x48>)
 80140ea:	687a      	ldr	r2, [r7, #4]
 80140ec:	6810      	ldr	r0, [r2, #0]
 80140ee:	6851      	ldr	r1, [r2, #4]
 80140f0:	6895      	ldr	r5, [r2, #8]
 80140f2:	68d4      	ldr	r4, [r2, #12]
 80140f4:	6018      	str	r0, [r3, #0]
 80140f6:	6059      	str	r1, [r3, #4]
 80140f8:	609d      	str	r5, [r3, #8]
 80140fa:	60dc      	str	r4, [r3, #12]
 80140fc:	6910      	ldr	r0, [r2, #16]
 80140fe:	6951      	ldr	r1, [r2, #20]
 8014100:	6118      	str	r0, [r3, #16]
 8014102:	6159      	str	r1, [r3, #20]
 8014104:	8b12      	ldrh	r2, [r2, #24]
 8014106:	831a      	strh	r2, [r3, #24]
		mode = REGISTER_MODE;
 8014108:	4b04      	ldr	r3, [pc, #16]	; (801411c <run_register_mode+0x44>)
 801410a:	2202      	movs	r2, #2
 801410c:	801a      	strh	r2, [r3, #0]
	}
	return sizeof(register_params.packet);
 801410e:	231a      	movs	r3, #26
}
 8014110:	4618      	mov	r0, r3
 8014112:	370c      	adds	r7, #12
 8014114:	46bd      	mov	sp, r7
 8014116:	bcb0      	pop	{r4, r5, r7}
 8014118:	4770      	bx	lr
 801411a:	bf00      	nop
 801411c:	2000415a 	.word	0x2000415a
 8014120:	2000ab38 	.word	0x2000ab38

08014124 <run_manual_mode>:

uint16_t run_manual_mode(char* buf) {
 8014124:	b480      	push	{r7}
 8014126:	b083      	sub	sp, #12
 8014128:	af00      	add	r7, sp, #0
 801412a:	6078      	str	r0, [r7, #4]
	if (mode == IDLE) {
 801412c:	4b09      	ldr	r3, [pc, #36]	; (8014154 <run_manual_mode+0x30>)
 801412e:	881b      	ldrh	r3, [r3, #0]
 8014130:	2b00      	cmp	r3, #0
 8014132:	d107      	bne.n	8014144 <run_manual_mode+0x20>
		memcpy(&manual_params.packet, buf, sizeof(manual_params.packet));
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	881b      	ldrh	r3, [r3, #0]
 8014138:	b29b      	uxth	r3, r3
 801413a:	4a07      	ldr	r2, [pc, #28]	; (8014158 <run_manual_mode+0x34>)
 801413c:	8013      	strh	r3, [r2, #0]
		mode = MANUAL_MODE;
 801413e:	4b05      	ldr	r3, [pc, #20]	; (8014154 <run_manual_mode+0x30>)
 8014140:	2203      	movs	r2, #3
 8014142:	801a      	strh	r2, [r3, #0]
	}
	return sizeof(manual_params.packet);
 8014144:	2302      	movs	r3, #2
}
 8014146:	4618      	mov	r0, r3
 8014148:	370c      	adds	r7, #12
 801414a:	46bd      	mov	sp, r7
 801414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014150:	4770      	bx	lr
 8014152:	bf00      	nop
 8014154:	2000415a 	.word	0x2000415a
 8014158:	2000ab34 	.word	0x2000ab34

0801415c <stop_mode>:

uint16_t stop_mode() {
 801415c:	b480      	push	{r7}
 801415e:	af00      	add	r7, sp, #0
	mode = IDLE;
 8014160:	4b04      	ldr	r3, [pc, #16]	; (8014174 <stop_mode+0x18>)
 8014162:	2200      	movs	r2, #0
 8014164:	801a      	strh	r2, [r3, #0]
	return 0;
 8014166:	2300      	movs	r3, #0
}
 8014168:	4618      	mov	r0, r3
 801416a:	46bd      	mov	sp, r7
 801416c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014170:	4770      	bx	lr
 8014172:	bf00      	nop
 8014174:	2000415a 	.word	0x2000415a

08014178 <position_mode>:

void position_mode() {
 8014178:	b590      	push	{r4, r7, lr}
 801417a:	ed2d 8b02 	vpush	{d8}
 801417e:	b087      	sub	sp, #28
 8014180:	af00      	add	r7, sp, #0

	// TODO: BRAKES; STOP; SPEED
	if (fabs(shortDistance(get_position(), position_params.bf.position)) <= positionWindow()) {
 8014182:	f000 fc5d 	bl	8014a40 <get_position>
 8014186:	eef0 7a40 	vmov.f32	s15, s0
 801418a:	4b6f      	ldr	r3, [pc, #444]	; (8014348 <position_mode+0x1d0>)
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	ee00 3a90 	vmov	s1, r3
 8014192:	eeb0 0a67 	vmov.f32	s0, s15
 8014196:	f001 fc60 	bl	8015a5a <shortDistance>
 801419a:	eef0 7a40 	vmov.f32	s15, s0
 801419e:	eeb0 8ae7 	vabs.f32	s16, s15
 80141a2:	f7ff fb6b 	bl	801387c <positionWindow>
 80141a6:	eef0 7a40 	vmov.f32	s15, s0
 80141aa:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80141ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141b2:	f240 80c3 	bls.w	801433c <position_mode+0x1c4>
		return;
	}

	direction_t dir;

	if (position_params.bf.direction == SHORT_DIR) {
 80141b6:	4b64      	ldr	r3, [pc, #400]	; (8014348 <position_mode+0x1d0>)
 80141b8:	891b      	ldrh	r3, [r3, #8]
 80141ba:	b29b      	uxth	r3, r3
 80141bc:	2b02      	cmp	r3, #2
 80141be:	d149      	bne.n	8014254 <position_mode+0xdc>

		if (axisType() == LINEAR) {
 80141c0:	f7ff fb18 	bl	80137f4 <axisType>
 80141c4:	4603      	mov	r3, r0
 80141c6:	2b00      	cmp	r3, #0
 80141c8:	d116      	bne.n	80141f8 <position_mode+0x80>
			dir = position_params.bf.position >= get_position() ? DIRECT_DIR : REVERSE_DIR;
 80141ca:	4b5f      	ldr	r3, [pc, #380]	; (8014348 <position_mode+0x1d0>)
 80141cc:	681c      	ldr	r4, [r3, #0]
 80141ce:	4623      	mov	r3, r4
 80141d0:	461c      	mov	r4, r3
 80141d2:	f000 fc35 	bl	8014a40 <get_position>
 80141d6:	eef0 7a40 	vmov.f32	s15, s0
 80141da:	ee07 4a10 	vmov	s14, r4
 80141de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80141e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80141e6:	bfac      	ite	ge
 80141e8:	2301      	movge	r3, #1
 80141ea:	2300      	movlt	r3, #0
 80141ec:	b2db      	uxtb	r3, r3
 80141ee:	f083 0301 	eor.w	r3, r3, #1
 80141f2:	b2db      	uxtb	r3, r3
 80141f4:	82fb      	strh	r3, [r7, #22]
 80141f6:	e033      	b.n	8014260 <position_mode+0xe8>
		} else if (axisType() == ANGULAR) {
 80141f8:	f7ff fafc 	bl	80137f4 <axisType>
 80141fc:	4603      	mov	r3, r0
 80141fe:	2b01      	cmp	r3, #1
 8014200:	d12e      	bne.n	8014260 <position_mode+0xe8>
			dir = frontDistance(get_position(), position_params.bf.position) <= behindDistance(get_position(), position_params.bf.position) ?
 8014202:	f000 fc1d 	bl	8014a40 <get_position>
 8014206:	eef0 7a40 	vmov.f32	s15, s0
 801420a:	4b4f      	ldr	r3, [pc, #316]	; (8014348 <position_mode+0x1d0>)
 801420c:	681b      	ldr	r3, [r3, #0]
 801420e:	ee00 3a90 	vmov	s1, r3
 8014212:	eeb0 0a67 	vmov.f32	s0, s15
 8014216:	f001 fbbc 	bl	8015992 <frontDistance>
 801421a:	eeb0 8a40 	vmov.f32	s16, s0
 801421e:	f000 fc0f 	bl	8014a40 <get_position>
 8014222:	eef0 7a40 	vmov.f32	s15, s0
 8014226:	4b48      	ldr	r3, [pc, #288]	; (8014348 <position_mode+0x1d0>)
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	ee00 3a90 	vmov	s1, r3
 801422e:	eeb0 0a67 	vmov.f32	s0, s15
 8014232:	f001 fbe0 	bl	80159f6 <behindDistance>
 8014236:	eef0 7a40 	vmov.f32	s15, s0
 801423a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801423e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014242:	bf94      	ite	ls
 8014244:	2301      	movls	r3, #1
 8014246:	2300      	movhi	r3, #0
 8014248:	b2db      	uxtb	r3, r3
					DIRECT_DIR : REVERSE_DIR;
 801424a:	f083 0301 	eor.w	r3, r3, #1
 801424e:	b2db      	uxtb	r3, r3
			dir = frontDistance(get_position(), position_params.bf.position) <= behindDistance(get_position(), position_params.bf.position) ?
 8014250:	82fb      	strh	r3, [r7, #22]
 8014252:	e005      	b.n	8014260 <position_mode+0xe8>
		}

	} else {

		dir = position_params.bf.direction;
 8014254:	4b3c      	ldr	r3, [pc, #240]	; (8014348 <position_mode+0x1d0>)
 8014256:	7a1a      	ldrb	r2, [r3, #8]
 8014258:	7a5b      	ldrb	r3, [r3, #9]
 801425a:	021b      	lsls	r3, r3, #8
 801425c:	4313      	orrs	r3, r2
 801425e:	82fb      	strh	r3, [r7, #22]

	}

	float speed = dir == DIRECT_DIR ? position_params.bf.speed : -position_params.bf.speed;
 8014260:	8afb      	ldrh	r3, [r7, #22]
 8014262:	2b00      	cmp	r3, #0
 8014264:	d102      	bne.n	801426c <position_mode+0xf4>
 8014266:	4b38      	ldr	r3, [pc, #224]	; (8014348 <position_mode+0x1d0>)
 8014268:	685b      	ldr	r3, [r3, #4]
 801426a:	e003      	b.n	8014274 <position_mode+0xfc>
 801426c:	4b36      	ldr	r3, [pc, #216]	; (8014348 <position_mode+0x1d0>)
 801426e:	685b      	ldr	r3, [r3, #4]
 8014270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8014274:	613b      	str	r3, [r7, #16]

	speed_params_t speed_params = { HAL_GetTick(), get_speed(), speed };
 8014276:	f7ec feb5 	bl	8000fe4 <HAL_GetTick>
 801427a:	4603      	mov	r3, r0
 801427c:	607b      	str	r3, [r7, #4]
 801427e:	f000 fbed 	bl	8014a5c <get_speed>
 8014282:	eef0 7a40 	vmov.f32	s15, s0
 8014286:	edc7 7a02 	vstr	s15, [r7, #8]
 801428a:	693b      	ldr	r3, [r7, #16]
 801428c:	60fb      	str	r3, [r7, #12]


	set_speed_params(speed_params);
 801428e:	1d3b      	adds	r3, r7, #4
 8014290:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014294:	f000 fc38 	bl	8014b08 <set_speed_params>

	while (dist_to_speed_cond(dir, position_params.bf.position, 0.0) == 0 && mode != IDLE) {
 8014298:	e002      	b.n	80142a0 <position_mode+0x128>

		//change_speed();
		osDelay(10);
 801429a:	200a      	movs	r0, #10
 801429c:	f7ef ffc6 	bl	800422c <osDelay>
	while (dist_to_speed_cond(dir, position_params.bf.position, 0.0) == 0 && mode != IDLE) {
 80142a0:	4b29      	ldr	r3, [pc, #164]	; (8014348 <position_mode+0x1d0>)
 80142a2:	681b      	ldr	r3, [r3, #0]
 80142a4:	8afa      	ldrh	r2, [r7, #22]
 80142a6:	eddf 0a29 	vldr	s1, [pc, #164]	; 801434c <position_mode+0x1d4>
 80142aa:	ee00 3a10 	vmov	s0, r3
 80142ae:	4610      	mov	r0, r2
 80142b0:	f000 fa04 	bl	80146bc <dist_to_speed_cond>
 80142b4:	4603      	mov	r3, r0
 80142b6:	2b00      	cmp	r3, #0
 80142b8:	d103      	bne.n	80142c2 <position_mode+0x14a>
 80142ba:	4b25      	ldr	r3, [pc, #148]	; (8014350 <position_mode+0x1d8>)
 80142bc:	881b      	ldrh	r3, [r3, #0]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d1eb      	bne.n	801429a <position_mode+0x122>

	}

	stop_speed();
 80142c2:	f000 fc45 	bl	8014b50 <stop_speed>

	speed_params.startTime = HAL_GetTick();
 80142c6:	f7ec fe8d 	bl	8000fe4 <HAL_GetTick>
 80142ca:	4603      	mov	r3, r0
 80142cc:	607b      	str	r3, [r7, #4]
	speed_params.startSpeed = get_speed();
 80142ce:	f000 fbc5 	bl	8014a5c <get_speed>
 80142d2:	eef0 7a40 	vmov.f32	s15, s0
 80142d6:	edc7 7a02 	vstr	s15, [r7, #8]
	speed_params.targetSpeed = 0.0;
 80142da:	f04f 0300 	mov.w	r3, #0
 80142de:	60fb      	str	r3, [r7, #12]

	set_speed_params(speed_params);
 80142e0:	1d3b      	adds	r3, r7, #4
 80142e2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80142e6:	f000 fc0f 	bl	8014b08 <set_speed_params>

	while (fabs(shortDistance(get_position(), position_params.bf.position)) >= positionWindow() && get_speed_state() != SPEED_STOP) {
 80142ea:	e002      	b.n	80142f2 <position_mode+0x17a>

		//change_speed();
		osDelay(10);
 80142ec:	200a      	movs	r0, #10
 80142ee:	f7ef ff9d 	bl	800422c <osDelay>
	while (fabs(shortDistance(get_position(), position_params.bf.position)) >= positionWindow() && get_speed_state() != SPEED_STOP) {
 80142f2:	f000 fba5 	bl	8014a40 <get_position>
 80142f6:	eef0 7a40 	vmov.f32	s15, s0
 80142fa:	4b13      	ldr	r3, [pc, #76]	; (8014348 <position_mode+0x1d0>)
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	ee00 3a90 	vmov	s1, r3
 8014302:	eeb0 0a67 	vmov.f32	s0, s15
 8014306:	f001 fba8 	bl	8015a5a <shortDistance>
 801430a:	eef0 7a40 	vmov.f32	s15, s0
 801430e:	eeb0 8ae7 	vabs.f32	s16, s15
 8014312:	f7ff fab3 	bl	801387c <positionWindow>
 8014316:	eef0 7a40 	vmov.f32	s15, s0
 801431a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801431e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014322:	db04      	blt.n	801432e <position_mode+0x1b6>
 8014324:	f000 fc20 	bl	8014b68 <get_speed_state>
 8014328:	4603      	mov	r3, r0
 801432a:	2b00      	cmp	r3, #0
 801432c:	d1de      	bne.n	80142ec <position_mode+0x174>

	}
	stop_speed();
 801432e:	f000 fc0f 	bl	8014b50 <stop_speed>

	set_speed(0.0);
 8014332:	ed9f 0a06 	vldr	s0, [pc, #24]	; 801434c <position_mode+0x1d4>
 8014336:	f000 fb9f 	bl	8014a78 <set_speed>
 801433a:	e000      	b.n	801433e <position_mode+0x1c6>
		return;
 801433c:	bf00      	nop
	// TODO: BRAKES;

}
 801433e:	371c      	adds	r7, #28
 8014340:	46bd      	mov	sp, r7
 8014342:	ecbd 8b02 	vpop	{d8}
 8014346:	bd90      	pop	{r4, r7, pc}
 8014348:	2000ab54 	.word	0x2000ab54
 801434c:	00000000 	.word	0x00000000
 8014350:	2000415a 	.word	0x2000415a
 8014354:	00000000 	.word	0x00000000

08014358 <register_mode>:

void register_mode() {
 8014358:	b580      	push	{r7, lr}
 801435a:	b08a      	sub	sp, #40	; 0x28
 801435c:	af00      	add	r7, sp, #0

	// TODO: BRAKES; STOP;
	float pos_speed = register_params.bf.direction == DIRECT_DIR ? register_params.bf.pos_speed : -register_params.bf.pos_speed;
 801435e:	4b88      	ldr	r3, [pc, #544]	; (8014580 <register_mode+0x228>)
 8014360:	8a9b      	ldrh	r3, [r3, #20]
 8014362:	b29b      	uxth	r3, r3
 8014364:	2b00      	cmp	r3, #0
 8014366:	d102      	bne.n	801436e <register_mode+0x16>
 8014368:	4b85      	ldr	r3, [pc, #532]	; (8014580 <register_mode+0x228>)
 801436a:	68db      	ldr	r3, [r3, #12]
 801436c:	e003      	b.n	8014376 <register_mode+0x1e>
 801436e:	4b84      	ldr	r3, [pc, #528]	; (8014580 <register_mode+0x228>)
 8014370:	68db      	ldr	r3, [r3, #12]
 8014372:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8014376:	61fb      	str	r3, [r7, #28]
	float reg_speed = register_params.bf.direction == DIRECT_DIR ? register_params.bf.reg_speed : -register_params.bf.reg_speed;
 8014378:	4b81      	ldr	r3, [pc, #516]	; (8014580 <register_mode+0x228>)
 801437a:	8a9b      	ldrh	r3, [r3, #20]
 801437c:	b29b      	uxth	r3, r3
 801437e:	2b00      	cmp	r3, #0
 8014380:	d102      	bne.n	8014388 <register_mode+0x30>
 8014382:	4b7f      	ldr	r3, [pc, #508]	; (8014580 <register_mode+0x228>)
 8014384:	691b      	ldr	r3, [r3, #16]
 8014386:	e003      	b.n	8014390 <register_mode+0x38>
 8014388:	4b7d      	ldr	r3, [pc, #500]	; (8014580 <register_mode+0x228>)
 801438a:	691b      	ldr	r3, [r3, #16]
 801438c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8014390:	61bb      	str	r3, [r7, #24]
	direction_t dir = register_params.bf.direction;
 8014392:	4b7b      	ldr	r3, [pc, #492]	; (8014580 <register_mode+0x228>)
 8014394:	7d1a      	ldrb	r2, [r3, #20]
 8014396:	7d5b      	ldrb	r3, [r3, #21]
 8014398:	021b      	lsls	r3, r3, #8
 801439a:	4313      	orrs	r3, r2
 801439c:	82fb      	strh	r3, [r7, #22]
	float from = correctPosition(dir == DIRECT_DIR ? register_params.bf.from - 1 : register_params.bf.from + 1);
 801439e:	8afb      	ldrh	r3, [r7, #22]
 80143a0:	2b00      	cmp	r3, #0
 80143a2:	d108      	bne.n	80143b6 <register_mode+0x5e>
 80143a4:	4b76      	ldr	r3, [pc, #472]	; (8014580 <register_mode+0x228>)
 80143a6:	681b      	ldr	r3, [r3, #0]
 80143a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143ac:	ee07 3a10 	vmov	s14, r3
 80143b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80143b4:	e007      	b.n	80143c6 <register_mode+0x6e>
 80143b6:	4b72      	ldr	r3, [pc, #456]	; (8014580 <register_mode+0x228>)
 80143b8:	681b      	ldr	r3, [r3, #0]
 80143ba:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143be:	ee07 3a10 	vmov	s14, r3
 80143c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143c6:	eeb0 0a67 	vmov.f32	s0, s15
 80143ca:	f001 fc15 	bl	8015bf8 <correctPosition>
 80143ce:	ed87 0a04 	vstr	s0, [r7, #16]

	if (dist_to_speed_cond(dir, from + register_params.bf.direction == DIRECT_DIR ? -1 : 1, reg_speed)) {
 80143d2:	4b6b      	ldr	r3, [pc, #428]	; (8014580 <register_mode+0x228>)
 80143d4:	8a9b      	ldrh	r3, [r3, #20]
 80143d6:	b29b      	uxth	r3, r3
 80143d8:	ee07 3a90 	vmov	s15, r3
 80143dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80143e0:	edd7 7a04 	vldr	s15, [r7, #16]
 80143e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80143e8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80143ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80143f0:	d102      	bne.n	80143f8 <register_mode+0xa0>
 80143f2:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 80143f6:	e001      	b.n	80143fc <register_mode+0xa4>
 80143f8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80143fc:	8afb      	ldrh	r3, [r7, #22]
 80143fe:	edd7 0a06 	vldr	s1, [r7, #24]
 8014402:	eeb0 0a67 	vmov.f32	s0, s15
 8014406:	4618      	mov	r0, r3
 8014408:	f000 f958 	bl	80146bc <dist_to_speed_cond>
 801440c:	4603      	mov	r3, r0
 801440e:	2b00      	cmp	r3, #0
 8014410:	f040 80ab 	bne.w	801456a <register_mode+0x212>
		return;
	}

	speed_params_t speed_params = { HAL_GetTick(), get_speed(), pos_speed };
 8014414:	f7ec fde6 	bl	8000fe4 <HAL_GetTick>
 8014418:	4603      	mov	r3, r0
 801441a:	607b      	str	r3, [r7, #4]
 801441c:	f000 fb1e 	bl	8014a5c <get_speed>
 8014420:	eef0 7a40 	vmov.f32	s15, s0
 8014424:	edc7 7a02 	vstr	s15, [r7, #8]
 8014428:	69fb      	ldr	r3, [r7, #28]
 801442a:	60fb      	str	r3, [r7, #12]

	enable_axis(axisSelected());
 801442c:	f7ff fa5e 	bl	80138ec <axisSelected>
 8014430:	4603      	mov	r3, r0
 8014432:	4618      	mov	r0, r3
 8014434:	f000 fce8 	bl	8014e08 <enable_axis>
	set_speed_params(speed_params);
 8014438:	1d3b      	adds	r3, r7, #4
 801443a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801443e:	f000 fb63 	bl	8014b08 <set_speed_params>

	while (dist_to_speed_cond(dir, from, reg_speed) == 0 && mode != IDLE) {
 8014442:	e002      	b.n	801444a <register_mode+0xf2>

		//change_speed();
		osDelay(1);
 8014444:	2001      	movs	r0, #1
 8014446:	f7ef fef1 	bl	800422c <osDelay>
	while (dist_to_speed_cond(dir, from, reg_speed) == 0 && mode != IDLE) {
 801444a:	8afb      	ldrh	r3, [r7, #22]
 801444c:	edd7 0a06 	vldr	s1, [r7, #24]
 8014450:	ed97 0a04 	vldr	s0, [r7, #16]
 8014454:	4618      	mov	r0, r3
 8014456:	f000 f931 	bl	80146bc <dist_to_speed_cond>
 801445a:	4603      	mov	r3, r0
 801445c:	2b00      	cmp	r3, #0
 801445e:	d103      	bne.n	8014468 <register_mode+0x110>
 8014460:	4b48      	ldr	r3, [pc, #288]	; (8014584 <register_mode+0x22c>)
 8014462:	881b      	ldrh	r3, [r3, #0]
 8014464:	2b00      	cmp	r3, #0
 8014466:	d1ed      	bne.n	8014444 <register_mode+0xec>
	}

	stop_speed();
 8014468:	f000 fb72 	bl	8014b50 <stop_speed>

	speed_params.startTime = HAL_GetTick();
 801446c:	f7ec fdba 	bl	8000fe4 <HAL_GetTick>
 8014470:	4603      	mov	r3, r0
 8014472:	607b      	str	r3, [r7, #4]
	speed_params.startSpeed = get_speed();
 8014474:	f000 faf2 	bl	8014a5c <get_speed>
 8014478:	eef0 7a40 	vmov.f32	s15, s0
 801447c:	edc7 7a02 	vstr	s15, [r7, #8]
	speed_params.targetSpeed = reg_speed;
 8014480:	69bb      	ldr	r3, [r7, #24]
 8014482:	60fb      	str	r3, [r7, #12]

	set_speed_params(speed_params);
 8014484:	1d3b      	adds	r3, r7, #4
 8014486:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801448a:	f000 fb3d 	bl	8014b08 <set_speed_params>

	float nextPos = register_params.bf.from;
 801448e:	4b3c      	ldr	r3, [pc, #240]	; (8014580 <register_mode+0x228>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	627b      	str	r3, [r7, #36]	; 0x24

	uint16_t checkpoints = 0;
 8014494:	2300      	movs	r3, #0
 8014496:	847b      	strh	r3, [r7, #34]	; 0x22

	while (1 && mode != IDLE) {
 8014498:	e030      	b.n	80144fc <register_mode+0x1a4>

		if (arrived_to_position(dir, nextPos)) {
 801449a:	8afb      	ldrh	r3, [r7, #22]
 801449c:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80144a0:	4618      	mov	r0, r3
 80144a2:	f000 f966 	bl	8014772 <arrived_to_position>
 80144a6:	4603      	mov	r3, r0
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d024      	beq.n	80144f6 <register_mode+0x19e>

			checkpoints++;
 80144ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80144ae:	3301      	adds	r3, #1
 80144b0:	847b      	strh	r3, [r7, #34]	; 0x22
			fire_TTL();
 80144b2:	f000 fe3b 	bl	801512c <fire_TTL>
			if (checkpoints >= register_params.bf.checkpoints) {
 80144b6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80144b8:	4b31      	ldr	r3, [pc, #196]	; (8014580 <register_mode+0x228>)
 80144ba:	f8d3 3016 	ldr.w	r3, [r3, #22]
 80144be:	429a      	cmp	r2, r3
 80144c0:	d221      	bcs.n	8014506 <register_mode+0x1ae>
				break;
			}

			nextPos = correctPosition(dir == DIRECT_DIR ? nextPos + register_params.bf.increment : nextPos - register_params.bf.increment);
 80144c2:	8afb      	ldrh	r3, [r7, #22]
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	d108      	bne.n	80144da <register_mode+0x182>
 80144c8:	4b2d      	ldr	r3, [pc, #180]	; (8014580 <register_mode+0x228>)
 80144ca:	689b      	ldr	r3, [r3, #8]
 80144cc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80144d0:	ee07 3a10 	vmov	s14, r3
 80144d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80144d8:	e007      	b.n	80144ea <register_mode+0x192>
 80144da:	4b29      	ldr	r3, [pc, #164]	; (8014580 <register_mode+0x228>)
 80144dc:	689b      	ldr	r3, [r3, #8]
 80144de:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80144e2:	ee07 3a10 	vmov	s14, r3
 80144e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80144ea:	eeb0 0a67 	vmov.f32	s0, s15
 80144ee:	f001 fb83 	bl	8015bf8 <correctPosition>
 80144f2:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
		}
		osDelay(1);
 80144f6:	2001      	movs	r0, #1
 80144f8:	f7ef fe98 	bl	800422c <osDelay>
	while (1 && mode != IDLE) {
 80144fc:	4b21      	ldr	r3, [pc, #132]	; (8014584 <register_mode+0x22c>)
 80144fe:	881b      	ldrh	r3, [r3, #0]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1ca      	bne.n	801449a <register_mode+0x142>
 8014504:	e000      	b.n	8014508 <register_mode+0x1b0>
				break;
 8014506:	bf00      	nop
	}

	stop_speed();
 8014508:	f000 fb22 	bl	8014b50 <stop_speed>

	speed_params.startTime = HAL_GetTick();
 801450c:	f7ec fd6a 	bl	8000fe4 <HAL_GetTick>
 8014510:	4603      	mov	r3, r0
 8014512:	607b      	str	r3, [r7, #4]
	speed_params.startSpeed = get_speed();
 8014514:	f000 faa2 	bl	8014a5c <get_speed>
 8014518:	eef0 7a40 	vmov.f32	s15, s0
 801451c:	edc7 7a02 	vstr	s15, [r7, #8]
	speed_params.targetSpeed = 0.0;
 8014520:	f04f 0300 	mov.w	r3, #0
 8014524:	60fb      	str	r3, [r7, #12]

	set_speed_params(speed_params);
 8014526:	1d3b      	adds	r3, r7, #4
 8014528:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801452c:	f000 faec 	bl	8014b08 <set_speed_params>

	while (fabs(get_speed()) >= SPEED_WINDOW) {
 8014530:	bf00      	nop
 8014532:	f000 fa93 	bl	8014a5c <get_speed>
 8014536:	eef0 7a40 	vmov.f32	s15, s0
 801453a:	eef0 7ae7 	vabs.f32	s15, s15
 801453e:	ee17 0a90 	vmov	r0, s15
 8014542:	f7ec f831 	bl	80005a8 <__aeabi_f2d>
 8014546:	a30c      	add	r3, pc, #48	; (adr r3, 8014578 <register_mode+0x220>)
 8014548:	e9d3 2300 	ldrd	r2, r3, [r3]
 801454c:	f7ec fb06 	bl	8000b5c <__aeabi_dcmpge>
 8014550:	4603      	mov	r3, r0
 8014552:	2b00      	cmp	r3, #0
 8014554:	d1ed      	bne.n	8014532 <register_mode+0x1da>

		//change_speed();
		//osDelay(1);

	}
	stop_speed();
 8014556:	f000 fafb 	bl	8014b50 <stop_speed>

	enable_axis(0);
 801455a:	2000      	movs	r0, #0
 801455c:	f000 fc54 	bl	8014e08 <enable_axis>
	set_speed(0.0);
 8014560:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8014588 <register_mode+0x230>
 8014564:	f000 fa88 	bl	8014a78 <set_speed>
 8014568:	e000      	b.n	801456c <register_mode+0x214>
		return;
 801456a:	bf00      	nop
	// TODO: BRAKES;
}
 801456c:	3728      	adds	r7, #40	; 0x28
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	f3af 8000 	nop.w
 8014578:	47ae147b 	.word	0x47ae147b
 801457c:	3f847ae1 	.word	0x3f847ae1
 8014580:	2000ab38 	.word	0x2000ab38
 8014584:	2000415a 	.word	0x2000415a
	...

08014590 <manual_mode>:

void manual_mode() {
 8014590:	b5b0      	push	{r4, r5, r7, lr}
 8014592:	b082      	sub	sp, #8
 8014594:	af00      	add	r7, sp, #0
	float speed = 0.0;
 8014596:	f04f 0300 	mov.w	r3, #0
 801459a:	607b      	str	r3, [r7, #4]
	float pot;
	enable_axis(axisSelected());
 801459c:	f7ff f9a6 	bl	80138ec <axisSelected>
 80145a0:	4603      	mov	r3, r0
 80145a2:	4618      	mov	r0, r3
 80145a4:	f000 fc30 	bl	8014e08 <enable_axis>
	release_brake(axisSelected());
 80145a8:	f7ff f9a0 	bl	80138ec <axisSelected>
 80145ac:	4603      	mov	r3, r0
 80145ae:	4618      	mov	r0, r3
 80145b0:	f000 fc62 	bl	8014e78 <release_brake>
	while (mode != IDLE) {
 80145b4:	e062      	b.n	801467c <manual_mode+0xec>
		pot = pot_value();
 80145b6:	f000 fbdf 	bl	8014d78 <pot_value>
 80145ba:	ed87 0a00 	vstr	s0, [r7]
		switch (manual_params.bf.type) {
 80145be:	4b3c      	ldr	r3, [pc, #240]	; (80146b0 <manual_mode+0x120>)
 80145c0:	881b      	ldrh	r3, [r3, #0]
 80145c2:	b29b      	uxth	r3, r3
 80145c4:	2b01      	cmp	r3, #1
 80145c6:	d015      	beq.n	80145f4 <manual_mode+0x64>
 80145c8:	2b02      	cmp	r3, #2
 80145ca:	d016      	beq.n	80145fa <manual_mode+0x6a>
 80145cc:	2b00      	cmp	r3, #0
 80145ce:	d000      	beq.n	80145d2 <manual_mode+0x42>
		case EXP_TYPE:
			speed = pot > 0 ? pow(EXP_SPEED, pot) : -pow(EXP_SPEED, -pot);
			speed -= 1;
			break;
		default:
			break;
 80145d0:	e04d      	b.n	801466e <manual_mode+0xde>
			speed = pot * SLOW_SPEED;
 80145d2:	6838      	ldr	r0, [r7, #0]
 80145d4:	f7eb ffe8 	bl	80005a8 <__aeabi_f2d>
 80145d8:	a331      	add	r3, pc, #196	; (adr r3, 80146a0 <manual_mode+0x110>)
 80145da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80145de:	f7ec f837 	bl	8000650 <__aeabi_dmul>
 80145e2:	4602      	mov	r2, r0
 80145e4:	460b      	mov	r3, r1
 80145e6:	4610      	mov	r0, r2
 80145e8:	4619      	mov	r1, r3
 80145ea:	f7ec fb01 	bl	8000bf0 <__aeabi_d2f>
 80145ee:	4603      	mov	r3, r0
 80145f0:	607b      	str	r3, [r7, #4]
			break;
 80145f2:	e03c      	b.n	801466e <manual_mode+0xde>
			speed = pot * FAST_SPEED;
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	607b      	str	r3, [r7, #4]
			break;
 80145f8:	e039      	b.n	801466e <manual_mode+0xde>
			speed = pot > 0 ? pow(EXP_SPEED, pot) : -pow(EXP_SPEED, -pot);
 80145fa:	edd7 7a00 	vldr	s15, [r7]
 80145fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8014602:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014606:	dd0d      	ble.n	8014624 <manual_mode+0x94>
 8014608:	6838      	ldr	r0, [r7, #0]
 801460a:	f7eb ffcd 	bl	80005a8 <__aeabi_f2d>
 801460e:	4603      	mov	r3, r0
 8014610:	460c      	mov	r4, r1
 8014612:	ec44 3b11 	vmov	d1, r3, r4
 8014616:	ed9f 0b24 	vldr	d0, [pc, #144]	; 80146a8 <manual_mode+0x118>
 801461a:	f002 fad3 	bl	8016bc4 <pow>
 801461e:	ec55 4b10 	vmov	r4, r5, d0
 8014622:	e015      	b.n	8014650 <manual_mode+0xc0>
 8014624:	edd7 7a00 	vldr	s15, [r7]
 8014628:	eef1 7a67 	vneg.f32	s15, s15
 801462c:	ee17 3a90 	vmov	r3, s15
 8014630:	4618      	mov	r0, r3
 8014632:	f7eb ffb9 	bl	80005a8 <__aeabi_f2d>
 8014636:	4602      	mov	r2, r0
 8014638:	460b      	mov	r3, r1
 801463a:	ec43 2b11 	vmov	d1, r2, r3
 801463e:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 80146a8 <manual_mode+0x118>
 8014642:	f002 fabf 	bl	8016bc4 <pow>
 8014646:	ec53 2b10 	vmov	r2, r3, d0
 801464a:	4614      	mov	r4, r2
 801464c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8014650:	4620      	mov	r0, r4
 8014652:	4629      	mov	r1, r5
 8014654:	f7ec facc 	bl	8000bf0 <__aeabi_d2f>
 8014658:	4603      	mov	r3, r0
 801465a:	607b      	str	r3, [r7, #4]
			speed -= 1;
 801465c:	edd7 7a01 	vldr	s15, [r7, #4]
 8014660:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014668:	edc7 7a01 	vstr	s15, [r7, #4]
			break;
 801466c:	bf00      	nop
		}

		set_speed(speed);
 801466e:	ed97 0a01 	vldr	s0, [r7, #4]
 8014672:	f000 fa01 	bl	8014a78 <set_speed>
		osDelay(1);
 8014676:	2001      	movs	r0, #1
 8014678:	f7ef fdd8 	bl	800422c <osDelay>
	while (mode != IDLE) {
 801467c:	4b0d      	ldr	r3, [pc, #52]	; (80146b4 <manual_mode+0x124>)
 801467e:	881b      	ldrh	r3, [r3, #0]
 8014680:	2b00      	cmp	r3, #0
 8014682:	d198      	bne.n	80145b6 <manual_mode+0x26>
	}

	enable_axis(0);
 8014684:	2000      	movs	r0, #0
 8014686:	f000 fbbf 	bl	8014e08 <enable_axis>
	set_speed(0.0);
 801468a:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 80146b8 <manual_mode+0x128>
 801468e:	f000 f9f3 	bl	8014a78 <set_speed>

	push_brakes();
 8014692:	f000 fc13 	bl	8014ebc <push_brakes>
}
 8014696:	bf00      	nop
 8014698:	3708      	adds	r7, #8
 801469a:	46bd      	mov	sp, r7
 801469c:	bdb0      	pop	{r4, r5, r7, pc}
 801469e:	bf00      	nop
 80146a0:	9999999a 	.word	0x9999999a
 80146a4:	3fb99999 	.word	0x3fb99999
 80146a8:	00000000 	.word	0x00000000
 80146ac:	40000000 	.word	0x40000000
 80146b0:	2000ab34 	.word	0x2000ab34
 80146b4:	2000415a 	.word	0x2000415a
 80146b8:	00000000 	.word	0x00000000

080146bc <dist_to_speed_cond>:

uint8_t dist_to_speed_cond(direction_t dir, float position, float end_speed) {
 80146bc:	b580      	push	{r7, lr}
 80146be:	b088      	sub	sp, #32
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	4603      	mov	r3, r0
 80146c4:	ed87 0a02 	vstr	s0, [r7, #8]
 80146c8:	edc7 0a01 	vstr	s1, [r7, #4]
 80146cc:	81fb      	strh	r3, [r7, #14]
	float dist_to_pos = dir == DIRECT_DIR ? frontDistance(get_position(), position) : behindDistance(get_position(), position);
 80146ce:	89fb      	ldrh	r3, [r7, #14]
 80146d0:	2b00      	cmp	r3, #0
 80146d2:	d10c      	bne.n	80146ee <dist_to_speed_cond+0x32>
 80146d4:	f000 f9b4 	bl	8014a40 <get_position>
 80146d8:	eef0 7a40 	vmov.f32	s15, s0
 80146dc:	edd7 0a02 	vldr	s1, [r7, #8]
 80146e0:	eeb0 0a67 	vmov.f32	s0, s15
 80146e4:	f001 f955 	bl	8015992 <frontDistance>
 80146e8:	eef0 7a40 	vmov.f32	s15, s0
 80146ec:	e00b      	b.n	8014706 <dist_to_speed_cond+0x4a>
 80146ee:	f000 f9a7 	bl	8014a40 <get_position>
 80146f2:	eef0 7a40 	vmov.f32	s15, s0
 80146f6:	edd7 0a02 	vldr	s1, [r7, #8]
 80146fa:	eeb0 0a67 	vmov.f32	s0, s15
 80146fe:	f001 f97a 	bl	80159f6 <behindDistance>
 8014702:	eef0 7a40 	vmov.f32	s15, s0
 8014706:	edc7 7a07 	vstr	s15, [r7, #28]
	float speed = get_speed();
 801470a:	f000 f9a7 	bl	8014a5c <get_speed>
 801470e:	ed87 0a06 	vstr	s0, [r7, #24]
	float dist_to_speed = fabs(end_speed) <= fabs(speed) ? decelerationDistance(speed, end_speed) : accelerationDistance(speed, end_speed);
 8014712:	edd7 7a01 	vldr	s15, [r7, #4]
 8014716:	eeb0 7ae7 	vabs.f32	s14, s15
 801471a:	edd7 7a06 	vldr	s15, [r7, #24]
 801471e:	eef0 7ae7 	vabs.f32	s15, s15
 8014722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801472a:	d808      	bhi.n	801473e <dist_to_speed_cond+0x82>
 801472c:	edd7 0a01 	vldr	s1, [r7, #4]
 8014730:	ed97 0a06 	vldr	s0, [r7, #24]
 8014734:	f001 fa10 	bl	8015b58 <decelerationDistance>
 8014738:	eef0 7a40 	vmov.f32	s15, s0
 801473c:	e007      	b.n	801474e <dist_to_speed_cond+0x92>
 801473e:	edd7 0a01 	vldr	s1, [r7, #4]
 8014742:	ed97 0a06 	vldr	s0, [r7, #24]
 8014746:	f001 f9b7 	bl	8015ab8 <accelerationDistance>
 801474a:	eef0 7a40 	vmov.f32	s15, s0
 801474e:	edc7 7a05 	vstr	s15, [r7, #20]
	return dist_to_pos <= dist_to_speed;
 8014752:	ed97 7a07 	vldr	s14, [r7, #28]
 8014756:	edd7 7a05 	vldr	s15, [r7, #20]
 801475a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801475e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014762:	bf94      	ite	ls
 8014764:	2301      	movls	r3, #1
 8014766:	2300      	movhi	r3, #0
 8014768:	b2db      	uxtb	r3, r3
}
 801476a:	4618      	mov	r0, r3
 801476c:	3720      	adds	r7, #32
 801476e:	46bd      	mov	sp, r7
 8014770:	bd80      	pop	{r7, pc}

08014772 <arrived_to_position>:

uint8_t arrived_to_position(direction_t dir, float position) {
 8014772:	b580      	push	{r7, lr}
 8014774:	ed2d 8b02 	vpush	{d8}
 8014778:	b084      	sub	sp, #16
 801477a:	af00      	add	r7, sp, #0
 801477c:	4603      	mov	r3, r0
 801477e:	ed87 0a00 	vstr	s0, [r7]
 8014782:	80fb      	strh	r3, [r7, #6]
	float front = frontDistance(get_position(), position);
 8014784:	f000 f95c 	bl	8014a40 <get_position>
 8014788:	eef0 7a40 	vmov.f32	s15, s0
 801478c:	edd7 0a00 	vldr	s1, [r7]
 8014790:	eeb0 0a67 	vmov.f32	s0, s15
 8014794:	f001 f8fd 	bl	8015992 <frontDistance>
 8014798:	ed87 0a03 	vstr	s0, [r7, #12]
	float behind = behindDistance(get_position(), position);
 801479c:	f000 f950 	bl	8014a40 <get_position>
 80147a0:	eef0 7a40 	vmov.f32	s15, s0
 80147a4:	edd7 0a00 	vldr	s1, [r7]
 80147a8:	eeb0 0a67 	vmov.f32	s0, s15
 80147ac:	f001 f923 	bl	80159f6 <behindDistance>
 80147b0:	ed87 0a02 	vstr	s0, [r7, #8]
	if (dir == DIRECT_DIR) {
 80147b4:	88fb      	ldrh	r3, [r7, #6]
 80147b6:	2b00      	cmp	r3, #0
 80147b8:	d120      	bne.n	80147fc <arrived_to_position+0x8a>
		return front >= behind || fabs(get_position() - position) <= positionWindow();
 80147ba:	ed97 7a03 	vldr	s14, [r7, #12]
 80147be:	edd7 7a02 	vldr	s15, [r7, #8]
 80147c2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80147c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147ca:	da12      	bge.n	80147f2 <arrived_to_position+0x80>
 80147cc:	f000 f938 	bl	8014a40 <get_position>
 80147d0:	eeb0 7a40 	vmov.f32	s14, s0
 80147d4:	edd7 7a00 	vldr	s15, [r7]
 80147d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80147dc:	eeb0 8ae7 	vabs.f32	s16, s15
 80147e0:	f7ff f84c 	bl	801387c <positionWindow>
 80147e4:	eef0 7a40 	vmov.f32	s15, s0
 80147e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80147ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80147f0:	d801      	bhi.n	80147f6 <arrived_to_position+0x84>
 80147f2:	2301      	movs	r3, #1
 80147f4:	e000      	b.n	80147f8 <arrived_to_position+0x86>
 80147f6:	2300      	movs	r3, #0
 80147f8:	b2db      	uxtb	r3, r3
 80147fa:	e01f      	b.n	801483c <arrived_to_position+0xca>
	} else {
		return behind >= front || fabs(get_position() - position) <= positionWindow();
 80147fc:	ed97 7a02 	vldr	s14, [r7, #8]
 8014800:	edd7 7a03 	vldr	s15, [r7, #12]
 8014804:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801480c:	da12      	bge.n	8014834 <arrived_to_position+0xc2>
 801480e:	f000 f917 	bl	8014a40 <get_position>
 8014812:	eeb0 7a40 	vmov.f32	s14, s0
 8014816:	edd7 7a00 	vldr	s15, [r7]
 801481a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801481e:	eeb0 8ae7 	vabs.f32	s16, s15
 8014822:	f7ff f82b 	bl	801387c <positionWindow>
 8014826:	eef0 7a40 	vmov.f32	s15, s0
 801482a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801482e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014832:	d801      	bhi.n	8014838 <arrived_to_position+0xc6>
 8014834:	2301      	movs	r3, #1
 8014836:	e000      	b.n	801483a <arrived_to_position+0xc8>
 8014838:	2300      	movs	r3, #0
 801483a:	b2db      	uxtb	r3, r3
	}
}
 801483c:	4618      	mov	r0, r3
 801483e:	3710      	adds	r7, #16
 8014840:	46bd      	mov	sp, r7
 8014842:	ecbd 8b02 	vpop	{d8}
 8014846:	bd80      	pop	{r7, pc}

08014848 <position_updater>:

uint8_t delay = 1;

void update_speed(float pos);

void position_updater(void const * argument) {
 8014848:	b580      	push	{r7, lr}
 801484a:	b084      	sub	sp, #16
 801484c:	af00      	add	r7, sp, #0
 801484e:	6078      	str	r0, [r7, #4]
	// Create semaphore
	osSemaphoreDef(POS_SEM);
 8014850:	2300      	movs	r3, #0
 8014852:	60bb      	str	r3, [r7, #8]
	pos_sem = osSemaphoreCreate(osSemaphore(POS_SEM), 1);
 8014854:	f107 0308 	add.w	r3, r7, #8
 8014858:	2101      	movs	r1, #1
 801485a:	4618      	mov	r0, r3
 801485c:	f7ef fd9a 	bl	8004394 <osSemaphoreCreate>
 8014860:	4602      	mov	r2, r0
 8014862:	4b13      	ldr	r3, [pc, #76]	; (80148b0 <position_updater+0x68>)
 8014864:	601a      	str	r2, [r3, #0]

	float temp_pos = 0;
 8014866:	f04f 0300 	mov.w	r3, #0
 801486a:	60fb      	str	r3, [r7, #12]
#ifndef HARDWARE
	uint32_t time = HAL_GetTick();
#endif

	while (1) {
		if (!axisSelected()) {
 801486c:	f7ff f83e 	bl	80138ec <axisSelected>
 8014870:	4603      	mov	r3, r0
 8014872:	2b00      	cmp	r3, #0
 8014874:	d103      	bne.n	801487e <position_updater+0x36>
			osDelay(10);
 8014876:	200a      	movs	r0, #10
 8014878:	f7ef fcd8 	bl	800422c <osDelay>
			continue;
 801487c:	e016      	b.n	80148ac <position_updater+0x64>
		}
#ifdef HARDWARE
		// Wait for update_position() to release the semaphore
		osDelay(2);
 801487e:	2002      	movs	r0, #2
 8014880:	f7ef fcd4 	bl	800422c <osDelay>
		//osSemaphoreWait(pos_sem, osWaitForever);

		// Check if BIT and CB bits are low
		if (synchro_BIT() || synchro_CB()) {
 8014884:	f000 fc08 	bl	8015098 <synchro_BIT>
 8014888:	4603      	mov	r3, r0
 801488a:	2b00      	cmp	r3, #0
 801488c:	d10d      	bne.n	80148aa <position_updater+0x62>
 801488e:	f000 fc0f 	bl	80150b0 <synchro_CB>
 8014892:	4603      	mov	r3, r0
 8014894:	2b00      	cmp	r3, #0
 8014896:	d108      	bne.n	80148aa <position_updater+0x62>
			continue;
		}

		// Get position bits from synchro
		temp_pos = synchro_position();
 8014898:	f000 fbb2 	bl	8015000 <synchro_position>
 801489c:	ed87 0a03 	vstr	s0, [r7, #12]
		temp_pos += ((HAL_GetTick() - time) / 1000.0) * h_speed;
		temp_pos = correctPosition(temp_pos);
		time = HAL_GetTick();
#endif

		update_speed(temp_pos);
 80148a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80148a4:	f000 f806 	bl	80148b4 <update_speed>
 80148a8:	e7e0      	b.n	801486c <position_updater+0x24>
			continue;
 80148aa:	bf00      	nop
		if (!axisSelected()) {
 80148ac:	e7de      	b.n	801486c <position_updater+0x24>
 80148ae:	bf00      	nop
 80148b0:	2000ab60 	.word	0x2000ab60

080148b4 <update_speed>:
	}
}

void update_speed(float pos) {
 80148b4:	b5b0      	push	{r4, r5, r7, lr}
 80148b6:	b086      	sub	sp, #24
 80148b8:	af00      	add	r7, sp, #0
 80148ba:	ed87 0a01 	vstr	s0, [r7, #4]
	uint32_t diff = 0;
 80148be:	2300      	movs	r3, #0
 80148c0:	617b      	str	r3, [r7, #20]

	if (buffer_pointer == 0) {
 80148c2:	4b58      	ldr	r3, [pc, #352]	; (8014a24 <update_speed+0x170>)
 80148c4:	681b      	ldr	r3, [r3, #0]
 80148c6:	2b00      	cmp	r3, #0
 80148c8:	d105      	bne.n	80148d6 <update_speed+0x22>
		last_time = HAL_GetTick();
 80148ca:	f7ec fb8b 	bl	8000fe4 <HAL_GetTick>
 80148ce:	4602      	mov	r2, r0
 80148d0:	4b55      	ldr	r3, [pc, #340]	; (8014a28 <update_speed+0x174>)
 80148d2:	601a      	str	r2, [r3, #0]
 80148d4:	e00a      	b.n	80148ec <update_speed+0x38>
	} else if (buffer_pointer == BUFFER_LENGTH - 1) {
 80148d6:	4b53      	ldr	r3, [pc, #332]	; (8014a24 <update_speed+0x170>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	2b04      	cmp	r3, #4
 80148dc:	d106      	bne.n	80148ec <update_speed+0x38>
		diff = HAL_GetTick() - last_time;
 80148de:	f7ec fb81 	bl	8000fe4 <HAL_GetTick>
 80148e2:	4602      	mov	r2, r0
 80148e4:	4b50      	ldr	r3, [pc, #320]	; (8014a28 <update_speed+0x174>)
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	1ad3      	subs	r3, r2, r3
 80148ea:	617b      	str	r3, [r7, #20]
	}

	position_buffer[buffer_pointer] = pos;
 80148ec:	4b4d      	ldr	r3, [pc, #308]	; (8014a24 <update_speed+0x170>)
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	4a4e      	ldr	r2, [pc, #312]	; (8014a2c <update_speed+0x178>)
 80148f2:	009b      	lsls	r3, r3, #2
 80148f4:	4413      	add	r3, r2
 80148f6:	687a      	ldr	r2, [r7, #4]
 80148f8:	601a      	str	r2, [r3, #0]
	buffer_pointer++;
 80148fa:	4b4a      	ldr	r3, [pc, #296]	; (8014a24 <update_speed+0x170>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	3301      	adds	r3, #1
 8014900:	4a48      	ldr	r2, [pc, #288]	; (8014a24 <update_speed+0x170>)
 8014902:	6013      	str	r3, [r2, #0]

	if (buffer_pointer < BUFFER_LENGTH) {
 8014904:	4b47      	ldr	r3, [pc, #284]	; (8014a24 <update_speed+0x170>)
 8014906:	681b      	ldr	r3, [r3, #0]
 8014908:	2b04      	cmp	r3, #4
 801490a:	f240 8087 	bls.w	8014a1c <update_speed+0x168>
		return;
	}

	buffer_pointer = 0;
 801490e:	4b45      	ldr	r3, [pc, #276]	; (8014a24 <update_speed+0x170>)
 8014910:	2200      	movs	r2, #0
 8014912:	601a      	str	r2, [r3, #0]

	float sum = 0;
 8014914:	f04f 0300 	mov.w	r3, #0
 8014918:	613b      	str	r3, [r7, #16]

	for (uint8_t i = 1; i < BUFFER_LENGTH; i++) {
 801491a:	2301      	movs	r3, #1
 801491c:	73fb      	strb	r3, [r7, #15]
 801491e:	e01d      	b.n	801495c <update_speed+0xa8>
		sum += shortDistance(position_buffer[i - 1], position_buffer[i]);
 8014920:	7bfb      	ldrb	r3, [r7, #15]
 8014922:	3b01      	subs	r3, #1
 8014924:	4a41      	ldr	r2, [pc, #260]	; (8014a2c <update_speed+0x178>)
 8014926:	009b      	lsls	r3, r3, #2
 8014928:	4413      	add	r3, r2
 801492a:	edd3 7a00 	vldr	s15, [r3]
 801492e:	7bfb      	ldrb	r3, [r7, #15]
 8014930:	4a3e      	ldr	r2, [pc, #248]	; (8014a2c <update_speed+0x178>)
 8014932:	009b      	lsls	r3, r3, #2
 8014934:	4413      	add	r3, r2
 8014936:	ed93 7a00 	vldr	s14, [r3]
 801493a:	eef0 0a47 	vmov.f32	s1, s14
 801493e:	eeb0 0a67 	vmov.f32	s0, s15
 8014942:	f001 f88a 	bl	8015a5a <shortDistance>
 8014946:	eeb0 7a40 	vmov.f32	s14, s0
 801494a:	edd7 7a04 	vldr	s15, [r7, #16]
 801494e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014952:	edc7 7a04 	vstr	s15, [r7, #16]
	for (uint8_t i = 1; i < BUFFER_LENGTH; i++) {
 8014956:	7bfb      	ldrb	r3, [r7, #15]
 8014958:	3301      	adds	r3, #1
 801495a:	73fb      	strb	r3, [r7, #15]
 801495c:	7bfb      	ldrb	r3, [r7, #15]
 801495e:	2b04      	cmp	r3, #4
 8014960:	d9de      	bls.n	8014920 <update_speed+0x6c>
	}

	sum /= BUFFER_LENGTH;
 8014962:	ed97 7a04 	vldr	s14, [r7, #16]
 8014966:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 801496a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 801496e:	edc7 7a04 	vstr	s15, [r7, #16]
	sum += position_buffer[0];
 8014972:	4b2e      	ldr	r3, [pc, #184]	; (8014a2c <update_speed+0x178>)
 8014974:	edd3 7a00 	vldr	s15, [r3]
 8014978:	ed97 7a04 	vldr	s14, [r7, #16]
 801497c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014980:	edc7 7a04 	vstr	s15, [r7, #16]
	sum = correctPosition(sum);
 8014984:	ed97 0a04 	vldr	s0, [r7, #16]
 8014988:	f001 f936 	bl	8015bf8 <correctPosition>
 801498c:	ed87 0a04 	vstr	s0, [r7, #16]

	float temp_speed = shortDistance(position, sum);
 8014990:	4b27      	ldr	r3, [pc, #156]	; (8014a30 <update_speed+0x17c>)
 8014992:	edd3 7a00 	vldr	s15, [r3]
 8014996:	edd7 0a04 	vldr	s1, [r7, #16]
 801499a:	eeb0 0a67 	vmov.f32	s0, s15
 801499e:	f001 f85c 	bl	8015a5a <shortDistance>
 80149a2:	ed87 0a02 	vstr	s0, [r7, #8]
	temp_speed /= (last_diff + diff) / 1000.0;
 80149a6:	68b8      	ldr	r0, [r7, #8]
 80149a8:	f7eb fdfe 	bl	80005a8 <__aeabi_f2d>
 80149ac:	4604      	mov	r4, r0
 80149ae:	460d      	mov	r5, r1
 80149b0:	4b20      	ldr	r3, [pc, #128]	; (8014a34 <update_speed+0x180>)
 80149b2:	681a      	ldr	r2, [r3, #0]
 80149b4:	697b      	ldr	r3, [r7, #20]
 80149b6:	4413      	add	r3, r2
 80149b8:	4618      	mov	r0, r3
 80149ba:	f7eb fdd3 	bl	8000564 <__aeabi_ui2d>
 80149be:	f04f 0200 	mov.w	r2, #0
 80149c2:	4b1d      	ldr	r3, [pc, #116]	; (8014a38 <update_speed+0x184>)
 80149c4:	f7eb ff6e 	bl	80008a4 <__aeabi_ddiv>
 80149c8:	4602      	mov	r2, r0
 80149ca:	460b      	mov	r3, r1
 80149cc:	4620      	mov	r0, r4
 80149ce:	4629      	mov	r1, r5
 80149d0:	f7eb ff68 	bl	80008a4 <__aeabi_ddiv>
 80149d4:	4603      	mov	r3, r0
 80149d6:	460c      	mov	r4, r1
 80149d8:	4618      	mov	r0, r3
 80149da:	4621      	mov	r1, r4
 80149dc:	f7ec f908 	bl	8000bf0 <__aeabi_d2f>
 80149e0:	4603      	mov	r3, r0
 80149e2:	60bb      	str	r3, [r7, #8]

	position = correctPosition(sum);
 80149e4:	ed97 0a04 	vldr	s0, [r7, #16]
 80149e8:	f001 f906 	bl	8015bf8 <correctPosition>
 80149ec:	eef0 7a40 	vmov.f32	s15, s0
 80149f0:	4b0f      	ldr	r3, [pc, #60]	; (8014a30 <update_speed+0x17c>)
 80149f2:	edc3 7a00 	vstr	s15, [r3]
	last_diff = diff;
 80149f6:	4a0f      	ldr	r2, [pc, #60]	; (8014a34 <update_speed+0x180>)
 80149f8:	697b      	ldr	r3, [r7, #20]
 80149fa:	6013      	str	r3, [r2, #0]
	speed = temp_speed;
 80149fc:	4a0f      	ldr	r2, [pc, #60]	; (8014a3c <update_speed+0x188>)
 80149fe:	68bb      	ldr	r3, [r7, #8]
 8014a00:	6013      	str	r3, [r2, #0]

	send_position_speed(position, speed);
 8014a02:	4b0b      	ldr	r3, [pc, #44]	; (8014a30 <update_speed+0x17c>)
 8014a04:	edd3 7a00 	vldr	s15, [r3]
 8014a08:	4b0c      	ldr	r3, [pc, #48]	; (8014a3c <update_speed+0x188>)
 8014a0a:	ed93 7a00 	vldr	s14, [r3]
 8014a0e:	eef0 0a47 	vmov.f32	s1, s14
 8014a12:	eeb0 0a67 	vmov.f32	s0, s15
 8014a16:	f000 ff57 	bl	80158c8 <send_position_speed>
 8014a1a:	e000      	b.n	8014a1e <update_speed+0x16a>
		return;
 8014a1c:	bf00      	nop
}
 8014a1e:	3718      	adds	r7, #24
 8014a20:	46bd      	mov	sp, r7
 8014a22:	bdb0      	pop	{r4, r5, r7, pc}
 8014a24:	2000417c 	.word	0x2000417c
 8014a28:	20004174 	.word	0x20004174
 8014a2c:	2000415c 	.word	0x2000415c
 8014a30:	20004170 	.word	0x20004170
 8014a34:	20004178 	.word	0x20004178
 8014a38:	408f4000 	.word	0x408f4000
 8014a3c:	20004180 	.word	0x20004180

08014a40 <get_position>:
	if (pos_sem && !delay) {
		osSemaphoreRelease(pos_sem);
	}
}

float get_position() {
 8014a40:	b480      	push	{r7}
 8014a42:	af00      	add	r7, sp, #0
	return position;
 8014a44:	4b04      	ldr	r3, [pc, #16]	; (8014a58 <get_position+0x18>)
 8014a46:	681b      	ldr	r3, [r3, #0]
 8014a48:	ee07 3a90 	vmov	s15, r3
}
 8014a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8014a50:	46bd      	mov	sp, r7
 8014a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a56:	4770      	bx	lr
 8014a58:	20004170 	.word	0x20004170

08014a5c <get_speed>:

float get_speed() {
 8014a5c:	b480      	push	{r7}
 8014a5e:	af00      	add	r7, sp, #0
	return speed;
 8014a60:	4b04      	ldr	r3, [pc, #16]	; (8014a74 <get_speed+0x18>)
 8014a62:	681b      	ldr	r3, [r3, #0]
 8014a64:	ee07 3a90 	vmov	s15, r3
}
 8014a68:	eeb0 0a67 	vmov.f32	s0, s15
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr
 8014a74:	20004180 	.word	0x20004180

08014a78 <set_speed>:

// TODO: Set speed to the motor
void set_speed(float speed) {
 8014a78:	b590      	push	{r4, r7, lr}
 8014a7a:	ed2d 8b02 	vpush	{d8}
 8014a7e:	b083      	sub	sp, #12
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	ed87 0a01 	vstr	s0, [r7, #4]
#ifdef HARDWARE
	speed = speed/maxSpeed()*maxVolt();
 8014a86:	f7fe ff15 	bl	80138b4 <maxSpeed>
 8014a8a:	eeb0 7a40 	vmov.f32	s14, s0
 8014a8e:	edd7 7a01 	vldr	s15, [r7, #4]
 8014a92:	ee87 8a87 	vdiv.f32	s16, s15, s14
 8014a96:	f7fe ff1b 	bl	80138d0 <maxVolt>
 8014a9a:	eef0 7a40 	vmov.f32	s15, s0
 8014a9e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014aa2:	edc7 7a01 	vstr	s15, [r7, #4]
	set_volt_dac(DAC_FLOAT_INT(speed));
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f7eb fd7e 	bl	80005a8 <__aeabi_f2d>
 8014aac:	f04f 0200 	mov.w	r2, #0
 8014ab0:	4b12      	ldr	r3, [pc, #72]	; (8014afc <set_speed+0x84>)
 8014ab2:	f7eb fc1b 	bl	80002ec <__adddf3>
 8014ab6:	4603      	mov	r3, r0
 8014ab8:	460c      	mov	r4, r1
 8014aba:	4618      	mov	r0, r3
 8014abc:	4621      	mov	r1, r4
 8014abe:	f04f 0200 	mov.w	r2, #0
 8014ac2:	4b0f      	ldr	r3, [pc, #60]	; (8014b00 <set_speed+0x88>)
 8014ac4:	f7eb feee 	bl	80008a4 <__aeabi_ddiv>
 8014ac8:	4603      	mov	r3, r0
 8014aca:	460c      	mov	r4, r1
 8014acc:	4618      	mov	r0, r3
 8014ace:	4621      	mov	r1, r4
 8014ad0:	f04f 0200 	mov.w	r2, #0
 8014ad4:	4b0b      	ldr	r3, [pc, #44]	; (8014b04 <set_speed+0x8c>)
 8014ad6:	f7eb fdbb 	bl	8000650 <__aeabi_dmul>
 8014ada:	4603      	mov	r3, r0
 8014adc:	460c      	mov	r4, r1
 8014ade:	4618      	mov	r0, r3
 8014ae0:	4621      	mov	r1, r4
 8014ae2:	f7ec f865 	bl	8000bb0 <__aeabi_d2uiz>
 8014ae6:	4603      	mov	r3, r0
 8014ae8:	b29b      	uxth	r3, r3
 8014aea:	4618      	mov	r0, r3
 8014aec:	f7fe fa51 	bl	8012f92 <set_volt_dac>
#else
	h_speed = speed;
#endif
}
 8014af0:	bf00      	nop
 8014af2:	370c      	adds	r7, #12
 8014af4:	46bd      	mov	sp, r7
 8014af6:	ecbd 8b02 	vpop	{d8}
 8014afa:	bd90      	pop	{r4, r7, pc}
 8014afc:	40240000 	.word	0x40240000
 8014b00:	40340000 	.word	0x40340000
 8014b04:	40f00000 	.word	0x40f00000

08014b08 <set_speed_params>:

void set_speed_params(speed_params_t params) {
 8014b08:	b590      	push	{r4, r7, lr}
 8014b0a:	b085      	sub	sp, #20
 8014b0c:	af00      	add	r7, sp, #0
 8014b0e:	1d3b      	adds	r3, r7, #4
 8014b10:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	speed_params = params;
 8014b14:	4b0b      	ldr	r3, [pc, #44]	; (8014b44 <set_speed_params+0x3c>)
 8014b16:	461c      	mov	r4, r3
 8014b18:	1d3b      	adds	r3, r7, #4
 8014b1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8014b1e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	if (speed_sem) {
 8014b22:	4b09      	ldr	r3, [pc, #36]	; (8014b48 <set_speed_params+0x40>)
 8014b24:	681b      	ldr	r3, [r3, #0]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	d007      	beq.n	8014b3a <set_speed_params+0x32>
		speed_state = SPEED_RUNNING;
 8014b2a:	4b08      	ldr	r3, [pc, #32]	; (8014b4c <set_speed_params+0x44>)
 8014b2c:	2201      	movs	r2, #1
 8014b2e:	701a      	strb	r2, [r3, #0]
		osSemaphoreRelease(speed_sem);
 8014b30:	4b05      	ldr	r3, [pc, #20]	; (8014b48 <set_speed_params+0x40>)
 8014b32:	681b      	ldr	r3, [r3, #0]
 8014b34:	4618      	mov	r0, r3
 8014b36:	f7ef fc9b 	bl	8004470 <osSemaphoreRelease>
	}
}
 8014b3a:	bf00      	nop
 8014b3c:	3714      	adds	r7, #20
 8014b3e:	46bd      	mov	sp, r7
 8014b40:	bd90      	pop	{r4, r7, pc}
 8014b42:	bf00      	nop
 8014b44:	2000ab68 	.word	0x2000ab68
 8014b48:	2000ab64 	.word	0x2000ab64
 8014b4c:	20004184 	.word	0x20004184

08014b50 <stop_speed>:

void stop_speed() {
 8014b50:	b480      	push	{r7}
 8014b52:	af00      	add	r7, sp, #0
	speed_state = SPEED_STOP;
 8014b54:	4b03      	ldr	r3, [pc, #12]	; (8014b64 <stop_speed+0x14>)
 8014b56:	2200      	movs	r2, #0
 8014b58:	701a      	strb	r2, [r3, #0]
}
 8014b5a:	bf00      	nop
 8014b5c:	46bd      	mov	sp, r7
 8014b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b62:	4770      	bx	lr
 8014b64:	20004184 	.word	0x20004184

08014b68 <get_speed_state>:

speed_state_t get_speed_state() {
 8014b68:	b480      	push	{r7}
 8014b6a:	af00      	add	r7, sp, #0
	return speed_state;
 8014b6c:	4b03      	ldr	r3, [pc, #12]	; (8014b7c <get_speed_state+0x14>)
 8014b6e:	781b      	ldrb	r3, [r3, #0]
}
 8014b70:	4618      	mov	r0, r3
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr
 8014b7a:	bf00      	nop
 8014b7c:	20004184 	.word	0x20004184

08014b80 <speed_updater>:

void speed_updater(void const * argument) {
 8014b80:	b590      	push	{r4, r7, lr}
 8014b82:	b087      	sub	sp, #28
 8014b84:	af00      	add	r7, sp, #0
 8014b86:	6078      	str	r0, [r7, #4]

	osSemaphoreDef(SPEED_SEM);
 8014b88:	2300      	movs	r3, #0
 8014b8a:	60bb      	str	r3, [r7, #8]
	speed_sem = osSemaphoreCreate(osSemaphore(SPEED_SEM), 1);
 8014b8c:	f107 0308 	add.w	r3, r7, #8
 8014b90:	2101      	movs	r1, #1
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7ef fbfe 	bl	8004394 <osSemaphoreCreate>
 8014b98:	4602      	mov	r2, r0
 8014b9a:	4b61      	ldr	r3, [pc, #388]	; (8014d20 <speed_updater+0x1a0>)
 8014b9c:	601a      	str	r2, [r3, #0]

	while (1) {
		osSemaphoreWait(speed_sem, osWaitForever);
 8014b9e:	4b60      	ldr	r3, [pc, #384]	; (8014d20 <speed_updater+0x1a0>)
 8014ba0:	681b      	ldr	r3, [r3, #0]
 8014ba2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014ba6:	4618      	mov	r0, r3
 8014ba8:	f7ef fc12 	bl	80043d0 <osSemaphoreWait>
		enable_axis(axisSelected());
 8014bac:	f7fe fe9e 	bl	80138ec <axisSelected>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	4618      	mov	r0, r3
 8014bb4:	f000 f928 	bl	8014e08 <enable_axis>
		while (1) {
			if (speed_state == SPEED_STOP) {
 8014bb8:	4b5a      	ldr	r3, [pc, #360]	; (8014d24 <speed_updater+0x1a4>)
 8014bba:	781b      	ldrb	r3, [r3, #0]
 8014bbc:	2b00      	cmp	r3, #0
 8014bbe:	d10e      	bne.n	8014bde <speed_updater+0x5e>
				if(speed_params.targetSpeed == 0.0) {
 8014bc0:	4b59      	ldr	r3, [pc, #356]	; (8014d28 <speed_updater+0x1a8>)
 8014bc2:	edd3 7a02 	vldr	s15, [r3, #8]
 8014bc6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8014bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014bce:	f040 80a5 	bne.w	8014d1c <speed_updater+0x19c>
					enable_axis(0);
 8014bd2:	2000      	movs	r0, #0
 8014bd4:	f000 f918 	bl	8014e08 <enable_axis>
					push_brakes();
 8014bd8:	f000 f970 	bl	8014ebc <push_brakes>
				}
				break;
 8014bdc:	e09e      	b.n	8014d1c <speed_updater+0x19c>
			}

			float diff = (HAL_GetTick() - speed_params.startTime) / 1000.0;
 8014bde:	f7ec fa01 	bl	8000fe4 <HAL_GetTick>
 8014be2:	4602      	mov	r2, r0
 8014be4:	4b50      	ldr	r3, [pc, #320]	; (8014d28 <speed_updater+0x1a8>)
 8014be6:	681b      	ldr	r3, [r3, #0]
 8014be8:	1ad3      	subs	r3, r2, r3
 8014bea:	4618      	mov	r0, r3
 8014bec:	f7eb fcba 	bl	8000564 <__aeabi_ui2d>
 8014bf0:	f04f 0200 	mov.w	r2, #0
 8014bf4:	4b4d      	ldr	r3, [pc, #308]	; (8014d2c <speed_updater+0x1ac>)
 8014bf6:	f7eb fe55 	bl	80008a4 <__aeabi_ddiv>
 8014bfa:	4603      	mov	r3, r0
 8014bfc:	460c      	mov	r4, r1
 8014bfe:	4618      	mov	r0, r3
 8014c00:	4621      	mov	r1, r4
 8014c02:	f7eb fff5 	bl	8000bf0 <__aeabi_d2f>
 8014c06:	4603      	mov	r3, r0
 8014c08:	617b      	str	r3, [r7, #20]

			float accel = fabs(speed_params.targetSpeed) >= fabs(speed_params.startSpeed) ? acceleration() : deceleration();
 8014c0a:	4b47      	ldr	r3, [pc, #284]	; (8014d28 <speed_updater+0x1a8>)
 8014c0c:	edd3 7a02 	vldr	s15, [r3, #8]
 8014c10:	eeb0 7ae7 	vabs.f32	s14, s15
 8014c14:	4b44      	ldr	r3, [pc, #272]	; (8014d28 <speed_updater+0x1a8>)
 8014c16:	edd3 7a01 	vldr	s15, [r3, #4]
 8014c1a:	eef0 7ae7 	vabs.f32	s15, s15
 8014c1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c26:	db04      	blt.n	8014c32 <speed_updater+0xb2>
 8014c28:	f7fe fe0c 	bl	8013844 <acceleration>
 8014c2c:	eef0 7a40 	vmov.f32	s15, s0
 8014c30:	e003      	b.n	8014c3a <speed_updater+0xba>
 8014c32:	f7fe fe15 	bl	8013860 <deceleration>
 8014c36:	eef0 7a40 	vmov.f32	s15, s0
 8014c3a:	edc7 7a04 	vstr	s15, [r7, #16]
			accel = speed_params.targetSpeed >= speed_params.startSpeed ? accel : -accel;
 8014c3e:	4b3a      	ldr	r3, [pc, #232]	; (8014d28 <speed_updater+0x1a8>)
 8014c40:	ed93 7a02 	vldr	s14, [r3, #8]
 8014c44:	4b38      	ldr	r3, [pc, #224]	; (8014d28 <speed_updater+0x1a8>)
 8014c46:	edd3 7a01 	vldr	s15, [r3, #4]
 8014c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c52:	db02      	blt.n	8014c5a <speed_updater+0xda>
 8014c54:	edd7 7a04 	vldr	s15, [r7, #16]
 8014c58:	e003      	b.n	8014c62 <speed_updater+0xe2>
 8014c5a:	edd7 7a04 	vldr	s15, [r7, #16]
 8014c5e:	eef1 7a67 	vneg.f32	s15, s15
 8014c62:	edc7 7a04 	vstr	s15, [r7, #16]


			float speed = speed_params.startSpeed + diff * accel;
 8014c66:	4b30      	ldr	r3, [pc, #192]	; (8014d28 <speed_updater+0x1a8>)
 8014c68:	ed93 7a01 	vldr	s14, [r3, #4]
 8014c6c:	edd7 6a05 	vldr	s13, [r7, #20]
 8014c70:	edd7 7a04 	vldr	s15, [r7, #16]
 8014c74:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8014c78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8014c7c:	edc7 7a03 	vstr	s15, [r7, #12]
			if(speed > minSpeed()) {
 8014c80:	f7fe fe0a 	bl	8013898 <minSpeed>
 8014c84:	eeb0 7a40 	vmov.f32	s14, s0
 8014c88:	edd7 7a03 	vldr	s15, [r7, #12]
 8014c8c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c94:	d505      	bpl.n	8014ca2 <speed_updater+0x122>
				release_brake(axisSelected());
 8014c96:	f7fe fe29 	bl	80138ec <axisSelected>
 8014c9a:	4603      	mov	r3, r0
 8014c9c:	4618      	mov	r0, r3
 8014c9e:	f000 f8eb 	bl	8014e78 <release_brake>
			}
			if (speed_params.targetSpeed >= speed_params.startSpeed) {
 8014ca2:	4b21      	ldr	r3, [pc, #132]	; (8014d28 <speed_updater+0x1a8>)
 8014ca4:	ed93 7a02 	vldr	s14, [r3, #8]
 8014ca8:	4b1f      	ldr	r3, [pc, #124]	; (8014d28 <speed_updater+0x1a8>)
 8014caa:	edd3 7a01 	vldr	s15, [r3, #4]
 8014cae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cb6:	db14      	blt.n	8014ce2 <speed_updater+0x162>
				if (speed >= speed_params.targetSpeed) {
 8014cb8:	4b1b      	ldr	r3, [pc, #108]	; (8014d28 <speed_updater+0x1a8>)
 8014cba:	ed93 7a02 	vldr	s14, [r3, #8]
 8014cbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8014cc2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cca:	d81f      	bhi.n	8014d0c <speed_updater+0x18c>
					speed_state = SPEED_STOP;
 8014ccc:	4b15      	ldr	r3, [pc, #84]	; (8014d24 <speed_updater+0x1a4>)
 8014cce:	2200      	movs	r2, #0
 8014cd0:	701a      	strb	r2, [r3, #0]
					set_speed(speed_params.targetSpeed);
 8014cd2:	4b15      	ldr	r3, [pc, #84]	; (8014d28 <speed_updater+0x1a8>)
 8014cd4:	edd3 7a02 	vldr	s15, [r3, #8]
 8014cd8:	eeb0 0a67 	vmov.f32	s0, s15
 8014cdc:	f7ff fecc 	bl	8014a78 <set_speed>
					continue;
 8014ce0:	e01b      	b.n	8014d1a <speed_updater+0x19a>
				}
			} else {
				if (speed <= speed_params.targetSpeed) {
 8014ce2:	4b11      	ldr	r3, [pc, #68]	; (8014d28 <speed_updater+0x1a8>)
 8014ce4:	ed93 7a02 	vldr	s14, [r3, #8]
 8014ce8:	edd7 7a03 	vldr	s15, [r7, #12]
 8014cec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8014cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014cf4:	db0a      	blt.n	8014d0c <speed_updater+0x18c>
					speed_state = SPEED_STOP;
 8014cf6:	4b0b      	ldr	r3, [pc, #44]	; (8014d24 <speed_updater+0x1a4>)
 8014cf8:	2200      	movs	r2, #0
 8014cfa:	701a      	strb	r2, [r3, #0]
					set_speed(speed_params.targetSpeed);
 8014cfc:	4b0a      	ldr	r3, [pc, #40]	; (8014d28 <speed_updater+0x1a8>)
 8014cfe:	edd3 7a02 	vldr	s15, [r3, #8]
 8014d02:	eeb0 0a67 	vmov.f32	s0, s15
 8014d06:	f7ff feb7 	bl	8014a78 <set_speed>
					continue;
 8014d0a:	e006      	b.n	8014d1a <speed_updater+0x19a>
				}
			}

			set_speed(speed);
 8014d0c:	ed97 0a03 	vldr	s0, [r7, #12]
 8014d10:	f7ff feb2 	bl	8014a78 <set_speed>
			osDelay(1);
 8014d14:	2001      	movs	r0, #1
 8014d16:	f7ef fa89 	bl	800422c <osDelay>
		while (1) {
 8014d1a:	e74d      	b.n	8014bb8 <speed_updater+0x38>
				break;
 8014d1c:	bf00      	nop
		osSemaphoreWait(speed_sem, osWaitForever);
 8014d1e:	e73e      	b.n	8014b9e <speed_updater+0x1e>
 8014d20:	2000ab64 	.word	0x2000ab64
 8014d24:	20004184 	.word	0x20004184
 8014d28:	2000ab68 	.word	0x2000ab68
 8014d2c:	408f4000 	.word	0x408f4000

08014d30 <init_peripherials>:
float pot_multiplier = 0.0;
osTimerId tim1;
uint8_t clock_limits_v = 0;
uint8_t counter_limits_v = 0;

void init_peripherials() {
 8014d30:	b580      	push	{r7, lr}
 8014d32:	af00      	add	r7, sp, #0
	init_pot();
 8014d34:	f000 f810 	bl	8014d58 <init_pot>
	init_TTL();
 8014d38:	f000 f9d8 	bl	80150ec <init_TTL>
	synchro_INH(1);
 8014d3c:	2001      	movs	r0, #1
 8014d3e:	f000 f9c3 	bl	80150c8 <synchro_INH>
	select_axis(0);
 8014d42:	2000      	movs	r0, #0
 8014d44:	f000 f836 	bl	8014db4 <select_axis>
	enable_axis(0);
 8014d48:	2000      	movs	r0, #0
 8014d4a:	f000 f85d 	bl	8014e08 <enable_axis>
	push_brakes();
 8014d4e:	f000 f8b5 	bl	8014ebc <push_brakes>
}
 8014d52:	bf00      	nop
 8014d54:	bd80      	pop	{r7, pc}
	...

08014d58 <init_pot>:

void init_pot() {
 8014d58:	b580      	push	{r7, lr}
 8014d5a:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8014d5c:	4803      	ldr	r0, [pc, #12]	; (8014d6c <init_pot+0x14>)
 8014d5e:	f7ec f9b3 	bl	80010c8 <HAL_ADC_Start>
	pot_multiplier = (5.0 / 4095.0) * (2.0 / VOLT);
 8014d62:	4b03      	ldr	r3, [pc, #12]	; (8014d70 <init_pot+0x18>)
 8014d64:	4a03      	ldr	r2, [pc, #12]	; (8014d74 <init_pot+0x1c>)
 8014d66:	601a      	str	r2, [r3, #0]
	//pot_multiplier = (3300 * 2) / (4095 * VOLT * RESISTOR);
}
 8014d68:	bf00      	nop
 8014d6a:	bd80      	pop	{r7, pc}
 8014d6c:	20007958 	.word	0x20007958
 8014d70:	20004188 	.word	0x20004188
 8014d74:	3a186b0d 	.word	0x3a186b0d

08014d78 <pot_value>:

float pot_value() {
 8014d78:	b580      	push	{r7, lr}
 8014d7a:	af00      	add	r7, sp, #0
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8014d7c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8014d80:	480a      	ldr	r0, [pc, #40]	; (8014dac <pot_value+0x34>)
 8014d82:	f7ec fa45 	bl	8001210 <HAL_ADC_PollForConversion>
	return ((float) HAL_ADC_GetValue(&hadc1)) * pot_multiplier - 1;
 8014d86:	4809      	ldr	r0, [pc, #36]	; (8014dac <pot_value+0x34>)
 8014d88:	f7ec fac4 	bl	8001314 <HAL_ADC_GetValue>
 8014d8c:	ee07 0a90 	vmov	s15, r0
 8014d90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8014d94:	4b06      	ldr	r3, [pc, #24]	; (8014db0 <pot_value+0x38>)
 8014d96:	edd3 7a00 	vldr	s15, [r3]
 8014d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8014d9e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8014da2:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8014da6:	eeb0 0a67 	vmov.f32	s0, s15
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	20007958 	.word	0x20007958
 8014db0:	20004188 	.word	0x20004188

08014db4 <select_axis>:

void select_axis(uint8_t axis) {
 8014db4:	b580      	push	{r7, lr}
 8014db6:	b084      	sub	sp, #16
 8014db8:	af00      	add	r7, sp, #0
 8014dba:	4603      	mov	r3, r0
 8014dbc:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 3; ++i) {
 8014dbe:	2300      	movs	r3, #0
 8014dc0:	73fb      	strb	r3, [r7, #15]
 8014dc2:	e015      	b.n	8014df0 <select_axis+0x3c>
		HAL_GPIO_WritePin(selectPorts[i], selectPins[i], (axis >> i) & 1);
 8014dc4:	7bfb      	ldrb	r3, [r7, #15]
 8014dc6:	4a0e      	ldr	r2, [pc, #56]	; (8014e00 <select_axis+0x4c>)
 8014dc8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014dcc:	7bfb      	ldrb	r3, [r7, #15]
 8014dce:	4a0d      	ldr	r2, [pc, #52]	; (8014e04 <select_axis+0x50>)
 8014dd0:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8014dd4:	79fa      	ldrb	r2, [r7, #7]
 8014dd6:	7bfb      	ldrb	r3, [r7, #15]
 8014dd8:	fa42 f303 	asr.w	r3, r2, r3
 8014ddc:	b2db      	uxtb	r3, r3
 8014dde:	f003 0301 	and.w	r3, r3, #1
 8014de2:	b2db      	uxtb	r3, r3
 8014de4:	461a      	mov	r2, r3
 8014de6:	f7ed ffab 	bl	8002d40 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 3; ++i) {
 8014dea:	7bfb      	ldrb	r3, [r7, #15]
 8014dec:	3301      	adds	r3, #1
 8014dee:	73fb      	strb	r3, [r7, #15]
 8014df0:	7bfb      	ldrb	r3, [r7, #15]
 8014df2:	2b02      	cmp	r3, #2
 8014df4:	d9e6      	bls.n	8014dc4 <select_axis+0x10>
	}
}
 8014df6:	bf00      	nop
 8014df8:	3710      	adds	r7, #16
 8014dfa:	46bd      	mov	sp, r7
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	bf00      	nop
 8014e00:	20000074 	.word	0x20000074
 8014e04:	20000080 	.word	0x20000080

08014e08 <enable_axis>:

void enable_axis(uint8_t axis) {
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	b084      	sub	sp, #16
 8014e0c:	af00      	add	r7, sp, #0
 8014e0e:	4603      	mov	r3, r0
 8014e10:	71fb      	strb	r3, [r7, #7]
	axis = axis > 0 ? (1 << (axis - 1)) : 0;
 8014e12:	79fb      	ldrb	r3, [r7, #7]
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d006      	beq.n	8014e26 <enable_axis+0x1e>
 8014e18:	79fb      	ldrb	r3, [r7, #7]
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	2201      	movs	r2, #1
 8014e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8014e22:	b2db      	uxtb	r3, r3
 8014e24:	e000      	b.n	8014e28 <enable_axis+0x20>
 8014e26:	2300      	movs	r3, #0
 8014e28:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 6; ++i) {
 8014e2a:	2300      	movs	r3, #0
 8014e2c:	73fb      	strb	r3, [r7, #15]
 8014e2e:	e018      	b.n	8014e62 <enable_axis+0x5a>
		HAL_GPIO_WritePin(enablePorts[i], enablePins[i], !((axis >> i) & 1));
 8014e30:	7bfb      	ldrb	r3, [r7, #15]
 8014e32:	4a0f      	ldr	r2, [pc, #60]	; (8014e70 <enable_axis+0x68>)
 8014e34:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014e38:	7bfb      	ldrb	r3, [r7, #15]
 8014e3a:	4a0e      	ldr	r2, [pc, #56]	; (8014e74 <enable_axis+0x6c>)
 8014e3c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8014e40:	79fa      	ldrb	r2, [r7, #7]
 8014e42:	7bfb      	ldrb	r3, [r7, #15]
 8014e44:	fa42 f303 	asr.w	r3, r2, r3
 8014e48:	f003 0301 	and.w	r3, r3, #1
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	bf0c      	ite	eq
 8014e50:	2301      	moveq	r3, #1
 8014e52:	2300      	movne	r3, #0
 8014e54:	b2db      	uxtb	r3, r3
 8014e56:	461a      	mov	r2, r3
 8014e58:	f7ed ff72 	bl	8002d40 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 6; ++i) {
 8014e5c:	7bfb      	ldrb	r3, [r7, #15]
 8014e5e:	3301      	adds	r3, #1
 8014e60:	73fb      	strb	r3, [r7, #15]
 8014e62:	7bfb      	ldrb	r3, [r7, #15]
 8014e64:	2b05      	cmp	r3, #5
 8014e66:	d9e3      	bls.n	8014e30 <enable_axis+0x28>
	}
}
 8014e68:	bf00      	nop
 8014e6a:	3710      	adds	r7, #16
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	200000ac 	.word	0x200000ac
 8014e74:	200000c4 	.word	0x200000c4

08014e78 <release_brake>:

void release_brake(uint8_t axis) {
 8014e78:	b580      	push	{r7, lr}
 8014e7a:	b082      	sub	sp, #8
 8014e7c:	af00      	add	r7, sp, #0
 8014e7e:	4603      	mov	r3, r0
 8014e80:	71fb      	strb	r3, [r7, #7]
	if (axis <= 0) {
 8014e82:	79fb      	ldrb	r3, [r7, #7]
 8014e84:	2b00      	cmp	r3, #0
 8014e86:	d102      	bne.n	8014e8e <release_brake+0x16>
		push_brakes();
 8014e88:	f000 f818 	bl	8014ebc <push_brakes>
		return;
 8014e8c:	e00e      	b.n	8014eac <release_brake+0x34>
	}
	axis = axis - 1;
 8014e8e:	79fb      	ldrb	r3, [r7, #7]
 8014e90:	3b01      	subs	r3, #1
 8014e92:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(brakePorts[axis], brakePins[axis], 1);
 8014e94:	79fb      	ldrb	r3, [r7, #7]
 8014e96:	4a07      	ldr	r2, [pc, #28]	; (8014eb4 <release_brake+0x3c>)
 8014e98:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014e9c:	79fb      	ldrb	r3, [r7, #7]
 8014e9e:	4a06      	ldr	r2, [pc, #24]	; (8014eb8 <release_brake+0x40>)
 8014ea0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ea4:	2201      	movs	r2, #1
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	f7ed ff4a 	bl	8002d40 <HAL_GPIO_WritePin>
}
 8014eac:	3708      	adds	r7, #8
 8014eae:	46bd      	mov	sp, r7
 8014eb0:	bd80      	pop	{r7, pc}
 8014eb2:	bf00      	nop
 8014eb4:	20000088 	.word	0x20000088
 8014eb8:	200000a0 	.word	0x200000a0

08014ebc <push_brakes>:

void push_brakes() {
 8014ebc:	b580      	push	{r7, lr}
 8014ebe:	b082      	sub	sp, #8
 8014ec0:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 6; ++i) {
 8014ec2:	2300      	movs	r3, #0
 8014ec4:	71fb      	strb	r3, [r7, #7]
 8014ec6:	e00e      	b.n	8014ee6 <push_brakes+0x2a>
		HAL_GPIO_WritePin(brakePorts[i], brakePins[i], 0);
 8014ec8:	79fb      	ldrb	r3, [r7, #7]
 8014eca:	4a0a      	ldr	r2, [pc, #40]	; (8014ef4 <push_brakes+0x38>)
 8014ecc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014ed0:	79fb      	ldrb	r3, [r7, #7]
 8014ed2:	4a09      	ldr	r2, [pc, #36]	; (8014ef8 <push_brakes+0x3c>)
 8014ed4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	4619      	mov	r1, r3
 8014edc:	f7ed ff30 	bl	8002d40 <HAL_GPIO_WritePin>
	for (uint8_t i = 0; i < 6; ++i) {
 8014ee0:	79fb      	ldrb	r3, [r7, #7]
 8014ee2:	3301      	adds	r3, #1
 8014ee4:	71fb      	strb	r3, [r7, #7]
 8014ee6:	79fb      	ldrb	r3, [r7, #7]
 8014ee8:	2b05      	cmp	r3, #5
 8014eea:	d9ed      	bls.n	8014ec8 <push_brakes+0xc>
	}
}
 8014eec:	bf00      	nop
 8014eee:	3708      	adds	r7, #8
 8014ef0:	46bd      	mov	sp, r7
 8014ef2:	bd80      	pop	{r7, pc}
 8014ef4:	20000088 	.word	0x20000088
 8014ef8:	200000a0 	.word	0x200000a0

08014efc <clock_limits>:

uint8_t clock_limits() {
 8014efc:	b580      	push	{r7, lr}
 8014efe:	b082      	sub	sp, #8
 8014f00:	af00      	add	r7, sp, #0
	uint8_t limit_bits = 0;
 8014f02:	2300      	movs	r3, #0
 8014f04:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 6; ++i) {
 8014f06:	2300      	movs	r3, #0
 8014f08:	71bb      	strb	r3, [r7, #6]
 8014f0a:	e018      	b.n	8014f3e <clock_limits+0x42>
		limit_bits |= HAL_GPIO_ReadPin(clockLimitsPorts[i], clockLimitsPins[i]) << i;
 8014f0c:	79bb      	ldrb	r3, [r7, #6]
 8014f0e:	4a11      	ldr	r2, [pc, #68]	; (8014f54 <clock_limits+0x58>)
 8014f10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014f14:	79bb      	ldrb	r3, [r7, #6]
 8014f16:	4a10      	ldr	r2, [pc, #64]	; (8014f58 <clock_limits+0x5c>)
 8014f18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f1c:	4619      	mov	r1, r3
 8014f1e:	f7ed fef7 	bl	8002d10 <HAL_GPIO_ReadPin>
 8014f22:	4603      	mov	r3, r0
 8014f24:	461a      	mov	r2, r3
 8014f26:	79bb      	ldrb	r3, [r7, #6]
 8014f28:	fa02 f303 	lsl.w	r3, r2, r3
 8014f2c:	b25a      	sxtb	r2, r3
 8014f2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f32:	4313      	orrs	r3, r2
 8014f34:	b25b      	sxtb	r3, r3
 8014f36:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 6; ++i) {
 8014f38:	79bb      	ldrb	r3, [r7, #6]
 8014f3a:	3301      	adds	r3, #1
 8014f3c:	71bb      	strb	r3, [r7, #6]
 8014f3e:	79bb      	ldrb	r3, [r7, #6]
 8014f40:	2b05      	cmp	r3, #5
 8014f42:	d9e3      	bls.n	8014f0c <clock_limits+0x10>
	}
	clock_limits_v = limit_bits;
 8014f44:	4a05      	ldr	r2, [pc, #20]	; (8014f5c <clock_limits+0x60>)
 8014f46:	79fb      	ldrb	r3, [r7, #7]
 8014f48:	7013      	strb	r3, [r2, #0]
	return limit_bits;
 8014f4a:	79fb      	ldrb	r3, [r7, #7]
}
 8014f4c:	4618      	mov	r0, r3
 8014f4e:	3708      	adds	r7, #8
 8014f50:	46bd      	mov	sp, r7
 8014f52:	bd80      	pop	{r7, pc}
 8014f54:	200000d0 	.word	0x200000d0
 8014f58:	200000e8 	.word	0x200000e8
 8014f5c:	2000418c 	.word	0x2000418c

08014f60 <counter_limits>:

uint8_t clock_limit(uint8_t axis) {
	return (clock_limits_v >> (axis - 1)) & 1;
}

uint8_t counter_limits() {
 8014f60:	b580      	push	{r7, lr}
 8014f62:	b082      	sub	sp, #8
 8014f64:	af00      	add	r7, sp, #0
	uint8_t limit_bits = 0;
 8014f66:	2300      	movs	r3, #0
 8014f68:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 6; ++i) {
 8014f6a:	2300      	movs	r3, #0
 8014f6c:	71bb      	strb	r3, [r7, #6]
 8014f6e:	e018      	b.n	8014fa2 <counter_limits+0x42>
		limit_bits |= HAL_GPIO_ReadPin(counterLimitsPorts[i], counterLimitsPins[i]) << i;
 8014f70:	79bb      	ldrb	r3, [r7, #6]
 8014f72:	4a11      	ldr	r2, [pc, #68]	; (8014fb8 <counter_limits+0x58>)
 8014f74:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8014f78:	79bb      	ldrb	r3, [r7, #6]
 8014f7a:	4a10      	ldr	r2, [pc, #64]	; (8014fbc <counter_limits+0x5c>)
 8014f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8014f80:	4619      	mov	r1, r3
 8014f82:	f7ed fec5 	bl	8002d10 <HAL_GPIO_ReadPin>
 8014f86:	4603      	mov	r3, r0
 8014f88:	461a      	mov	r2, r3
 8014f8a:	79bb      	ldrb	r3, [r7, #6]
 8014f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8014f90:	b25a      	sxtb	r2, r3
 8014f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014f96:	4313      	orrs	r3, r2
 8014f98:	b25b      	sxtb	r3, r3
 8014f9a:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < 6; ++i) {
 8014f9c:	79bb      	ldrb	r3, [r7, #6]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	71bb      	strb	r3, [r7, #6]
 8014fa2:	79bb      	ldrb	r3, [r7, #6]
 8014fa4:	2b05      	cmp	r3, #5
 8014fa6:	d9e3      	bls.n	8014f70 <counter_limits+0x10>
	}
	counter_limits_v = limit_bits;
 8014fa8:	4a05      	ldr	r2, [pc, #20]	; (8014fc0 <counter_limits+0x60>)
 8014faa:	79fb      	ldrb	r3, [r7, #7]
 8014fac:	7013      	strb	r3, [r2, #0]
	return limit_bits;
 8014fae:	79fb      	ldrb	r3, [r7, #7]
}
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	3708      	adds	r7, #8
 8014fb4:	46bd      	mov	sp, r7
 8014fb6:	bd80      	pop	{r7, pc}
 8014fb8:	200000f4 	.word	0x200000f4
 8014fbc:	2000010c 	.word	0x2000010c
 8014fc0:	2000418d 	.word	0x2000418d

08014fc4 <limits_controller>:

uint8_t counter_limit(uint8_t axis) {
	return (counter_limits_v >> (axis - 1)) & 1;
}

void limits_controller(void const * argument) {
 8014fc4:	b580      	push	{r7, lr}
 8014fc6:	b082      	sub	sp, #8
 8014fc8:	af00      	add	r7, sp, #0
 8014fca:	6078      	str	r0, [r7, #4]
	while (1) {
		if (counter_limits() || clock_limits()) {
 8014fcc:	f7ff ffc8 	bl	8014f60 <counter_limits>
 8014fd0:	4603      	mov	r3, r0
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	d104      	bne.n	8014fe0 <limits_controller+0x1c>
 8014fd6:	f7ff ff91 	bl	8014efc <clock_limits>
 8014fda:	4603      	mov	r3, r0
 8014fdc:	2b00      	cmp	r3, #0
 8014fde:	d007      	beq.n	8014ff0 <limits_controller+0x2c>
			send_limits(clock_limits_v, counter_limits_v);
 8014fe0:	4b05      	ldr	r3, [pc, #20]	; (8014ff8 <limits_controller+0x34>)
 8014fe2:	781a      	ldrb	r2, [r3, #0]
 8014fe4:	4b05      	ldr	r3, [pc, #20]	; (8014ffc <limits_controller+0x38>)
 8014fe6:	781b      	ldrb	r3, [r3, #0]
 8014fe8:	4619      	mov	r1, r3
 8014fea:	4610      	mov	r0, r2
 8014fec:	f000 fca4 	bl	8015938 <send_limits>
		}
		osDelay(1);
 8014ff0:	2001      	movs	r0, #1
 8014ff2:	f7ef f91b 	bl	800422c <osDelay>
		if (counter_limits() || clock_limits()) {
 8014ff6:	e7e9      	b.n	8014fcc <limits_controller+0x8>
 8014ff8:	2000418c 	.word	0x2000418c
 8014ffc:	2000418d 	.word	0x2000418d

08015000 <synchro_position>:
	}

	osThreadTerminate(NULL);
}

float synchro_position() {
 8015000:	b590      	push	{r4, r7, lr}
 8015002:	b083      	sub	sp, #12
 8015004:	af00      	add	r7, sp, #0
	uint16_t position_bits = 0;
 8015006:	2300      	movs	r3, #0
 8015008:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; ++i) {
 801500a:	2300      	movs	r3, #0
 801500c:	717b      	strb	r3, [r7, #5]
 801500e:	e01a      	b.n	8015046 <synchro_position+0x46>
		position_bits |= HAL_GPIO_ReadPin(positionPorts[i], positionPins[i]) << (15 - i);
 8015010:	797b      	ldrb	r3, [r7, #5]
 8015012:	4a1f      	ldr	r2, [pc, #124]	; (8015090 <synchro_position+0x90>)
 8015014:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015018:	797b      	ldrb	r3, [r7, #5]
 801501a:	4a1e      	ldr	r2, [pc, #120]	; (8015094 <synchro_position+0x94>)
 801501c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015020:	4619      	mov	r1, r3
 8015022:	f7ed fe75 	bl	8002d10 <HAL_GPIO_ReadPin>
 8015026:	4603      	mov	r3, r0
 8015028:	461a      	mov	r2, r3
 801502a:	797b      	ldrb	r3, [r7, #5]
 801502c:	f1c3 030f 	rsb	r3, r3, #15
 8015030:	fa02 f303 	lsl.w	r3, r2, r3
 8015034:	b21a      	sxth	r2, r3
 8015036:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801503a:	4313      	orrs	r3, r2
 801503c:	b21b      	sxth	r3, r3
 801503e:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16; ++i) {
 8015040:	797b      	ldrb	r3, [r7, #5]
 8015042:	3301      	adds	r3, #1
 8015044:	717b      	strb	r3, [r7, #5]
 8015046:	797b      	ldrb	r3, [r7, #5]
 8015048:	2b0f      	cmp	r3, #15
 801504a:	d9e1      	bls.n	8015010 <synchro_position+0x10>
	}

	return ((float) (position_bits)) * MIN_POSITION;
 801504c:	88fb      	ldrh	r3, [r7, #6]
 801504e:	ee07 3a90 	vmov	s15, r3
 8015052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8015056:	ee17 0a90 	vmov	r0, s15
 801505a:	f7eb faa5 	bl	80005a8 <__aeabi_f2d>
 801505e:	a30a      	add	r3, pc, #40	; (adr r3, 8015088 <synchro_position+0x88>)
 8015060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8015064:	f7eb faf4 	bl	8000650 <__aeabi_dmul>
 8015068:	4603      	mov	r3, r0
 801506a:	460c      	mov	r4, r1
 801506c:	4618      	mov	r0, r3
 801506e:	4621      	mov	r1, r4
 8015070:	f7eb fdbe 	bl	8000bf0 <__aeabi_d2f>
 8015074:	4603      	mov	r3, r0
 8015076:	ee07 3a90 	vmov	s15, r3
}
 801507a:	eeb0 0a67 	vmov.f32	s0, s15
 801507e:	370c      	adds	r7, #12
 8015080:	46bd      	mov	sp, r7
 8015082:	bd90      	pop	{r4, r7, pc}
 8015084:	f3af 8000 	nop.w
 8015088:	fff73433 	.word	0xfff73433
 801508c:	3f767fff 	.word	0x3f767fff
 8015090:	20000014 	.word	0x20000014
 8015094:	20000054 	.word	0x20000054

08015098 <synchro_BIT>:

uint8_t synchro_BIT() {
 8015098:	b580      	push	{r7, lr}
 801509a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(BIT_PORT, BIT_PIN);
 801509c:	2140      	movs	r1, #64	; 0x40
 801509e:	4803      	ldr	r0, [pc, #12]	; (80150ac <synchro_BIT+0x14>)
 80150a0:	f7ed fe36 	bl	8002d10 <HAL_GPIO_ReadPin>
 80150a4:	4603      	mov	r3, r0
}
 80150a6:	4618      	mov	r0, r3
 80150a8:	bd80      	pop	{r7, pc}
 80150aa:	bf00      	nop
 80150ac:	40021000 	.word	0x40021000

080150b0 <synchro_CB>:

uint8_t synchro_CB() {
 80150b0:	b580      	push	{r7, lr}
 80150b2:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(CB_PORT, CB_PIN);
 80150b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80150b8:	4802      	ldr	r0, [pc, #8]	; (80150c4 <synchro_CB+0x14>)
 80150ba:	f7ed fe29 	bl	8002d10 <HAL_GPIO_ReadPin>
 80150be:	4603      	mov	r3, r0
}
 80150c0:	4618      	mov	r0, r3
 80150c2:	bd80      	pop	{r7, pc}
 80150c4:	40021800 	.word	0x40021800

080150c8 <synchro_INH>:

void synchro_INH(uint8_t enable) {
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b082      	sub	sp, #8
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	4603      	mov	r3, r0
 80150d0:	71fb      	strb	r3, [r7, #7]
	return HAL_GPIO_WritePin(INH_PORT, INH_PIN, enable);
 80150d2:	79fb      	ldrb	r3, [r7, #7]
 80150d4:	461a      	mov	r2, r3
 80150d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80150da:	4803      	ldr	r0, [pc, #12]	; (80150e8 <synchro_INH+0x20>)
 80150dc:	f7ed fe30 	bl	8002d40 <HAL_GPIO_WritePin>
}
 80150e0:	3708      	adds	r7, #8
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	40021800 	.word	0x40021800

080150ec <init_TTL>:

void init_TTL() {
 80150ec:	b580      	push	{r7, lr}
 80150ee:	b082      	sub	sp, #8
 80150f0:	af00      	add	r7, sp, #0
	osTimerDef(tim1, stop_TTL);
 80150f2:	4b0c      	ldr	r3, [pc, #48]	; (8015124 <init_TTL+0x38>)
 80150f4:	607b      	str	r3, [r7, #4]
	osTimerCreate(osTimer(tim1), osTimerOnce, NULL);
 80150f6:	1d3b      	adds	r3, r7, #4
 80150f8:	2200      	movs	r2, #0
 80150fa:	2100      	movs	r1, #0
 80150fc:	4618      	mov	r0, r3
 80150fe:	f7ef f8a9 	bl	8004254 <osTimerCreate>
	HAL_GPIO_WritePin(TTL_PORT, TTL_PIN, !TTL_flank());
 8015102:	f7fe fbff 	bl	8013904 <TTL_flank>
 8015106:	4603      	mov	r3, r0
 8015108:	2b00      	cmp	r3, #0
 801510a:	bf0c      	ite	eq
 801510c:	2301      	moveq	r3, #1
 801510e:	2300      	movne	r3, #0
 8015110:	b2db      	uxtb	r3, r3
 8015112:	461a      	mov	r2, r3
 8015114:	2180      	movs	r1, #128	; 0x80
 8015116:	4804      	ldr	r0, [pc, #16]	; (8015128 <init_TTL+0x3c>)
 8015118:	f7ed fe12 	bl	8002d40 <HAL_GPIO_WritePin>
}
 801511c:	bf00      	nop
 801511e:	3708      	adds	r7, #8
 8015120:	46bd      	mov	sp, r7
 8015122:	bd80      	pop	{r7, pc}
 8015124:	08015151 	.word	0x08015151
 8015128:	40021800 	.word	0x40021800

0801512c <fire_TTL>:

void fire_TTL() {
 801512c:	b580      	push	{r7, lr}
 801512e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TTL_PORT, TTL_PIN, TTL_flank());
 8015130:	f7fe fbe8 	bl	8013904 <TTL_flank>
 8015134:	4603      	mov	r3, r0
 8015136:	b2db      	uxtb	r3, r3
 8015138:	461a      	mov	r2, r3
 801513a:	2180      	movs	r1, #128	; 0x80
 801513c:	4803      	ldr	r0, [pc, #12]	; (801514c <fire_TTL+0x20>)
 801513e:	f7ed fdff 	bl	8002d40 <HAL_GPIO_WritePin>
	DWT_Delay(TTL_PERIOD);
 8015142:	2001      	movs	r0, #1
 8015144:	f000 fdb4 	bl	8015cb0 <DWT_Delay>
}
 8015148:	bf00      	nop
 801514a:	bd80      	pop	{r7, pc}
 801514c:	40021800 	.word	0x40021800

08015150 <stop_TTL>:

void stop_TTL(void const *argument) {
 8015150:	b580      	push	{r7, lr}
 8015152:	b082      	sub	sp, #8
 8015154:	af00      	add	r7, sp, #0
 8015156:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(TTL_PORT, TTL_PIN, !TTL_flank());
 8015158:	f7fe fbd4 	bl	8013904 <TTL_flank>
 801515c:	4603      	mov	r3, r0
 801515e:	2b00      	cmp	r3, #0
 8015160:	bf0c      	ite	eq
 8015162:	2301      	moveq	r3, #1
 8015164:	2300      	movne	r3, #0
 8015166:	b2db      	uxtb	r3, r3
 8015168:	461a      	mov	r2, r3
 801516a:	2180      	movs	r1, #128	; 0x80
 801516c:	4803      	ldr	r0, [pc, #12]	; (801517c <stop_TTL+0x2c>)
 801516e:	f7ed fde7 	bl	8002d40 <HAL_GPIO_WritePin>
}
 8015172:	bf00      	nop
 8015174:	3708      	adds	r7, #8
 8015176:	46bd      	mov	sp, r7
 8015178:	bd80      	pop	{r7, pc}
 801517a:	bf00      	nop
 801517c:	40021800 	.word	0x40021800

08015180 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8015184:	4b1c      	ldr	r3, [pc, #112]	; (80151f8 <MX_SPI1_Init+0x78>)
 8015186:	4a1d      	ldr	r2, [pc, #116]	; (80151fc <MX_SPI1_Init+0x7c>)
 8015188:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 801518a:	4b1b      	ldr	r3, [pc, #108]	; (80151f8 <MX_SPI1_Init+0x78>)
 801518c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8015190:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8015192:	4b19      	ldr	r3, [pc, #100]	; (80151f8 <MX_SPI1_Init+0x78>)
 8015194:	2200      	movs	r2, #0
 8015196:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8015198:	4b17      	ldr	r3, [pc, #92]	; (80151f8 <MX_SPI1_Init+0x78>)
 801519a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 801519e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 80151a0:	4b15      	ldr	r3, [pc, #84]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151a2:	2202      	movs	r2, #2
 80151a4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80151a6:	4b14      	ldr	r3, [pc, #80]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151a8:	2200      	movs	r2, #0
 80151aa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80151ac:	4b12      	ldr	r3, [pc, #72]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151ae:	f44f 7200 	mov.w	r2, #512	; 0x200
 80151b2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80151b4:	4b10      	ldr	r3, [pc, #64]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151b6:	2208      	movs	r2, #8
 80151b8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80151ba:	4b0f      	ldr	r3, [pc, #60]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151bc:	2200      	movs	r2, #0
 80151be:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80151c0:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151c2:	2200      	movs	r2, #0
 80151c4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80151c6:	4b0c      	ldr	r3, [pc, #48]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151c8:	2200      	movs	r2, #0
 80151ca:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80151cc:	4b0a      	ldr	r3, [pc, #40]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151ce:	2207      	movs	r2, #7
 80151d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80151d2:	4b09      	ldr	r3, [pc, #36]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151d4:	2200      	movs	r2, #0
 80151d6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80151d8:	4b07      	ldr	r3, [pc, #28]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151da:	2200      	movs	r2, #0
 80151dc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80151de:	4806      	ldr	r0, [pc, #24]	; (80151f8 <MX_SPI1_Init+0x78>)
 80151e0:	f7ee fa9c 	bl	800371c <HAL_SPI_Init>
 80151e4:	4603      	mov	r3, r0
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d003      	beq.n	80151f2 <MX_SPI1_Init+0x72>
  {
    _Error_Handler(__FILE__, __LINE__);
 80151ea:	2151      	movs	r1, #81	; 0x51
 80151ec:	4804      	ldr	r0, [pc, #16]	; (8015200 <MX_SPI1_Init+0x80>)
 80151ee:	f7fe fefd 	bl	8013fec <_Error_Handler>
  }

}
 80151f2:	bf00      	nop
 80151f4:	bd80      	pop	{r7, pc}
 80151f6:	bf00      	nop
 80151f8:	2000ab74 	.word	0x2000ab74
 80151fc:	40013000 	.word	0x40013000
 8015200:	0801a4a8 	.word	0x0801a4a8

08015204 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8015204:	b580      	push	{r7, lr}
 8015206:	b088      	sub	sp, #32
 8015208:	af00      	add	r7, sp, #0
 801520a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  if(spiHandle->Instance==SPI1)
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	681b      	ldr	r3, [r3, #0]
 8015210:	4a19      	ldr	r2, [pc, #100]	; (8015278 <HAL_SPI_MspInit+0x74>)
 8015212:	4293      	cmp	r3, r2
 8015214:	d12b      	bne.n	801526e <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8015216:	4a19      	ldr	r2, [pc, #100]	; (801527c <HAL_SPI_MspInit+0x78>)
 8015218:	4b18      	ldr	r3, [pc, #96]	; (801527c <HAL_SPI_MspInit+0x78>)
 801521a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801521c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8015220:	6453      	str	r3, [r2, #68]	; 0x44
 8015222:	4b16      	ldr	r3, [pc, #88]	; (801527c <HAL_SPI_MspInit+0x78>)
 8015224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015226:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 801522a:	60bb      	str	r3, [r7, #8]
 801522c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PD7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 801522e:	2360      	movs	r3, #96	; 0x60
 8015230:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015232:	2302      	movs	r3, #2
 8015234:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015236:	2300      	movs	r3, #0
 8015238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801523a:	2303      	movs	r3, #3
 801523c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801523e:	2305      	movs	r3, #5
 8015240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8015242:	f107 030c 	add.w	r3, r7, #12
 8015246:	4619      	mov	r1, r3
 8015248:	480d      	ldr	r0, [pc, #52]	; (8015280 <HAL_SPI_MspInit+0x7c>)
 801524a:	f7ed fbb7 	bl	80029bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 801524e:	2380      	movs	r3, #128	; 0x80
 8015250:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8015252:	2302      	movs	r3, #2
 8015254:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8015256:	2300      	movs	r3, #0
 8015258:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801525a:	2303      	movs	r3, #3
 801525c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 801525e:	2305      	movs	r3, #5
 8015260:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8015262:	f107 030c 	add.w	r3, r7, #12
 8015266:	4619      	mov	r1, r3
 8015268:	4806      	ldr	r0, [pc, #24]	; (8015284 <HAL_SPI_MspInit+0x80>)
 801526a:	f7ed fba7 	bl	80029bc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 801526e:	bf00      	nop
 8015270:	3720      	adds	r7, #32
 8015272:	46bd      	mov	sp, r7
 8015274:	bd80      	pop	{r7, pc}
 8015276:	bf00      	nop
 8015278:	40013000 	.word	0x40013000
 801527c:	40023800 	.word	0x40023800
 8015280:	40020000 	.word	0x40020000
 8015284:	40020c00 	.word	0x40020c00

08015288 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8015288:	b580      	push	{r7, lr}
 801528a:	b082      	sub	sp, #8
 801528c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 801528e:	4a24      	ldr	r2, [pc, #144]	; (8015320 <HAL_MspInit+0x98>)
 8015290:	4b23      	ldr	r3, [pc, #140]	; (8015320 <HAL_MspInit+0x98>)
 8015292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8015294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8015298:	6413      	str	r3, [r2, #64]	; 0x40
 801529a:	4b21      	ldr	r3, [pc, #132]	; (8015320 <HAL_MspInit+0x98>)
 801529c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801529e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80152a2:	607b      	str	r3, [r7, #4]
 80152a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80152a6:	4a1e      	ldr	r2, [pc, #120]	; (8015320 <HAL_MspInit+0x98>)
 80152a8:	4b1d      	ldr	r3, [pc, #116]	; (8015320 <HAL_MspInit+0x98>)
 80152aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80152b0:	6453      	str	r3, [r2, #68]	; 0x44
 80152b2:	4b1b      	ldr	r3, [pc, #108]	; (8015320 <HAL_MspInit+0x98>)
 80152b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80152b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80152ba:	603b      	str	r3, [r7, #0]
 80152bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80152be:	2003      	movs	r0, #3
 80152c0:	f7ec fb2e 	bl	8001920 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 80152c4:	2200      	movs	r2, #0
 80152c6:	2100      	movs	r1, #0
 80152c8:	f06f 000b 	mvn.w	r0, #11
 80152cc:	f7ec fb33 	bl	8001936 <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 80152d0:	2200      	movs	r2, #0
 80152d2:	2100      	movs	r1, #0
 80152d4:	f06f 000a 	mvn.w	r0, #10
 80152d8:	f7ec fb2d 	bl	8001936 <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 80152dc:	2200      	movs	r2, #0
 80152de:	2100      	movs	r1, #0
 80152e0:	f06f 0009 	mvn.w	r0, #9
 80152e4:	f7ec fb27 	bl	8001936 <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 80152e8:	2200      	movs	r2, #0
 80152ea:	2100      	movs	r1, #0
 80152ec:	f06f 0004 	mvn.w	r0, #4
 80152f0:	f7ec fb21 	bl	8001936 <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 80152f4:	2200      	movs	r2, #0
 80152f6:	2100      	movs	r1, #0
 80152f8:	f06f 0003 	mvn.w	r0, #3
 80152fc:	f7ec fb1b 	bl	8001936 <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8015300:	2200      	movs	r2, #0
 8015302:	210f      	movs	r1, #15
 8015304:	f06f 0001 	mvn.w	r0, #1
 8015308:	f7ec fb15 	bl	8001936 <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);
 801530c:	2200      	movs	r2, #0
 801530e:	210f      	movs	r1, #15
 8015310:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8015314:	f7ec fb0f 	bl	8001936 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8015318:	bf00      	nop
 801531a:	3708      	adds	r7, #8
 801531c:	46bd      	mov	sp, r7
 801531e:	bd80      	pop	{r7, pc}
 8015320:	40023800 	.word	0x40023800

08015324 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priorty.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b08c      	sub	sp, #48	; 0x30
 8015328:	af00      	add	r7, sp, #0
 801532a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801532c:	2300      	movs	r3, #0
 801532e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8015330:	2300      	movs	r3, #0
 8015332:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM1 IRQ priority */
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority ,0); 
 8015334:	2200      	movs	r2, #0
 8015336:	6879      	ldr	r1, [r7, #4]
 8015338:	2019      	movs	r0, #25
 801533a:	f7ec fafc 	bl	8001936 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM1 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); 
 801533e:	2019      	movs	r0, #25
 8015340:	f7ec fb15 	bl	800196e <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8015344:	4a1f      	ldr	r2, [pc, #124]	; (80153c4 <HAL_InitTick+0xa0>)
 8015346:	4b1f      	ldr	r3, [pc, #124]	; (80153c4 <HAL_InitTick+0xa0>)
 8015348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801534a:	f043 0301 	orr.w	r3, r3, #1
 801534e:	6453      	str	r3, [r2, #68]	; 0x44
 8015350:	4b1c      	ldr	r3, [pc, #112]	; (80153c4 <HAL_InitTick+0xa0>)
 8015352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015354:	f003 0301 	and.w	r3, r3, #1
 8015358:	60fb      	str	r3, [r7, #12]
 801535a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801535c:	f107 0210 	add.w	r2, r7, #16
 8015360:	f107 0314 	add.w	r3, r7, #20
 8015364:	4611      	mov	r1, r2
 8015366:	4618      	mov	r0, r3
 8015368:	f7ee f9a6 	bl	80036b8 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM1 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 801536c:	f7ee f990 	bl	8003690 <HAL_RCC_GetPCLK2Freq>
 8015370:	4603      	mov	r3, r0
 8015372:	005b      	lsls	r3, r3, #1
 8015374:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8015376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015378:	4a13      	ldr	r2, [pc, #76]	; (80153c8 <HAL_InitTick+0xa4>)
 801537a:	fba2 2303 	umull	r2, r3, r2, r3
 801537e:	0c9b      	lsrs	r3, r3, #18
 8015380:	3b01      	subs	r3, #1
 8015382:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8015384:	4b11      	ldr	r3, [pc, #68]	; (80153cc <HAL_InitTick+0xa8>)
 8015386:	4a12      	ldr	r2, [pc, #72]	; (80153d0 <HAL_InitTick+0xac>)
 8015388:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000 / 1000) - 1;
 801538a:	4b10      	ldr	r3, [pc, #64]	; (80153cc <HAL_InitTick+0xa8>)
 801538c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8015390:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8015392:	4a0e      	ldr	r2, [pc, #56]	; (80153cc <HAL_InitTick+0xa8>)
 8015394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015396:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8015398:	4b0c      	ldr	r3, [pc, #48]	; (80153cc <HAL_InitTick+0xa8>)
 801539a:	2200      	movs	r2, #0
 801539c:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 801539e:	4b0b      	ldr	r3, [pc, #44]	; (80153cc <HAL_InitTick+0xa8>)
 80153a0:	2200      	movs	r2, #0
 80153a2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim1) == HAL_OK)
 80153a4:	4809      	ldr	r0, [pc, #36]	; (80153cc <HAL_InitTick+0xa8>)
 80153a6:	f7ee fc72 	bl	8003c8e <HAL_TIM_Base_Init>
 80153aa:	4603      	mov	r3, r0
 80153ac:	2b00      	cmp	r3, #0
 80153ae:	d104      	bne.n	80153ba <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim1);
 80153b0:	4806      	ldr	r0, [pc, #24]	; (80153cc <HAL_InitTick+0xa8>)
 80153b2:	f7ee fca1 	bl	8003cf8 <HAL_TIM_Base_Start_IT>
 80153b6:	4603      	mov	r3, r0
 80153b8:	e000      	b.n	80153bc <HAL_InitTick+0x98>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80153ba:	2301      	movs	r3, #1
}
 80153bc:	4618      	mov	r0, r3
 80153be:	3730      	adds	r7, #48	; 0x30
 80153c0:	46bd      	mov	sp, r7
 80153c2:	bd80      	pop	{r7, pc}
 80153c4:	40023800 	.word	0x40023800
 80153c8:	431bde83 	.word	0x431bde83
 80153cc:	2000abd8 	.word	0x2000abd8
 80153d0:	40010000 	.word	0x40010000

080153d4 <NMI_Handler>:

/**
* @brief This function handles Non maskable interrupt.
*/
void NMI_Handler(void)
{
 80153d4:	b480      	push	{r7}
 80153d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80153d8:	bf00      	nop
 80153da:	46bd      	mov	sp, r7
 80153dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e0:	4770      	bx	lr

080153e2 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 80153e2:	b480      	push	{r7}
 80153e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80153e6:	e7fe      	b.n	80153e6 <HardFault_Handler+0x4>

080153e8 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 80153e8:	b480      	push	{r7}
 80153ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80153ec:	e7fe      	b.n	80153ec <MemManage_Handler+0x4>

080153ee <BusFault_Handler>:

/**
* @brief This function handles Pre-fetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 80153ee:	b480      	push	{r7}
 80153f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80153f2:	e7fe      	b.n	80153f2 <BusFault_Handler+0x4>

080153f4 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 80153f4:	b480      	push	{r7}
 80153f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80153f8:	e7fe      	b.n	80153f8 <UsageFault_Handler+0x4>

080153fa <DebugMon_Handler>:

/**
* @brief This function handles Debug monitor.
*/
void DebugMon_Handler(void)
{
 80153fa:	b480      	push	{r7}
 80153fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80153fe:	bf00      	nop
 8015400:	46bd      	mov	sp, r7
 8015402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015406:	4770      	bx	lr

08015408 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8015408:	b580      	push	{r7, lr}
 801540a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  osSystickHandler();
 801540c:	f7ef f940 	bl	8004690 <osSystickHandler>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8015410:	bf00      	nop
 8015412:	bd80      	pop	{r7, pc}

08015414 <TIM1_UP_TIM10_IRQHandler>:

/**
* @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
*/
void TIM1_UP_TIM10_IRQHandler(void)
{
 8015414:	b580      	push	{r7, lr}
 8015416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8015418:	4802      	ldr	r0, [pc, #8]	; (8015424 <TIM1_UP_TIM10_IRQHandler+0x10>)
 801541a:	f7ee fc88 	bl	8003d2e <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 801541e:	bf00      	nop
 8015420:	bd80      	pop	{r7, pc}
 8015422:	bf00      	nop
 8015424:	2000abd8 	.word	0x2000abd8

08015428 <ETH_IRQHandler>:

/**
* @brief This function handles Ethernet global interrupt.
*/
void ETH_IRQHandler(void)
{
 8015428:	b580      	push	{r7, lr}
 801542a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 801542c:	4802      	ldr	r0, [pc, #8]	; (8015438 <ETH_IRQHandler+0x10>)
 801542e:	f7ec feb9 	bl	80021a4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8015432:	bf00      	nop
 8015434:	bd80      	pop	{r7, pc}
 8015436:	bf00      	nop
 8015438:	20009270 	.word	0x20009270

0801543c <_sbrk>:

/* USER CODE END 2 */

/* USER CODE BEGIN 3 */
caddr_t _sbrk(int incr)
{
 801543c:	b480      	push	{r7}
 801543e:	b085      	sub	sp, #20
 8015440:	af00      	add	r7, sp, #0
 8015442:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end,*min_stack_ptr;

	if (heap_end == 0)
 8015444:	4b15      	ldr	r3, [pc, #84]	; (801549c <_sbrk+0x60>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d102      	bne.n	8015452 <_sbrk+0x16>
		heap_end = &end;
 801544c:	4b13      	ldr	r3, [pc, #76]	; (801549c <_sbrk+0x60>)
 801544e:	4a14      	ldr	r2, [pc, #80]	; (80154a0 <_sbrk+0x64>)
 8015450:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8015452:	4b12      	ldr	r3, [pc, #72]	; (801549c <_sbrk+0x60>)
 8015454:	681b      	ldr	r3, [r3, #0]
 8015456:	60fb      	str	r3, [r7, #12]

	/* Use the NVIC offset register to locate the main stack pointer. */
	min_stack_ptr = (char*)(*(unsigned int *)*(unsigned int *)0xE000ED08);
 8015458:	4b12      	ldr	r3, [pc, #72]	; (80154a4 <_sbrk+0x68>)
 801545a:	681b      	ldr	r3, [r3, #0]
 801545c:	681b      	ldr	r3, [r3, #0]
 801545e:	60bb      	str	r3, [r7, #8]
	/* Locate the STACK bottom address */
	min_stack_ptr -= MAX_STACK_SIZE;
 8015460:	68bb      	ldr	r3, [r7, #8]
 8015462:	f5a3 5300 	sub.w	r3, r3, #8192	; 0x2000
 8015466:	60bb      	str	r3, [r7, #8]

	if (heap_end + incr > min_stack_ptr)
 8015468:	4b0c      	ldr	r3, [pc, #48]	; (801549c <_sbrk+0x60>)
 801546a:	681a      	ldr	r2, [r3, #0]
 801546c:	687b      	ldr	r3, [r7, #4]
 801546e:	441a      	add	r2, r3
 8015470:	68bb      	ldr	r3, [r7, #8]
 8015472:	429a      	cmp	r2, r3
 8015474:	d905      	bls.n	8015482 <_sbrk+0x46>
	{
		errno = ENOMEM;
 8015476:	4b0c      	ldr	r3, [pc, #48]	; (80154a8 <_sbrk+0x6c>)
 8015478:	220c      	movs	r2, #12
 801547a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 801547c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015480:	e006      	b.n	8015490 <_sbrk+0x54>
	}

	heap_end += incr;
 8015482:	4b06      	ldr	r3, [pc, #24]	; (801549c <_sbrk+0x60>)
 8015484:	681a      	ldr	r2, [r3, #0]
 8015486:	687b      	ldr	r3, [r7, #4]
 8015488:	4413      	add	r3, r2
 801548a:	4a04      	ldr	r2, [pc, #16]	; (801549c <_sbrk+0x60>)
 801548c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 801548e:	68fb      	ldr	r3, [r7, #12]
}
 8015490:	4618      	mov	r0, r3
 8015492:	3714      	adds	r7, #20
 8015494:	46bd      	mov	sp, r7
 8015496:	f85d 7b04 	ldr.w	r7, [sp], #4
 801549a:	4770      	bx	lr
 801549c:	20004190 	.word	0x20004190
 80154a0:	2000ac20 	.word	0x2000ac20
 80154a4:	e000ed08 	.word	0xe000ed08
 80154a8:	20007950 	.word	0x20007950

080154ac <_write>:
	_kill(status, -1);
	while (1) {}
}

int _write(int file, char *ptr, int len)
{
 80154ac:	b580      	push	{r7, lr}
 80154ae:	b086      	sub	sp, #24
 80154b0:	af00      	add	r7, sp, #0
 80154b2:	60f8      	str	r0, [r7, #12]
 80154b4:	60b9      	str	r1, [r7, #8]
 80154b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80154b8:	2300      	movs	r3, #0
 80154ba:	617b      	str	r3, [r7, #20]
 80154bc:	e009      	b.n	80154d2 <_write+0x26>
	{
	   __io_putchar( *ptr++ );
 80154be:	68bb      	ldr	r3, [r7, #8]
 80154c0:	1c5a      	adds	r2, r3, #1
 80154c2:	60ba      	str	r2, [r7, #8]
 80154c4:	781b      	ldrb	r3, [r3, #0]
 80154c6:	4618      	mov	r0, r3
 80154c8:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80154cc:	697b      	ldr	r3, [r7, #20]
 80154ce:	3301      	adds	r3, #1
 80154d0:	617b      	str	r3, [r7, #20]
 80154d2:	697a      	ldr	r2, [r7, #20]
 80154d4:	687b      	ldr	r3, [r7, #4]
 80154d6:	429a      	cmp	r2, r3
 80154d8:	dbf1      	blt.n	80154be <_write+0x12>
	}
	return len;
 80154da:	687b      	ldr	r3, [r7, #4]
}
 80154dc:	4618      	mov	r0, r3
 80154de:	3718      	adds	r7, #24
 80154e0:	46bd      	mov	sp, r7
 80154e2:	bd80      	pop	{r7, pc}

080154e4 <_close>:

int _close(int file)
{
 80154e4:	b480      	push	{r7}
 80154e6:	b083      	sub	sp, #12
 80154e8:	af00      	add	r7, sp, #0
 80154ea:	6078      	str	r0, [r7, #4]
	return -1;
 80154ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	370c      	adds	r7, #12
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr

080154fc <_fstat>:

int _fstat(int file, struct stat *st)
{
 80154fc:	b480      	push	{r7}
 80154fe:	b083      	sub	sp, #12
 8015500:	af00      	add	r7, sp, #0
 8015502:	6078      	str	r0, [r7, #4]
 8015504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8015506:	683b      	ldr	r3, [r7, #0]
 8015508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 801550c:	605a      	str	r2, [r3, #4]
	return 0;
 801550e:	2300      	movs	r3, #0
}
 8015510:	4618      	mov	r0, r3
 8015512:	370c      	adds	r7, #12
 8015514:	46bd      	mov	sp, r7
 8015516:	f85d 7b04 	ldr.w	r7, [sp], #4
 801551a:	4770      	bx	lr

0801551c <_isatty>:

int _isatty(int file)
{
 801551c:	b480      	push	{r7}
 801551e:	b083      	sub	sp, #12
 8015520:	af00      	add	r7, sp, #0
 8015522:	6078      	str	r0, [r7, #4]
	return 1;
 8015524:	2301      	movs	r3, #1
}
 8015526:	4618      	mov	r0, r3
 8015528:	370c      	adds	r7, #12
 801552a:	46bd      	mov	sp, r7
 801552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015530:	4770      	bx	lr

08015532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8015532:	b480      	push	{r7}
 8015534:	b085      	sub	sp, #20
 8015536:	af00      	add	r7, sp, #0
 8015538:	60f8      	str	r0, [r7, #12]
 801553a:	60b9      	str	r1, [r7, #8]
 801553c:	607a      	str	r2, [r7, #4]
	return 0;
 801553e:	2300      	movs	r3, #0
}
 8015540:	4618      	mov	r0, r3
 8015542:	3714      	adds	r7, #20
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr

0801554c <_read>:

int _read(int file, char *ptr, int len)
{
 801554c:	b590      	push	{r4, r7, lr}
 801554e:	b087      	sub	sp, #28
 8015550:	af00      	add	r7, sp, #0
 8015552:	60f8      	str	r0, [r7, #12]
 8015554:	60b9      	str	r1, [r7, #8]
 8015556:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8015558:	2300      	movs	r3, #0
 801555a:	617b      	str	r3, [r7, #20]
 801555c:	e00a      	b.n	8015574 <_read+0x28>
	{
	  *ptr++ = __io_getchar();
 801555e:	68bc      	ldr	r4, [r7, #8]
 8015560:	1c63      	adds	r3, r4, #1
 8015562:	60bb      	str	r3, [r7, #8]
 8015564:	f3af 8000 	nop.w
 8015568:	4603      	mov	r3, r0
 801556a:	b2db      	uxtb	r3, r3
 801556c:	7023      	strb	r3, [r4, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	3301      	adds	r3, #1
 8015572:	617b      	str	r3, [r7, #20]
 8015574:	697a      	ldr	r2, [r7, #20]
 8015576:	687b      	ldr	r3, [r7, #4]
 8015578:	429a      	cmp	r2, r3
 801557a:	dbf0      	blt.n	801555e <_read+0x12>
	}

   return len;
 801557c:	687b      	ldr	r3, [r7, #4]
}
 801557e:	4618      	mov	r0, r3
 8015580:	371c      	adds	r7, #28
 8015582:	46bd      	mov	sp, r7
 8015584:	bd90      	pop	{r4, r7, pc}
	...

08015588 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8015588:	b480      	push	{r7}
 801558a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 801558c:	4a15      	ldr	r2, [pc, #84]	; (80155e4 <SystemInit+0x5c>)
 801558e:	4b15      	ldr	r3, [pc, #84]	; (80155e4 <SystemInit+0x5c>)
 8015590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015594:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8015598:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 801559c:	4a12      	ldr	r2, [pc, #72]	; (80155e8 <SystemInit+0x60>)
 801559e:	4b12      	ldr	r3, [pc, #72]	; (80155e8 <SystemInit+0x60>)
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f043 0301 	orr.w	r3, r3, #1
 80155a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80155a8:	4b0f      	ldr	r3, [pc, #60]	; (80155e8 <SystemInit+0x60>)
 80155aa:	2200      	movs	r2, #0
 80155ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80155ae:	490e      	ldr	r1, [pc, #56]	; (80155e8 <SystemInit+0x60>)
 80155b0:	4b0d      	ldr	r3, [pc, #52]	; (80155e8 <SystemInit+0x60>)
 80155b2:	681a      	ldr	r2, [r3, #0]
 80155b4:	4b0d      	ldr	r3, [pc, #52]	; (80155ec <SystemInit+0x64>)
 80155b6:	4013      	ands	r3, r2
 80155b8:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 80155ba:	4b0b      	ldr	r3, [pc, #44]	; (80155e8 <SystemInit+0x60>)
 80155bc:	4a0c      	ldr	r2, [pc, #48]	; (80155f0 <SystemInit+0x68>)
 80155be:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80155c0:	4a09      	ldr	r2, [pc, #36]	; (80155e8 <SystemInit+0x60>)
 80155c2:	4b09      	ldr	r3, [pc, #36]	; (80155e8 <SystemInit+0x60>)
 80155c4:	681b      	ldr	r3, [r3, #0]
 80155c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80155ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80155cc:	4b06      	ldr	r3, [pc, #24]	; (80155e8 <SystemInit+0x60>)
 80155ce:	2200      	movs	r2, #0
 80155d0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80155d2:	4b04      	ldr	r3, [pc, #16]	; (80155e4 <SystemInit+0x5c>)
 80155d4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80155d8:	609a      	str	r2, [r3, #8]
#endif
}
 80155da:	bf00      	nop
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr
 80155e4:	e000ed00 	.word	0xe000ed00
 80155e8:	40023800 	.word	0x40023800
 80155ec:	fef6ffff 	.word	0xfef6ffff
 80155f0:	24003010 	.word	0x24003010

080155f4 <NVIC_SystemReset>:
{
 80155f4:	b480      	push	{r7}
 80155f6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80155f8:	f3bf 8f4f 	dsb	sy
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80155fc:	4905      	ldr	r1, [pc, #20]	; (8015614 <NVIC_SystemReset+0x20>)
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80155fe:	4b05      	ldr	r3, [pc, #20]	; (8015614 <NVIC_SystemReset+0x20>)
 8015600:	68db      	ldr	r3, [r3, #12]
 8015602:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8015606:	4b04      	ldr	r3, [pc, #16]	; (8015618 <NVIC_SystemReset+0x24>)
 8015608:	4313      	orrs	r3, r2
 801560a:	60cb      	str	r3, [r1, #12]
 801560c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
 8015610:	bf00      	nop
    __NOP();
 8015612:	e7fd      	b.n	8015610 <NVIC_SystemReset+0x1c>
 8015614:	e000ed00 	.word	0xe000ed00
 8015618:	05fa0004 	.word	0x05fa0004

0801561c <tcp_server>:
osSemaphoreId write_sem;
uint8_t write = 1;

uint32_t lastSend = 0;

void tcp_server(void const * argument) {
 801561c:	b580      	push	{r7, lr}
 801561e:	b084      	sub	sp, #16
 8015620:	af00      	add	r7, sp, #0
 8015622:	6078      	str	r0, [r7, #4]
	struct netconn *conn;
	err_t err, accept_err;

	/* Create a new TCP connection handle */
	conn = netconn_new(NETCONN_TCP);
 8015624:	2200      	movs	r2, #0
 8015626:	2100      	movs	r1, #0
 8015628:	2010      	movs	r0, #16
 801562a:	f7f1 fb0d 	bl	8006c48 <netconn_new_with_proto_and_callback>
 801562e:	60f8      	str	r0, [r7, #12]

	if (conn == NULL) {
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	2b00      	cmp	r3, #0
 8015634:	d101      	bne.n	801563a <tcp_server+0x1e>
		NVIC_SystemReset();
 8015636:	f7ff ffdd 	bl	80155f4 <NVIC_SystemReset>
	}
	/* Bind to port 80 (HTTP) with default IP address */
	err = netconn_bind(conn, NULL, 8000);
 801563a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 801563e:	2100      	movs	r1, #0
 8015640:	68f8      	ldr	r0, [r7, #12]
 8015642:	f7f1 fba1 	bl	8006d88 <netconn_bind>
 8015646:	4603      	mov	r3, r0
 8015648:	72fb      	strb	r3, [r7, #11]

	if (err != ERR_OK) {
 801564a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801564e:	2b00      	cmp	r3, #0
 8015650:	d001      	beq.n	8015656 <tcp_server+0x3a>
		NVIC_SystemReset();
 8015652:	f7ff ffcf 	bl	80155f4 <NVIC_SystemReset>
	}
	/* Put the connection into LISTEN state */
	netconn_listen(conn);
 8015656:	21ff      	movs	r1, #255	; 0xff
 8015658:	68f8      	ldr	r0, [r7, #12]
 801565a:	f7f1 fbcd 	bl	8006df8 <netconn_listen_with_backlog>
	while (1) {
		/* accept any incoming connection */
		err = netconn_err(conn);
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	7a1b      	ldrb	r3, [r3, #8]
 8015662:	72fb      	strb	r3, [r7, #11]
		if (err != ERR_OK) {
 8015664:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8015668:	2b00      	cmp	r3, #0
 801566a:	d001      	beq.n	8015670 <tcp_server+0x54>
			NVIC_SystemReset();
 801566c:	f7ff ffc2 	bl	80155f4 <NVIC_SystemReset>
		}
		accept_err = netconn_accept(conn, &connection);
 8015670:	4909      	ldr	r1, [pc, #36]	; (8015698 <tcp_server+0x7c>)
 8015672:	68f8      	ldr	r0, [r7, #12]
 8015674:	f7f1 fbec 	bl	8006e50 <netconn_accept>
 8015678:	4603      	mov	r3, r0
 801567a:	72bb      	strb	r3, [r7, #10]
		if (accept_err == ERR_OK) {
 801567c:	f997 300a 	ldrsb.w	r3, [r7, #10]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d106      	bne.n	8015692 <tcp_server+0x76>
			conn_handler();
 8015684:	f000 f80a 	bl	801569c <conn_handler>
			stop_mode();
 8015688:	f7fe fd68 	bl	801415c <stop_mode>
			NVIC_SystemReset();
 801568c:	f7ff ffb2 	bl	80155f4 <NVIC_SystemReset>
 8015690:	e7e5      	b.n	801565e <tcp_server+0x42>
		} else {
			NVIC_SystemReset();
 8015692:	f7ff ffaf 	bl	80155f4 <NVIC_SystemReset>
		err = netconn_err(conn);
 8015696:	e7e2      	b.n	801565e <tcp_server+0x42>
 8015698:	2000ac1c 	.word	0x2000ac1c

0801569c <conn_handler>:

	NVIC_SystemReset();
	osThreadTerminate(NULL);
}

void conn_handler() {
 801569c:	b580      	push	{r7, lr}
 801569e:	b088      	sub	sp, #32
 80156a0:	af00      	add	r7, sp, #0
	char* buf;
	uint16_t buflen;
	uint16_t pointer;
	tcp_header_t header;

	tcp_nagle_disable(connection->pcb.tcp);
 80156a2:	4b3d      	ldr	r3, [pc, #244]	; (8015798 <conn_handler+0xfc>)
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	685b      	ldr	r3, [r3, #4]
 80156a8:	4a3b      	ldr	r2, [pc, #236]	; (8015798 <conn_handler+0xfc>)
 80156aa:	6812      	ldr	r2, [r2, #0]
 80156ac:	6852      	ldr	r2, [r2, #4]
 80156ae:	7e92      	ldrb	r2, [r2, #26]
 80156b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80156b4:	b2d2      	uxtb	r2, r2
 80156b6:	769a      	strb	r2, [r3, #26]
	connection->recv_timeout = 1000;
 80156b8:	4b37      	ldr	r3, [pc, #220]	; (8015798 <conn_handler+0xfc>)
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80156c0:	61da      	str	r2, [r3, #28]

	while (1) {
		conn_err = netconn_err(connection);
 80156c2:	4b35      	ldr	r3, [pc, #212]	; (8015798 <conn_handler+0xfc>)
 80156c4:	681b      	ldr	r3, [r3, #0]
 80156c6:	7a1b      	ldrb	r3, [r3, #8]
 80156c8:	777b      	strb	r3, [r7, #29]
		if (conn_err != ERR_OK) {
 80156ca:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d14d      	bne.n	801576e <conn_handler+0xd2>
			break;
		}

		recv_err = netconn_recv(connection, &inbuf);
 80156d2:	4b31      	ldr	r3, [pc, #196]	; (8015798 <conn_handler+0xfc>)
 80156d4:	681b      	ldr	r3, [r3, #0]
 80156d6:	f107 0214 	add.w	r2, r7, #20
 80156da:	4611      	mov	r1, r2
 80156dc:	4618      	mov	r0, r3
 80156de:	f7f1 fd19 	bl	8007114 <netconn_recv>
 80156e2:	4603      	mov	r3, r0
 80156e4:	773b      	strb	r3, [r7, #28]
		if (recv_err != ERR_OK) {
 80156e6:	f997 301c 	ldrsb.w	r3, [r7, #28]
 80156ea:	2b00      	cmp	r3, #0
 80156ec:	d141      	bne.n	8015772 <conn_handler+0xd6>
			break;
		}

		netbuf_data(inbuf, (void**) &buf, &buflen);
 80156ee:	697b      	ldr	r3, [r7, #20]
 80156f0:	f107 020e 	add.w	r2, r7, #14
 80156f4:	f107 0110 	add.w	r1, r7, #16
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7f3 fa97 	bl	8008c2c <netbuf_data>

		pointer = 0;
 80156fe:	2300      	movs	r3, #0
 8015700:	83fb      	strh	r3, [r7, #30]

		while (pointer < buflen) {
 8015702:	e029      	b.n	8015758 <conn_handler+0xbc>
			memcpy(&header, buf, sizeof(tcp_header_t));
 8015704:	6939      	ldr	r1, [r7, #16]
 8015706:	1d3b      	adds	r3, r7, #4
 8015708:	2208      	movs	r2, #8
 801570a:	4618      	mov	r0, r3
 801570c:	f000 fb4f 	bl	8015dae <memcpy>
			if (magicNumber == header.magic) {
 8015710:	88bb      	ldrh	r3, [r7, #4]
 8015712:	f644 5249 	movw	r2, #19785	; 0x4d49
 8015716:	4293      	cmp	r3, r2
 8015718:	d11c      	bne.n	8015754 <conn_handler+0xb8>
				uint16_t maskRecv = header.length + magicNumber;
 801571a:	88fb      	ldrh	r3, [r7, #6]
 801571c:	f644 5249 	movw	r2, #19785	; 0x4d49
 8015720:	4413      	add	r3, r2
 8015722:	837b      	strh	r3, [r7, #26]
				maskRecv &= recvMagicMask;
 8015724:	f245 2249 	movw	r2, #21065	; 0x5249
 8015728:	8b7b      	ldrh	r3, [r7, #26]
 801572a:	4013      	ands	r3, r2
 801572c:	837b      	strh	r3, [r7, #26]
				if (maskRecv == header.mask) {
 801572e:	893b      	ldrh	r3, [r7, #8]
 8015730:	8b7a      	ldrh	r2, [r7, #26]
 8015732:	429a      	cmp	r2, r3
 8015734:	d10e      	bne.n	8015754 <conn_handler+0xb8>
					pointer += sizeof(tcp_header_t) + recv_commands[(uint16_t) header.command](&buf[sizeof(tcp_header_t)]);
 8015736:	897b      	ldrh	r3, [r7, #10]
 8015738:	461a      	mov	r2, r3
 801573a:	4b18      	ldr	r3, [pc, #96]	; (801579c <conn_handler+0x100>)
 801573c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015740:	693a      	ldr	r2, [r7, #16]
 8015742:	3208      	adds	r2, #8
 8015744:	4610      	mov	r0, r2
 8015746:	4798      	blx	r3
 8015748:	4603      	mov	r3, r0
 801574a:	3308      	adds	r3, #8
 801574c:	b29a      	uxth	r2, r3
 801574e:	8bfb      	ldrh	r3, [r7, #30]
 8015750:	4413      	add	r3, r2
 8015752:	83fb      	strh	r3, [r7, #30]
				}
			}
			send_ack();
 8015754:	f000 f8a8 	bl	80158a8 <send_ack>
		while (pointer < buflen) {
 8015758:	89fb      	ldrh	r3, [r7, #14]
 801575a:	8bfa      	ldrh	r2, [r7, #30]
 801575c:	429a      	cmp	r2, r3
 801575e:	d3d1      	bcc.n	8015704 <conn_handler+0x68>
		}
		netbuf_delete(inbuf);
 8015760:	697b      	ldr	r3, [r7, #20]
 8015762:	4618      	mov	r0, r3
 8015764:	f7f3 fa42 	bl	8008bec <netbuf_delete>

		send_keep_alive();
 8015768:	f000 f88e 	bl	8015888 <send_keep_alive>
		conn_err = netconn_err(connection);
 801576c:	e7a9      	b.n	80156c2 <conn_handler+0x26>
			break;
 801576e:	bf00      	nop
 8015770:	e000      	b.n	8015774 <conn_handler+0xd8>
			break;
 8015772:	bf00      	nop

		//osDelay(1);

	}
	/* Close the connection (server closes in HTTP) */
	netconn_close(connection);
 8015774:	4b08      	ldr	r3, [pc, #32]	; (8015798 <conn_handler+0xfc>)
 8015776:	681b      	ldr	r3, [r3, #0]
 8015778:	4618      	mov	r0, r3
 801577a:	f7f1 fdeb 	bl	8007354 <netconn_close>
	netconn_delete(connection);
 801577e:	4b06      	ldr	r3, [pc, #24]	; (8015798 <conn_handler+0xfc>)
 8015780:	681b      	ldr	r3, [r3, #0]
 8015782:	4618      	mov	r0, r3
 8015784:	f7f1 fada 	bl	8006d3c <netconn_delete>

	/* Delete the buffer (netconn_recv gives us ownership,
	 so we have to make sure to deallocate the buffer) */
	netbuf_delete(inbuf);
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	4618      	mov	r0, r3
 801578c:	f7f3 fa2e 	bl	8008bec <netbuf_delete>
}
 8015790:	bf00      	nop
 8015792:	3720      	adds	r7, #32
 8015794:	46bd      	mov	sp, r7
 8015796:	bd80      	pop	{r7, pc}
 8015798:	2000ac1c 	.word	0x2000ac1c
 801579c:	2000011c 	.word	0x2000011c

080157a0 <send_packet>:
			netconn_write(connection, &buf, 11, NETCONN_NOCOPY);
		}
	}
}

void send_packet(void *data, uint32_t len, send_commands_t command) {
 80157a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157a4:	b08d      	sub	sp, #52	; 0x34
 80157a6:	af02      	add	r7, sp, #8
 80157a8:	60f8      	str	r0, [r7, #12]
 80157aa:	60b9      	str	r1, [r7, #8]
 80157ac:	80fa      	strh	r2, [r7, #6]
 80157ae:	466a      	mov	r2, sp
 80157b0:	4691      	mov	r9, r2
	char buf[sizeof(tcp_header_t) + len];
 80157b2:	68ba      	ldr	r2, [r7, #8]
 80157b4:	f102 0808 	add.w	r8, r2, #8
 80157b8:	4642      	mov	r2, r8
 80157ba:	3a01      	subs	r2, #1
 80157bc:	627a      	str	r2, [r7, #36]	; 0x24
 80157be:	4641      	mov	r1, r8
 80157c0:	f04f 0200 	mov.w	r2, #0
 80157c4:	00d6      	lsls	r6, r2, #3
 80157c6:	ea46 7651 	orr.w	r6, r6, r1, lsr #29
 80157ca:	00cd      	lsls	r5, r1, #3
 80157cc:	4641      	mov	r1, r8
 80157ce:	f04f 0200 	mov.w	r2, #0
 80157d2:	00d4      	lsls	r4, r2, #3
 80157d4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80157d8:	00cb      	lsls	r3, r1, #3
 80157da:	f108 0307 	add.w	r3, r8, #7
 80157de:	08db      	lsrs	r3, r3, #3
 80157e0:	00db      	lsls	r3, r3, #3
 80157e2:	ebad 0d03 	sub.w	sp, sp, r3
 80157e6:	ab02      	add	r3, sp, #8
 80157e8:	3300      	adds	r3, #0
 80157ea:	623b      	str	r3, [r7, #32]
	uint16_t mask = magicNumber;
 80157ec:	f644 5349 	movw	r3, #19785	; 0x4d49
 80157f0:	83fb      	strh	r3, [r7, #30]
	mask += len;
 80157f2:	68bb      	ldr	r3, [r7, #8]
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	8bfb      	ldrh	r3, [r7, #30]
 80157f8:	4413      	add	r3, r2
 80157fa:	83fb      	strh	r3, [r7, #30]
	mask &= sendMagicMask;
 80157fc:	f244 124d 	movw	r2, #16717	; 0x414d
 8015800:	8bfb      	ldrh	r3, [r7, #30]
 8015802:	4013      	ands	r3, r2
 8015804:	83fb      	strh	r3, [r7, #30]
	tcp_header_t header = { magicNumber, len, (len + magicNumber) & sendMagicMask, command };
 8015806:	f644 5349 	movw	r3, #19785	; 0x4d49
 801580a:	82bb      	strh	r3, [r7, #20]
 801580c:	68bb      	ldr	r3, [r7, #8]
 801580e:	b29b      	uxth	r3, r3
 8015810:	82fb      	strh	r3, [r7, #22]
 8015812:	68bb      	ldr	r3, [r7, #8]
 8015814:	b29b      	uxth	r3, r3
 8015816:	f644 5249 	movw	r2, #19785	; 0x4d49
 801581a:	4413      	add	r3, r2
 801581c:	b29b      	uxth	r3, r3
 801581e:	f244 124d 	movw	r2, #16717	; 0x414d
 8015822:	4013      	ands	r3, r2
 8015824:	b29b      	uxth	r3, r3
 8015826:	833b      	strh	r3, [r7, #24]
 8015828:	88fb      	ldrh	r3, [r7, #6]
 801582a:	837b      	strh	r3, [r7, #26]

	err_t err = netconn_err(connection);
 801582c:	4b15      	ldr	r3, [pc, #84]	; (8015884 <send_packet+0xe4>)
 801582e:	681b      	ldr	r3, [r3, #0]
 8015830:	7a1b      	ldrb	r3, [r3, #8]
 8015832:	777b      	strb	r3, [r7, #29]
	if (err == ERR_OK) {
 8015834:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8015838:	2b00      	cmp	r3, #0
 801583a:	d117      	bne.n	801586c <send_packet+0xcc>
		memcpy(&buf[0], &header, sizeof(tcp_header_t));
 801583c:	6a3b      	ldr	r3, [r7, #32]
 801583e:	f107 0114 	add.w	r1, r7, #20
 8015842:	2208      	movs	r2, #8
 8015844:	4618      	mov	r0, r3
 8015846:	f000 fab2 	bl	8015dae <memcpy>
		memcpy(&buf[sizeof(tcp_header_t)], data, len);
 801584a:	6a3b      	ldr	r3, [r7, #32]
 801584c:	3308      	adds	r3, #8
 801584e:	68ba      	ldr	r2, [r7, #8]
 8015850:	68f9      	ldr	r1, [r7, #12]
 8015852:	4618      	mov	r0, r3
 8015854:	f000 faab 	bl	8015dae <memcpy>
		netconn_write(connection, &buf, sizeof(buf), NETCONN_COPY);
 8015858:	4b0a      	ldr	r3, [pc, #40]	; (8015884 <send_packet+0xe4>)
 801585a:	6818      	ldr	r0, [r3, #0]
 801585c:	6a39      	ldr	r1, [r7, #32]
 801585e:	2300      	movs	r3, #0
 8015860:	9300      	str	r3, [sp, #0]
 8015862:	2301      	movs	r3, #1
 8015864:	4642      	mov	r2, r8
 8015866:	f7f1 fccd 	bl	8007204 <netconn_write_partly>
 801586a:	e004      	b.n	8015876 <send_packet+0xd6>
	} else {
		uint8_t hola = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	773b      	strb	r3, [r7, #28]
		hola++;
 8015870:	7f3b      	ldrb	r3, [r7, #28]
 8015872:	3301      	adds	r3, #1
 8015874:	773b      	strb	r3, [r7, #28]
 8015876:	46cd      	mov	sp, r9
	}
}
 8015878:	bf00      	nop
 801587a:	372c      	adds	r7, #44	; 0x2c
 801587c:	46bd      	mov	sp, r7
 801587e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015882:	bf00      	nop
 8015884:	2000ac1c 	.word	0x2000ac1c

08015888 <send_keep_alive>:

void send_keep_alive() {
 8015888:	b580      	push	{r7, lr}
 801588a:	b082      	sub	sp, #8
 801588c:	af00      	add	r7, sp, #0
	uint8_t buf = 0;
 801588e:	2300      	movs	r3, #0
 8015890:	71fb      	strb	r3, [r7, #7]
	send_packet(&buf, sizeof(buf), CMD_KEEPALIVE);
 8015892:	1dfb      	adds	r3, r7, #7
 8015894:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8015898:	2101      	movs	r1, #1
 801589a:	4618      	mov	r0, r3
 801589c:	f7ff ff80 	bl	80157a0 <send_packet>
}
 80158a0:	bf00      	nop
 80158a2:	3708      	adds	r7, #8
 80158a4:	46bd      	mov	sp, r7
 80158a6:	bd80      	pop	{r7, pc}

080158a8 <send_ack>:

void send_ack() {
 80158a8:	b580      	push	{r7, lr}
 80158aa:	b082      	sub	sp, #8
 80158ac:	af00      	add	r7, sp, #0
	uint8_t buf = 0;
 80158ae:	2300      	movs	r3, #0
 80158b0:	71fb      	strb	r3, [r7, #7]
	send_packet(&buf, sizeof(buf), CMD_ACK);
 80158b2:	1dfb      	adds	r3, r7, #7
 80158b4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80158b8:	2101      	movs	r1, #1
 80158ba:	4618      	mov	r0, r3
 80158bc:	f7ff ff70 	bl	80157a0 <send_packet>
}
 80158c0:	bf00      	nop
 80158c2:	3708      	adds	r7, #8
 80158c4:	46bd      	mov	sp, r7
 80158c6:	bd80      	pop	{r7, pc}

080158c8 <send_position_speed>:

void send_position_speed(float pos, float speed) {
 80158c8:	b580      	push	{r7, lr}
 80158ca:	b084      	sub	sp, #16
 80158cc:	af00      	add	r7, sp, #0
 80158ce:	ed87 0a01 	vstr	s0, [r7, #4]
 80158d2:	edc7 0a00 	vstr	s1, [r7]
	if (HAL_GetTick() - lastSend > 10) {
 80158d6:	f7eb fb85 	bl	8000fe4 <HAL_GetTick>
 80158da:	4602      	mov	r2, r0
 80158dc:	4b0c      	ldr	r3, [pc, #48]	; (8015910 <send_position_speed+0x48>)
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	2b0a      	cmp	r3, #10
 80158e4:	d90f      	bls.n	8015906 <send_position_speed+0x3e>
		uint8_t buf[sizeof(pos) * 2];
		memcpy(&buf[0], &pos, sizeof(pos));
 80158e6:	687b      	ldr	r3, [r7, #4]
 80158e8:	60bb      	str	r3, [r7, #8]
		memcpy(&buf[sizeof(pos)], &speed, sizeof(speed));
 80158ea:	683b      	ldr	r3, [r7, #0]
 80158ec:	60fb      	str	r3, [r7, #12]
		send_packet(buf, sizeof(buf), CMD_POSITION_SPEED);
 80158ee:	f107 0308 	add.w	r3, r7, #8
 80158f2:	2202      	movs	r2, #2
 80158f4:	2108      	movs	r1, #8
 80158f6:	4618      	mov	r0, r3
 80158f8:	f7ff ff52 	bl	80157a0 <send_packet>
		lastSend = HAL_GetTick();
 80158fc:	f7eb fb72 	bl	8000fe4 <HAL_GetTick>
 8015900:	4602      	mov	r2, r0
 8015902:	4b03      	ldr	r3, [pc, #12]	; (8015910 <send_position_speed+0x48>)
 8015904:	601a      	str	r2, [r3, #0]
	}
}
 8015906:	bf00      	nop
 8015908:	3710      	adds	r7, #16
 801590a:	46bd      	mov	sp, r7
 801590c:	bd80      	pop	{r7, pc}
 801590e:	bf00      	nop
 8015910:	20004194 	.word	0x20004194

08015914 <send_state>:
	uint8_t buf[sizeof(float)];
	memcpy(&buf[0], &speed, sizeof(speed));
	send_packet(buf, sizeof(buf), CMD_SPEED);
}

void send_state(run_mode_t state) {
 8015914:	b580      	push	{r7, lr}
 8015916:	b084      	sub	sp, #16
 8015918:	af00      	add	r7, sp, #0
 801591a:	4603      	mov	r3, r0
 801591c:	80fb      	strh	r3, [r7, #6]
	uint8_t buf[sizeof(run_mode_t)];
	memcpy(&buf[0], &state, sizeof(state));
 801591e:	88fb      	ldrh	r3, [r7, #6]
 8015920:	81bb      	strh	r3, [r7, #12]
	send_packet(buf, sizeof(buf), CMD_STATE);
 8015922:	f107 030c 	add.w	r3, r7, #12
 8015926:	2203      	movs	r2, #3
 8015928:	2102      	movs	r1, #2
 801592a:	4618      	mov	r0, r3
 801592c:	f7ff ff38 	bl	80157a0 <send_packet>
}
 8015930:	bf00      	nop
 8015932:	3710      	adds	r7, #16
 8015934:	46bd      	mov	sp, r7
 8015936:	bd80      	pop	{r7, pc}

08015938 <send_limits>:
	uint8_t buf[sizeof(pos)];
	memcpy(&buf[0], &pos, sizeof(pos));
	send_packet(buf, sizeof(buf), CMD_CHECK);
}

void send_limits(uint8_t clock_limits, uint8_t counter_limits) {
 8015938:	b580      	push	{r7, lr}
 801593a:	b084      	sub	sp, #16
 801593c:	af00      	add	r7, sp, #0
 801593e:	4603      	mov	r3, r0
 8015940:	460a      	mov	r2, r1
 8015942:	71fb      	strb	r3, [r7, #7]
 8015944:	4613      	mov	r3, r2
 8015946:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[2];
	buf[0] = clock_limits;
 8015948:	79fb      	ldrb	r3, [r7, #7]
 801594a:	733b      	strb	r3, [r7, #12]
	buf[1] = counter_limits;
 801594c:	79bb      	ldrb	r3, [r7, #6]
 801594e:	737b      	strb	r3, [r7, #13]
	send_packet(buf, sizeof(buf), CMD_LIMITS);
 8015950:	f107 030c 	add.w	r3, r7, #12
 8015954:	2205      	movs	r2, #5
 8015956:	2102      	movs	r1, #2
 8015958:	4618      	mov	r0, r3
 801595a:	f7ff ff21 	bl	80157a0 <send_packet>
}
 801595e:	bf00      	nop
 8015960:	3710      	adds	r7, #16
 8015962:	46bd      	mov	sp, r7
 8015964:	bd80      	pop	{r7, pc}

08015966 <stop>:

// TODO: LIMITS;

uint16_t stop(char* buf) {
 8015966:	b580      	push	{r7, lr}
 8015968:	b082      	sub	sp, #8
 801596a:	af00      	add	r7, sp, #0
 801596c:	6078      	str	r0, [r7, #4]
	stop_mode();
 801596e:	f7fe fbf5 	bl	801415c <stop_mode>
	return 0;
 8015972:	2300      	movs	r3, #0
}
 8015974:	4618      	mov	r0, r3
 8015976:	3708      	adds	r7, #8
 8015978:	46bd      	mov	sp, r7
 801597a:	bd80      	pop	{r7, pc}

0801597c <keepAlive>:

uint16_t keepAlive(char* buf) {
 801597c:	b480      	push	{r7}
 801597e:	b083      	sub	sp, #12
 8015980:	af00      	add	r7, sp, #0
 8015982:	6078      	str	r0, [r7, #4]
	return 0;
 8015984:	2300      	movs	r3, #0
}
 8015986:	4618      	mov	r0, r3
 8015988:	370c      	adds	r7, #12
 801598a:	46bd      	mov	sp, r7
 801598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015990:	4770      	bx	lr

08015992 <frontDistance>:

#include "stm32f7xx_hal.h"

#include "stm32f7xx.h"

float frontDistance(float from, float to) {
 8015992:	b580      	push	{r7, lr}
 8015994:	ed2d 8b02 	vpush	{d8}
 8015998:	b082      	sub	sp, #8
 801599a:	af00      	add	r7, sp, #0
 801599c:	ed87 0a01 	vstr	s0, [r7, #4]
 80159a0:	edc7 0a00 	vstr	s1, [r7]
	if (from <= to) {
 80159a4:	ed97 7a01 	vldr	s14, [r7, #4]
 80159a8:	edd7 7a00 	vldr	s15, [r7]
 80159ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80159b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80159b4:	d806      	bhi.n	80159c4 <frontDistance+0x32>
		return to - from;
 80159b6:	ed97 7a00 	vldr	s14, [r7]
 80159ba:	edd7 7a01 	vldr	s15, [r7, #4]
 80159be:	ee77 7a67 	vsub.f32	s15, s14, s15
 80159c2:	e011      	b.n	80159e8 <frontDistance+0x56>
	} else {
		return (upperRange() - lowerRange()) - (from - to);
 80159c4:	f7fd ff22 	bl	801380c <upperRange>
 80159c8:	eeb0 8a40 	vmov.f32	s16, s0
 80159cc:	f7fd ff2c 	bl	8013828 <lowerRange>
 80159d0:	eef0 7a40 	vmov.f32	s15, s0
 80159d4:	ee38 7a67 	vsub.f32	s14, s16, s15
 80159d8:	edd7 6a01 	vldr	s13, [r7, #4]
 80159dc:	edd7 7a00 	vldr	s15, [r7]
 80159e0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80159e4:	ee77 7a67 	vsub.f32	s15, s14, s15
	}
}
 80159e8:	eeb0 0a67 	vmov.f32	s0, s15
 80159ec:	3708      	adds	r7, #8
 80159ee:	46bd      	mov	sp, r7
 80159f0:	ecbd 8b02 	vpop	{d8}
 80159f4:	bd80      	pop	{r7, pc}

080159f6 <behindDistance>:

float behindDistance(float from, float to) {
 80159f6:	b580      	push	{r7, lr}
 80159f8:	ed2d 8b02 	vpush	{d8}
 80159fc:	b082      	sub	sp, #8
 80159fe:	af00      	add	r7, sp, #0
 8015a00:	ed87 0a01 	vstr	s0, [r7, #4]
 8015a04:	edc7 0a00 	vstr	s1, [r7]
	if (to <= from) {
 8015a08:	ed97 7a00 	vldr	s14, [r7]
 8015a0c:	edd7 7a01 	vldr	s15, [r7, #4]
 8015a10:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a18:	d806      	bhi.n	8015a28 <behindDistance+0x32>
		return from - to;
 8015a1a:	ed97 7a01 	vldr	s14, [r7, #4]
 8015a1e:	edd7 7a00 	vldr	s15, [r7]
 8015a22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015a26:	e011      	b.n	8015a4c <behindDistance+0x56>
	} else {
		return (upperRange() - lowerRange()) - (to - from);
 8015a28:	f7fd fef0 	bl	801380c <upperRange>
 8015a2c:	eeb0 8a40 	vmov.f32	s16, s0
 8015a30:	f7fd fefa 	bl	8013828 <lowerRange>
 8015a34:	eef0 7a40 	vmov.f32	s15, s0
 8015a38:	ee38 7a67 	vsub.f32	s14, s16, s15
 8015a3c:	edd7 6a00 	vldr	s13, [r7]
 8015a40:	edd7 7a01 	vldr	s15, [r7, #4]
 8015a44:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8015a48:	ee77 7a67 	vsub.f32	s15, s14, s15
	}
}
 8015a4c:	eeb0 0a67 	vmov.f32	s0, s15
 8015a50:	3708      	adds	r7, #8
 8015a52:	46bd      	mov	sp, r7
 8015a54:	ecbd 8b02 	vpop	{d8}
 8015a58:	bd80      	pop	{r7, pc}

08015a5a <shortDistance>:

float shortDistance(float from, float to) {
 8015a5a:	b580      	push	{r7, lr}
 8015a5c:	b084      	sub	sp, #16
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	ed87 0a01 	vstr	s0, [r7, #4]
 8015a64:	edc7 0a00 	vstr	s1, [r7]

	float front = frontDistance(from, to);
 8015a68:	edd7 0a00 	vldr	s1, [r7]
 8015a6c:	ed97 0a01 	vldr	s0, [r7, #4]
 8015a70:	f7ff ff8f 	bl	8015992 <frontDistance>
 8015a74:	ed87 0a03 	vstr	s0, [r7, #12]
	float behind = behindDistance(from, to);
 8015a78:	edd7 0a00 	vldr	s1, [r7]
 8015a7c:	ed97 0a01 	vldr	s0, [r7, #4]
 8015a80:	f7ff ffb9 	bl	80159f6 <behindDistance>
 8015a84:	ed87 0a02 	vstr	s0, [r7, #8]
	if (front <= behind) {
 8015a88:	ed97 7a03 	vldr	s14, [r7, #12]
 8015a8c:	edd7 7a02 	vldr	s15, [r7, #8]
 8015a90:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015a98:	d802      	bhi.n	8015aa0 <shortDistance+0x46>
		return front;
 8015a9a:	edd7 7a03 	vldr	s15, [r7, #12]
 8015a9e:	e003      	b.n	8015aa8 <shortDistance+0x4e>
	} else {
		return -behind;
 8015aa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8015aa4:	eef1 7a67 	vneg.f32	s15, s15
	}

}
 8015aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8015aac:	3710      	adds	r7, #16
 8015aae:	46bd      	mov	sp, r7
 8015ab0:	bd80      	pop	{r7, pc}
 8015ab2:	0000      	movs	r0, r0
 8015ab4:	0000      	movs	r0, r0
	...

08015ab8 <accelerationDistance>:

float accelerationDistance(float from, float to) {
 8015ab8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015abc:	b082      	sub	sp, #8
 8015abe:	af00      	add	r7, sp, #0
 8015ac0:	ed87 0a01 	vstr	s0, [r7, #4]
 8015ac4:	edc7 0a00 	vstr	s1, [r7]
	return fabs(pow(to, 2) - pow(from, 2)) / (acceleration() * 2);
 8015ac8:	6838      	ldr	r0, [r7, #0]
 8015aca:	f7ea fd6d 	bl	80005a8 <__aeabi_f2d>
 8015ace:	4602      	mov	r2, r0
 8015ad0:	460b      	mov	r3, r1
 8015ad2:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8015b50 <accelerationDistance+0x98>
 8015ad6:	ec43 2b10 	vmov	d0, r2, r3
 8015ada:	f001 f873 	bl	8016bc4 <pow>
 8015ade:	ec59 8b10 	vmov	r8, r9, d0
 8015ae2:	6878      	ldr	r0, [r7, #4]
 8015ae4:	f7ea fd60 	bl	80005a8 <__aeabi_f2d>
 8015ae8:	4602      	mov	r2, r0
 8015aea:	460b      	mov	r3, r1
 8015aec:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8015b50 <accelerationDistance+0x98>
 8015af0:	ec43 2b10 	vmov	d0, r2, r3
 8015af4:	f001 f866 	bl	8016bc4 <pow>
 8015af8:	ec53 2b10 	vmov	r2, r3, d0
 8015afc:	4640      	mov	r0, r8
 8015afe:	4649      	mov	r1, r9
 8015b00:	f7ea fbf2 	bl	80002e8 <__aeabi_dsub>
 8015b04:	4602      	mov	r2, r0
 8015b06:	460b      	mov	r3, r1
 8015b08:	4614      	mov	r4, r2
 8015b0a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015b0e:	f7fd fe99 	bl	8013844 <acceleration>
 8015b12:	eef0 7a40 	vmov.f32	s15, s0
 8015b16:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015b1a:	ee17 0a90 	vmov	r0, s15
 8015b1e:	f7ea fd43 	bl	80005a8 <__aeabi_f2d>
 8015b22:	4602      	mov	r2, r0
 8015b24:	460b      	mov	r3, r1
 8015b26:	4620      	mov	r0, r4
 8015b28:	4629      	mov	r1, r5
 8015b2a:	f7ea febb 	bl	80008a4 <__aeabi_ddiv>
 8015b2e:	4603      	mov	r3, r0
 8015b30:	460c      	mov	r4, r1
 8015b32:	4618      	mov	r0, r3
 8015b34:	4621      	mov	r1, r4
 8015b36:	f7eb f85b 	bl	8000bf0 <__aeabi_d2f>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	ee07 3a90 	vmov	s15, r3
}
 8015b40:	eeb0 0a67 	vmov.f32	s0, s15
 8015b44:	3708      	adds	r7, #8
 8015b46:	46bd      	mov	sp, r7
 8015b48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015b4c:	f3af 8000 	nop.w
 8015b50:	00000000 	.word	0x00000000
 8015b54:	40000000 	.word	0x40000000

08015b58 <decelerationDistance>:

float decelerationDistance(float from, float to) {
 8015b58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8015b5c:	b082      	sub	sp, #8
 8015b5e:	af00      	add	r7, sp, #0
 8015b60:	ed87 0a01 	vstr	s0, [r7, #4]
 8015b64:	edc7 0a00 	vstr	s1, [r7]
	return fabs(pow(to, 2) - pow(from, 2)) / (deceleration() * 2);
 8015b68:	6838      	ldr	r0, [r7, #0]
 8015b6a:	f7ea fd1d 	bl	80005a8 <__aeabi_f2d>
 8015b6e:	4602      	mov	r2, r0
 8015b70:	460b      	mov	r3, r1
 8015b72:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8015bf0 <decelerationDistance+0x98>
 8015b76:	ec43 2b10 	vmov	d0, r2, r3
 8015b7a:	f001 f823 	bl	8016bc4 <pow>
 8015b7e:	ec59 8b10 	vmov	r8, r9, d0
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f7ea fd10 	bl	80005a8 <__aeabi_f2d>
 8015b88:	4602      	mov	r2, r0
 8015b8a:	460b      	mov	r3, r1
 8015b8c:	ed9f 1b18 	vldr	d1, [pc, #96]	; 8015bf0 <decelerationDistance+0x98>
 8015b90:	ec43 2b10 	vmov	d0, r2, r3
 8015b94:	f001 f816 	bl	8016bc4 <pow>
 8015b98:	ec53 2b10 	vmov	r2, r3, d0
 8015b9c:	4640      	mov	r0, r8
 8015b9e:	4649      	mov	r1, r9
 8015ba0:	f7ea fba2 	bl	80002e8 <__aeabi_dsub>
 8015ba4:	4602      	mov	r2, r0
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	4614      	mov	r4, r2
 8015baa:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8015bae:	f7fd fe57 	bl	8013860 <deceleration>
 8015bb2:	eef0 7a40 	vmov.f32	s15, s0
 8015bb6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8015bba:	ee17 0a90 	vmov	r0, s15
 8015bbe:	f7ea fcf3 	bl	80005a8 <__aeabi_f2d>
 8015bc2:	4602      	mov	r2, r0
 8015bc4:	460b      	mov	r3, r1
 8015bc6:	4620      	mov	r0, r4
 8015bc8:	4629      	mov	r1, r5
 8015bca:	f7ea fe6b 	bl	80008a4 <__aeabi_ddiv>
 8015bce:	4603      	mov	r3, r0
 8015bd0:	460c      	mov	r4, r1
 8015bd2:	4618      	mov	r0, r3
 8015bd4:	4621      	mov	r1, r4
 8015bd6:	f7eb f80b 	bl	8000bf0 <__aeabi_d2f>
 8015bda:	4603      	mov	r3, r0
 8015bdc:	ee07 3a90 	vmov	s15, r3
}
 8015be0:	eeb0 0a67 	vmov.f32	s0, s15
 8015be4:	3708      	adds	r7, #8
 8015be6:	46bd      	mov	sp, r7
 8015be8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8015bec:	f3af 8000 	nop.w
 8015bf0:	00000000 	.word	0x00000000
 8015bf4:	40000000 	.word	0x40000000

08015bf8 <correctPosition>:

float correctPosition(float pos) {
 8015bf8:	b580      	push	{r7, lr}
 8015bfa:	ed2d 8b02 	vpush	{d8}
 8015bfe:	b082      	sub	sp, #8
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	ed87 0a01 	vstr	s0, [r7, #4]
	if (pos < lowerRange()) {
 8015c06:	f7fd fe0f 	bl	8013828 <lowerRange>
 8015c0a:	eeb0 7a40 	vmov.f32	s14, s0
 8015c0e:	edd7 7a01 	vldr	s15, [r7, #4]
 8015c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c1a:	dd0e      	ble.n	8015c3a <correctPosition+0x42>
		return pos + (upperRange() - lowerRange());
 8015c1c:	f7fd fdf6 	bl	801380c <upperRange>
 8015c20:	eeb0 8a40 	vmov.f32	s16, s0
 8015c24:	f7fd fe00 	bl	8013828 <lowerRange>
 8015c28:	eef0 7a40 	vmov.f32	s15, s0
 8015c2c:	ee38 7a67 	vsub.f32	s14, s16, s15
 8015c30:	edd7 7a01 	vldr	s15, [r7, #4]
 8015c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015c38:	e01b      	b.n	8015c72 <correctPosition+0x7a>
	} else if (pos > upperRange()) {
 8015c3a:	f7fd fde7 	bl	801380c <upperRange>
 8015c3e:	eeb0 7a40 	vmov.f32	s14, s0
 8015c42:	edd7 7a01 	vldr	s15, [r7, #4]
 8015c46:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015c4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015c4e:	d50e      	bpl.n	8015c6e <correctPosition+0x76>
		return pos - (upperRange() - lowerRange());
 8015c50:	f7fd fddc 	bl	801380c <upperRange>
 8015c54:	eeb0 8a40 	vmov.f32	s16, s0
 8015c58:	f7fd fde6 	bl	8013828 <lowerRange>
 8015c5c:	eef0 7a40 	vmov.f32	s15, s0
 8015c60:	ee78 7a67 	vsub.f32	s15, s16, s15
 8015c64:	ed97 7a01 	vldr	s14, [r7, #4]
 8015c68:	ee77 7a67 	vsub.f32	s15, s14, s15
 8015c6c:	e001      	b.n	8015c72 <correctPosition+0x7a>
	} else {
		return pos;
 8015c6e:	edd7 7a01 	vldr	s15, [r7, #4]
	}

}
 8015c72:	eeb0 0a67 	vmov.f32	s0, s15
 8015c76:	3708      	adds	r7, #8
 8015c78:	46bd      	mov	sp, r7
 8015c7a:	ecbd 8b02 	vpop	{d8}
 8015c7e:	bd80      	pop	{r7, pc}

08015c80 <DWT_Init>:
	//float number = *(buf) << 24 | *(buf + 1) << 16 | *(buf + 2) << 8 | *(buf + 3) << 0;
	memcpy(&number, buf, sizeof(number));
	return number;
}

void DWT_Init(void) {
 8015c80:	b480      	push	{r7}
 8015c82:	af00      	add	r7, sp, #0

	DWT->LAR = 0xC5ACCE55;
 8015c84:	4b08      	ldr	r3, [pc, #32]	; (8015ca8 <DWT_Init+0x28>)
 8015c86:	4a09      	ldr	r2, [pc, #36]	; (8015cac <DWT_Init+0x2c>)
 8015c88:	f8c3 2fb0 	str.w	r2, [r3, #4016]	; 0xfb0
	DWT->CTRL |= 1;
 8015c8c:	4a06      	ldr	r2, [pc, #24]	; (8015ca8 <DWT_Init+0x28>)
 8015c8e:	4b06      	ldr	r3, [pc, #24]	; (8015ca8 <DWT_Init+0x28>)
 8015c90:	681b      	ldr	r3, [r3, #0]
 8015c92:	f043 0301 	orr.w	r3, r3, #1
 8015c96:	6013      	str	r3, [r2, #0]
	DWT->CYCCNT = 0;
 8015c98:	4b03      	ldr	r3, [pc, #12]	; (8015ca8 <DWT_Init+0x28>)
 8015c9a:	2200      	movs	r2, #0
 8015c9c:	605a      	str	r2, [r3, #4]
}
 8015c9e:	bf00      	nop
 8015ca0:	46bd      	mov	sp, r7
 8015ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ca6:	4770      	bx	lr
 8015ca8:	e0001000 	.word	0xe0001000
 8015cac:	c5acce55 	.word	0xc5acce55

08015cb0 <DWT_Delay>:

void DWT_Delay(uint32_t us) // microseconds
{
 8015cb0:	b480      	push	{r7}
 8015cb2:	b085      	sub	sp, #20
 8015cb4:	af00      	add	r7, sp, #0
 8015cb6:	6078      	str	r0, [r7, #4]
	int32_t targetTick = DWT->CYCCNT + us * (SystemCoreClock / 1000000);
 8015cb8:	4b0b      	ldr	r3, [pc, #44]	; (8015ce8 <DWT_Delay+0x38>)
 8015cba:	685a      	ldr	r2, [r3, #4]
 8015cbc:	4b0b      	ldr	r3, [pc, #44]	; (8015cec <DWT_Delay+0x3c>)
 8015cbe:	681b      	ldr	r3, [r3, #0]
 8015cc0:	490b      	ldr	r1, [pc, #44]	; (8015cf0 <DWT_Delay+0x40>)
 8015cc2:	fba1 1303 	umull	r1, r3, r1, r3
 8015cc6:	0c9b      	lsrs	r3, r3, #18
 8015cc8:	6879      	ldr	r1, [r7, #4]
 8015cca:	fb01 f303 	mul.w	r3, r1, r3
 8015cce:	4413      	add	r3, r2
 8015cd0:	60fb      	str	r3, [r7, #12]
	do {
	} while (DWT->CYCCNT <= targetTick);
 8015cd2:	4b05      	ldr	r3, [pc, #20]	; (8015ce8 <DWT_Delay+0x38>)
 8015cd4:	685a      	ldr	r2, [r3, #4]
 8015cd6:	68fb      	ldr	r3, [r7, #12]
 8015cd8:	429a      	cmp	r2, r3
 8015cda:	d9fa      	bls.n	8015cd2 <DWT_Delay+0x22>
}
 8015cdc:	bf00      	nop
 8015cde:	3714      	adds	r7, #20
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ce6:	4770      	bx	lr
 8015ce8:	e0001000 	.word	0xe0001000
 8015cec:	20000118 	.word	0x20000118
 8015cf0:	431bde83 	.word	0x431bde83

08015cf4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8015cf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8015d2c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8015cf8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8015cfa:	e003      	b.n	8015d04 <LoopCopyDataInit>

08015cfc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8015cfc:	4b0c      	ldr	r3, [pc, #48]	; (8015d30 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8015cfe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8015d00:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8015d02:	3104      	adds	r1, #4

08015d04 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8015d04:	480b      	ldr	r0, [pc, #44]	; (8015d34 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8015d06:	4b0c      	ldr	r3, [pc, #48]	; (8015d38 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8015d08:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8015d0a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8015d0c:	d3f6      	bcc.n	8015cfc <CopyDataInit>
  ldr  r2, =_sbss
 8015d0e:	4a0b      	ldr	r2, [pc, #44]	; (8015d3c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8015d10:	e002      	b.n	8015d18 <LoopFillZerobss>

08015d12 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8015d12:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8015d14:	f842 3b04 	str.w	r3, [r2], #4

08015d18 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8015d18:	4b09      	ldr	r3, [pc, #36]	; (8015d40 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8015d1a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8015d1c:	d3f9      	bcc.n	8015d12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8015d1e:	f7ff fc33 	bl	8015588 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8015d22:	f000 f811 	bl	8015d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8015d26:	f7fe f8b5 	bl	8013e94 <main>
  bx  lr    
 8015d2a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8015d2c:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8015d30:	0801a6e8 	.word	0x0801a6e8
  ldr  r0, =_sdata
 8015d34:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8015d38:	200001a8 	.word	0x200001a8
  ldr  r2, =_sbss
 8015d3c:	200001a8 	.word	0x200001a8
  ldr  r3, = _ebss
 8015d40:	2000ac20 	.word	0x2000ac20

08015d44 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8015d44:	e7fe      	b.n	8015d44 <ADC_IRQHandler>
	...

08015d48 <__libc_init_array>:
 8015d48:	b570      	push	{r4, r5, r6, lr}
 8015d4a:	4e0d      	ldr	r6, [pc, #52]	; (8015d80 <__libc_init_array+0x38>)
 8015d4c:	4c0d      	ldr	r4, [pc, #52]	; (8015d84 <__libc_init_array+0x3c>)
 8015d4e:	1ba4      	subs	r4, r4, r6
 8015d50:	10a4      	asrs	r4, r4, #2
 8015d52:	2500      	movs	r5, #0
 8015d54:	42a5      	cmp	r5, r4
 8015d56:	d109      	bne.n	8015d6c <__libc_init_array+0x24>
 8015d58:	4e0b      	ldr	r6, [pc, #44]	; (8015d88 <__libc_init_array+0x40>)
 8015d5a:	4c0c      	ldr	r4, [pc, #48]	; (8015d8c <__libc_init_array+0x44>)
 8015d5c:	f001 ff9e 	bl	8017c9c <_init>
 8015d60:	1ba4      	subs	r4, r4, r6
 8015d62:	10a4      	asrs	r4, r4, #2
 8015d64:	2500      	movs	r5, #0
 8015d66:	42a5      	cmp	r5, r4
 8015d68:	d105      	bne.n	8015d76 <__libc_init_array+0x2e>
 8015d6a:	bd70      	pop	{r4, r5, r6, pc}
 8015d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d70:	4798      	blx	r3
 8015d72:	3501      	adds	r5, #1
 8015d74:	e7ee      	b.n	8015d54 <__libc_init_array+0xc>
 8015d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8015d7a:	4798      	blx	r3
 8015d7c:	3501      	adds	r5, #1
 8015d7e:	e7f2      	b.n	8015d66 <__libc_init_array+0x1e>
 8015d80:	0801a6e0 	.word	0x0801a6e0
 8015d84:	0801a6e0 	.word	0x0801a6e0
 8015d88:	0801a6e0 	.word	0x0801a6e0
 8015d8c:	0801a6e4 	.word	0x0801a6e4

08015d90 <memcmp>:
 8015d90:	b510      	push	{r4, lr}
 8015d92:	3901      	subs	r1, #1
 8015d94:	4402      	add	r2, r0
 8015d96:	4290      	cmp	r0, r2
 8015d98:	d101      	bne.n	8015d9e <memcmp+0xe>
 8015d9a:	2000      	movs	r0, #0
 8015d9c:	bd10      	pop	{r4, pc}
 8015d9e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8015da2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8015da6:	42a3      	cmp	r3, r4
 8015da8:	d0f5      	beq.n	8015d96 <memcmp+0x6>
 8015daa:	1b18      	subs	r0, r3, r4
 8015dac:	bd10      	pop	{r4, pc}

08015dae <memcpy>:
 8015dae:	b510      	push	{r4, lr}
 8015db0:	1e43      	subs	r3, r0, #1
 8015db2:	440a      	add	r2, r1
 8015db4:	4291      	cmp	r1, r2
 8015db6:	d100      	bne.n	8015dba <memcpy+0xc>
 8015db8:	bd10      	pop	{r4, pc}
 8015dba:	f811 4b01 	ldrb.w	r4, [r1], #1
 8015dbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015dc2:	e7f7      	b.n	8015db4 <memcpy+0x6>

08015dc4 <memset>:
 8015dc4:	4402      	add	r2, r0
 8015dc6:	4603      	mov	r3, r0
 8015dc8:	4293      	cmp	r3, r2
 8015dca:	d100      	bne.n	8015dce <memset+0xa>
 8015dcc:	4770      	bx	lr
 8015dce:	f803 1b01 	strb.w	r1, [r3], #1
 8015dd2:	e7f9      	b.n	8015dc8 <memset+0x4>

08015dd4 <iprintf>:
 8015dd4:	b40f      	push	{r0, r1, r2, r3}
 8015dd6:	4b0a      	ldr	r3, [pc, #40]	; (8015e00 <iprintf+0x2c>)
 8015dd8:	b513      	push	{r0, r1, r4, lr}
 8015dda:	681c      	ldr	r4, [r3, #0]
 8015ddc:	b124      	cbz	r4, 8015de8 <iprintf+0x14>
 8015dde:	69a3      	ldr	r3, [r4, #24]
 8015de0:	b913      	cbnz	r3, 8015de8 <iprintf+0x14>
 8015de2:	4620      	mov	r0, r4
 8015de4:	f000 f84e 	bl	8015e84 <__sinit>
 8015de8:	ab05      	add	r3, sp, #20
 8015dea:	9a04      	ldr	r2, [sp, #16]
 8015dec:	68a1      	ldr	r1, [r4, #8]
 8015dee:	9301      	str	r3, [sp, #4]
 8015df0:	4620      	mov	r0, r4
 8015df2:	f000 f959 	bl	80160a8 <_vfiprintf_r>
 8015df6:	b002      	add	sp, #8
 8015df8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015dfc:	b004      	add	sp, #16
 8015dfe:	4770      	bx	lr
 8015e00:	20000140 	.word	0x20000140

08015e04 <_cleanup_r>:
 8015e04:	4901      	ldr	r1, [pc, #4]	; (8015e0c <_cleanup_r+0x8>)
 8015e06:	f000 b8a9 	b.w	8015f5c <_fwalk_reent>
 8015e0a:	bf00      	nop
 8015e0c:	0801697d 	.word	0x0801697d

08015e10 <std.isra.0>:
 8015e10:	2300      	movs	r3, #0
 8015e12:	b510      	push	{r4, lr}
 8015e14:	4604      	mov	r4, r0
 8015e16:	6003      	str	r3, [r0, #0]
 8015e18:	6043      	str	r3, [r0, #4]
 8015e1a:	6083      	str	r3, [r0, #8]
 8015e1c:	8181      	strh	r1, [r0, #12]
 8015e1e:	6643      	str	r3, [r0, #100]	; 0x64
 8015e20:	81c2      	strh	r2, [r0, #14]
 8015e22:	6103      	str	r3, [r0, #16]
 8015e24:	6143      	str	r3, [r0, #20]
 8015e26:	6183      	str	r3, [r0, #24]
 8015e28:	4619      	mov	r1, r3
 8015e2a:	2208      	movs	r2, #8
 8015e2c:	305c      	adds	r0, #92	; 0x5c
 8015e2e:	f7ff ffc9 	bl	8015dc4 <memset>
 8015e32:	4b05      	ldr	r3, [pc, #20]	; (8015e48 <std.isra.0+0x38>)
 8015e34:	6263      	str	r3, [r4, #36]	; 0x24
 8015e36:	4b05      	ldr	r3, [pc, #20]	; (8015e4c <std.isra.0+0x3c>)
 8015e38:	62a3      	str	r3, [r4, #40]	; 0x28
 8015e3a:	4b05      	ldr	r3, [pc, #20]	; (8015e50 <std.isra.0+0x40>)
 8015e3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8015e3e:	4b05      	ldr	r3, [pc, #20]	; (8015e54 <std.isra.0+0x44>)
 8015e40:	6224      	str	r4, [r4, #32]
 8015e42:	6323      	str	r3, [r4, #48]	; 0x30
 8015e44:	bd10      	pop	{r4, pc}
 8015e46:	bf00      	nop
 8015e48:	08016621 	.word	0x08016621
 8015e4c:	08016643 	.word	0x08016643
 8015e50:	0801667b 	.word	0x0801667b
 8015e54:	0801669f 	.word	0x0801669f

08015e58 <__sfmoreglue>:
 8015e58:	b570      	push	{r4, r5, r6, lr}
 8015e5a:	1e4a      	subs	r2, r1, #1
 8015e5c:	2568      	movs	r5, #104	; 0x68
 8015e5e:	4355      	muls	r5, r2
 8015e60:	460e      	mov	r6, r1
 8015e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8015e66:	f000 f897 	bl	8015f98 <_malloc_r>
 8015e6a:	4604      	mov	r4, r0
 8015e6c:	b140      	cbz	r0, 8015e80 <__sfmoreglue+0x28>
 8015e6e:	2100      	movs	r1, #0
 8015e70:	e880 0042 	stmia.w	r0, {r1, r6}
 8015e74:	300c      	adds	r0, #12
 8015e76:	60a0      	str	r0, [r4, #8]
 8015e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8015e7c:	f7ff ffa2 	bl	8015dc4 <memset>
 8015e80:	4620      	mov	r0, r4
 8015e82:	bd70      	pop	{r4, r5, r6, pc}

08015e84 <__sinit>:
 8015e84:	6983      	ldr	r3, [r0, #24]
 8015e86:	b510      	push	{r4, lr}
 8015e88:	4604      	mov	r4, r0
 8015e8a:	bb33      	cbnz	r3, 8015eda <__sinit+0x56>
 8015e8c:	6483      	str	r3, [r0, #72]	; 0x48
 8015e8e:	64c3      	str	r3, [r0, #76]	; 0x4c
 8015e90:	6503      	str	r3, [r0, #80]	; 0x50
 8015e92:	4b12      	ldr	r3, [pc, #72]	; (8015edc <__sinit+0x58>)
 8015e94:	4a12      	ldr	r2, [pc, #72]	; (8015ee0 <__sinit+0x5c>)
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	6282      	str	r2, [r0, #40]	; 0x28
 8015e9a:	4298      	cmp	r0, r3
 8015e9c:	bf04      	itt	eq
 8015e9e:	2301      	moveq	r3, #1
 8015ea0:	6183      	streq	r3, [r0, #24]
 8015ea2:	f000 f81f 	bl	8015ee4 <__sfp>
 8015ea6:	6060      	str	r0, [r4, #4]
 8015ea8:	4620      	mov	r0, r4
 8015eaa:	f000 f81b 	bl	8015ee4 <__sfp>
 8015eae:	60a0      	str	r0, [r4, #8]
 8015eb0:	4620      	mov	r0, r4
 8015eb2:	f000 f817 	bl	8015ee4 <__sfp>
 8015eb6:	2200      	movs	r2, #0
 8015eb8:	60e0      	str	r0, [r4, #12]
 8015eba:	2104      	movs	r1, #4
 8015ebc:	6860      	ldr	r0, [r4, #4]
 8015ebe:	f7ff ffa7 	bl	8015e10 <std.isra.0>
 8015ec2:	2201      	movs	r2, #1
 8015ec4:	2109      	movs	r1, #9
 8015ec6:	68a0      	ldr	r0, [r4, #8]
 8015ec8:	f7ff ffa2 	bl	8015e10 <std.isra.0>
 8015ecc:	2202      	movs	r2, #2
 8015ece:	2112      	movs	r1, #18
 8015ed0:	68e0      	ldr	r0, [r4, #12]
 8015ed2:	f7ff ff9d 	bl	8015e10 <std.isra.0>
 8015ed6:	2301      	movs	r3, #1
 8015ed8:	61a3      	str	r3, [r4, #24]
 8015eda:	bd10      	pop	{r4, pc}
 8015edc:	0801a658 	.word	0x0801a658
 8015ee0:	08015e05 	.word	0x08015e05

08015ee4 <__sfp>:
 8015ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015ee6:	4b1c      	ldr	r3, [pc, #112]	; (8015f58 <__sfp+0x74>)
 8015ee8:	681e      	ldr	r6, [r3, #0]
 8015eea:	69b3      	ldr	r3, [r6, #24]
 8015eec:	4607      	mov	r7, r0
 8015eee:	b913      	cbnz	r3, 8015ef6 <__sfp+0x12>
 8015ef0:	4630      	mov	r0, r6
 8015ef2:	f7ff ffc7 	bl	8015e84 <__sinit>
 8015ef6:	3648      	adds	r6, #72	; 0x48
 8015ef8:	68b4      	ldr	r4, [r6, #8]
 8015efa:	6873      	ldr	r3, [r6, #4]
 8015efc:	3b01      	subs	r3, #1
 8015efe:	d503      	bpl.n	8015f08 <__sfp+0x24>
 8015f00:	6833      	ldr	r3, [r6, #0]
 8015f02:	b133      	cbz	r3, 8015f12 <__sfp+0x2e>
 8015f04:	6836      	ldr	r6, [r6, #0]
 8015f06:	e7f7      	b.n	8015ef8 <__sfp+0x14>
 8015f08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8015f0c:	b16d      	cbz	r5, 8015f2a <__sfp+0x46>
 8015f0e:	3468      	adds	r4, #104	; 0x68
 8015f10:	e7f4      	b.n	8015efc <__sfp+0x18>
 8015f12:	2104      	movs	r1, #4
 8015f14:	4638      	mov	r0, r7
 8015f16:	f7ff ff9f 	bl	8015e58 <__sfmoreglue>
 8015f1a:	6030      	str	r0, [r6, #0]
 8015f1c:	2800      	cmp	r0, #0
 8015f1e:	d1f1      	bne.n	8015f04 <__sfp+0x20>
 8015f20:	230c      	movs	r3, #12
 8015f22:	603b      	str	r3, [r7, #0]
 8015f24:	4604      	mov	r4, r0
 8015f26:	4620      	mov	r0, r4
 8015f28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8015f2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8015f2e:	81e3      	strh	r3, [r4, #14]
 8015f30:	2301      	movs	r3, #1
 8015f32:	81a3      	strh	r3, [r4, #12]
 8015f34:	6665      	str	r5, [r4, #100]	; 0x64
 8015f36:	6025      	str	r5, [r4, #0]
 8015f38:	60a5      	str	r5, [r4, #8]
 8015f3a:	6065      	str	r5, [r4, #4]
 8015f3c:	6125      	str	r5, [r4, #16]
 8015f3e:	6165      	str	r5, [r4, #20]
 8015f40:	61a5      	str	r5, [r4, #24]
 8015f42:	2208      	movs	r2, #8
 8015f44:	4629      	mov	r1, r5
 8015f46:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8015f4a:	f7ff ff3b 	bl	8015dc4 <memset>
 8015f4e:	6365      	str	r5, [r4, #52]	; 0x34
 8015f50:	63a5      	str	r5, [r4, #56]	; 0x38
 8015f52:	64a5      	str	r5, [r4, #72]	; 0x48
 8015f54:	64e5      	str	r5, [r4, #76]	; 0x4c
 8015f56:	e7e6      	b.n	8015f26 <__sfp+0x42>
 8015f58:	0801a658 	.word	0x0801a658

08015f5c <_fwalk_reent>:
 8015f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8015f60:	4680      	mov	r8, r0
 8015f62:	4689      	mov	r9, r1
 8015f64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8015f68:	2600      	movs	r6, #0
 8015f6a:	b914      	cbnz	r4, 8015f72 <_fwalk_reent+0x16>
 8015f6c:	4630      	mov	r0, r6
 8015f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015f72:	68a5      	ldr	r5, [r4, #8]
 8015f74:	6867      	ldr	r7, [r4, #4]
 8015f76:	3f01      	subs	r7, #1
 8015f78:	d501      	bpl.n	8015f7e <_fwalk_reent+0x22>
 8015f7a:	6824      	ldr	r4, [r4, #0]
 8015f7c:	e7f5      	b.n	8015f6a <_fwalk_reent+0xe>
 8015f7e:	89ab      	ldrh	r3, [r5, #12]
 8015f80:	2b01      	cmp	r3, #1
 8015f82:	d907      	bls.n	8015f94 <_fwalk_reent+0x38>
 8015f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8015f88:	3301      	adds	r3, #1
 8015f8a:	d003      	beq.n	8015f94 <_fwalk_reent+0x38>
 8015f8c:	4629      	mov	r1, r5
 8015f8e:	4640      	mov	r0, r8
 8015f90:	47c8      	blx	r9
 8015f92:	4306      	orrs	r6, r0
 8015f94:	3568      	adds	r5, #104	; 0x68
 8015f96:	e7ee      	b.n	8015f76 <_fwalk_reent+0x1a>

08015f98 <_malloc_r>:
 8015f98:	b570      	push	{r4, r5, r6, lr}
 8015f9a:	1ccd      	adds	r5, r1, #3
 8015f9c:	f025 0503 	bic.w	r5, r5, #3
 8015fa0:	3508      	adds	r5, #8
 8015fa2:	2d0c      	cmp	r5, #12
 8015fa4:	bf38      	it	cc
 8015fa6:	250c      	movcc	r5, #12
 8015fa8:	2d00      	cmp	r5, #0
 8015faa:	4606      	mov	r6, r0
 8015fac:	db01      	blt.n	8015fb2 <_malloc_r+0x1a>
 8015fae:	42a9      	cmp	r1, r5
 8015fb0:	d903      	bls.n	8015fba <_malloc_r+0x22>
 8015fb2:	230c      	movs	r3, #12
 8015fb4:	6033      	str	r3, [r6, #0]
 8015fb6:	2000      	movs	r0, #0
 8015fb8:	bd70      	pop	{r4, r5, r6, pc}
 8015fba:	f000 fd7f 	bl	8016abc <__malloc_lock>
 8015fbe:	4a23      	ldr	r2, [pc, #140]	; (801604c <_malloc_r+0xb4>)
 8015fc0:	6814      	ldr	r4, [r2, #0]
 8015fc2:	4621      	mov	r1, r4
 8015fc4:	b991      	cbnz	r1, 8015fec <_malloc_r+0x54>
 8015fc6:	4c22      	ldr	r4, [pc, #136]	; (8016050 <_malloc_r+0xb8>)
 8015fc8:	6823      	ldr	r3, [r4, #0]
 8015fca:	b91b      	cbnz	r3, 8015fd4 <_malloc_r+0x3c>
 8015fcc:	4630      	mov	r0, r6
 8015fce:	f000 fb17 	bl	8016600 <_sbrk_r>
 8015fd2:	6020      	str	r0, [r4, #0]
 8015fd4:	4629      	mov	r1, r5
 8015fd6:	4630      	mov	r0, r6
 8015fd8:	f000 fb12 	bl	8016600 <_sbrk_r>
 8015fdc:	1c43      	adds	r3, r0, #1
 8015fde:	d126      	bne.n	801602e <_malloc_r+0x96>
 8015fe0:	230c      	movs	r3, #12
 8015fe2:	6033      	str	r3, [r6, #0]
 8015fe4:	4630      	mov	r0, r6
 8015fe6:	f000 fd6a 	bl	8016abe <__malloc_unlock>
 8015fea:	e7e4      	b.n	8015fb6 <_malloc_r+0x1e>
 8015fec:	680b      	ldr	r3, [r1, #0]
 8015fee:	1b5b      	subs	r3, r3, r5
 8015ff0:	d41a      	bmi.n	8016028 <_malloc_r+0x90>
 8015ff2:	2b0b      	cmp	r3, #11
 8015ff4:	d90f      	bls.n	8016016 <_malloc_r+0x7e>
 8015ff6:	600b      	str	r3, [r1, #0]
 8015ff8:	50cd      	str	r5, [r1, r3]
 8015ffa:	18cc      	adds	r4, r1, r3
 8015ffc:	4630      	mov	r0, r6
 8015ffe:	f000 fd5e 	bl	8016abe <__malloc_unlock>
 8016002:	f104 000b 	add.w	r0, r4, #11
 8016006:	1d23      	adds	r3, r4, #4
 8016008:	f020 0007 	bic.w	r0, r0, #7
 801600c:	1ac3      	subs	r3, r0, r3
 801600e:	d01b      	beq.n	8016048 <_malloc_r+0xb0>
 8016010:	425a      	negs	r2, r3
 8016012:	50e2      	str	r2, [r4, r3]
 8016014:	bd70      	pop	{r4, r5, r6, pc}
 8016016:	428c      	cmp	r4, r1
 8016018:	bf0d      	iteet	eq
 801601a:	6863      	ldreq	r3, [r4, #4]
 801601c:	684b      	ldrne	r3, [r1, #4]
 801601e:	6063      	strne	r3, [r4, #4]
 8016020:	6013      	streq	r3, [r2, #0]
 8016022:	bf18      	it	ne
 8016024:	460c      	movne	r4, r1
 8016026:	e7e9      	b.n	8015ffc <_malloc_r+0x64>
 8016028:	460c      	mov	r4, r1
 801602a:	6849      	ldr	r1, [r1, #4]
 801602c:	e7ca      	b.n	8015fc4 <_malloc_r+0x2c>
 801602e:	1cc4      	adds	r4, r0, #3
 8016030:	f024 0403 	bic.w	r4, r4, #3
 8016034:	42a0      	cmp	r0, r4
 8016036:	d005      	beq.n	8016044 <_malloc_r+0xac>
 8016038:	1a21      	subs	r1, r4, r0
 801603a:	4630      	mov	r0, r6
 801603c:	f000 fae0 	bl	8016600 <_sbrk_r>
 8016040:	3001      	adds	r0, #1
 8016042:	d0cd      	beq.n	8015fe0 <_malloc_r+0x48>
 8016044:	6025      	str	r5, [r4, #0]
 8016046:	e7d9      	b.n	8015ffc <_malloc_r+0x64>
 8016048:	bd70      	pop	{r4, r5, r6, pc}
 801604a:	bf00      	nop
 801604c:	20004198 	.word	0x20004198
 8016050:	2000419c 	.word	0x2000419c

08016054 <__sfputc_r>:
 8016054:	6893      	ldr	r3, [r2, #8]
 8016056:	3b01      	subs	r3, #1
 8016058:	2b00      	cmp	r3, #0
 801605a:	b410      	push	{r4}
 801605c:	6093      	str	r3, [r2, #8]
 801605e:	da09      	bge.n	8016074 <__sfputc_r+0x20>
 8016060:	6994      	ldr	r4, [r2, #24]
 8016062:	42a3      	cmp	r3, r4
 8016064:	db02      	blt.n	801606c <__sfputc_r+0x18>
 8016066:	b2cb      	uxtb	r3, r1
 8016068:	2b0a      	cmp	r3, #10
 801606a:	d103      	bne.n	8016074 <__sfputc_r+0x20>
 801606c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016070:	f000 bb1a 	b.w	80166a8 <__swbuf_r>
 8016074:	6813      	ldr	r3, [r2, #0]
 8016076:	1c58      	adds	r0, r3, #1
 8016078:	6010      	str	r0, [r2, #0]
 801607a:	7019      	strb	r1, [r3, #0]
 801607c:	b2c8      	uxtb	r0, r1
 801607e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016082:	4770      	bx	lr

08016084 <__sfputs_r>:
 8016084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016086:	4606      	mov	r6, r0
 8016088:	460f      	mov	r7, r1
 801608a:	4614      	mov	r4, r2
 801608c:	18d5      	adds	r5, r2, r3
 801608e:	42ac      	cmp	r4, r5
 8016090:	d101      	bne.n	8016096 <__sfputs_r+0x12>
 8016092:	2000      	movs	r0, #0
 8016094:	e007      	b.n	80160a6 <__sfputs_r+0x22>
 8016096:	463a      	mov	r2, r7
 8016098:	f814 1b01 	ldrb.w	r1, [r4], #1
 801609c:	4630      	mov	r0, r6
 801609e:	f7ff ffd9 	bl	8016054 <__sfputc_r>
 80160a2:	1c43      	adds	r3, r0, #1
 80160a4:	d1f3      	bne.n	801608e <__sfputs_r+0xa>
 80160a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080160a8 <_vfiprintf_r>:
 80160a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ac:	b09d      	sub	sp, #116	; 0x74
 80160ae:	460c      	mov	r4, r1
 80160b0:	4617      	mov	r7, r2
 80160b2:	9303      	str	r3, [sp, #12]
 80160b4:	4606      	mov	r6, r0
 80160b6:	b118      	cbz	r0, 80160c0 <_vfiprintf_r+0x18>
 80160b8:	6983      	ldr	r3, [r0, #24]
 80160ba:	b90b      	cbnz	r3, 80160c0 <_vfiprintf_r+0x18>
 80160bc:	f7ff fee2 	bl	8015e84 <__sinit>
 80160c0:	4b7c      	ldr	r3, [pc, #496]	; (80162b4 <_vfiprintf_r+0x20c>)
 80160c2:	429c      	cmp	r4, r3
 80160c4:	d157      	bne.n	8016176 <_vfiprintf_r+0xce>
 80160c6:	6874      	ldr	r4, [r6, #4]
 80160c8:	89a3      	ldrh	r3, [r4, #12]
 80160ca:	0718      	lsls	r0, r3, #28
 80160cc:	d55d      	bpl.n	801618a <_vfiprintf_r+0xe2>
 80160ce:	6923      	ldr	r3, [r4, #16]
 80160d0:	2b00      	cmp	r3, #0
 80160d2:	d05a      	beq.n	801618a <_vfiprintf_r+0xe2>
 80160d4:	2300      	movs	r3, #0
 80160d6:	9309      	str	r3, [sp, #36]	; 0x24
 80160d8:	2320      	movs	r3, #32
 80160da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80160de:	2330      	movs	r3, #48	; 0x30
 80160e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80160e4:	f04f 0b01 	mov.w	fp, #1
 80160e8:	46b8      	mov	r8, r7
 80160ea:	4645      	mov	r5, r8
 80160ec:	f815 3b01 	ldrb.w	r3, [r5], #1
 80160f0:	2b00      	cmp	r3, #0
 80160f2:	d155      	bne.n	80161a0 <_vfiprintf_r+0xf8>
 80160f4:	ebb8 0a07 	subs.w	sl, r8, r7
 80160f8:	d00b      	beq.n	8016112 <_vfiprintf_r+0x6a>
 80160fa:	4653      	mov	r3, sl
 80160fc:	463a      	mov	r2, r7
 80160fe:	4621      	mov	r1, r4
 8016100:	4630      	mov	r0, r6
 8016102:	f7ff ffbf 	bl	8016084 <__sfputs_r>
 8016106:	3001      	adds	r0, #1
 8016108:	f000 80c4 	beq.w	8016294 <_vfiprintf_r+0x1ec>
 801610c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801610e:	4453      	add	r3, sl
 8016110:	9309      	str	r3, [sp, #36]	; 0x24
 8016112:	f898 3000 	ldrb.w	r3, [r8]
 8016116:	2b00      	cmp	r3, #0
 8016118:	f000 80bc 	beq.w	8016294 <_vfiprintf_r+0x1ec>
 801611c:	2300      	movs	r3, #0
 801611e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016122:	9304      	str	r3, [sp, #16]
 8016124:	9307      	str	r3, [sp, #28]
 8016126:	9205      	str	r2, [sp, #20]
 8016128:	9306      	str	r3, [sp, #24]
 801612a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801612e:	931a      	str	r3, [sp, #104]	; 0x68
 8016130:	2205      	movs	r2, #5
 8016132:	7829      	ldrb	r1, [r5, #0]
 8016134:	4860      	ldr	r0, [pc, #384]	; (80162b8 <_vfiprintf_r+0x210>)
 8016136:	f7ea f883 	bl	8000240 <memchr>
 801613a:	f105 0801 	add.w	r8, r5, #1
 801613e:	9b04      	ldr	r3, [sp, #16]
 8016140:	2800      	cmp	r0, #0
 8016142:	d131      	bne.n	80161a8 <_vfiprintf_r+0x100>
 8016144:	06d9      	lsls	r1, r3, #27
 8016146:	bf44      	itt	mi
 8016148:	2220      	movmi	r2, #32
 801614a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 801614e:	071a      	lsls	r2, r3, #28
 8016150:	bf44      	itt	mi
 8016152:	222b      	movmi	r2, #43	; 0x2b
 8016154:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8016158:	782a      	ldrb	r2, [r5, #0]
 801615a:	2a2a      	cmp	r2, #42	; 0x2a
 801615c:	d02c      	beq.n	80161b8 <_vfiprintf_r+0x110>
 801615e:	9a07      	ldr	r2, [sp, #28]
 8016160:	2100      	movs	r1, #0
 8016162:	200a      	movs	r0, #10
 8016164:	46a8      	mov	r8, r5
 8016166:	3501      	adds	r5, #1
 8016168:	f898 3000 	ldrb.w	r3, [r8]
 801616c:	3b30      	subs	r3, #48	; 0x30
 801616e:	2b09      	cmp	r3, #9
 8016170:	d96d      	bls.n	801624e <_vfiprintf_r+0x1a6>
 8016172:	b371      	cbz	r1, 80161d2 <_vfiprintf_r+0x12a>
 8016174:	e026      	b.n	80161c4 <_vfiprintf_r+0x11c>
 8016176:	4b51      	ldr	r3, [pc, #324]	; (80162bc <_vfiprintf_r+0x214>)
 8016178:	429c      	cmp	r4, r3
 801617a:	d101      	bne.n	8016180 <_vfiprintf_r+0xd8>
 801617c:	68b4      	ldr	r4, [r6, #8]
 801617e:	e7a3      	b.n	80160c8 <_vfiprintf_r+0x20>
 8016180:	4b4f      	ldr	r3, [pc, #316]	; (80162c0 <_vfiprintf_r+0x218>)
 8016182:	429c      	cmp	r4, r3
 8016184:	bf08      	it	eq
 8016186:	68f4      	ldreq	r4, [r6, #12]
 8016188:	e79e      	b.n	80160c8 <_vfiprintf_r+0x20>
 801618a:	4621      	mov	r1, r4
 801618c:	4630      	mov	r0, r6
 801618e:	f000 faef 	bl	8016770 <__swsetup_r>
 8016192:	2800      	cmp	r0, #0
 8016194:	d09e      	beq.n	80160d4 <_vfiprintf_r+0x2c>
 8016196:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801619a:	b01d      	add	sp, #116	; 0x74
 801619c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80161a0:	2b25      	cmp	r3, #37	; 0x25
 80161a2:	d0a7      	beq.n	80160f4 <_vfiprintf_r+0x4c>
 80161a4:	46a8      	mov	r8, r5
 80161a6:	e7a0      	b.n	80160ea <_vfiprintf_r+0x42>
 80161a8:	4a43      	ldr	r2, [pc, #268]	; (80162b8 <_vfiprintf_r+0x210>)
 80161aa:	1a80      	subs	r0, r0, r2
 80161ac:	fa0b f000 	lsl.w	r0, fp, r0
 80161b0:	4318      	orrs	r0, r3
 80161b2:	9004      	str	r0, [sp, #16]
 80161b4:	4645      	mov	r5, r8
 80161b6:	e7bb      	b.n	8016130 <_vfiprintf_r+0x88>
 80161b8:	9a03      	ldr	r2, [sp, #12]
 80161ba:	1d11      	adds	r1, r2, #4
 80161bc:	6812      	ldr	r2, [r2, #0]
 80161be:	9103      	str	r1, [sp, #12]
 80161c0:	2a00      	cmp	r2, #0
 80161c2:	db01      	blt.n	80161c8 <_vfiprintf_r+0x120>
 80161c4:	9207      	str	r2, [sp, #28]
 80161c6:	e004      	b.n	80161d2 <_vfiprintf_r+0x12a>
 80161c8:	4252      	negs	r2, r2
 80161ca:	f043 0302 	orr.w	r3, r3, #2
 80161ce:	9207      	str	r2, [sp, #28]
 80161d0:	9304      	str	r3, [sp, #16]
 80161d2:	f898 3000 	ldrb.w	r3, [r8]
 80161d6:	2b2e      	cmp	r3, #46	; 0x2e
 80161d8:	d110      	bne.n	80161fc <_vfiprintf_r+0x154>
 80161da:	f898 3001 	ldrb.w	r3, [r8, #1]
 80161de:	2b2a      	cmp	r3, #42	; 0x2a
 80161e0:	f108 0101 	add.w	r1, r8, #1
 80161e4:	d137      	bne.n	8016256 <_vfiprintf_r+0x1ae>
 80161e6:	9b03      	ldr	r3, [sp, #12]
 80161e8:	1d1a      	adds	r2, r3, #4
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	9203      	str	r2, [sp, #12]
 80161ee:	2b00      	cmp	r3, #0
 80161f0:	bfb8      	it	lt
 80161f2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80161f6:	f108 0802 	add.w	r8, r8, #2
 80161fa:	9305      	str	r3, [sp, #20]
 80161fc:	4d31      	ldr	r5, [pc, #196]	; (80162c4 <_vfiprintf_r+0x21c>)
 80161fe:	f898 1000 	ldrb.w	r1, [r8]
 8016202:	2203      	movs	r2, #3
 8016204:	4628      	mov	r0, r5
 8016206:	f7ea f81b 	bl	8000240 <memchr>
 801620a:	b140      	cbz	r0, 801621e <_vfiprintf_r+0x176>
 801620c:	2340      	movs	r3, #64	; 0x40
 801620e:	1b40      	subs	r0, r0, r5
 8016210:	fa03 f000 	lsl.w	r0, r3, r0
 8016214:	9b04      	ldr	r3, [sp, #16]
 8016216:	4303      	orrs	r3, r0
 8016218:	9304      	str	r3, [sp, #16]
 801621a:	f108 0801 	add.w	r8, r8, #1
 801621e:	f898 1000 	ldrb.w	r1, [r8]
 8016222:	4829      	ldr	r0, [pc, #164]	; (80162c8 <_vfiprintf_r+0x220>)
 8016224:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016228:	2206      	movs	r2, #6
 801622a:	f108 0701 	add.w	r7, r8, #1
 801622e:	f7ea f807 	bl	8000240 <memchr>
 8016232:	2800      	cmp	r0, #0
 8016234:	d034      	beq.n	80162a0 <_vfiprintf_r+0x1f8>
 8016236:	4b25      	ldr	r3, [pc, #148]	; (80162cc <_vfiprintf_r+0x224>)
 8016238:	bb03      	cbnz	r3, 801627c <_vfiprintf_r+0x1d4>
 801623a:	9b03      	ldr	r3, [sp, #12]
 801623c:	3307      	adds	r3, #7
 801623e:	f023 0307 	bic.w	r3, r3, #7
 8016242:	3308      	adds	r3, #8
 8016244:	9303      	str	r3, [sp, #12]
 8016246:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016248:	444b      	add	r3, r9
 801624a:	9309      	str	r3, [sp, #36]	; 0x24
 801624c:	e74c      	b.n	80160e8 <_vfiprintf_r+0x40>
 801624e:	fb00 3202 	mla	r2, r0, r2, r3
 8016252:	2101      	movs	r1, #1
 8016254:	e786      	b.n	8016164 <_vfiprintf_r+0xbc>
 8016256:	2300      	movs	r3, #0
 8016258:	9305      	str	r3, [sp, #20]
 801625a:	4618      	mov	r0, r3
 801625c:	250a      	movs	r5, #10
 801625e:	4688      	mov	r8, r1
 8016260:	3101      	adds	r1, #1
 8016262:	f898 2000 	ldrb.w	r2, [r8]
 8016266:	3a30      	subs	r2, #48	; 0x30
 8016268:	2a09      	cmp	r2, #9
 801626a:	d903      	bls.n	8016274 <_vfiprintf_r+0x1cc>
 801626c:	2b00      	cmp	r3, #0
 801626e:	d0c5      	beq.n	80161fc <_vfiprintf_r+0x154>
 8016270:	9005      	str	r0, [sp, #20]
 8016272:	e7c3      	b.n	80161fc <_vfiprintf_r+0x154>
 8016274:	fb05 2000 	mla	r0, r5, r0, r2
 8016278:	2301      	movs	r3, #1
 801627a:	e7f0      	b.n	801625e <_vfiprintf_r+0x1b6>
 801627c:	ab03      	add	r3, sp, #12
 801627e:	9300      	str	r3, [sp, #0]
 8016280:	4622      	mov	r2, r4
 8016282:	4b13      	ldr	r3, [pc, #76]	; (80162d0 <_vfiprintf_r+0x228>)
 8016284:	a904      	add	r1, sp, #16
 8016286:	4630      	mov	r0, r6
 8016288:	f3af 8000 	nop.w
 801628c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8016290:	4681      	mov	r9, r0
 8016292:	d1d8      	bne.n	8016246 <_vfiprintf_r+0x19e>
 8016294:	89a3      	ldrh	r3, [r4, #12]
 8016296:	065b      	lsls	r3, r3, #25
 8016298:	f53f af7d 	bmi.w	8016196 <_vfiprintf_r+0xee>
 801629c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801629e:	e77c      	b.n	801619a <_vfiprintf_r+0xf2>
 80162a0:	ab03      	add	r3, sp, #12
 80162a2:	9300      	str	r3, [sp, #0]
 80162a4:	4622      	mov	r2, r4
 80162a6:	4b0a      	ldr	r3, [pc, #40]	; (80162d0 <_vfiprintf_r+0x228>)
 80162a8:	a904      	add	r1, sp, #16
 80162aa:	4630      	mov	r0, r6
 80162ac:	f000 f888 	bl	80163c0 <_printf_i>
 80162b0:	e7ec      	b.n	801628c <_vfiprintf_r+0x1e4>
 80162b2:	bf00      	nop
 80162b4:	0801a618 	.word	0x0801a618
 80162b8:	0801a65c 	.word	0x0801a65c
 80162bc:	0801a638 	.word	0x0801a638
 80162c0:	0801a5f8 	.word	0x0801a5f8
 80162c4:	0801a662 	.word	0x0801a662
 80162c8:	0801a666 	.word	0x0801a666
 80162cc:	00000000 	.word	0x00000000
 80162d0:	08016085 	.word	0x08016085

080162d4 <_printf_common>:
 80162d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80162d8:	4691      	mov	r9, r2
 80162da:	461f      	mov	r7, r3
 80162dc:	688a      	ldr	r2, [r1, #8]
 80162de:	690b      	ldr	r3, [r1, #16]
 80162e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80162e4:	4293      	cmp	r3, r2
 80162e6:	bfb8      	it	lt
 80162e8:	4613      	movlt	r3, r2
 80162ea:	f8c9 3000 	str.w	r3, [r9]
 80162ee:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80162f2:	4606      	mov	r6, r0
 80162f4:	460c      	mov	r4, r1
 80162f6:	b112      	cbz	r2, 80162fe <_printf_common+0x2a>
 80162f8:	3301      	adds	r3, #1
 80162fa:	f8c9 3000 	str.w	r3, [r9]
 80162fe:	6823      	ldr	r3, [r4, #0]
 8016300:	0699      	lsls	r1, r3, #26
 8016302:	bf42      	ittt	mi
 8016304:	f8d9 3000 	ldrmi.w	r3, [r9]
 8016308:	3302      	addmi	r3, #2
 801630a:	f8c9 3000 	strmi.w	r3, [r9]
 801630e:	6825      	ldr	r5, [r4, #0]
 8016310:	f015 0506 	ands.w	r5, r5, #6
 8016314:	d107      	bne.n	8016326 <_printf_common+0x52>
 8016316:	f104 0a19 	add.w	sl, r4, #25
 801631a:	68e3      	ldr	r3, [r4, #12]
 801631c:	f8d9 2000 	ldr.w	r2, [r9]
 8016320:	1a9b      	subs	r3, r3, r2
 8016322:	429d      	cmp	r5, r3
 8016324:	db29      	blt.n	801637a <_printf_common+0xa6>
 8016326:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 801632a:	6822      	ldr	r2, [r4, #0]
 801632c:	3300      	adds	r3, #0
 801632e:	bf18      	it	ne
 8016330:	2301      	movne	r3, #1
 8016332:	0692      	lsls	r2, r2, #26
 8016334:	d42e      	bmi.n	8016394 <_printf_common+0xc0>
 8016336:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801633a:	4639      	mov	r1, r7
 801633c:	4630      	mov	r0, r6
 801633e:	47c0      	blx	r8
 8016340:	3001      	adds	r0, #1
 8016342:	d021      	beq.n	8016388 <_printf_common+0xb4>
 8016344:	6823      	ldr	r3, [r4, #0]
 8016346:	68e5      	ldr	r5, [r4, #12]
 8016348:	f8d9 2000 	ldr.w	r2, [r9]
 801634c:	f003 0306 	and.w	r3, r3, #6
 8016350:	2b04      	cmp	r3, #4
 8016352:	bf08      	it	eq
 8016354:	1aad      	subeq	r5, r5, r2
 8016356:	68a3      	ldr	r3, [r4, #8]
 8016358:	6922      	ldr	r2, [r4, #16]
 801635a:	bf0c      	ite	eq
 801635c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8016360:	2500      	movne	r5, #0
 8016362:	4293      	cmp	r3, r2
 8016364:	bfc4      	itt	gt
 8016366:	1a9b      	subgt	r3, r3, r2
 8016368:	18ed      	addgt	r5, r5, r3
 801636a:	f04f 0900 	mov.w	r9, #0
 801636e:	341a      	adds	r4, #26
 8016370:	454d      	cmp	r5, r9
 8016372:	d11b      	bne.n	80163ac <_printf_common+0xd8>
 8016374:	2000      	movs	r0, #0
 8016376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801637a:	2301      	movs	r3, #1
 801637c:	4652      	mov	r2, sl
 801637e:	4639      	mov	r1, r7
 8016380:	4630      	mov	r0, r6
 8016382:	47c0      	blx	r8
 8016384:	3001      	adds	r0, #1
 8016386:	d103      	bne.n	8016390 <_printf_common+0xbc>
 8016388:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801638c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016390:	3501      	adds	r5, #1
 8016392:	e7c2      	b.n	801631a <_printf_common+0x46>
 8016394:	18e1      	adds	r1, r4, r3
 8016396:	1c5a      	adds	r2, r3, #1
 8016398:	2030      	movs	r0, #48	; 0x30
 801639a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801639e:	4422      	add	r2, r4
 80163a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80163a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80163a8:	3302      	adds	r3, #2
 80163aa:	e7c4      	b.n	8016336 <_printf_common+0x62>
 80163ac:	2301      	movs	r3, #1
 80163ae:	4622      	mov	r2, r4
 80163b0:	4639      	mov	r1, r7
 80163b2:	4630      	mov	r0, r6
 80163b4:	47c0      	blx	r8
 80163b6:	3001      	adds	r0, #1
 80163b8:	d0e6      	beq.n	8016388 <_printf_common+0xb4>
 80163ba:	f109 0901 	add.w	r9, r9, #1
 80163be:	e7d7      	b.n	8016370 <_printf_common+0x9c>

080163c0 <_printf_i>:
 80163c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80163c4:	4617      	mov	r7, r2
 80163c6:	7e0a      	ldrb	r2, [r1, #24]
 80163c8:	b085      	sub	sp, #20
 80163ca:	2a6e      	cmp	r2, #110	; 0x6e
 80163cc:	4698      	mov	r8, r3
 80163ce:	4606      	mov	r6, r0
 80163d0:	460c      	mov	r4, r1
 80163d2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80163d4:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80163d8:	f000 80bc 	beq.w	8016554 <_printf_i+0x194>
 80163dc:	d81a      	bhi.n	8016414 <_printf_i+0x54>
 80163de:	2a63      	cmp	r2, #99	; 0x63
 80163e0:	d02e      	beq.n	8016440 <_printf_i+0x80>
 80163e2:	d80a      	bhi.n	80163fa <_printf_i+0x3a>
 80163e4:	2a00      	cmp	r2, #0
 80163e6:	f000 80c8 	beq.w	801657a <_printf_i+0x1ba>
 80163ea:	2a58      	cmp	r2, #88	; 0x58
 80163ec:	f000 808a 	beq.w	8016504 <_printf_i+0x144>
 80163f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80163f4:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80163f8:	e02a      	b.n	8016450 <_printf_i+0x90>
 80163fa:	2a64      	cmp	r2, #100	; 0x64
 80163fc:	d001      	beq.n	8016402 <_printf_i+0x42>
 80163fe:	2a69      	cmp	r2, #105	; 0x69
 8016400:	d1f6      	bne.n	80163f0 <_printf_i+0x30>
 8016402:	6821      	ldr	r1, [r4, #0]
 8016404:	681a      	ldr	r2, [r3, #0]
 8016406:	f011 0f80 	tst.w	r1, #128	; 0x80
 801640a:	d023      	beq.n	8016454 <_printf_i+0x94>
 801640c:	1d11      	adds	r1, r2, #4
 801640e:	6019      	str	r1, [r3, #0]
 8016410:	6813      	ldr	r3, [r2, #0]
 8016412:	e027      	b.n	8016464 <_printf_i+0xa4>
 8016414:	2a73      	cmp	r2, #115	; 0x73
 8016416:	f000 80b4 	beq.w	8016582 <_printf_i+0x1c2>
 801641a:	d808      	bhi.n	801642e <_printf_i+0x6e>
 801641c:	2a6f      	cmp	r2, #111	; 0x6f
 801641e:	d02a      	beq.n	8016476 <_printf_i+0xb6>
 8016420:	2a70      	cmp	r2, #112	; 0x70
 8016422:	d1e5      	bne.n	80163f0 <_printf_i+0x30>
 8016424:	680a      	ldr	r2, [r1, #0]
 8016426:	f042 0220 	orr.w	r2, r2, #32
 801642a:	600a      	str	r2, [r1, #0]
 801642c:	e003      	b.n	8016436 <_printf_i+0x76>
 801642e:	2a75      	cmp	r2, #117	; 0x75
 8016430:	d021      	beq.n	8016476 <_printf_i+0xb6>
 8016432:	2a78      	cmp	r2, #120	; 0x78
 8016434:	d1dc      	bne.n	80163f0 <_printf_i+0x30>
 8016436:	2278      	movs	r2, #120	; 0x78
 8016438:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 801643c:	496e      	ldr	r1, [pc, #440]	; (80165f8 <_printf_i+0x238>)
 801643e:	e064      	b.n	801650a <_printf_i+0x14a>
 8016440:	681a      	ldr	r2, [r3, #0]
 8016442:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8016446:	1d11      	adds	r1, r2, #4
 8016448:	6019      	str	r1, [r3, #0]
 801644a:	6813      	ldr	r3, [r2, #0]
 801644c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8016450:	2301      	movs	r3, #1
 8016452:	e0a3      	b.n	801659c <_printf_i+0x1dc>
 8016454:	f011 0f40 	tst.w	r1, #64	; 0x40
 8016458:	f102 0104 	add.w	r1, r2, #4
 801645c:	6019      	str	r1, [r3, #0]
 801645e:	d0d7      	beq.n	8016410 <_printf_i+0x50>
 8016460:	f9b2 3000 	ldrsh.w	r3, [r2]
 8016464:	2b00      	cmp	r3, #0
 8016466:	da03      	bge.n	8016470 <_printf_i+0xb0>
 8016468:	222d      	movs	r2, #45	; 0x2d
 801646a:	425b      	negs	r3, r3
 801646c:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8016470:	4962      	ldr	r1, [pc, #392]	; (80165fc <_printf_i+0x23c>)
 8016472:	220a      	movs	r2, #10
 8016474:	e017      	b.n	80164a6 <_printf_i+0xe6>
 8016476:	6820      	ldr	r0, [r4, #0]
 8016478:	6819      	ldr	r1, [r3, #0]
 801647a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801647e:	d003      	beq.n	8016488 <_printf_i+0xc8>
 8016480:	1d08      	adds	r0, r1, #4
 8016482:	6018      	str	r0, [r3, #0]
 8016484:	680b      	ldr	r3, [r1, #0]
 8016486:	e006      	b.n	8016496 <_printf_i+0xd6>
 8016488:	f010 0f40 	tst.w	r0, #64	; 0x40
 801648c:	f101 0004 	add.w	r0, r1, #4
 8016490:	6018      	str	r0, [r3, #0]
 8016492:	d0f7      	beq.n	8016484 <_printf_i+0xc4>
 8016494:	880b      	ldrh	r3, [r1, #0]
 8016496:	4959      	ldr	r1, [pc, #356]	; (80165fc <_printf_i+0x23c>)
 8016498:	2a6f      	cmp	r2, #111	; 0x6f
 801649a:	bf14      	ite	ne
 801649c:	220a      	movne	r2, #10
 801649e:	2208      	moveq	r2, #8
 80164a0:	2000      	movs	r0, #0
 80164a2:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80164a6:	6865      	ldr	r5, [r4, #4]
 80164a8:	60a5      	str	r5, [r4, #8]
 80164aa:	2d00      	cmp	r5, #0
 80164ac:	f2c0 809c 	blt.w	80165e8 <_printf_i+0x228>
 80164b0:	6820      	ldr	r0, [r4, #0]
 80164b2:	f020 0004 	bic.w	r0, r0, #4
 80164b6:	6020      	str	r0, [r4, #0]
 80164b8:	2b00      	cmp	r3, #0
 80164ba:	d13f      	bne.n	801653c <_printf_i+0x17c>
 80164bc:	2d00      	cmp	r5, #0
 80164be:	f040 8095 	bne.w	80165ec <_printf_i+0x22c>
 80164c2:	4675      	mov	r5, lr
 80164c4:	2a08      	cmp	r2, #8
 80164c6:	d10b      	bne.n	80164e0 <_printf_i+0x120>
 80164c8:	6823      	ldr	r3, [r4, #0]
 80164ca:	07da      	lsls	r2, r3, #31
 80164cc:	d508      	bpl.n	80164e0 <_printf_i+0x120>
 80164ce:	6923      	ldr	r3, [r4, #16]
 80164d0:	6862      	ldr	r2, [r4, #4]
 80164d2:	429a      	cmp	r2, r3
 80164d4:	bfde      	ittt	le
 80164d6:	2330      	movle	r3, #48	; 0x30
 80164d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80164dc:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80164e0:	ebae 0305 	sub.w	r3, lr, r5
 80164e4:	6123      	str	r3, [r4, #16]
 80164e6:	f8cd 8000 	str.w	r8, [sp]
 80164ea:	463b      	mov	r3, r7
 80164ec:	aa03      	add	r2, sp, #12
 80164ee:	4621      	mov	r1, r4
 80164f0:	4630      	mov	r0, r6
 80164f2:	f7ff feef 	bl	80162d4 <_printf_common>
 80164f6:	3001      	adds	r0, #1
 80164f8:	d155      	bne.n	80165a6 <_printf_i+0x1e6>
 80164fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80164fe:	b005      	add	sp, #20
 8016500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8016504:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8016508:	493c      	ldr	r1, [pc, #240]	; (80165fc <_printf_i+0x23c>)
 801650a:	6822      	ldr	r2, [r4, #0]
 801650c:	6818      	ldr	r0, [r3, #0]
 801650e:	f012 0f80 	tst.w	r2, #128	; 0x80
 8016512:	f100 0504 	add.w	r5, r0, #4
 8016516:	601d      	str	r5, [r3, #0]
 8016518:	d001      	beq.n	801651e <_printf_i+0x15e>
 801651a:	6803      	ldr	r3, [r0, #0]
 801651c:	e002      	b.n	8016524 <_printf_i+0x164>
 801651e:	0655      	lsls	r5, r2, #25
 8016520:	d5fb      	bpl.n	801651a <_printf_i+0x15a>
 8016522:	8803      	ldrh	r3, [r0, #0]
 8016524:	07d0      	lsls	r0, r2, #31
 8016526:	bf44      	itt	mi
 8016528:	f042 0220 	orrmi.w	r2, r2, #32
 801652c:	6022      	strmi	r2, [r4, #0]
 801652e:	b91b      	cbnz	r3, 8016538 <_printf_i+0x178>
 8016530:	6822      	ldr	r2, [r4, #0]
 8016532:	f022 0220 	bic.w	r2, r2, #32
 8016536:	6022      	str	r2, [r4, #0]
 8016538:	2210      	movs	r2, #16
 801653a:	e7b1      	b.n	80164a0 <_printf_i+0xe0>
 801653c:	4675      	mov	r5, lr
 801653e:	fbb3 f0f2 	udiv	r0, r3, r2
 8016542:	fb02 3310 	mls	r3, r2, r0, r3
 8016546:	5ccb      	ldrb	r3, [r1, r3]
 8016548:	f805 3d01 	strb.w	r3, [r5, #-1]!
 801654c:	4603      	mov	r3, r0
 801654e:	2800      	cmp	r0, #0
 8016550:	d1f5      	bne.n	801653e <_printf_i+0x17e>
 8016552:	e7b7      	b.n	80164c4 <_printf_i+0x104>
 8016554:	6808      	ldr	r0, [r1, #0]
 8016556:	681a      	ldr	r2, [r3, #0]
 8016558:	6949      	ldr	r1, [r1, #20]
 801655a:	f010 0f80 	tst.w	r0, #128	; 0x80
 801655e:	d004      	beq.n	801656a <_printf_i+0x1aa>
 8016560:	1d10      	adds	r0, r2, #4
 8016562:	6018      	str	r0, [r3, #0]
 8016564:	6813      	ldr	r3, [r2, #0]
 8016566:	6019      	str	r1, [r3, #0]
 8016568:	e007      	b.n	801657a <_printf_i+0x1ba>
 801656a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801656e:	f102 0004 	add.w	r0, r2, #4
 8016572:	6018      	str	r0, [r3, #0]
 8016574:	6813      	ldr	r3, [r2, #0]
 8016576:	d0f6      	beq.n	8016566 <_printf_i+0x1a6>
 8016578:	8019      	strh	r1, [r3, #0]
 801657a:	2300      	movs	r3, #0
 801657c:	6123      	str	r3, [r4, #16]
 801657e:	4675      	mov	r5, lr
 8016580:	e7b1      	b.n	80164e6 <_printf_i+0x126>
 8016582:	681a      	ldr	r2, [r3, #0]
 8016584:	1d11      	adds	r1, r2, #4
 8016586:	6019      	str	r1, [r3, #0]
 8016588:	6815      	ldr	r5, [r2, #0]
 801658a:	6862      	ldr	r2, [r4, #4]
 801658c:	2100      	movs	r1, #0
 801658e:	4628      	mov	r0, r5
 8016590:	f7e9 fe56 	bl	8000240 <memchr>
 8016594:	b108      	cbz	r0, 801659a <_printf_i+0x1da>
 8016596:	1b40      	subs	r0, r0, r5
 8016598:	6060      	str	r0, [r4, #4]
 801659a:	6863      	ldr	r3, [r4, #4]
 801659c:	6123      	str	r3, [r4, #16]
 801659e:	2300      	movs	r3, #0
 80165a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80165a4:	e79f      	b.n	80164e6 <_printf_i+0x126>
 80165a6:	6923      	ldr	r3, [r4, #16]
 80165a8:	462a      	mov	r2, r5
 80165aa:	4639      	mov	r1, r7
 80165ac:	4630      	mov	r0, r6
 80165ae:	47c0      	blx	r8
 80165b0:	3001      	adds	r0, #1
 80165b2:	d0a2      	beq.n	80164fa <_printf_i+0x13a>
 80165b4:	6823      	ldr	r3, [r4, #0]
 80165b6:	079b      	lsls	r3, r3, #30
 80165b8:	d507      	bpl.n	80165ca <_printf_i+0x20a>
 80165ba:	2500      	movs	r5, #0
 80165bc:	f104 0919 	add.w	r9, r4, #25
 80165c0:	68e3      	ldr	r3, [r4, #12]
 80165c2:	9a03      	ldr	r2, [sp, #12]
 80165c4:	1a9b      	subs	r3, r3, r2
 80165c6:	429d      	cmp	r5, r3
 80165c8:	db05      	blt.n	80165d6 <_printf_i+0x216>
 80165ca:	68e0      	ldr	r0, [r4, #12]
 80165cc:	9b03      	ldr	r3, [sp, #12]
 80165ce:	4298      	cmp	r0, r3
 80165d0:	bfb8      	it	lt
 80165d2:	4618      	movlt	r0, r3
 80165d4:	e793      	b.n	80164fe <_printf_i+0x13e>
 80165d6:	2301      	movs	r3, #1
 80165d8:	464a      	mov	r2, r9
 80165da:	4639      	mov	r1, r7
 80165dc:	4630      	mov	r0, r6
 80165de:	47c0      	blx	r8
 80165e0:	3001      	adds	r0, #1
 80165e2:	d08a      	beq.n	80164fa <_printf_i+0x13a>
 80165e4:	3501      	adds	r5, #1
 80165e6:	e7eb      	b.n	80165c0 <_printf_i+0x200>
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d1a7      	bne.n	801653c <_printf_i+0x17c>
 80165ec:	780b      	ldrb	r3, [r1, #0]
 80165ee:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80165f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80165f6:	e765      	b.n	80164c4 <_printf_i+0x104>
 80165f8:	0801a67e 	.word	0x0801a67e
 80165fc:	0801a66d 	.word	0x0801a66d

08016600 <_sbrk_r>:
 8016600:	b538      	push	{r3, r4, r5, lr}
 8016602:	4c06      	ldr	r4, [pc, #24]	; (801661c <_sbrk_r+0x1c>)
 8016604:	2300      	movs	r3, #0
 8016606:	4605      	mov	r5, r0
 8016608:	4608      	mov	r0, r1
 801660a:	6023      	str	r3, [r4, #0]
 801660c:	f7fe ff16 	bl	801543c <_sbrk>
 8016610:	1c43      	adds	r3, r0, #1
 8016612:	d102      	bne.n	801661a <_sbrk_r+0x1a>
 8016614:	6823      	ldr	r3, [r4, #0]
 8016616:	b103      	cbz	r3, 801661a <_sbrk_r+0x1a>
 8016618:	602b      	str	r3, [r5, #0]
 801661a:	bd38      	pop	{r3, r4, r5, pc}
 801661c:	20007950 	.word	0x20007950

08016620 <__sread>:
 8016620:	b510      	push	{r4, lr}
 8016622:	460c      	mov	r4, r1
 8016624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016628:	f000 fa98 	bl	8016b5c <_read_r>
 801662c:	2800      	cmp	r0, #0
 801662e:	bfab      	itete	ge
 8016630:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016632:	89a3      	ldrhlt	r3, [r4, #12]
 8016634:	181b      	addge	r3, r3, r0
 8016636:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801663a:	bfac      	ite	ge
 801663c:	6563      	strge	r3, [r4, #84]	; 0x54
 801663e:	81a3      	strhlt	r3, [r4, #12]
 8016640:	bd10      	pop	{r4, pc}

08016642 <__swrite>:
 8016642:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016646:	461f      	mov	r7, r3
 8016648:	898b      	ldrh	r3, [r1, #12]
 801664a:	05db      	lsls	r3, r3, #23
 801664c:	4605      	mov	r5, r0
 801664e:	460c      	mov	r4, r1
 8016650:	4616      	mov	r6, r2
 8016652:	d505      	bpl.n	8016660 <__swrite+0x1e>
 8016654:	2302      	movs	r3, #2
 8016656:	2200      	movs	r2, #0
 8016658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801665c:	f000 f9b8 	bl	80169d0 <_lseek_r>
 8016660:	89a3      	ldrh	r3, [r4, #12]
 8016662:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016666:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801666a:	81a3      	strh	r3, [r4, #12]
 801666c:	4632      	mov	r2, r6
 801666e:	463b      	mov	r3, r7
 8016670:	4628      	mov	r0, r5
 8016672:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016676:	f000 b869 	b.w	801674c <_write_r>

0801667a <__sseek>:
 801667a:	b510      	push	{r4, lr}
 801667c:	460c      	mov	r4, r1
 801667e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016682:	f000 f9a5 	bl	80169d0 <_lseek_r>
 8016686:	1c43      	adds	r3, r0, #1
 8016688:	89a3      	ldrh	r3, [r4, #12]
 801668a:	bf15      	itete	ne
 801668c:	6560      	strne	r0, [r4, #84]	; 0x54
 801668e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016692:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016696:	81a3      	strheq	r3, [r4, #12]
 8016698:	bf18      	it	ne
 801669a:	81a3      	strhne	r3, [r4, #12]
 801669c:	bd10      	pop	{r4, pc}

0801669e <__sclose>:
 801669e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80166a2:	f000 b8d3 	b.w	801684c <_close_r>
	...

080166a8 <__swbuf_r>:
 80166a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80166aa:	460e      	mov	r6, r1
 80166ac:	4614      	mov	r4, r2
 80166ae:	4605      	mov	r5, r0
 80166b0:	b118      	cbz	r0, 80166ba <__swbuf_r+0x12>
 80166b2:	6983      	ldr	r3, [r0, #24]
 80166b4:	b90b      	cbnz	r3, 80166ba <__swbuf_r+0x12>
 80166b6:	f7ff fbe5 	bl	8015e84 <__sinit>
 80166ba:	4b21      	ldr	r3, [pc, #132]	; (8016740 <__swbuf_r+0x98>)
 80166bc:	429c      	cmp	r4, r3
 80166be:	d12a      	bne.n	8016716 <__swbuf_r+0x6e>
 80166c0:	686c      	ldr	r4, [r5, #4]
 80166c2:	69a3      	ldr	r3, [r4, #24]
 80166c4:	60a3      	str	r3, [r4, #8]
 80166c6:	89a3      	ldrh	r3, [r4, #12]
 80166c8:	071a      	lsls	r2, r3, #28
 80166ca:	d52e      	bpl.n	801672a <__swbuf_r+0x82>
 80166cc:	6923      	ldr	r3, [r4, #16]
 80166ce:	b363      	cbz	r3, 801672a <__swbuf_r+0x82>
 80166d0:	6923      	ldr	r3, [r4, #16]
 80166d2:	6820      	ldr	r0, [r4, #0]
 80166d4:	1ac0      	subs	r0, r0, r3
 80166d6:	6963      	ldr	r3, [r4, #20]
 80166d8:	b2f6      	uxtb	r6, r6
 80166da:	4298      	cmp	r0, r3
 80166dc:	4637      	mov	r7, r6
 80166de:	db04      	blt.n	80166ea <__swbuf_r+0x42>
 80166e0:	4621      	mov	r1, r4
 80166e2:	4628      	mov	r0, r5
 80166e4:	f000 f94a 	bl	801697c <_fflush_r>
 80166e8:	bb28      	cbnz	r0, 8016736 <__swbuf_r+0x8e>
 80166ea:	68a3      	ldr	r3, [r4, #8]
 80166ec:	3b01      	subs	r3, #1
 80166ee:	60a3      	str	r3, [r4, #8]
 80166f0:	6823      	ldr	r3, [r4, #0]
 80166f2:	1c5a      	adds	r2, r3, #1
 80166f4:	6022      	str	r2, [r4, #0]
 80166f6:	701e      	strb	r6, [r3, #0]
 80166f8:	6963      	ldr	r3, [r4, #20]
 80166fa:	3001      	adds	r0, #1
 80166fc:	4298      	cmp	r0, r3
 80166fe:	d004      	beq.n	801670a <__swbuf_r+0x62>
 8016700:	89a3      	ldrh	r3, [r4, #12]
 8016702:	07db      	lsls	r3, r3, #31
 8016704:	d519      	bpl.n	801673a <__swbuf_r+0x92>
 8016706:	2e0a      	cmp	r6, #10
 8016708:	d117      	bne.n	801673a <__swbuf_r+0x92>
 801670a:	4621      	mov	r1, r4
 801670c:	4628      	mov	r0, r5
 801670e:	f000 f935 	bl	801697c <_fflush_r>
 8016712:	b190      	cbz	r0, 801673a <__swbuf_r+0x92>
 8016714:	e00f      	b.n	8016736 <__swbuf_r+0x8e>
 8016716:	4b0b      	ldr	r3, [pc, #44]	; (8016744 <__swbuf_r+0x9c>)
 8016718:	429c      	cmp	r4, r3
 801671a:	d101      	bne.n	8016720 <__swbuf_r+0x78>
 801671c:	68ac      	ldr	r4, [r5, #8]
 801671e:	e7d0      	b.n	80166c2 <__swbuf_r+0x1a>
 8016720:	4b09      	ldr	r3, [pc, #36]	; (8016748 <__swbuf_r+0xa0>)
 8016722:	429c      	cmp	r4, r3
 8016724:	bf08      	it	eq
 8016726:	68ec      	ldreq	r4, [r5, #12]
 8016728:	e7cb      	b.n	80166c2 <__swbuf_r+0x1a>
 801672a:	4621      	mov	r1, r4
 801672c:	4628      	mov	r0, r5
 801672e:	f000 f81f 	bl	8016770 <__swsetup_r>
 8016732:	2800      	cmp	r0, #0
 8016734:	d0cc      	beq.n	80166d0 <__swbuf_r+0x28>
 8016736:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 801673a:	4638      	mov	r0, r7
 801673c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801673e:	bf00      	nop
 8016740:	0801a618 	.word	0x0801a618
 8016744:	0801a638 	.word	0x0801a638
 8016748:	0801a5f8 	.word	0x0801a5f8

0801674c <_write_r>:
 801674c:	b538      	push	{r3, r4, r5, lr}
 801674e:	4c07      	ldr	r4, [pc, #28]	; (801676c <_write_r+0x20>)
 8016750:	4605      	mov	r5, r0
 8016752:	4608      	mov	r0, r1
 8016754:	4611      	mov	r1, r2
 8016756:	2200      	movs	r2, #0
 8016758:	6022      	str	r2, [r4, #0]
 801675a:	461a      	mov	r2, r3
 801675c:	f7fe fea6 	bl	80154ac <_write>
 8016760:	1c43      	adds	r3, r0, #1
 8016762:	d102      	bne.n	801676a <_write_r+0x1e>
 8016764:	6823      	ldr	r3, [r4, #0]
 8016766:	b103      	cbz	r3, 801676a <_write_r+0x1e>
 8016768:	602b      	str	r3, [r5, #0]
 801676a:	bd38      	pop	{r3, r4, r5, pc}
 801676c:	20007950 	.word	0x20007950

08016770 <__swsetup_r>:
 8016770:	4b32      	ldr	r3, [pc, #200]	; (801683c <__swsetup_r+0xcc>)
 8016772:	b570      	push	{r4, r5, r6, lr}
 8016774:	681d      	ldr	r5, [r3, #0]
 8016776:	4606      	mov	r6, r0
 8016778:	460c      	mov	r4, r1
 801677a:	b125      	cbz	r5, 8016786 <__swsetup_r+0x16>
 801677c:	69ab      	ldr	r3, [r5, #24]
 801677e:	b913      	cbnz	r3, 8016786 <__swsetup_r+0x16>
 8016780:	4628      	mov	r0, r5
 8016782:	f7ff fb7f 	bl	8015e84 <__sinit>
 8016786:	4b2e      	ldr	r3, [pc, #184]	; (8016840 <__swsetup_r+0xd0>)
 8016788:	429c      	cmp	r4, r3
 801678a:	d10f      	bne.n	80167ac <__swsetup_r+0x3c>
 801678c:	686c      	ldr	r4, [r5, #4]
 801678e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016792:	b29a      	uxth	r2, r3
 8016794:	0715      	lsls	r5, r2, #28
 8016796:	d42c      	bmi.n	80167f2 <__swsetup_r+0x82>
 8016798:	06d0      	lsls	r0, r2, #27
 801679a:	d411      	bmi.n	80167c0 <__swsetup_r+0x50>
 801679c:	2209      	movs	r2, #9
 801679e:	6032      	str	r2, [r6, #0]
 80167a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80167a4:	81a3      	strh	r3, [r4, #12]
 80167a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80167aa:	bd70      	pop	{r4, r5, r6, pc}
 80167ac:	4b25      	ldr	r3, [pc, #148]	; (8016844 <__swsetup_r+0xd4>)
 80167ae:	429c      	cmp	r4, r3
 80167b0:	d101      	bne.n	80167b6 <__swsetup_r+0x46>
 80167b2:	68ac      	ldr	r4, [r5, #8]
 80167b4:	e7eb      	b.n	801678e <__swsetup_r+0x1e>
 80167b6:	4b24      	ldr	r3, [pc, #144]	; (8016848 <__swsetup_r+0xd8>)
 80167b8:	429c      	cmp	r4, r3
 80167ba:	bf08      	it	eq
 80167bc:	68ec      	ldreq	r4, [r5, #12]
 80167be:	e7e6      	b.n	801678e <__swsetup_r+0x1e>
 80167c0:	0751      	lsls	r1, r2, #29
 80167c2:	d512      	bpl.n	80167ea <__swsetup_r+0x7a>
 80167c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80167c6:	b141      	cbz	r1, 80167da <__swsetup_r+0x6a>
 80167c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80167cc:	4299      	cmp	r1, r3
 80167ce:	d002      	beq.n	80167d6 <__swsetup_r+0x66>
 80167d0:	4630      	mov	r0, r6
 80167d2:	f000 f975 	bl	8016ac0 <_free_r>
 80167d6:	2300      	movs	r3, #0
 80167d8:	6363      	str	r3, [r4, #52]	; 0x34
 80167da:	89a3      	ldrh	r3, [r4, #12]
 80167dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80167e0:	81a3      	strh	r3, [r4, #12]
 80167e2:	2300      	movs	r3, #0
 80167e4:	6063      	str	r3, [r4, #4]
 80167e6:	6923      	ldr	r3, [r4, #16]
 80167e8:	6023      	str	r3, [r4, #0]
 80167ea:	89a3      	ldrh	r3, [r4, #12]
 80167ec:	f043 0308 	orr.w	r3, r3, #8
 80167f0:	81a3      	strh	r3, [r4, #12]
 80167f2:	6923      	ldr	r3, [r4, #16]
 80167f4:	b94b      	cbnz	r3, 801680a <__swsetup_r+0x9a>
 80167f6:	89a3      	ldrh	r3, [r4, #12]
 80167f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80167fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016800:	d003      	beq.n	801680a <__swsetup_r+0x9a>
 8016802:	4621      	mov	r1, r4
 8016804:	4630      	mov	r0, r6
 8016806:	f000 f919 	bl	8016a3c <__smakebuf_r>
 801680a:	89a2      	ldrh	r2, [r4, #12]
 801680c:	f012 0301 	ands.w	r3, r2, #1
 8016810:	d00c      	beq.n	801682c <__swsetup_r+0xbc>
 8016812:	2300      	movs	r3, #0
 8016814:	60a3      	str	r3, [r4, #8]
 8016816:	6963      	ldr	r3, [r4, #20]
 8016818:	425b      	negs	r3, r3
 801681a:	61a3      	str	r3, [r4, #24]
 801681c:	6923      	ldr	r3, [r4, #16]
 801681e:	b953      	cbnz	r3, 8016836 <__swsetup_r+0xc6>
 8016820:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016824:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8016828:	d1ba      	bne.n	80167a0 <__swsetup_r+0x30>
 801682a:	bd70      	pop	{r4, r5, r6, pc}
 801682c:	0792      	lsls	r2, r2, #30
 801682e:	bf58      	it	pl
 8016830:	6963      	ldrpl	r3, [r4, #20]
 8016832:	60a3      	str	r3, [r4, #8]
 8016834:	e7f2      	b.n	801681c <__swsetup_r+0xac>
 8016836:	2000      	movs	r0, #0
 8016838:	e7f7      	b.n	801682a <__swsetup_r+0xba>
 801683a:	bf00      	nop
 801683c:	20000140 	.word	0x20000140
 8016840:	0801a618 	.word	0x0801a618
 8016844:	0801a638 	.word	0x0801a638
 8016848:	0801a5f8 	.word	0x0801a5f8

0801684c <_close_r>:
 801684c:	b538      	push	{r3, r4, r5, lr}
 801684e:	4c06      	ldr	r4, [pc, #24]	; (8016868 <_close_r+0x1c>)
 8016850:	2300      	movs	r3, #0
 8016852:	4605      	mov	r5, r0
 8016854:	4608      	mov	r0, r1
 8016856:	6023      	str	r3, [r4, #0]
 8016858:	f7fe fe44 	bl	80154e4 <_close>
 801685c:	1c43      	adds	r3, r0, #1
 801685e:	d102      	bne.n	8016866 <_close_r+0x1a>
 8016860:	6823      	ldr	r3, [r4, #0]
 8016862:	b103      	cbz	r3, 8016866 <_close_r+0x1a>
 8016864:	602b      	str	r3, [r5, #0]
 8016866:	bd38      	pop	{r3, r4, r5, pc}
 8016868:	20007950 	.word	0x20007950

0801686c <__sflush_r>:
 801686c:	898a      	ldrh	r2, [r1, #12]
 801686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016872:	4605      	mov	r5, r0
 8016874:	0710      	lsls	r0, r2, #28
 8016876:	460c      	mov	r4, r1
 8016878:	d45a      	bmi.n	8016930 <__sflush_r+0xc4>
 801687a:	684b      	ldr	r3, [r1, #4]
 801687c:	2b00      	cmp	r3, #0
 801687e:	dc05      	bgt.n	801688c <__sflush_r+0x20>
 8016880:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016882:	2b00      	cmp	r3, #0
 8016884:	dc02      	bgt.n	801688c <__sflush_r+0x20>
 8016886:	2000      	movs	r0, #0
 8016888:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801688c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801688e:	2e00      	cmp	r6, #0
 8016890:	d0f9      	beq.n	8016886 <__sflush_r+0x1a>
 8016892:	2300      	movs	r3, #0
 8016894:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016898:	682f      	ldr	r7, [r5, #0]
 801689a:	602b      	str	r3, [r5, #0]
 801689c:	d033      	beq.n	8016906 <__sflush_r+0x9a>
 801689e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80168a0:	89a3      	ldrh	r3, [r4, #12]
 80168a2:	075a      	lsls	r2, r3, #29
 80168a4:	d505      	bpl.n	80168b2 <__sflush_r+0x46>
 80168a6:	6863      	ldr	r3, [r4, #4]
 80168a8:	1ac0      	subs	r0, r0, r3
 80168aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80168ac:	b10b      	cbz	r3, 80168b2 <__sflush_r+0x46>
 80168ae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80168b0:	1ac0      	subs	r0, r0, r3
 80168b2:	2300      	movs	r3, #0
 80168b4:	4602      	mov	r2, r0
 80168b6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80168b8:	6a21      	ldr	r1, [r4, #32]
 80168ba:	4628      	mov	r0, r5
 80168bc:	47b0      	blx	r6
 80168be:	1c43      	adds	r3, r0, #1
 80168c0:	89a3      	ldrh	r3, [r4, #12]
 80168c2:	d106      	bne.n	80168d2 <__sflush_r+0x66>
 80168c4:	6829      	ldr	r1, [r5, #0]
 80168c6:	291d      	cmp	r1, #29
 80168c8:	d84b      	bhi.n	8016962 <__sflush_r+0xf6>
 80168ca:	4a2b      	ldr	r2, [pc, #172]	; (8016978 <__sflush_r+0x10c>)
 80168cc:	40ca      	lsrs	r2, r1
 80168ce:	07d6      	lsls	r6, r2, #31
 80168d0:	d547      	bpl.n	8016962 <__sflush_r+0xf6>
 80168d2:	2200      	movs	r2, #0
 80168d4:	6062      	str	r2, [r4, #4]
 80168d6:	04d9      	lsls	r1, r3, #19
 80168d8:	6922      	ldr	r2, [r4, #16]
 80168da:	6022      	str	r2, [r4, #0]
 80168dc:	d504      	bpl.n	80168e8 <__sflush_r+0x7c>
 80168de:	1c42      	adds	r2, r0, #1
 80168e0:	d101      	bne.n	80168e6 <__sflush_r+0x7a>
 80168e2:	682b      	ldr	r3, [r5, #0]
 80168e4:	b903      	cbnz	r3, 80168e8 <__sflush_r+0x7c>
 80168e6:	6560      	str	r0, [r4, #84]	; 0x54
 80168e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80168ea:	602f      	str	r7, [r5, #0]
 80168ec:	2900      	cmp	r1, #0
 80168ee:	d0ca      	beq.n	8016886 <__sflush_r+0x1a>
 80168f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80168f4:	4299      	cmp	r1, r3
 80168f6:	d002      	beq.n	80168fe <__sflush_r+0x92>
 80168f8:	4628      	mov	r0, r5
 80168fa:	f000 f8e1 	bl	8016ac0 <_free_r>
 80168fe:	2000      	movs	r0, #0
 8016900:	6360      	str	r0, [r4, #52]	; 0x34
 8016902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016906:	6a21      	ldr	r1, [r4, #32]
 8016908:	2301      	movs	r3, #1
 801690a:	4628      	mov	r0, r5
 801690c:	47b0      	blx	r6
 801690e:	1c41      	adds	r1, r0, #1
 8016910:	d1c6      	bne.n	80168a0 <__sflush_r+0x34>
 8016912:	682b      	ldr	r3, [r5, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d0c3      	beq.n	80168a0 <__sflush_r+0x34>
 8016918:	2b1d      	cmp	r3, #29
 801691a:	d001      	beq.n	8016920 <__sflush_r+0xb4>
 801691c:	2b16      	cmp	r3, #22
 801691e:	d101      	bne.n	8016924 <__sflush_r+0xb8>
 8016920:	602f      	str	r7, [r5, #0]
 8016922:	e7b0      	b.n	8016886 <__sflush_r+0x1a>
 8016924:	89a3      	ldrh	r3, [r4, #12]
 8016926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801692a:	81a3      	strh	r3, [r4, #12]
 801692c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016930:	690f      	ldr	r7, [r1, #16]
 8016932:	2f00      	cmp	r7, #0
 8016934:	d0a7      	beq.n	8016886 <__sflush_r+0x1a>
 8016936:	0793      	lsls	r3, r2, #30
 8016938:	680e      	ldr	r6, [r1, #0]
 801693a:	bf08      	it	eq
 801693c:	694b      	ldreq	r3, [r1, #20]
 801693e:	600f      	str	r7, [r1, #0]
 8016940:	bf18      	it	ne
 8016942:	2300      	movne	r3, #0
 8016944:	eba6 0807 	sub.w	r8, r6, r7
 8016948:	608b      	str	r3, [r1, #8]
 801694a:	f1b8 0f00 	cmp.w	r8, #0
 801694e:	dd9a      	ble.n	8016886 <__sflush_r+0x1a>
 8016950:	4643      	mov	r3, r8
 8016952:	463a      	mov	r2, r7
 8016954:	6a21      	ldr	r1, [r4, #32]
 8016956:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016958:	4628      	mov	r0, r5
 801695a:	47b0      	blx	r6
 801695c:	2800      	cmp	r0, #0
 801695e:	dc07      	bgt.n	8016970 <__sflush_r+0x104>
 8016960:	89a3      	ldrh	r3, [r4, #12]
 8016962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016966:	81a3      	strh	r3, [r4, #12]
 8016968:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801696c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016970:	4407      	add	r7, r0
 8016972:	eba8 0800 	sub.w	r8, r8, r0
 8016976:	e7e8      	b.n	801694a <__sflush_r+0xde>
 8016978:	20400001 	.word	0x20400001

0801697c <_fflush_r>:
 801697c:	b538      	push	{r3, r4, r5, lr}
 801697e:	690b      	ldr	r3, [r1, #16]
 8016980:	4605      	mov	r5, r0
 8016982:	460c      	mov	r4, r1
 8016984:	b1db      	cbz	r3, 80169be <_fflush_r+0x42>
 8016986:	b118      	cbz	r0, 8016990 <_fflush_r+0x14>
 8016988:	6983      	ldr	r3, [r0, #24]
 801698a:	b90b      	cbnz	r3, 8016990 <_fflush_r+0x14>
 801698c:	f7ff fa7a 	bl	8015e84 <__sinit>
 8016990:	4b0c      	ldr	r3, [pc, #48]	; (80169c4 <_fflush_r+0x48>)
 8016992:	429c      	cmp	r4, r3
 8016994:	d109      	bne.n	80169aa <_fflush_r+0x2e>
 8016996:	686c      	ldr	r4, [r5, #4]
 8016998:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801699c:	b17b      	cbz	r3, 80169be <_fflush_r+0x42>
 801699e:	4621      	mov	r1, r4
 80169a0:	4628      	mov	r0, r5
 80169a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80169a6:	f7ff bf61 	b.w	801686c <__sflush_r>
 80169aa:	4b07      	ldr	r3, [pc, #28]	; (80169c8 <_fflush_r+0x4c>)
 80169ac:	429c      	cmp	r4, r3
 80169ae:	d101      	bne.n	80169b4 <_fflush_r+0x38>
 80169b0:	68ac      	ldr	r4, [r5, #8]
 80169b2:	e7f1      	b.n	8016998 <_fflush_r+0x1c>
 80169b4:	4b05      	ldr	r3, [pc, #20]	; (80169cc <_fflush_r+0x50>)
 80169b6:	429c      	cmp	r4, r3
 80169b8:	bf08      	it	eq
 80169ba:	68ec      	ldreq	r4, [r5, #12]
 80169bc:	e7ec      	b.n	8016998 <_fflush_r+0x1c>
 80169be:	2000      	movs	r0, #0
 80169c0:	bd38      	pop	{r3, r4, r5, pc}
 80169c2:	bf00      	nop
 80169c4:	0801a618 	.word	0x0801a618
 80169c8:	0801a638 	.word	0x0801a638
 80169cc:	0801a5f8 	.word	0x0801a5f8

080169d0 <_lseek_r>:
 80169d0:	b538      	push	{r3, r4, r5, lr}
 80169d2:	4c07      	ldr	r4, [pc, #28]	; (80169f0 <_lseek_r+0x20>)
 80169d4:	4605      	mov	r5, r0
 80169d6:	4608      	mov	r0, r1
 80169d8:	4611      	mov	r1, r2
 80169da:	2200      	movs	r2, #0
 80169dc:	6022      	str	r2, [r4, #0]
 80169de:	461a      	mov	r2, r3
 80169e0:	f7fe fda7 	bl	8015532 <_lseek>
 80169e4:	1c43      	adds	r3, r0, #1
 80169e6:	d102      	bne.n	80169ee <_lseek_r+0x1e>
 80169e8:	6823      	ldr	r3, [r4, #0]
 80169ea:	b103      	cbz	r3, 80169ee <_lseek_r+0x1e>
 80169ec:	602b      	str	r3, [r5, #0]
 80169ee:	bd38      	pop	{r3, r4, r5, pc}
 80169f0:	20007950 	.word	0x20007950

080169f4 <__swhatbuf_r>:
 80169f4:	b570      	push	{r4, r5, r6, lr}
 80169f6:	460e      	mov	r6, r1
 80169f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80169fc:	2900      	cmp	r1, #0
 80169fe:	b090      	sub	sp, #64	; 0x40
 8016a00:	4614      	mov	r4, r2
 8016a02:	461d      	mov	r5, r3
 8016a04:	da07      	bge.n	8016a16 <__swhatbuf_r+0x22>
 8016a06:	2300      	movs	r3, #0
 8016a08:	602b      	str	r3, [r5, #0]
 8016a0a:	89b3      	ldrh	r3, [r6, #12]
 8016a0c:	061a      	lsls	r2, r3, #24
 8016a0e:	d410      	bmi.n	8016a32 <__swhatbuf_r+0x3e>
 8016a10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016a14:	e00e      	b.n	8016a34 <__swhatbuf_r+0x40>
 8016a16:	aa01      	add	r2, sp, #4
 8016a18:	f000 f8b2 	bl	8016b80 <_fstat_r>
 8016a1c:	2800      	cmp	r0, #0
 8016a1e:	dbf2      	blt.n	8016a06 <__swhatbuf_r+0x12>
 8016a20:	9a02      	ldr	r2, [sp, #8]
 8016a22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016a26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016a2a:	425a      	negs	r2, r3
 8016a2c:	415a      	adcs	r2, r3
 8016a2e:	602a      	str	r2, [r5, #0]
 8016a30:	e7ee      	b.n	8016a10 <__swhatbuf_r+0x1c>
 8016a32:	2340      	movs	r3, #64	; 0x40
 8016a34:	2000      	movs	r0, #0
 8016a36:	6023      	str	r3, [r4, #0]
 8016a38:	b010      	add	sp, #64	; 0x40
 8016a3a:	bd70      	pop	{r4, r5, r6, pc}

08016a3c <__smakebuf_r>:
 8016a3c:	898b      	ldrh	r3, [r1, #12]
 8016a3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016a40:	079d      	lsls	r5, r3, #30
 8016a42:	4606      	mov	r6, r0
 8016a44:	460c      	mov	r4, r1
 8016a46:	d507      	bpl.n	8016a58 <__smakebuf_r+0x1c>
 8016a48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016a4c:	6023      	str	r3, [r4, #0]
 8016a4e:	6123      	str	r3, [r4, #16]
 8016a50:	2301      	movs	r3, #1
 8016a52:	6163      	str	r3, [r4, #20]
 8016a54:	b002      	add	sp, #8
 8016a56:	bd70      	pop	{r4, r5, r6, pc}
 8016a58:	ab01      	add	r3, sp, #4
 8016a5a:	466a      	mov	r2, sp
 8016a5c:	f7ff ffca 	bl	80169f4 <__swhatbuf_r>
 8016a60:	9900      	ldr	r1, [sp, #0]
 8016a62:	4605      	mov	r5, r0
 8016a64:	4630      	mov	r0, r6
 8016a66:	f7ff fa97 	bl	8015f98 <_malloc_r>
 8016a6a:	b948      	cbnz	r0, 8016a80 <__smakebuf_r+0x44>
 8016a6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016a70:	059a      	lsls	r2, r3, #22
 8016a72:	d4ef      	bmi.n	8016a54 <__smakebuf_r+0x18>
 8016a74:	f023 0303 	bic.w	r3, r3, #3
 8016a78:	f043 0302 	orr.w	r3, r3, #2
 8016a7c:	81a3      	strh	r3, [r4, #12]
 8016a7e:	e7e3      	b.n	8016a48 <__smakebuf_r+0xc>
 8016a80:	4b0d      	ldr	r3, [pc, #52]	; (8016ab8 <__smakebuf_r+0x7c>)
 8016a82:	62b3      	str	r3, [r6, #40]	; 0x28
 8016a84:	89a3      	ldrh	r3, [r4, #12]
 8016a86:	6020      	str	r0, [r4, #0]
 8016a88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016a8c:	81a3      	strh	r3, [r4, #12]
 8016a8e:	9b00      	ldr	r3, [sp, #0]
 8016a90:	6163      	str	r3, [r4, #20]
 8016a92:	9b01      	ldr	r3, [sp, #4]
 8016a94:	6120      	str	r0, [r4, #16]
 8016a96:	b15b      	cbz	r3, 8016ab0 <__smakebuf_r+0x74>
 8016a98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016a9c:	4630      	mov	r0, r6
 8016a9e:	f000 f881 	bl	8016ba4 <_isatty_r>
 8016aa2:	b128      	cbz	r0, 8016ab0 <__smakebuf_r+0x74>
 8016aa4:	89a3      	ldrh	r3, [r4, #12]
 8016aa6:	f023 0303 	bic.w	r3, r3, #3
 8016aaa:	f043 0301 	orr.w	r3, r3, #1
 8016aae:	81a3      	strh	r3, [r4, #12]
 8016ab0:	89a3      	ldrh	r3, [r4, #12]
 8016ab2:	431d      	orrs	r5, r3
 8016ab4:	81a5      	strh	r5, [r4, #12]
 8016ab6:	e7cd      	b.n	8016a54 <__smakebuf_r+0x18>
 8016ab8:	08015e05 	.word	0x08015e05

08016abc <__malloc_lock>:
 8016abc:	4770      	bx	lr

08016abe <__malloc_unlock>:
 8016abe:	4770      	bx	lr

08016ac0 <_free_r>:
 8016ac0:	b538      	push	{r3, r4, r5, lr}
 8016ac2:	4605      	mov	r5, r0
 8016ac4:	2900      	cmp	r1, #0
 8016ac6:	d045      	beq.n	8016b54 <_free_r+0x94>
 8016ac8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016acc:	1f0c      	subs	r4, r1, #4
 8016ace:	2b00      	cmp	r3, #0
 8016ad0:	bfb8      	it	lt
 8016ad2:	18e4      	addlt	r4, r4, r3
 8016ad4:	f7ff fff2 	bl	8016abc <__malloc_lock>
 8016ad8:	4a1f      	ldr	r2, [pc, #124]	; (8016b58 <_free_r+0x98>)
 8016ada:	6813      	ldr	r3, [r2, #0]
 8016adc:	4610      	mov	r0, r2
 8016ade:	b933      	cbnz	r3, 8016aee <_free_r+0x2e>
 8016ae0:	6063      	str	r3, [r4, #4]
 8016ae2:	6014      	str	r4, [r2, #0]
 8016ae4:	4628      	mov	r0, r5
 8016ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8016aea:	f7ff bfe8 	b.w	8016abe <__malloc_unlock>
 8016aee:	42a3      	cmp	r3, r4
 8016af0:	d90c      	bls.n	8016b0c <_free_r+0x4c>
 8016af2:	6821      	ldr	r1, [r4, #0]
 8016af4:	1862      	adds	r2, r4, r1
 8016af6:	4293      	cmp	r3, r2
 8016af8:	bf04      	itt	eq
 8016afa:	681a      	ldreq	r2, [r3, #0]
 8016afc:	685b      	ldreq	r3, [r3, #4]
 8016afe:	6063      	str	r3, [r4, #4]
 8016b00:	bf04      	itt	eq
 8016b02:	1852      	addeq	r2, r2, r1
 8016b04:	6022      	streq	r2, [r4, #0]
 8016b06:	6004      	str	r4, [r0, #0]
 8016b08:	e7ec      	b.n	8016ae4 <_free_r+0x24>
 8016b0a:	4613      	mov	r3, r2
 8016b0c:	685a      	ldr	r2, [r3, #4]
 8016b0e:	b10a      	cbz	r2, 8016b14 <_free_r+0x54>
 8016b10:	42a2      	cmp	r2, r4
 8016b12:	d9fa      	bls.n	8016b0a <_free_r+0x4a>
 8016b14:	6819      	ldr	r1, [r3, #0]
 8016b16:	1858      	adds	r0, r3, r1
 8016b18:	42a0      	cmp	r0, r4
 8016b1a:	d10b      	bne.n	8016b34 <_free_r+0x74>
 8016b1c:	6820      	ldr	r0, [r4, #0]
 8016b1e:	4401      	add	r1, r0
 8016b20:	1858      	adds	r0, r3, r1
 8016b22:	4282      	cmp	r2, r0
 8016b24:	6019      	str	r1, [r3, #0]
 8016b26:	d1dd      	bne.n	8016ae4 <_free_r+0x24>
 8016b28:	6810      	ldr	r0, [r2, #0]
 8016b2a:	6852      	ldr	r2, [r2, #4]
 8016b2c:	605a      	str	r2, [r3, #4]
 8016b2e:	4401      	add	r1, r0
 8016b30:	6019      	str	r1, [r3, #0]
 8016b32:	e7d7      	b.n	8016ae4 <_free_r+0x24>
 8016b34:	d902      	bls.n	8016b3c <_free_r+0x7c>
 8016b36:	230c      	movs	r3, #12
 8016b38:	602b      	str	r3, [r5, #0]
 8016b3a:	e7d3      	b.n	8016ae4 <_free_r+0x24>
 8016b3c:	6820      	ldr	r0, [r4, #0]
 8016b3e:	1821      	adds	r1, r4, r0
 8016b40:	428a      	cmp	r2, r1
 8016b42:	bf04      	itt	eq
 8016b44:	6811      	ldreq	r1, [r2, #0]
 8016b46:	6852      	ldreq	r2, [r2, #4]
 8016b48:	6062      	str	r2, [r4, #4]
 8016b4a:	bf04      	itt	eq
 8016b4c:	1809      	addeq	r1, r1, r0
 8016b4e:	6021      	streq	r1, [r4, #0]
 8016b50:	605c      	str	r4, [r3, #4]
 8016b52:	e7c7      	b.n	8016ae4 <_free_r+0x24>
 8016b54:	bd38      	pop	{r3, r4, r5, pc}
 8016b56:	bf00      	nop
 8016b58:	20004198 	.word	0x20004198

08016b5c <_read_r>:
 8016b5c:	b538      	push	{r3, r4, r5, lr}
 8016b5e:	4c07      	ldr	r4, [pc, #28]	; (8016b7c <_read_r+0x20>)
 8016b60:	4605      	mov	r5, r0
 8016b62:	4608      	mov	r0, r1
 8016b64:	4611      	mov	r1, r2
 8016b66:	2200      	movs	r2, #0
 8016b68:	6022      	str	r2, [r4, #0]
 8016b6a:	461a      	mov	r2, r3
 8016b6c:	f7fe fcee 	bl	801554c <_read>
 8016b70:	1c43      	adds	r3, r0, #1
 8016b72:	d102      	bne.n	8016b7a <_read_r+0x1e>
 8016b74:	6823      	ldr	r3, [r4, #0]
 8016b76:	b103      	cbz	r3, 8016b7a <_read_r+0x1e>
 8016b78:	602b      	str	r3, [r5, #0]
 8016b7a:	bd38      	pop	{r3, r4, r5, pc}
 8016b7c:	20007950 	.word	0x20007950

08016b80 <_fstat_r>:
 8016b80:	b538      	push	{r3, r4, r5, lr}
 8016b82:	4c07      	ldr	r4, [pc, #28]	; (8016ba0 <_fstat_r+0x20>)
 8016b84:	2300      	movs	r3, #0
 8016b86:	4605      	mov	r5, r0
 8016b88:	4608      	mov	r0, r1
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	6023      	str	r3, [r4, #0]
 8016b8e:	f7fe fcb5 	bl	80154fc <_fstat>
 8016b92:	1c43      	adds	r3, r0, #1
 8016b94:	d102      	bne.n	8016b9c <_fstat_r+0x1c>
 8016b96:	6823      	ldr	r3, [r4, #0]
 8016b98:	b103      	cbz	r3, 8016b9c <_fstat_r+0x1c>
 8016b9a:	602b      	str	r3, [r5, #0]
 8016b9c:	bd38      	pop	{r3, r4, r5, pc}
 8016b9e:	bf00      	nop
 8016ba0:	20007950 	.word	0x20007950

08016ba4 <_isatty_r>:
 8016ba4:	b538      	push	{r3, r4, r5, lr}
 8016ba6:	4c06      	ldr	r4, [pc, #24]	; (8016bc0 <_isatty_r+0x1c>)
 8016ba8:	2300      	movs	r3, #0
 8016baa:	4605      	mov	r5, r0
 8016bac:	4608      	mov	r0, r1
 8016bae:	6023      	str	r3, [r4, #0]
 8016bb0:	f7fe fcb4 	bl	801551c <_isatty>
 8016bb4:	1c43      	adds	r3, r0, #1
 8016bb6:	d102      	bne.n	8016bbe <_isatty_r+0x1a>
 8016bb8:	6823      	ldr	r3, [r4, #0]
 8016bba:	b103      	cbz	r3, 8016bbe <_isatty_r+0x1a>
 8016bbc:	602b      	str	r3, [r5, #0]
 8016bbe:	bd38      	pop	{r3, r4, r5, pc}
 8016bc0:	20007950 	.word	0x20007950

08016bc4 <pow>:
 8016bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016bc8:	ed2d 8b04 	vpush	{d8-d9}
 8016bcc:	b08d      	sub	sp, #52	; 0x34
 8016bce:	ec57 6b10 	vmov	r6, r7, d0
 8016bd2:	ec55 4b11 	vmov	r4, r5, d1
 8016bd6:	f000 f96f 	bl	8016eb8 <__ieee754_pow>
 8016bda:	4bae      	ldr	r3, [pc, #696]	; (8016e94 <pow+0x2d0>)
 8016bdc:	eeb0 8a40 	vmov.f32	s16, s0
 8016be0:	eef0 8a60 	vmov.f32	s17, s1
 8016be4:	f993 9000 	ldrsb.w	r9, [r3]
 8016be8:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
 8016bec:	4698      	mov	r8, r3
 8016bee:	d05f      	beq.n	8016cb0 <pow+0xec>
 8016bf0:	4622      	mov	r2, r4
 8016bf2:	462b      	mov	r3, r5
 8016bf4:	4620      	mov	r0, r4
 8016bf6:	4629      	mov	r1, r5
 8016bf8:	f7e9 ffc4 	bl	8000b84 <__aeabi_dcmpun>
 8016bfc:	4683      	mov	fp, r0
 8016bfe:	2800      	cmp	r0, #0
 8016c00:	d156      	bne.n	8016cb0 <pow+0xec>
 8016c02:	4632      	mov	r2, r6
 8016c04:	463b      	mov	r3, r7
 8016c06:	4630      	mov	r0, r6
 8016c08:	4639      	mov	r1, r7
 8016c0a:	f7e9 ffbb 	bl	8000b84 <__aeabi_dcmpun>
 8016c0e:	9001      	str	r0, [sp, #4]
 8016c10:	b1e8      	cbz	r0, 8016c4e <pow+0x8a>
 8016c12:	2200      	movs	r2, #0
 8016c14:	2300      	movs	r3, #0
 8016c16:	4620      	mov	r0, r4
 8016c18:	4629      	mov	r1, r5
 8016c1a:	f7e9 ff81 	bl	8000b20 <__aeabi_dcmpeq>
 8016c1e:	2800      	cmp	r0, #0
 8016c20:	d046      	beq.n	8016cb0 <pow+0xec>
 8016c22:	2301      	movs	r3, #1
 8016c24:	9302      	str	r3, [sp, #8]
 8016c26:	4b9c      	ldr	r3, [pc, #624]	; (8016e98 <pow+0x2d4>)
 8016c28:	9303      	str	r3, [sp, #12]
 8016c2a:	4b9c      	ldr	r3, [pc, #624]	; (8016e9c <pow+0x2d8>)
 8016c2c:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8016c30:	2200      	movs	r2, #0
 8016c32:	f1b9 0f02 	cmp.w	r9, #2
 8016c36:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016c3a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016c3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016c42:	d033      	beq.n	8016cac <pow+0xe8>
 8016c44:	a802      	add	r0, sp, #8
 8016c46:	f000 ff08 	bl	8017a5a <matherr>
 8016c4a:	bb48      	cbnz	r0, 8016ca0 <pow+0xdc>
 8016c4c:	e05e      	b.n	8016d0c <pow+0x148>
 8016c4e:	f04f 0a00 	mov.w	sl, #0
 8016c52:	f04f 0b00 	mov.w	fp, #0
 8016c56:	4652      	mov	r2, sl
 8016c58:	465b      	mov	r3, fp
 8016c5a:	4630      	mov	r0, r6
 8016c5c:	4639      	mov	r1, r7
 8016c5e:	f7e9 ff5f 	bl	8000b20 <__aeabi_dcmpeq>
 8016c62:	ec4b ab19 	vmov	d9, sl, fp
 8016c66:	2800      	cmp	r0, #0
 8016c68:	d055      	beq.n	8016d16 <pow+0x152>
 8016c6a:	4652      	mov	r2, sl
 8016c6c:	465b      	mov	r3, fp
 8016c6e:	4620      	mov	r0, r4
 8016c70:	4629      	mov	r1, r5
 8016c72:	f7e9 ff55 	bl	8000b20 <__aeabi_dcmpeq>
 8016c76:	4680      	mov	r8, r0
 8016c78:	b318      	cbz	r0, 8016cc2 <pow+0xfe>
 8016c7a:	2301      	movs	r3, #1
 8016c7c:	9302      	str	r3, [sp, #8]
 8016c7e:	4b86      	ldr	r3, [pc, #536]	; (8016e98 <pow+0x2d4>)
 8016c80:	9303      	str	r3, [sp, #12]
 8016c82:	9b01      	ldr	r3, [sp, #4]
 8016c84:	930a      	str	r3, [sp, #40]	; 0x28
 8016c86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016c8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016c8e:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016c92:	f1b9 0f00 	cmp.w	r9, #0
 8016c96:	d0d5      	beq.n	8016c44 <pow+0x80>
 8016c98:	4b80      	ldr	r3, [pc, #512]	; (8016e9c <pow+0x2d8>)
 8016c9a:	2200      	movs	r2, #0
 8016c9c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016ca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016ca2:	b11b      	cbz	r3, 8016cac <pow+0xe8>
 8016ca4:	f000 fff4 	bl	8017c90 <__errno>
 8016ca8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8016caa:	6003      	str	r3, [r0, #0]
 8016cac:	ed9d 8b08 	vldr	d8, [sp, #32]
 8016cb0:	eeb0 0a48 	vmov.f32	s0, s16
 8016cb4:	eef0 0a68 	vmov.f32	s1, s17
 8016cb8:	b00d      	add	sp, #52	; 0x34
 8016cba:	ecbd 8b04 	vpop	{d8-d9}
 8016cbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016cc2:	ec45 4b10 	vmov	d0, r4, r5
 8016cc6:	f000 fec0 	bl	8017a4a <finite>
 8016cca:	2800      	cmp	r0, #0
 8016ccc:	d0f0      	beq.n	8016cb0 <pow+0xec>
 8016cce:	4652      	mov	r2, sl
 8016cd0:	465b      	mov	r3, fp
 8016cd2:	4620      	mov	r0, r4
 8016cd4:	4629      	mov	r1, r5
 8016cd6:	f7e9 ff2d 	bl	8000b34 <__aeabi_dcmplt>
 8016cda:	2800      	cmp	r0, #0
 8016cdc:	d0e8      	beq.n	8016cb0 <pow+0xec>
 8016cde:	2301      	movs	r3, #1
 8016ce0:	9302      	str	r3, [sp, #8]
 8016ce2:	4b6d      	ldr	r3, [pc, #436]	; (8016e98 <pow+0x2d4>)
 8016ce4:	9303      	str	r3, [sp, #12]
 8016ce6:	4b6b      	ldr	r3, [pc, #428]	; (8016e94 <pow+0x2d0>)
 8016ce8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8016cec:	f993 3000 	ldrsb.w	r3, [r3]
 8016cf0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016cf4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016cf8:	b913      	cbnz	r3, 8016d00 <pow+0x13c>
 8016cfa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8016cfe:	e7a1      	b.n	8016c44 <pow+0x80>
 8016d00:	4967      	ldr	r1, [pc, #412]	; (8016ea0 <pow+0x2dc>)
 8016d02:	2000      	movs	r0, #0
 8016d04:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d08:	2b02      	cmp	r3, #2
 8016d0a:	d19b      	bne.n	8016c44 <pow+0x80>
 8016d0c:	f000 ffc0 	bl	8017c90 <__errno>
 8016d10:	2321      	movs	r3, #33	; 0x21
 8016d12:	6003      	str	r3, [r0, #0]
 8016d14:	e7c4      	b.n	8016ca0 <pow+0xdc>
 8016d16:	eeb0 0a48 	vmov.f32	s0, s16
 8016d1a:	eef0 0a68 	vmov.f32	s1, s17
 8016d1e:	f000 fe94 	bl	8017a4a <finite>
 8016d22:	9001      	str	r0, [sp, #4]
 8016d24:	2800      	cmp	r0, #0
 8016d26:	f040 808a 	bne.w	8016e3e <pow+0x27a>
 8016d2a:	ec47 6b10 	vmov	d0, r6, r7
 8016d2e:	f000 fe8c 	bl	8017a4a <finite>
 8016d32:	2800      	cmp	r0, #0
 8016d34:	f000 8083 	beq.w	8016e3e <pow+0x27a>
 8016d38:	ec45 4b10 	vmov	d0, r4, r5
 8016d3c:	f000 fe85 	bl	8017a4a <finite>
 8016d40:	2800      	cmp	r0, #0
 8016d42:	d07c      	beq.n	8016e3e <pow+0x27a>
 8016d44:	ec53 2b18 	vmov	r2, r3, d8
 8016d48:	ee18 0a10 	vmov	r0, s16
 8016d4c:	4619      	mov	r1, r3
 8016d4e:	f7e9 ff19 	bl	8000b84 <__aeabi_dcmpun>
 8016d52:	f998 9000 	ldrsb.w	r9, [r8]
 8016d56:	4b50      	ldr	r3, [pc, #320]	; (8016e98 <pow+0x2d4>)
 8016d58:	b1b0      	cbz	r0, 8016d88 <pow+0x1c4>
 8016d5a:	2201      	movs	r2, #1
 8016d5c:	9303      	str	r3, [sp, #12]
 8016d5e:	9b01      	ldr	r3, [sp, #4]
 8016d60:	9202      	str	r2, [sp, #8]
 8016d62:	930a      	str	r3, [sp, #40]	; 0x28
 8016d64:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d68:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d6c:	f1b9 0f00 	cmp.w	r9, #0
 8016d70:	d0c3      	beq.n	8016cfa <pow+0x136>
 8016d72:	4652      	mov	r2, sl
 8016d74:	465b      	mov	r3, fp
 8016d76:	4650      	mov	r0, sl
 8016d78:	4659      	mov	r1, fp
 8016d7a:	f7e9 fd93 	bl	80008a4 <__aeabi_ddiv>
 8016d7e:	f1b9 0f02 	cmp.w	r9, #2
 8016d82:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8016d86:	e7c0      	b.n	8016d0a <pow+0x146>
 8016d88:	2203      	movs	r2, #3
 8016d8a:	9202      	str	r2, [sp, #8]
 8016d8c:	9303      	str	r3, [sp, #12]
 8016d8e:	900a      	str	r0, [sp, #40]	; 0x28
 8016d90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016d94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016d98:	f1b9 0f00 	cmp.w	r9, #0
 8016d9c:	d12c      	bne.n	8016df8 <pow+0x234>
 8016d9e:	4b41      	ldr	r3, [pc, #260]	; (8016ea4 <pow+0x2e0>)
 8016da0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016da4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016da8:	4630      	mov	r0, r6
 8016daa:	4652      	mov	r2, sl
 8016dac:	465b      	mov	r3, fp
 8016dae:	4639      	mov	r1, r7
 8016db0:	f7e9 fec0 	bl	8000b34 <__aeabi_dcmplt>
 8016db4:	2800      	cmp	r0, #0
 8016db6:	d066      	beq.n	8016e86 <pow+0x2c2>
 8016db8:	2200      	movs	r2, #0
 8016dba:	4b3b      	ldr	r3, [pc, #236]	; (8016ea8 <pow+0x2e4>)
 8016dbc:	4620      	mov	r0, r4
 8016dbe:	4629      	mov	r1, r5
 8016dc0:	f7e9 fc46 	bl	8000650 <__aeabi_dmul>
 8016dc4:	4604      	mov	r4, r0
 8016dc6:	460d      	mov	r5, r1
 8016dc8:	ec45 4b10 	vmov	d0, r4, r5
 8016dcc:	f000 fe50 	bl	8017a70 <rint>
 8016dd0:	4620      	mov	r0, r4
 8016dd2:	ec53 2b10 	vmov	r2, r3, d0
 8016dd6:	4629      	mov	r1, r5
 8016dd8:	f7e9 fea2 	bl	8000b20 <__aeabi_dcmpeq>
 8016ddc:	b920      	cbnz	r0, 8016de8 <pow+0x224>
 8016dde:	4b33      	ldr	r3, [pc, #204]	; (8016eac <pow+0x2e8>)
 8016de0:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8016de4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016de8:	f998 3000 	ldrsb.w	r3, [r8]
 8016dec:	2b02      	cmp	r3, #2
 8016dee:	d14a      	bne.n	8016e86 <pow+0x2c2>
 8016df0:	f000 ff4e 	bl	8017c90 <__errno>
 8016df4:	2322      	movs	r3, #34	; 0x22
 8016df6:	e78c      	b.n	8016d12 <pow+0x14e>
 8016df8:	4b2d      	ldr	r3, [pc, #180]	; (8016eb0 <pow+0x2ec>)
 8016dfa:	2200      	movs	r2, #0
 8016dfc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8016e00:	4630      	mov	r0, r6
 8016e02:	4652      	mov	r2, sl
 8016e04:	465b      	mov	r3, fp
 8016e06:	4639      	mov	r1, r7
 8016e08:	f7e9 fe94 	bl	8000b34 <__aeabi_dcmplt>
 8016e0c:	2800      	cmp	r0, #0
 8016e0e:	d0eb      	beq.n	8016de8 <pow+0x224>
 8016e10:	2200      	movs	r2, #0
 8016e12:	4b25      	ldr	r3, [pc, #148]	; (8016ea8 <pow+0x2e4>)
 8016e14:	4620      	mov	r0, r4
 8016e16:	4629      	mov	r1, r5
 8016e18:	f7e9 fc1a 	bl	8000650 <__aeabi_dmul>
 8016e1c:	4604      	mov	r4, r0
 8016e1e:	460d      	mov	r5, r1
 8016e20:	ec45 4b10 	vmov	d0, r4, r5
 8016e24:	f000 fe24 	bl	8017a70 <rint>
 8016e28:	4620      	mov	r0, r4
 8016e2a:	ec53 2b10 	vmov	r2, r3, d0
 8016e2e:	4629      	mov	r1, r5
 8016e30:	f7e9 fe76 	bl	8000b20 <__aeabi_dcmpeq>
 8016e34:	2800      	cmp	r0, #0
 8016e36:	d1d7      	bne.n	8016de8 <pow+0x224>
 8016e38:	2200      	movs	r2, #0
 8016e3a:	4b19      	ldr	r3, [pc, #100]	; (8016ea0 <pow+0x2dc>)
 8016e3c:	e7d2      	b.n	8016de4 <pow+0x220>
 8016e3e:	2200      	movs	r2, #0
 8016e40:	2300      	movs	r3, #0
 8016e42:	ec51 0b18 	vmov	r0, r1, d8
 8016e46:	f7e9 fe6b 	bl	8000b20 <__aeabi_dcmpeq>
 8016e4a:	2800      	cmp	r0, #0
 8016e4c:	f43f af30 	beq.w	8016cb0 <pow+0xec>
 8016e50:	ec47 6b10 	vmov	d0, r6, r7
 8016e54:	f000 fdf9 	bl	8017a4a <finite>
 8016e58:	2800      	cmp	r0, #0
 8016e5a:	f43f af29 	beq.w	8016cb0 <pow+0xec>
 8016e5e:	ec45 4b10 	vmov	d0, r4, r5
 8016e62:	f000 fdf2 	bl	8017a4a <finite>
 8016e66:	2800      	cmp	r0, #0
 8016e68:	f43f af22 	beq.w	8016cb0 <pow+0xec>
 8016e6c:	2304      	movs	r3, #4
 8016e6e:	9302      	str	r3, [sp, #8]
 8016e70:	4b09      	ldr	r3, [pc, #36]	; (8016e98 <pow+0x2d4>)
 8016e72:	9303      	str	r3, [sp, #12]
 8016e74:	2300      	movs	r3, #0
 8016e76:	930a      	str	r3, [sp, #40]	; 0x28
 8016e78:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8016e7c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8016e80:	ed8d 9b08 	vstr	d9, [sp, #32]
 8016e84:	e7b0      	b.n	8016de8 <pow+0x224>
 8016e86:	a802      	add	r0, sp, #8
 8016e88:	f000 fde7 	bl	8017a5a <matherr>
 8016e8c:	2800      	cmp	r0, #0
 8016e8e:	f47f af07 	bne.w	8016ca0 <pow+0xdc>
 8016e92:	e7ad      	b.n	8016df0 <pow+0x22c>
 8016e94:	200001a4 	.word	0x200001a4
 8016e98:	0801a68f 	.word	0x0801a68f
 8016e9c:	3ff00000 	.word	0x3ff00000
 8016ea0:	fff00000 	.word	0xfff00000
 8016ea4:	47efffff 	.word	0x47efffff
 8016ea8:	3fe00000 	.word	0x3fe00000
 8016eac:	c7efffff 	.word	0xc7efffff
 8016eb0:	7ff00000 	.word	0x7ff00000
 8016eb4:	00000000 	.word	0x00000000

08016eb8 <__ieee754_pow>:
 8016eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016ebc:	b091      	sub	sp, #68	; 0x44
 8016ebe:	ed8d 1b00 	vstr	d1, [sp]
 8016ec2:	e89d 0204 	ldmia.w	sp, {r2, r9}
 8016ec6:	ec57 6b10 	vmov	r6, r7, d0
 8016eca:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8016ece:	ea58 0302 	orrs.w	r3, r8, r2
 8016ed2:	ee10 aa10 	vmov	sl, s0
 8016ed6:	463d      	mov	r5, r7
 8016ed8:	f000 84bd 	beq.w	8017856 <__ieee754_pow+0x99e>
 8016edc:	4b78      	ldr	r3, [pc, #480]	; (80170c0 <__ieee754_pow+0x208>)
 8016ede:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8016ee2:	429c      	cmp	r4, r3
 8016ee4:	dc09      	bgt.n	8016efa <__ieee754_pow+0x42>
 8016ee6:	d103      	bne.n	8016ef0 <__ieee754_pow+0x38>
 8016ee8:	b93e      	cbnz	r6, 8016efa <__ieee754_pow+0x42>
 8016eea:	45a0      	cmp	r8, r4
 8016eec:	dc0d      	bgt.n	8016f0a <__ieee754_pow+0x52>
 8016eee:	e001      	b.n	8016ef4 <__ieee754_pow+0x3c>
 8016ef0:	4598      	cmp	r8, r3
 8016ef2:	dc02      	bgt.n	8016efa <__ieee754_pow+0x42>
 8016ef4:	4598      	cmp	r8, r3
 8016ef6:	d10e      	bne.n	8016f16 <__ieee754_pow+0x5e>
 8016ef8:	b16a      	cbz	r2, 8016f16 <__ieee754_pow+0x5e>
 8016efa:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8016efe:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8016f02:	ea54 030a 	orrs.w	r3, r4, sl
 8016f06:	f000 84a6 	beq.w	8017856 <__ieee754_pow+0x99e>
 8016f0a:	486e      	ldr	r0, [pc, #440]	; (80170c4 <__ieee754_pow+0x20c>)
 8016f0c:	b011      	add	sp, #68	; 0x44
 8016f0e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f12:	f000 bda5 	b.w	8017a60 <nan>
 8016f16:	2d00      	cmp	r5, #0
 8016f18:	da53      	bge.n	8016fc2 <__ieee754_pow+0x10a>
 8016f1a:	4b6b      	ldr	r3, [pc, #428]	; (80170c8 <__ieee754_pow+0x210>)
 8016f1c:	4598      	cmp	r8, r3
 8016f1e:	dc4d      	bgt.n	8016fbc <__ieee754_pow+0x104>
 8016f20:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8016f24:	4598      	cmp	r8, r3
 8016f26:	dd4c      	ble.n	8016fc2 <__ieee754_pow+0x10a>
 8016f28:	ea4f 5328 	mov.w	r3, r8, asr #20
 8016f2c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8016f30:	2b14      	cmp	r3, #20
 8016f32:	dd26      	ble.n	8016f82 <__ieee754_pow+0xca>
 8016f34:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8016f38:	fa22 f103 	lsr.w	r1, r2, r3
 8016f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8016f40:	429a      	cmp	r2, r3
 8016f42:	d13e      	bne.n	8016fc2 <__ieee754_pow+0x10a>
 8016f44:	f001 0101 	and.w	r1, r1, #1
 8016f48:	f1c1 0b02 	rsb	fp, r1, #2
 8016f4c:	2a00      	cmp	r2, #0
 8016f4e:	d15b      	bne.n	8017008 <__ieee754_pow+0x150>
 8016f50:	4b5b      	ldr	r3, [pc, #364]	; (80170c0 <__ieee754_pow+0x208>)
 8016f52:	4598      	cmp	r8, r3
 8016f54:	d124      	bne.n	8016fa0 <__ieee754_pow+0xe8>
 8016f56:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8016f5a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8016f5e:	ea53 030a 	orrs.w	r3, r3, sl
 8016f62:	f000 8478 	beq.w	8017856 <__ieee754_pow+0x99e>
 8016f66:	4b59      	ldr	r3, [pc, #356]	; (80170cc <__ieee754_pow+0x214>)
 8016f68:	429c      	cmp	r4, r3
 8016f6a:	dd2d      	ble.n	8016fc8 <__ieee754_pow+0x110>
 8016f6c:	f1b9 0f00 	cmp.w	r9, #0
 8016f70:	f280 8475 	bge.w	801785e <__ieee754_pow+0x9a6>
 8016f74:	2000      	movs	r0, #0
 8016f76:	2100      	movs	r1, #0
 8016f78:	ec41 0b10 	vmov	d0, r0, r1
 8016f7c:	b011      	add	sp, #68	; 0x44
 8016f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f82:	2a00      	cmp	r2, #0
 8016f84:	d13e      	bne.n	8017004 <__ieee754_pow+0x14c>
 8016f86:	f1c3 0314 	rsb	r3, r3, #20
 8016f8a:	fa48 f103 	asr.w	r1, r8, r3
 8016f8e:	fa01 f303 	lsl.w	r3, r1, r3
 8016f92:	4598      	cmp	r8, r3
 8016f94:	f040 846b 	bne.w	801786e <__ieee754_pow+0x9b6>
 8016f98:	f001 0101 	and.w	r1, r1, #1
 8016f9c:	f1c1 0b02 	rsb	fp, r1, #2
 8016fa0:	4b4b      	ldr	r3, [pc, #300]	; (80170d0 <__ieee754_pow+0x218>)
 8016fa2:	4598      	cmp	r8, r3
 8016fa4:	d118      	bne.n	8016fd8 <__ieee754_pow+0x120>
 8016fa6:	f1b9 0f00 	cmp.w	r9, #0
 8016faa:	f280 845c 	bge.w	8017866 <__ieee754_pow+0x9ae>
 8016fae:	4948      	ldr	r1, [pc, #288]	; (80170d0 <__ieee754_pow+0x218>)
 8016fb0:	4632      	mov	r2, r6
 8016fb2:	463b      	mov	r3, r7
 8016fb4:	2000      	movs	r0, #0
 8016fb6:	f7e9 fc75 	bl	80008a4 <__aeabi_ddiv>
 8016fba:	e7dd      	b.n	8016f78 <__ieee754_pow+0xc0>
 8016fbc:	f04f 0b02 	mov.w	fp, #2
 8016fc0:	e7c4      	b.n	8016f4c <__ieee754_pow+0x94>
 8016fc2:	f04f 0b00 	mov.w	fp, #0
 8016fc6:	e7c1      	b.n	8016f4c <__ieee754_pow+0x94>
 8016fc8:	f1b9 0f00 	cmp.w	r9, #0
 8016fcc:	dad2      	bge.n	8016f74 <__ieee754_pow+0xbc>
 8016fce:	e89d 0009 	ldmia.w	sp, {r0, r3}
 8016fd2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8016fd6:	e7cf      	b.n	8016f78 <__ieee754_pow+0xc0>
 8016fd8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8016fdc:	d106      	bne.n	8016fec <__ieee754_pow+0x134>
 8016fde:	4632      	mov	r2, r6
 8016fe0:	463b      	mov	r3, r7
 8016fe2:	4610      	mov	r0, r2
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	f7e9 fb33 	bl	8000650 <__aeabi_dmul>
 8016fea:	e7c5      	b.n	8016f78 <__ieee754_pow+0xc0>
 8016fec:	4b39      	ldr	r3, [pc, #228]	; (80170d4 <__ieee754_pow+0x21c>)
 8016fee:	4599      	cmp	r9, r3
 8016ff0:	d10a      	bne.n	8017008 <__ieee754_pow+0x150>
 8016ff2:	2d00      	cmp	r5, #0
 8016ff4:	db08      	blt.n	8017008 <__ieee754_pow+0x150>
 8016ff6:	ec47 6b10 	vmov	d0, r6, r7
 8016ffa:	b011      	add	sp, #68	; 0x44
 8016ffc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017000:	f000 bc6c 	b.w	80178dc <__ieee754_sqrt>
 8017004:	f04f 0b00 	mov.w	fp, #0
 8017008:	ec47 6b10 	vmov	d0, r6, r7
 801700c:	f000 fd16 	bl	8017a3c <fabs>
 8017010:	ec51 0b10 	vmov	r0, r1, d0
 8017014:	f1ba 0f00 	cmp.w	sl, #0
 8017018:	d127      	bne.n	801706a <__ieee754_pow+0x1b2>
 801701a:	b124      	cbz	r4, 8017026 <__ieee754_pow+0x16e>
 801701c:	4b2c      	ldr	r3, [pc, #176]	; (80170d0 <__ieee754_pow+0x218>)
 801701e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8017022:	429a      	cmp	r2, r3
 8017024:	d121      	bne.n	801706a <__ieee754_pow+0x1b2>
 8017026:	f1b9 0f00 	cmp.w	r9, #0
 801702a:	da05      	bge.n	8017038 <__ieee754_pow+0x180>
 801702c:	4602      	mov	r2, r0
 801702e:	460b      	mov	r3, r1
 8017030:	2000      	movs	r0, #0
 8017032:	4927      	ldr	r1, [pc, #156]	; (80170d0 <__ieee754_pow+0x218>)
 8017034:	f7e9 fc36 	bl	80008a4 <__aeabi_ddiv>
 8017038:	2d00      	cmp	r5, #0
 801703a:	da9d      	bge.n	8016f78 <__ieee754_pow+0xc0>
 801703c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8017040:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8017044:	ea54 030b 	orrs.w	r3, r4, fp
 8017048:	d108      	bne.n	801705c <__ieee754_pow+0x1a4>
 801704a:	4602      	mov	r2, r0
 801704c:	460b      	mov	r3, r1
 801704e:	4610      	mov	r0, r2
 8017050:	4619      	mov	r1, r3
 8017052:	f7e9 f949 	bl	80002e8 <__aeabi_dsub>
 8017056:	4602      	mov	r2, r0
 8017058:	460b      	mov	r3, r1
 801705a:	e7ac      	b.n	8016fb6 <__ieee754_pow+0xfe>
 801705c:	f1bb 0f01 	cmp.w	fp, #1
 8017060:	d18a      	bne.n	8016f78 <__ieee754_pow+0xc0>
 8017062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8017066:	4619      	mov	r1, r3
 8017068:	e786      	b.n	8016f78 <__ieee754_pow+0xc0>
 801706a:	0fed      	lsrs	r5, r5, #31
 801706c:	1e6b      	subs	r3, r5, #1
 801706e:	930d      	str	r3, [sp, #52]	; 0x34
 8017070:	ea5b 0303 	orrs.w	r3, fp, r3
 8017074:	d102      	bne.n	801707c <__ieee754_pow+0x1c4>
 8017076:	4632      	mov	r2, r6
 8017078:	463b      	mov	r3, r7
 801707a:	e7e8      	b.n	801704e <__ieee754_pow+0x196>
 801707c:	4b16      	ldr	r3, [pc, #88]	; (80170d8 <__ieee754_pow+0x220>)
 801707e:	4598      	cmp	r8, r3
 8017080:	f340 80fe 	ble.w	8017280 <__ieee754_pow+0x3c8>
 8017084:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8017088:	4598      	cmp	r8, r3
 801708a:	dd0a      	ble.n	80170a2 <__ieee754_pow+0x1ea>
 801708c:	4b0f      	ldr	r3, [pc, #60]	; (80170cc <__ieee754_pow+0x214>)
 801708e:	429c      	cmp	r4, r3
 8017090:	dc0d      	bgt.n	80170ae <__ieee754_pow+0x1f6>
 8017092:	f1b9 0f00 	cmp.w	r9, #0
 8017096:	f6bf af6d 	bge.w	8016f74 <__ieee754_pow+0xbc>
 801709a:	a307      	add	r3, pc, #28	; (adr r3, 80170b8 <__ieee754_pow+0x200>)
 801709c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170a0:	e79f      	b.n	8016fe2 <__ieee754_pow+0x12a>
 80170a2:	4b0e      	ldr	r3, [pc, #56]	; (80170dc <__ieee754_pow+0x224>)
 80170a4:	429c      	cmp	r4, r3
 80170a6:	ddf4      	ble.n	8017092 <__ieee754_pow+0x1da>
 80170a8:	4b09      	ldr	r3, [pc, #36]	; (80170d0 <__ieee754_pow+0x218>)
 80170aa:	429c      	cmp	r4, r3
 80170ac:	dd18      	ble.n	80170e0 <__ieee754_pow+0x228>
 80170ae:	f1b9 0f00 	cmp.w	r9, #0
 80170b2:	dcf2      	bgt.n	801709a <__ieee754_pow+0x1e2>
 80170b4:	e75e      	b.n	8016f74 <__ieee754_pow+0xbc>
 80170b6:	bf00      	nop
 80170b8:	8800759c 	.word	0x8800759c
 80170bc:	7e37e43c 	.word	0x7e37e43c
 80170c0:	7ff00000 	.word	0x7ff00000
 80170c4:	0801a661 	.word	0x0801a661
 80170c8:	433fffff 	.word	0x433fffff
 80170cc:	3fefffff 	.word	0x3fefffff
 80170d0:	3ff00000 	.word	0x3ff00000
 80170d4:	3fe00000 	.word	0x3fe00000
 80170d8:	41e00000 	.word	0x41e00000
 80170dc:	3feffffe 	.word	0x3feffffe
 80170e0:	2200      	movs	r2, #0
 80170e2:	4b63      	ldr	r3, [pc, #396]	; (8017270 <__ieee754_pow+0x3b8>)
 80170e4:	f7e9 f900 	bl	80002e8 <__aeabi_dsub>
 80170e8:	a355      	add	r3, pc, #340	; (adr r3, 8017240 <__ieee754_pow+0x388>)
 80170ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170ee:	4604      	mov	r4, r0
 80170f0:	460d      	mov	r5, r1
 80170f2:	f7e9 faad 	bl	8000650 <__aeabi_dmul>
 80170f6:	a354      	add	r3, pc, #336	; (adr r3, 8017248 <__ieee754_pow+0x390>)
 80170f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80170fc:	4606      	mov	r6, r0
 80170fe:	460f      	mov	r7, r1
 8017100:	4620      	mov	r0, r4
 8017102:	4629      	mov	r1, r5
 8017104:	f7e9 faa4 	bl	8000650 <__aeabi_dmul>
 8017108:	2200      	movs	r2, #0
 801710a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801710e:	4b59      	ldr	r3, [pc, #356]	; (8017274 <__ieee754_pow+0x3bc>)
 8017110:	4620      	mov	r0, r4
 8017112:	4629      	mov	r1, r5
 8017114:	f7e9 fa9c 	bl	8000650 <__aeabi_dmul>
 8017118:	4602      	mov	r2, r0
 801711a:	460b      	mov	r3, r1
 801711c:	a14c      	add	r1, pc, #304	; (adr r1, 8017250 <__ieee754_pow+0x398>)
 801711e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8017122:	f7e9 f8e1 	bl	80002e8 <__aeabi_dsub>
 8017126:	4622      	mov	r2, r4
 8017128:	462b      	mov	r3, r5
 801712a:	f7e9 fa91 	bl	8000650 <__aeabi_dmul>
 801712e:	4602      	mov	r2, r0
 8017130:	460b      	mov	r3, r1
 8017132:	2000      	movs	r0, #0
 8017134:	4950      	ldr	r1, [pc, #320]	; (8017278 <__ieee754_pow+0x3c0>)
 8017136:	f7e9 f8d7 	bl	80002e8 <__aeabi_dsub>
 801713a:	4622      	mov	r2, r4
 801713c:	462b      	mov	r3, r5
 801713e:	4680      	mov	r8, r0
 8017140:	4689      	mov	r9, r1
 8017142:	4620      	mov	r0, r4
 8017144:	4629      	mov	r1, r5
 8017146:	f7e9 fa83 	bl	8000650 <__aeabi_dmul>
 801714a:	4602      	mov	r2, r0
 801714c:	460b      	mov	r3, r1
 801714e:	4640      	mov	r0, r8
 8017150:	4649      	mov	r1, r9
 8017152:	f7e9 fa7d 	bl	8000650 <__aeabi_dmul>
 8017156:	a340      	add	r3, pc, #256	; (adr r3, 8017258 <__ieee754_pow+0x3a0>)
 8017158:	e9d3 2300 	ldrd	r2, r3, [r3]
 801715c:	f7e9 fa78 	bl	8000650 <__aeabi_dmul>
 8017160:	4602      	mov	r2, r0
 8017162:	460b      	mov	r3, r1
 8017164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017168:	f7e9 f8be 	bl	80002e8 <__aeabi_dsub>
 801716c:	4602      	mov	r2, r0
 801716e:	460b      	mov	r3, r1
 8017170:	4604      	mov	r4, r0
 8017172:	460d      	mov	r5, r1
 8017174:	4630      	mov	r0, r6
 8017176:	4639      	mov	r1, r7
 8017178:	f7e9 f8b8 	bl	80002ec <__adddf3>
 801717c:	2000      	movs	r0, #0
 801717e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017182:	4632      	mov	r2, r6
 8017184:	463b      	mov	r3, r7
 8017186:	f7e9 f8af 	bl	80002e8 <__aeabi_dsub>
 801718a:	4602      	mov	r2, r0
 801718c:	460b      	mov	r3, r1
 801718e:	4620      	mov	r0, r4
 8017190:	4629      	mov	r1, r5
 8017192:	f7e9 f8a9 	bl	80002e8 <__aeabi_dsub>
 8017196:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8017198:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
 801719c:	4313      	orrs	r3, r2
 801719e:	4606      	mov	r6, r0
 80171a0:	460f      	mov	r7, r1
 80171a2:	f040 81eb 	bne.w	801757c <__ieee754_pow+0x6c4>
 80171a6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8017260 <__ieee754_pow+0x3a8>
 80171aa:	e9dd 4500 	ldrd	r4, r5, [sp]
 80171ae:	2400      	movs	r4, #0
 80171b0:	4622      	mov	r2, r4
 80171b2:	462b      	mov	r3, r5
 80171b4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80171b8:	ed8d 7b02 	vstr	d7, [sp, #8]
 80171bc:	f7e9 f894 	bl	80002e8 <__aeabi_dsub>
 80171c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80171c4:	f7e9 fa44 	bl	8000650 <__aeabi_dmul>
 80171c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80171cc:	4680      	mov	r8, r0
 80171ce:	4689      	mov	r9, r1
 80171d0:	4630      	mov	r0, r6
 80171d2:	4639      	mov	r1, r7
 80171d4:	f7e9 fa3c 	bl	8000650 <__aeabi_dmul>
 80171d8:	4602      	mov	r2, r0
 80171da:	460b      	mov	r3, r1
 80171dc:	4640      	mov	r0, r8
 80171de:	4649      	mov	r1, r9
 80171e0:	f7e9 f884 	bl	80002ec <__adddf3>
 80171e4:	4622      	mov	r2, r4
 80171e6:	462b      	mov	r3, r5
 80171e8:	4680      	mov	r8, r0
 80171ea:	4689      	mov	r9, r1
 80171ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80171f0:	f7e9 fa2e 	bl	8000650 <__aeabi_dmul>
 80171f4:	460b      	mov	r3, r1
 80171f6:	4604      	mov	r4, r0
 80171f8:	460d      	mov	r5, r1
 80171fa:	4602      	mov	r2, r0
 80171fc:	4649      	mov	r1, r9
 80171fe:	4640      	mov	r0, r8
 8017200:	e9cd 4500 	strd	r4, r5, [sp]
 8017204:	f7e9 f872 	bl	80002ec <__adddf3>
 8017208:	4b1c      	ldr	r3, [pc, #112]	; (801727c <__ieee754_pow+0x3c4>)
 801720a:	4299      	cmp	r1, r3
 801720c:	4606      	mov	r6, r0
 801720e:	460f      	mov	r7, r1
 8017210:	468b      	mov	fp, r1
 8017212:	f340 82f7 	ble.w	8017804 <__ieee754_pow+0x94c>
 8017216:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 801721a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 801721e:	4303      	orrs	r3, r0
 8017220:	f000 81ea 	beq.w	80175f8 <__ieee754_pow+0x740>
 8017224:	a310      	add	r3, pc, #64	; (adr r3, 8017268 <__ieee754_pow+0x3b0>)
 8017226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801722a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801722e:	f7e9 fa0f 	bl	8000650 <__aeabi_dmul>
 8017232:	a30d      	add	r3, pc, #52	; (adr r3, 8017268 <__ieee754_pow+0x3b0>)
 8017234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017238:	e6d5      	b.n	8016fe6 <__ieee754_pow+0x12e>
 801723a:	bf00      	nop
 801723c:	f3af 8000 	nop.w
 8017240:	60000000 	.word	0x60000000
 8017244:	3ff71547 	.word	0x3ff71547
 8017248:	f85ddf44 	.word	0xf85ddf44
 801724c:	3e54ae0b 	.word	0x3e54ae0b
 8017250:	55555555 	.word	0x55555555
 8017254:	3fd55555 	.word	0x3fd55555
 8017258:	652b82fe 	.word	0x652b82fe
 801725c:	3ff71547 	.word	0x3ff71547
 8017260:	00000000 	.word	0x00000000
 8017264:	bff00000 	.word	0xbff00000
 8017268:	8800759c 	.word	0x8800759c
 801726c:	7e37e43c 	.word	0x7e37e43c
 8017270:	3ff00000 	.word	0x3ff00000
 8017274:	3fd00000 	.word	0x3fd00000
 8017278:	3fe00000 	.word	0x3fe00000
 801727c:	408fffff 	.word	0x408fffff
 8017280:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8017284:	f04f 0200 	mov.w	r2, #0
 8017288:	da05      	bge.n	8017296 <__ieee754_pow+0x3de>
 801728a:	4bd3      	ldr	r3, [pc, #844]	; (80175d8 <__ieee754_pow+0x720>)
 801728c:	f7e9 f9e0 	bl	8000650 <__aeabi_dmul>
 8017290:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8017294:	460c      	mov	r4, r1
 8017296:	1523      	asrs	r3, r4, #20
 8017298:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801729c:	4413      	add	r3, r2
 801729e:	9307      	str	r3, [sp, #28]
 80172a0:	4bce      	ldr	r3, [pc, #824]	; (80175dc <__ieee754_pow+0x724>)
 80172a2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80172a6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80172aa:	429c      	cmp	r4, r3
 80172ac:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80172b0:	dd08      	ble.n	80172c4 <__ieee754_pow+0x40c>
 80172b2:	4bcb      	ldr	r3, [pc, #812]	; (80175e0 <__ieee754_pow+0x728>)
 80172b4:	429c      	cmp	r4, r3
 80172b6:	f340 815e 	ble.w	8017576 <__ieee754_pow+0x6be>
 80172ba:	9b07      	ldr	r3, [sp, #28]
 80172bc:	3301      	adds	r3, #1
 80172be:	9307      	str	r3, [sp, #28]
 80172c0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80172c4:	f04f 0a00 	mov.w	sl, #0
 80172c8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80172cc:	930c      	str	r3, [sp, #48]	; 0x30
 80172ce:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80172d0:	4bc4      	ldr	r3, [pc, #784]	; (80175e4 <__ieee754_pow+0x72c>)
 80172d2:	4413      	add	r3, r2
 80172d4:	ed93 7b00 	vldr	d7, [r3]
 80172d8:	4629      	mov	r1, r5
 80172da:	ec53 2b17 	vmov	r2, r3, d7
 80172de:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80172e2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80172e6:	f7e8 ffff 	bl	80002e8 <__aeabi_dsub>
 80172ea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80172ee:	4606      	mov	r6, r0
 80172f0:	460f      	mov	r7, r1
 80172f2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80172f6:	f7e8 fff9 	bl	80002ec <__adddf3>
 80172fa:	4602      	mov	r2, r0
 80172fc:	460b      	mov	r3, r1
 80172fe:	2000      	movs	r0, #0
 8017300:	49b9      	ldr	r1, [pc, #740]	; (80175e8 <__ieee754_pow+0x730>)
 8017302:	f7e9 facf 	bl	80008a4 <__aeabi_ddiv>
 8017306:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 801730a:	4602      	mov	r2, r0
 801730c:	460b      	mov	r3, r1
 801730e:	4630      	mov	r0, r6
 8017310:	4639      	mov	r1, r7
 8017312:	f7e9 f99d 	bl	8000650 <__aeabi_dmul>
 8017316:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801731a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 801731e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8017322:	2300      	movs	r3, #0
 8017324:	9302      	str	r3, [sp, #8]
 8017326:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801732a:	106d      	asrs	r5, r5, #1
 801732c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8017330:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8017334:	2200      	movs	r2, #0
 8017336:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 801733a:	4640      	mov	r0, r8
 801733c:	4649      	mov	r1, r9
 801733e:	4614      	mov	r4, r2
 8017340:	461d      	mov	r5, r3
 8017342:	f7e9 f985 	bl	8000650 <__aeabi_dmul>
 8017346:	4602      	mov	r2, r0
 8017348:	460b      	mov	r3, r1
 801734a:	4630      	mov	r0, r6
 801734c:	4639      	mov	r1, r7
 801734e:	f7e8 ffcb 	bl	80002e8 <__aeabi_dsub>
 8017352:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017356:	4606      	mov	r6, r0
 8017358:	460f      	mov	r7, r1
 801735a:	4620      	mov	r0, r4
 801735c:	4629      	mov	r1, r5
 801735e:	f7e8 ffc3 	bl	80002e8 <__aeabi_dsub>
 8017362:	4602      	mov	r2, r0
 8017364:	460b      	mov	r3, r1
 8017366:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801736a:	f7e8 ffbd 	bl	80002e8 <__aeabi_dsub>
 801736e:	4642      	mov	r2, r8
 8017370:	464b      	mov	r3, r9
 8017372:	f7e9 f96d 	bl	8000650 <__aeabi_dmul>
 8017376:	4602      	mov	r2, r0
 8017378:	460b      	mov	r3, r1
 801737a:	4630      	mov	r0, r6
 801737c:	4639      	mov	r1, r7
 801737e:	f7e8 ffb3 	bl	80002e8 <__aeabi_dsub>
 8017382:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8017386:	f7e9 f963 	bl	8000650 <__aeabi_dmul>
 801738a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 801738e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8017392:	4610      	mov	r0, r2
 8017394:	4619      	mov	r1, r3
 8017396:	f7e9 f95b 	bl	8000650 <__aeabi_dmul>
 801739a:	a37b      	add	r3, pc, #492	; (adr r3, 8017588 <__ieee754_pow+0x6d0>)
 801739c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173a0:	4604      	mov	r4, r0
 80173a2:	460d      	mov	r5, r1
 80173a4:	f7e9 f954 	bl	8000650 <__aeabi_dmul>
 80173a8:	a379      	add	r3, pc, #484	; (adr r3, 8017590 <__ieee754_pow+0x6d8>)
 80173aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173ae:	f7e8 ff9d 	bl	80002ec <__adddf3>
 80173b2:	4622      	mov	r2, r4
 80173b4:	462b      	mov	r3, r5
 80173b6:	f7e9 f94b 	bl	8000650 <__aeabi_dmul>
 80173ba:	a377      	add	r3, pc, #476	; (adr r3, 8017598 <__ieee754_pow+0x6e0>)
 80173bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173c0:	f7e8 ff94 	bl	80002ec <__adddf3>
 80173c4:	4622      	mov	r2, r4
 80173c6:	462b      	mov	r3, r5
 80173c8:	f7e9 f942 	bl	8000650 <__aeabi_dmul>
 80173cc:	a374      	add	r3, pc, #464	; (adr r3, 80175a0 <__ieee754_pow+0x6e8>)
 80173ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173d2:	f7e8 ff8b 	bl	80002ec <__adddf3>
 80173d6:	4622      	mov	r2, r4
 80173d8:	462b      	mov	r3, r5
 80173da:	f7e9 f939 	bl	8000650 <__aeabi_dmul>
 80173de:	a372      	add	r3, pc, #456	; (adr r3, 80175a8 <__ieee754_pow+0x6f0>)
 80173e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173e4:	f7e8 ff82 	bl	80002ec <__adddf3>
 80173e8:	4622      	mov	r2, r4
 80173ea:	462b      	mov	r3, r5
 80173ec:	f7e9 f930 	bl	8000650 <__aeabi_dmul>
 80173f0:	a36f      	add	r3, pc, #444	; (adr r3, 80175b0 <__ieee754_pow+0x6f8>)
 80173f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80173f6:	f7e8 ff79 	bl	80002ec <__adddf3>
 80173fa:	4622      	mov	r2, r4
 80173fc:	4606      	mov	r6, r0
 80173fe:	460f      	mov	r7, r1
 8017400:	462b      	mov	r3, r5
 8017402:	4620      	mov	r0, r4
 8017404:	4629      	mov	r1, r5
 8017406:	f7e9 f923 	bl	8000650 <__aeabi_dmul>
 801740a:	4602      	mov	r2, r0
 801740c:	460b      	mov	r3, r1
 801740e:	4630      	mov	r0, r6
 8017410:	4639      	mov	r1, r7
 8017412:	f7e9 f91d 	bl	8000650 <__aeabi_dmul>
 8017416:	4642      	mov	r2, r8
 8017418:	4604      	mov	r4, r0
 801741a:	460d      	mov	r5, r1
 801741c:	464b      	mov	r3, r9
 801741e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8017422:	f7e8 ff63 	bl	80002ec <__adddf3>
 8017426:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 801742a:	f7e9 f911 	bl	8000650 <__aeabi_dmul>
 801742e:	4622      	mov	r2, r4
 8017430:	462b      	mov	r3, r5
 8017432:	f7e8 ff5b 	bl	80002ec <__adddf3>
 8017436:	4642      	mov	r2, r8
 8017438:	4606      	mov	r6, r0
 801743a:	460f      	mov	r7, r1
 801743c:	464b      	mov	r3, r9
 801743e:	4640      	mov	r0, r8
 8017440:	4649      	mov	r1, r9
 8017442:	f7e9 f905 	bl	8000650 <__aeabi_dmul>
 8017446:	2200      	movs	r2, #0
 8017448:	4b68      	ldr	r3, [pc, #416]	; (80175ec <__ieee754_pow+0x734>)
 801744a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 801744e:	f7e8 ff4d 	bl	80002ec <__adddf3>
 8017452:	4632      	mov	r2, r6
 8017454:	463b      	mov	r3, r7
 8017456:	f7e8 ff49 	bl	80002ec <__adddf3>
 801745a:	9802      	ldr	r0, [sp, #8]
 801745c:	460d      	mov	r5, r1
 801745e:	4604      	mov	r4, r0
 8017460:	4602      	mov	r2, r0
 8017462:	460b      	mov	r3, r1
 8017464:	4640      	mov	r0, r8
 8017466:	4649      	mov	r1, r9
 8017468:	f7e9 f8f2 	bl	8000650 <__aeabi_dmul>
 801746c:	2200      	movs	r2, #0
 801746e:	4680      	mov	r8, r0
 8017470:	4689      	mov	r9, r1
 8017472:	4b5e      	ldr	r3, [pc, #376]	; (80175ec <__ieee754_pow+0x734>)
 8017474:	4620      	mov	r0, r4
 8017476:	4629      	mov	r1, r5
 8017478:	f7e8 ff36 	bl	80002e8 <__aeabi_dsub>
 801747c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8017480:	f7e8 ff32 	bl	80002e8 <__aeabi_dsub>
 8017484:	4602      	mov	r2, r0
 8017486:	460b      	mov	r3, r1
 8017488:	4630      	mov	r0, r6
 801748a:	4639      	mov	r1, r7
 801748c:	f7e8 ff2c 	bl	80002e8 <__aeabi_dsub>
 8017490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8017494:	f7e9 f8dc 	bl	8000650 <__aeabi_dmul>
 8017498:	4622      	mov	r2, r4
 801749a:	4606      	mov	r6, r0
 801749c:	460f      	mov	r7, r1
 801749e:	462b      	mov	r3, r5
 80174a0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80174a4:	f7e9 f8d4 	bl	8000650 <__aeabi_dmul>
 80174a8:	4602      	mov	r2, r0
 80174aa:	460b      	mov	r3, r1
 80174ac:	4630      	mov	r0, r6
 80174ae:	4639      	mov	r1, r7
 80174b0:	f7e8 ff1c 	bl	80002ec <__adddf3>
 80174b4:	4606      	mov	r6, r0
 80174b6:	460f      	mov	r7, r1
 80174b8:	4602      	mov	r2, r0
 80174ba:	460b      	mov	r3, r1
 80174bc:	4640      	mov	r0, r8
 80174be:	4649      	mov	r1, r9
 80174c0:	f7e8 ff14 	bl	80002ec <__adddf3>
 80174c4:	9802      	ldr	r0, [sp, #8]
 80174c6:	a33c      	add	r3, pc, #240	; (adr r3, 80175b8 <__ieee754_pow+0x700>)
 80174c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174cc:	4604      	mov	r4, r0
 80174ce:	460d      	mov	r5, r1
 80174d0:	f7e9 f8be 	bl	8000650 <__aeabi_dmul>
 80174d4:	4642      	mov	r2, r8
 80174d6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80174da:	464b      	mov	r3, r9
 80174dc:	4620      	mov	r0, r4
 80174de:	4629      	mov	r1, r5
 80174e0:	f7e8 ff02 	bl	80002e8 <__aeabi_dsub>
 80174e4:	4602      	mov	r2, r0
 80174e6:	460b      	mov	r3, r1
 80174e8:	4630      	mov	r0, r6
 80174ea:	4639      	mov	r1, r7
 80174ec:	f7e8 fefc 	bl	80002e8 <__aeabi_dsub>
 80174f0:	a333      	add	r3, pc, #204	; (adr r3, 80175c0 <__ieee754_pow+0x708>)
 80174f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80174f6:	f7e9 f8ab 	bl	8000650 <__aeabi_dmul>
 80174fa:	a333      	add	r3, pc, #204	; (adr r3, 80175c8 <__ieee754_pow+0x710>)
 80174fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017500:	4606      	mov	r6, r0
 8017502:	460f      	mov	r7, r1
 8017504:	4620      	mov	r0, r4
 8017506:	4629      	mov	r1, r5
 8017508:	f7e9 f8a2 	bl	8000650 <__aeabi_dmul>
 801750c:	4602      	mov	r2, r0
 801750e:	460b      	mov	r3, r1
 8017510:	4630      	mov	r0, r6
 8017512:	4639      	mov	r1, r7
 8017514:	f7e8 feea 	bl	80002ec <__adddf3>
 8017518:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801751a:	4b35      	ldr	r3, [pc, #212]	; (80175f0 <__ieee754_pow+0x738>)
 801751c:	4413      	add	r3, r2
 801751e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017522:	f7e8 fee3 	bl	80002ec <__adddf3>
 8017526:	4604      	mov	r4, r0
 8017528:	9807      	ldr	r0, [sp, #28]
 801752a:	460d      	mov	r5, r1
 801752c:	f7e9 f82a 	bl	8000584 <__aeabi_i2d>
 8017530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8017532:	4b30      	ldr	r3, [pc, #192]	; (80175f4 <__ieee754_pow+0x73c>)
 8017534:	4413      	add	r3, r2
 8017536:	e9d3 8900 	ldrd	r8, r9, [r3]
 801753a:	4606      	mov	r6, r0
 801753c:	460f      	mov	r7, r1
 801753e:	4622      	mov	r2, r4
 8017540:	462b      	mov	r3, r5
 8017542:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8017546:	f7e8 fed1 	bl	80002ec <__adddf3>
 801754a:	4642      	mov	r2, r8
 801754c:	464b      	mov	r3, r9
 801754e:	f7e8 fecd 	bl	80002ec <__adddf3>
 8017552:	4632      	mov	r2, r6
 8017554:	463b      	mov	r3, r7
 8017556:	f7e8 fec9 	bl	80002ec <__adddf3>
 801755a:	9802      	ldr	r0, [sp, #8]
 801755c:	4632      	mov	r2, r6
 801755e:	463b      	mov	r3, r7
 8017560:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8017564:	f7e8 fec0 	bl	80002e8 <__aeabi_dsub>
 8017568:	4642      	mov	r2, r8
 801756a:	464b      	mov	r3, r9
 801756c:	f7e8 febc 	bl	80002e8 <__aeabi_dsub>
 8017570:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8017574:	e607      	b.n	8017186 <__ieee754_pow+0x2ce>
 8017576:	f04f 0a01 	mov.w	sl, #1
 801757a:	e6a5      	b.n	80172c8 <__ieee754_pow+0x410>
 801757c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80175d0 <__ieee754_pow+0x718>
 8017580:	e613      	b.n	80171aa <__ieee754_pow+0x2f2>
 8017582:	bf00      	nop
 8017584:	f3af 8000 	nop.w
 8017588:	4a454eef 	.word	0x4a454eef
 801758c:	3fca7e28 	.word	0x3fca7e28
 8017590:	93c9db65 	.word	0x93c9db65
 8017594:	3fcd864a 	.word	0x3fcd864a
 8017598:	a91d4101 	.word	0xa91d4101
 801759c:	3fd17460 	.word	0x3fd17460
 80175a0:	518f264d 	.word	0x518f264d
 80175a4:	3fd55555 	.word	0x3fd55555
 80175a8:	db6fabff 	.word	0xdb6fabff
 80175ac:	3fdb6db6 	.word	0x3fdb6db6
 80175b0:	33333303 	.word	0x33333303
 80175b4:	3fe33333 	.word	0x3fe33333
 80175b8:	e0000000 	.word	0xe0000000
 80175bc:	3feec709 	.word	0x3feec709
 80175c0:	dc3a03fd 	.word	0xdc3a03fd
 80175c4:	3feec709 	.word	0x3feec709
 80175c8:	145b01f5 	.word	0x145b01f5
 80175cc:	be3e2fe0 	.word	0xbe3e2fe0
 80175d0:	00000000 	.word	0x00000000
 80175d4:	3ff00000 	.word	0x3ff00000
 80175d8:	43400000 	.word	0x43400000
 80175dc:	0003988e 	.word	0x0003988e
 80175e0:	000bb679 	.word	0x000bb679
 80175e4:	0801a698 	.word	0x0801a698
 80175e8:	3ff00000 	.word	0x3ff00000
 80175ec:	40080000 	.word	0x40080000
 80175f0:	0801a6b8 	.word	0x0801a6b8
 80175f4:	0801a6a8 	.word	0x0801a6a8
 80175f8:	a3b6      	add	r3, pc, #728	; (adr r3, 80178d4 <__ieee754_pow+0xa1c>)
 80175fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80175fe:	4640      	mov	r0, r8
 8017600:	4649      	mov	r1, r9
 8017602:	f7e8 fe73 	bl	80002ec <__adddf3>
 8017606:	4622      	mov	r2, r4
 8017608:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801760c:	462b      	mov	r3, r5
 801760e:	4630      	mov	r0, r6
 8017610:	4639      	mov	r1, r7
 8017612:	f7e8 fe69 	bl	80002e8 <__aeabi_dsub>
 8017616:	4602      	mov	r2, r0
 8017618:	460b      	mov	r3, r1
 801761a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801761e:	f7e9 faa7 	bl	8000b70 <__aeabi_dcmpgt>
 8017622:	2800      	cmp	r0, #0
 8017624:	f47f adfe 	bne.w	8017224 <__ieee754_pow+0x36c>
 8017628:	4aa5      	ldr	r2, [pc, #660]	; (80178c0 <__ieee754_pow+0xa08>)
 801762a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801762e:	4293      	cmp	r3, r2
 8017630:	f340 810c 	ble.w	801784c <__ieee754_pow+0x994>
 8017634:	151b      	asrs	r3, r3, #20
 8017636:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801763a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801763e:	fa4a f303 	asr.w	r3, sl, r3
 8017642:	445b      	add	r3, fp
 8017644:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8017648:	4e9e      	ldr	r6, [pc, #632]	; (80178c4 <__ieee754_pow+0xa0c>)
 801764a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801764e:	4116      	asrs	r6, r2
 8017650:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8017654:	2000      	movs	r0, #0
 8017656:	ea23 0106 	bic.w	r1, r3, r6
 801765a:	f1c2 0214 	rsb	r2, r2, #20
 801765e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8017662:	fa4a fa02 	asr.w	sl, sl, r2
 8017666:	f1bb 0f00 	cmp.w	fp, #0
 801766a:	4602      	mov	r2, r0
 801766c:	460b      	mov	r3, r1
 801766e:	4620      	mov	r0, r4
 8017670:	4629      	mov	r1, r5
 8017672:	bfb8      	it	lt
 8017674:	f1ca 0a00 	rsblt	sl, sl, #0
 8017678:	f7e8 fe36 	bl	80002e8 <__aeabi_dsub>
 801767c:	e9cd 0100 	strd	r0, r1, [sp]
 8017680:	4642      	mov	r2, r8
 8017682:	464b      	mov	r3, r9
 8017684:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017688:	f7e8 fe30 	bl	80002ec <__adddf3>
 801768c:	2000      	movs	r0, #0
 801768e:	a37a      	add	r3, pc, #488	; (adr r3, 8017878 <__ieee754_pow+0x9c0>)
 8017690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017694:	4604      	mov	r4, r0
 8017696:	460d      	mov	r5, r1
 8017698:	f7e8 ffda 	bl	8000650 <__aeabi_dmul>
 801769c:	e9dd 2300 	ldrd	r2, r3, [sp]
 80176a0:	4606      	mov	r6, r0
 80176a2:	460f      	mov	r7, r1
 80176a4:	4620      	mov	r0, r4
 80176a6:	4629      	mov	r1, r5
 80176a8:	f7e8 fe1e 	bl	80002e8 <__aeabi_dsub>
 80176ac:	4602      	mov	r2, r0
 80176ae:	460b      	mov	r3, r1
 80176b0:	4640      	mov	r0, r8
 80176b2:	4649      	mov	r1, r9
 80176b4:	f7e8 fe18 	bl	80002e8 <__aeabi_dsub>
 80176b8:	a371      	add	r3, pc, #452	; (adr r3, 8017880 <__ieee754_pow+0x9c8>)
 80176ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176be:	f7e8 ffc7 	bl	8000650 <__aeabi_dmul>
 80176c2:	a371      	add	r3, pc, #452	; (adr r3, 8017888 <__ieee754_pow+0x9d0>)
 80176c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80176c8:	4680      	mov	r8, r0
 80176ca:	4689      	mov	r9, r1
 80176cc:	4620      	mov	r0, r4
 80176ce:	4629      	mov	r1, r5
 80176d0:	f7e8 ffbe 	bl	8000650 <__aeabi_dmul>
 80176d4:	4602      	mov	r2, r0
 80176d6:	460b      	mov	r3, r1
 80176d8:	4640      	mov	r0, r8
 80176da:	4649      	mov	r1, r9
 80176dc:	f7e8 fe06 	bl	80002ec <__adddf3>
 80176e0:	4604      	mov	r4, r0
 80176e2:	460d      	mov	r5, r1
 80176e4:	4602      	mov	r2, r0
 80176e6:	460b      	mov	r3, r1
 80176e8:	4630      	mov	r0, r6
 80176ea:	4639      	mov	r1, r7
 80176ec:	f7e8 fdfe 	bl	80002ec <__adddf3>
 80176f0:	4632      	mov	r2, r6
 80176f2:	463b      	mov	r3, r7
 80176f4:	4680      	mov	r8, r0
 80176f6:	4689      	mov	r9, r1
 80176f8:	f7e8 fdf6 	bl	80002e8 <__aeabi_dsub>
 80176fc:	4602      	mov	r2, r0
 80176fe:	460b      	mov	r3, r1
 8017700:	4620      	mov	r0, r4
 8017702:	4629      	mov	r1, r5
 8017704:	f7e8 fdf0 	bl	80002e8 <__aeabi_dsub>
 8017708:	4642      	mov	r2, r8
 801770a:	4606      	mov	r6, r0
 801770c:	460f      	mov	r7, r1
 801770e:	464b      	mov	r3, r9
 8017710:	4640      	mov	r0, r8
 8017712:	4649      	mov	r1, r9
 8017714:	f7e8 ff9c 	bl	8000650 <__aeabi_dmul>
 8017718:	a35d      	add	r3, pc, #372	; (adr r3, 8017890 <__ieee754_pow+0x9d8>)
 801771a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801771e:	4604      	mov	r4, r0
 8017720:	460d      	mov	r5, r1
 8017722:	f7e8 ff95 	bl	8000650 <__aeabi_dmul>
 8017726:	a35c      	add	r3, pc, #368	; (adr r3, 8017898 <__ieee754_pow+0x9e0>)
 8017728:	e9d3 2300 	ldrd	r2, r3, [r3]
 801772c:	f7e8 fddc 	bl	80002e8 <__aeabi_dsub>
 8017730:	4622      	mov	r2, r4
 8017732:	462b      	mov	r3, r5
 8017734:	f7e8 ff8c 	bl	8000650 <__aeabi_dmul>
 8017738:	a359      	add	r3, pc, #356	; (adr r3, 80178a0 <__ieee754_pow+0x9e8>)
 801773a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801773e:	f7e8 fdd5 	bl	80002ec <__adddf3>
 8017742:	4622      	mov	r2, r4
 8017744:	462b      	mov	r3, r5
 8017746:	f7e8 ff83 	bl	8000650 <__aeabi_dmul>
 801774a:	a357      	add	r3, pc, #348	; (adr r3, 80178a8 <__ieee754_pow+0x9f0>)
 801774c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017750:	f7e8 fdca 	bl	80002e8 <__aeabi_dsub>
 8017754:	4622      	mov	r2, r4
 8017756:	462b      	mov	r3, r5
 8017758:	f7e8 ff7a 	bl	8000650 <__aeabi_dmul>
 801775c:	a354      	add	r3, pc, #336	; (adr r3, 80178b0 <__ieee754_pow+0x9f8>)
 801775e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017762:	f7e8 fdc3 	bl	80002ec <__adddf3>
 8017766:	4622      	mov	r2, r4
 8017768:	462b      	mov	r3, r5
 801776a:	f7e8 ff71 	bl	8000650 <__aeabi_dmul>
 801776e:	4602      	mov	r2, r0
 8017770:	460b      	mov	r3, r1
 8017772:	4640      	mov	r0, r8
 8017774:	4649      	mov	r1, r9
 8017776:	f7e8 fdb7 	bl	80002e8 <__aeabi_dsub>
 801777a:	4604      	mov	r4, r0
 801777c:	460d      	mov	r5, r1
 801777e:	4602      	mov	r2, r0
 8017780:	460b      	mov	r3, r1
 8017782:	4640      	mov	r0, r8
 8017784:	4649      	mov	r1, r9
 8017786:	f7e8 ff63 	bl	8000650 <__aeabi_dmul>
 801778a:	2200      	movs	r2, #0
 801778c:	e9cd 0100 	strd	r0, r1, [sp]
 8017790:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8017794:	4620      	mov	r0, r4
 8017796:	4629      	mov	r1, r5
 8017798:	f7e8 fda6 	bl	80002e8 <__aeabi_dsub>
 801779c:	4602      	mov	r2, r0
 801779e:	460b      	mov	r3, r1
 80177a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80177a4:	f7e9 f87e 	bl	80008a4 <__aeabi_ddiv>
 80177a8:	4632      	mov	r2, r6
 80177aa:	4604      	mov	r4, r0
 80177ac:	460d      	mov	r5, r1
 80177ae:	463b      	mov	r3, r7
 80177b0:	4640      	mov	r0, r8
 80177b2:	4649      	mov	r1, r9
 80177b4:	f7e8 ff4c 	bl	8000650 <__aeabi_dmul>
 80177b8:	4632      	mov	r2, r6
 80177ba:	463b      	mov	r3, r7
 80177bc:	f7e8 fd96 	bl	80002ec <__adddf3>
 80177c0:	4602      	mov	r2, r0
 80177c2:	460b      	mov	r3, r1
 80177c4:	4620      	mov	r0, r4
 80177c6:	4629      	mov	r1, r5
 80177c8:	f7e8 fd8e 	bl	80002e8 <__aeabi_dsub>
 80177cc:	4642      	mov	r2, r8
 80177ce:	464b      	mov	r3, r9
 80177d0:	f7e8 fd8a 	bl	80002e8 <__aeabi_dsub>
 80177d4:	4602      	mov	r2, r0
 80177d6:	460b      	mov	r3, r1
 80177d8:	2000      	movs	r0, #0
 80177da:	493b      	ldr	r1, [pc, #236]	; (80178c8 <__ieee754_pow+0xa10>)
 80177dc:	f7e8 fd84 	bl	80002e8 <__aeabi_dsub>
 80177e0:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 80177e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80177e8:	4602      	mov	r2, r0
 80177ea:	460b      	mov	r3, r1
 80177ec:	da31      	bge.n	8017852 <__ieee754_pow+0x99a>
 80177ee:	4650      	mov	r0, sl
 80177f0:	ec43 2b10 	vmov	d0, r2, r3
 80177f4:	f000 f9c4 	bl	8017b80 <scalbn>
 80177f8:	ec51 0b10 	vmov	r0, r1, d0
 80177fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8017800:	f7ff bbf1 	b.w	8016fe6 <__ieee754_pow+0x12e>
 8017804:	4b31      	ldr	r3, [pc, #196]	; (80178cc <__ieee754_pow+0xa14>)
 8017806:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801780a:	429e      	cmp	r6, r3
 801780c:	f77f af0c 	ble.w	8017628 <__ieee754_pow+0x770>
 8017810:	4b2f      	ldr	r3, [pc, #188]	; (80178d0 <__ieee754_pow+0xa18>)
 8017812:	440b      	add	r3, r1
 8017814:	4303      	orrs	r3, r0
 8017816:	d00b      	beq.n	8017830 <__ieee754_pow+0x978>
 8017818:	a327      	add	r3, pc, #156	; (adr r3, 80178b8 <__ieee754_pow+0xa00>)
 801781a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801781e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8017822:	f7e8 ff15 	bl	8000650 <__aeabi_dmul>
 8017826:	a324      	add	r3, pc, #144	; (adr r3, 80178b8 <__ieee754_pow+0xa00>)
 8017828:	e9d3 2300 	ldrd	r2, r3, [r3]
 801782c:	f7ff bbdb 	b.w	8016fe6 <__ieee754_pow+0x12e>
 8017830:	4622      	mov	r2, r4
 8017832:	462b      	mov	r3, r5
 8017834:	f7e8 fd58 	bl	80002e8 <__aeabi_dsub>
 8017838:	4602      	mov	r2, r0
 801783a:	460b      	mov	r3, r1
 801783c:	4640      	mov	r0, r8
 801783e:	4649      	mov	r1, r9
 8017840:	f7e9 f982 	bl	8000b48 <__aeabi_dcmple>
 8017844:	2800      	cmp	r0, #0
 8017846:	f43f aeef 	beq.w	8017628 <__ieee754_pow+0x770>
 801784a:	e7e5      	b.n	8017818 <__ieee754_pow+0x960>
 801784c:	f04f 0a00 	mov.w	sl, #0
 8017850:	e716      	b.n	8017680 <__ieee754_pow+0x7c8>
 8017852:	4621      	mov	r1, r4
 8017854:	e7d2      	b.n	80177fc <__ieee754_pow+0x944>
 8017856:	2000      	movs	r0, #0
 8017858:	491b      	ldr	r1, [pc, #108]	; (80178c8 <__ieee754_pow+0xa10>)
 801785a:	f7ff bb8d 	b.w	8016f78 <__ieee754_pow+0xc0>
 801785e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017862:	f7ff bb89 	b.w	8016f78 <__ieee754_pow+0xc0>
 8017866:	4630      	mov	r0, r6
 8017868:	4639      	mov	r1, r7
 801786a:	f7ff bb85 	b.w	8016f78 <__ieee754_pow+0xc0>
 801786e:	4693      	mov	fp, r2
 8017870:	f7ff bb96 	b.w	8016fa0 <__ieee754_pow+0xe8>
 8017874:	f3af 8000 	nop.w
 8017878:	00000000 	.word	0x00000000
 801787c:	3fe62e43 	.word	0x3fe62e43
 8017880:	fefa39ef 	.word	0xfefa39ef
 8017884:	3fe62e42 	.word	0x3fe62e42
 8017888:	0ca86c39 	.word	0x0ca86c39
 801788c:	be205c61 	.word	0xbe205c61
 8017890:	72bea4d0 	.word	0x72bea4d0
 8017894:	3e663769 	.word	0x3e663769
 8017898:	c5d26bf1 	.word	0xc5d26bf1
 801789c:	3ebbbd41 	.word	0x3ebbbd41
 80178a0:	af25de2c 	.word	0xaf25de2c
 80178a4:	3f11566a 	.word	0x3f11566a
 80178a8:	16bebd93 	.word	0x16bebd93
 80178ac:	3f66c16c 	.word	0x3f66c16c
 80178b0:	5555553e 	.word	0x5555553e
 80178b4:	3fc55555 	.word	0x3fc55555
 80178b8:	c2f8f359 	.word	0xc2f8f359
 80178bc:	01a56e1f 	.word	0x01a56e1f
 80178c0:	3fe00000 	.word	0x3fe00000
 80178c4:	000fffff 	.word	0x000fffff
 80178c8:	3ff00000 	.word	0x3ff00000
 80178cc:	4090cbff 	.word	0x4090cbff
 80178d0:	3f6f3400 	.word	0x3f6f3400
 80178d4:	652b82fe 	.word	0x652b82fe
 80178d8:	3c971547 	.word	0x3c971547

080178dc <__ieee754_sqrt>:
 80178dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80178e0:	ec55 4b10 	vmov	r4, r5, d0
 80178e4:	4e54      	ldr	r6, [pc, #336]	; (8017a38 <__ieee754_sqrt+0x15c>)
 80178e6:	43ae      	bics	r6, r5
 80178e8:	ee10 0a10 	vmov	r0, s0
 80178ec:	462b      	mov	r3, r5
 80178ee:	462a      	mov	r2, r5
 80178f0:	4621      	mov	r1, r4
 80178f2:	d113      	bne.n	801791c <__ieee754_sqrt+0x40>
 80178f4:	ee10 2a10 	vmov	r2, s0
 80178f8:	462b      	mov	r3, r5
 80178fa:	ee10 0a10 	vmov	r0, s0
 80178fe:	4629      	mov	r1, r5
 8017900:	f7e8 fea6 	bl	8000650 <__aeabi_dmul>
 8017904:	4602      	mov	r2, r0
 8017906:	460b      	mov	r3, r1
 8017908:	4620      	mov	r0, r4
 801790a:	4629      	mov	r1, r5
 801790c:	f7e8 fcee 	bl	80002ec <__adddf3>
 8017910:	4604      	mov	r4, r0
 8017912:	460d      	mov	r5, r1
 8017914:	ec45 4b10 	vmov	d0, r4, r5
 8017918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801791c:	2d00      	cmp	r5, #0
 801791e:	dc10      	bgt.n	8017942 <__ieee754_sqrt+0x66>
 8017920:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8017924:	4330      	orrs	r0, r6
 8017926:	d0f5      	beq.n	8017914 <__ieee754_sqrt+0x38>
 8017928:	b15d      	cbz	r5, 8017942 <__ieee754_sqrt+0x66>
 801792a:	ee10 2a10 	vmov	r2, s0
 801792e:	462b      	mov	r3, r5
 8017930:	4620      	mov	r0, r4
 8017932:	4629      	mov	r1, r5
 8017934:	f7e8 fcd8 	bl	80002e8 <__aeabi_dsub>
 8017938:	4602      	mov	r2, r0
 801793a:	460b      	mov	r3, r1
 801793c:	f7e8 ffb2 	bl	80008a4 <__aeabi_ddiv>
 8017940:	e7e6      	b.n	8017910 <__ieee754_sqrt+0x34>
 8017942:	151b      	asrs	r3, r3, #20
 8017944:	d10c      	bne.n	8017960 <__ieee754_sqrt+0x84>
 8017946:	2a00      	cmp	r2, #0
 8017948:	d06d      	beq.n	8017a26 <__ieee754_sqrt+0x14a>
 801794a:	2000      	movs	r0, #0
 801794c:	02d6      	lsls	r6, r2, #11
 801794e:	d56e      	bpl.n	8017a2e <__ieee754_sqrt+0x152>
 8017950:	1e44      	subs	r4, r0, #1
 8017952:	1b1b      	subs	r3, r3, r4
 8017954:	f1c0 0420 	rsb	r4, r0, #32
 8017958:	fa21 f404 	lsr.w	r4, r1, r4
 801795c:	4322      	orrs	r2, r4
 801795e:	4081      	lsls	r1, r0
 8017960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8017964:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8017968:	07dd      	lsls	r5, r3, #31
 801796a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 801796e:	bf42      	ittt	mi
 8017970:	0052      	lslmi	r2, r2, #1
 8017972:	eb02 72d1 	addmi.w	r2, r2, r1, lsr #31
 8017976:	0049      	lslmi	r1, r1, #1
 8017978:	1058      	asrs	r0, r3, #1
 801797a:	2500      	movs	r5, #0
 801797c:	eb02 73d1 	add.w	r3, r2, r1, lsr #31
 8017980:	441a      	add	r2, r3
 8017982:	0049      	lsls	r1, r1, #1
 8017984:	2316      	movs	r3, #22
 8017986:	462c      	mov	r4, r5
 8017988:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 801798c:	19a7      	adds	r7, r4, r6
 801798e:	4297      	cmp	r7, r2
 8017990:	bfde      	ittt	le
 8017992:	1bd2      	suble	r2, r2, r7
 8017994:	19bc      	addle	r4, r7, r6
 8017996:	19ad      	addle	r5, r5, r6
 8017998:	0052      	lsls	r2, r2, #1
 801799a:	3b01      	subs	r3, #1
 801799c:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80179a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80179a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80179a8:	d1f0      	bne.n	801798c <__ieee754_sqrt+0xb0>
 80179aa:	f04f 0e20 	mov.w	lr, #32
 80179ae:	469c      	mov	ip, r3
 80179b0:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80179b4:	42a2      	cmp	r2, r4
 80179b6:	eb06 070c 	add.w	r7, r6, ip
 80179ba:	dc02      	bgt.n	80179c2 <__ieee754_sqrt+0xe6>
 80179bc:	d112      	bne.n	80179e4 <__ieee754_sqrt+0x108>
 80179be:	428f      	cmp	r7, r1
 80179c0:	d810      	bhi.n	80179e4 <__ieee754_sqrt+0x108>
 80179c2:	2f00      	cmp	r7, #0
 80179c4:	eb07 0c06 	add.w	ip, r7, r6
 80179c8:	da34      	bge.n	8017a34 <__ieee754_sqrt+0x158>
 80179ca:	f1bc 0f00 	cmp.w	ip, #0
 80179ce:	db31      	blt.n	8017a34 <__ieee754_sqrt+0x158>
 80179d0:	f104 0801 	add.w	r8, r4, #1
 80179d4:	1b12      	subs	r2, r2, r4
 80179d6:	428f      	cmp	r7, r1
 80179d8:	bf88      	it	hi
 80179da:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80179de:	1bc9      	subs	r1, r1, r7
 80179e0:	4433      	add	r3, r6
 80179e2:	4644      	mov	r4, r8
 80179e4:	eb02 77d1 	add.w	r7, r2, r1, lsr #31
 80179e8:	f1be 0e01 	subs.w	lr, lr, #1
 80179ec:	443a      	add	r2, r7
 80179ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80179f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80179f6:	d1dd      	bne.n	80179b4 <__ieee754_sqrt+0xd8>
 80179f8:	430a      	orrs	r2, r1
 80179fa:	d006      	beq.n	8017a0a <__ieee754_sqrt+0x12e>
 80179fc:	1c5c      	adds	r4, r3, #1
 80179fe:	bf13      	iteet	ne
 8017a00:	3301      	addne	r3, #1
 8017a02:	3501      	addeq	r5, #1
 8017a04:	4673      	moveq	r3, lr
 8017a06:	f023 0301 	bicne.w	r3, r3, #1
 8017a0a:	106a      	asrs	r2, r5, #1
 8017a0c:	085b      	lsrs	r3, r3, #1
 8017a0e:	07e9      	lsls	r1, r5, #31
 8017a10:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8017a14:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8017a18:	bf48      	it	mi
 8017a1a:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8017a1e:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8017a22:	461c      	mov	r4, r3
 8017a24:	e776      	b.n	8017914 <__ieee754_sqrt+0x38>
 8017a26:	0aca      	lsrs	r2, r1, #11
 8017a28:	3b15      	subs	r3, #21
 8017a2a:	0549      	lsls	r1, r1, #21
 8017a2c:	e78b      	b.n	8017946 <__ieee754_sqrt+0x6a>
 8017a2e:	0052      	lsls	r2, r2, #1
 8017a30:	3001      	adds	r0, #1
 8017a32:	e78b      	b.n	801794c <__ieee754_sqrt+0x70>
 8017a34:	46a0      	mov	r8, r4
 8017a36:	e7cd      	b.n	80179d4 <__ieee754_sqrt+0xf8>
 8017a38:	7ff00000 	.word	0x7ff00000

08017a3c <fabs>:
 8017a3c:	ec53 2b10 	vmov	r2, r3, d0
 8017a40:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8017a44:	ec43 2b10 	vmov	d0, r2, r3
 8017a48:	4770      	bx	lr

08017a4a <finite>:
 8017a4a:	ee10 3a90 	vmov	r3, s1
 8017a4e:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8017a52:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8017a56:	0fc0      	lsrs	r0, r0, #31
 8017a58:	4770      	bx	lr

08017a5a <matherr>:
 8017a5a:	2000      	movs	r0, #0
 8017a5c:	4770      	bx	lr
	...

08017a60 <nan>:
 8017a60:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8017a68 <nan+0x8>
 8017a64:	4770      	bx	lr
 8017a66:	bf00      	nop
 8017a68:	00000000 	.word	0x00000000
 8017a6c:	7ff80000 	.word	0x7ff80000

08017a70 <rint>:
 8017a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017a72:	ec51 0b10 	vmov	r0, r1, d0
 8017a76:	f3c1 540a 	ubfx	r4, r1, #20, #11
 8017a7a:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 8017a7e:	2e13      	cmp	r6, #19
 8017a80:	ee10 7a10 	vmov	r7, s0
 8017a84:	460b      	mov	r3, r1
 8017a86:	4602      	mov	r2, r0
 8017a88:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8017a8c:	dc58      	bgt.n	8017b40 <rint+0xd0>
 8017a8e:	2e00      	cmp	r6, #0
 8017a90:	da2b      	bge.n	8017aea <rint+0x7a>
 8017a92:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8017a96:	4302      	orrs	r2, r0
 8017a98:	d023      	beq.n	8017ae2 <rint+0x72>
 8017a9a:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8017a9e:	4302      	orrs	r2, r0
 8017aa0:	4251      	negs	r1, r2
 8017aa2:	4311      	orrs	r1, r2
 8017aa4:	0b09      	lsrs	r1, r1, #12
 8017aa6:	0c5b      	lsrs	r3, r3, #17
 8017aa8:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 8017aac:	045b      	lsls	r3, r3, #17
 8017aae:	ea41 0703 	orr.w	r7, r1, r3
 8017ab2:	4b31      	ldr	r3, [pc, #196]	; (8017b78 <rint+0x108>)
 8017ab4:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017ab8:	4639      	mov	r1, r7
 8017aba:	e9d3 6700 	ldrd	r6, r7, [r3]
 8017abe:	ee10 0a10 	vmov	r0, s0
 8017ac2:	4632      	mov	r2, r6
 8017ac4:	463b      	mov	r3, r7
 8017ac6:	f7e8 fc11 	bl	80002ec <__adddf3>
 8017aca:	e9cd 0100 	strd	r0, r1, [sp]
 8017ace:	463b      	mov	r3, r7
 8017ad0:	4632      	mov	r2, r6
 8017ad2:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017ad6:	f7e8 fc07 	bl	80002e8 <__aeabi_dsub>
 8017ada:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8017ade:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 8017ae2:	ec41 0b10 	vmov	d0, r0, r1
 8017ae6:	b003      	add	sp, #12
 8017ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017aea:	4c24      	ldr	r4, [pc, #144]	; (8017b7c <rint+0x10c>)
 8017aec:	4134      	asrs	r4, r6
 8017aee:	ea01 0704 	and.w	r7, r1, r4
 8017af2:	4307      	orrs	r7, r0
 8017af4:	d0f5      	beq.n	8017ae2 <rint+0x72>
 8017af6:	0861      	lsrs	r1, r4, #1
 8017af8:	ea03 0001 	and.w	r0, r3, r1
 8017afc:	4302      	orrs	r2, r0
 8017afe:	d00b      	beq.n	8017b18 <rint+0xa8>
 8017b00:	ea23 0101 	bic.w	r1, r3, r1
 8017b04:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8017b08:	2e13      	cmp	r6, #19
 8017b0a:	fa43 f306 	asr.w	r3, r3, r6
 8017b0e:	bf0c      	ite	eq
 8017b10:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 8017b14:	2200      	movne	r2, #0
 8017b16:	430b      	orrs	r3, r1
 8017b18:	4619      	mov	r1, r3
 8017b1a:	4b17      	ldr	r3, [pc, #92]	; (8017b78 <rint+0x108>)
 8017b1c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8017b20:	e9d5 4500 	ldrd	r4, r5, [r5]
 8017b24:	4610      	mov	r0, r2
 8017b26:	462b      	mov	r3, r5
 8017b28:	4622      	mov	r2, r4
 8017b2a:	f7e8 fbdf 	bl	80002ec <__adddf3>
 8017b2e:	e9cd 0100 	strd	r0, r1, [sp]
 8017b32:	4622      	mov	r2, r4
 8017b34:	462b      	mov	r3, r5
 8017b36:	e9dd 0100 	ldrd	r0, r1, [sp]
 8017b3a:	f7e8 fbd5 	bl	80002e8 <__aeabi_dsub>
 8017b3e:	e7d0      	b.n	8017ae2 <rint+0x72>
 8017b40:	2e33      	cmp	r6, #51	; 0x33
 8017b42:	dd08      	ble.n	8017b56 <rint+0xe6>
 8017b44:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8017b48:	d1cb      	bne.n	8017ae2 <rint+0x72>
 8017b4a:	ee10 2a10 	vmov	r2, s0
 8017b4e:	460b      	mov	r3, r1
 8017b50:	f7e8 fbcc 	bl	80002ec <__adddf3>
 8017b54:	e7c5      	b.n	8017ae2 <rint+0x72>
 8017b56:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 8017b5a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8017b5e:	40f4      	lsrs	r4, r6
 8017b60:	4220      	tst	r0, r4
 8017b62:	d0be      	beq.n	8017ae2 <rint+0x72>
 8017b64:	0861      	lsrs	r1, r4, #1
 8017b66:	420f      	tst	r7, r1
 8017b68:	bf1f      	itttt	ne
 8017b6a:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 8017b6e:	ea27 0101 	bicne.w	r1, r7, r1
 8017b72:	4132      	asrne	r2, r6
 8017b74:	430a      	orrne	r2, r1
 8017b76:	e7cf      	b.n	8017b18 <rint+0xa8>
 8017b78:	0801a6c8 	.word	0x0801a6c8
 8017b7c:	000fffff 	.word	0x000fffff

08017b80 <scalbn>:
 8017b80:	b570      	push	{r4, r5, r6, lr}
 8017b82:	ec55 4b10 	vmov	r4, r5, d0
 8017b86:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8017b8a:	4606      	mov	r6, r0
 8017b8c:	462b      	mov	r3, r5
 8017b8e:	b9b2      	cbnz	r2, 8017bbe <scalbn+0x3e>
 8017b90:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8017b94:	4323      	orrs	r3, r4
 8017b96:	d03c      	beq.n	8017c12 <scalbn+0x92>
 8017b98:	2200      	movs	r2, #0
 8017b9a:	4b33      	ldr	r3, [pc, #204]	; (8017c68 <scalbn+0xe8>)
 8017b9c:	4629      	mov	r1, r5
 8017b9e:	ee10 0a10 	vmov	r0, s0
 8017ba2:	f7e8 fd55 	bl	8000650 <__aeabi_dmul>
 8017ba6:	4a31      	ldr	r2, [pc, #196]	; (8017c6c <scalbn+0xec>)
 8017ba8:	4296      	cmp	r6, r2
 8017baa:	4604      	mov	r4, r0
 8017bac:	460d      	mov	r5, r1
 8017bae:	460b      	mov	r3, r1
 8017bb0:	da13      	bge.n	8017bda <scalbn+0x5a>
 8017bb2:	a329      	add	r3, pc, #164	; (adr r3, 8017c58 <scalbn+0xd8>)
 8017bb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bb8:	f7e8 fd4a 	bl	8000650 <__aeabi_dmul>
 8017bbc:	e00a      	b.n	8017bd4 <scalbn+0x54>
 8017bbe:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8017bc2:	428a      	cmp	r2, r1
 8017bc4:	d10c      	bne.n	8017be0 <scalbn+0x60>
 8017bc6:	ee10 2a10 	vmov	r2, s0
 8017bca:	462b      	mov	r3, r5
 8017bcc:	4620      	mov	r0, r4
 8017bce:	4629      	mov	r1, r5
 8017bd0:	f7e8 fb8c 	bl	80002ec <__adddf3>
 8017bd4:	4604      	mov	r4, r0
 8017bd6:	460d      	mov	r5, r1
 8017bd8:	e01b      	b.n	8017c12 <scalbn+0x92>
 8017bda:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8017bde:	3a36      	subs	r2, #54	; 0x36
 8017be0:	4432      	add	r2, r6
 8017be2:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8017be6:	428a      	cmp	r2, r1
 8017be8:	dd0b      	ble.n	8017c02 <scalbn+0x82>
 8017bea:	ec45 4b11 	vmov	d1, r4, r5
 8017bee:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 8017c60 <scalbn+0xe0>
 8017bf2:	f000 f83f 	bl	8017c74 <copysign>
 8017bf6:	a31a      	add	r3, pc, #104	; (adr r3, 8017c60 <scalbn+0xe0>)
 8017bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017bfc:	ec51 0b10 	vmov	r0, r1, d0
 8017c00:	e7da      	b.n	8017bb8 <scalbn+0x38>
 8017c02:	2a00      	cmp	r2, #0
 8017c04:	dd08      	ble.n	8017c18 <scalbn+0x98>
 8017c06:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017c0a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017c0e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017c12:	ec45 4b10 	vmov	d0, r4, r5
 8017c16:	bd70      	pop	{r4, r5, r6, pc}
 8017c18:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8017c1c:	da0d      	bge.n	8017c3a <scalbn+0xba>
 8017c1e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8017c22:	429e      	cmp	r6, r3
 8017c24:	ec45 4b11 	vmov	d1, r4, r5
 8017c28:	dce1      	bgt.n	8017bee <scalbn+0x6e>
 8017c2a:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 8017c58 <scalbn+0xd8>
 8017c2e:	f000 f821 	bl	8017c74 <copysign>
 8017c32:	a309      	add	r3, pc, #36	; (adr r3, 8017c58 <scalbn+0xd8>)
 8017c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8017c38:	e7e0      	b.n	8017bfc <scalbn+0x7c>
 8017c3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8017c3e:	3236      	adds	r2, #54	; 0x36
 8017c40:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8017c44:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8017c48:	4620      	mov	r0, r4
 8017c4a:	4629      	mov	r1, r5
 8017c4c:	2200      	movs	r2, #0
 8017c4e:	4b08      	ldr	r3, [pc, #32]	; (8017c70 <scalbn+0xf0>)
 8017c50:	e7b2      	b.n	8017bb8 <scalbn+0x38>
 8017c52:	bf00      	nop
 8017c54:	f3af 8000 	nop.w
 8017c58:	c2f8f359 	.word	0xc2f8f359
 8017c5c:	01a56e1f 	.word	0x01a56e1f
 8017c60:	8800759c 	.word	0x8800759c
 8017c64:	7e37e43c 	.word	0x7e37e43c
 8017c68:	43500000 	.word	0x43500000
 8017c6c:	ffff3cb0 	.word	0xffff3cb0
 8017c70:	3c900000 	.word	0x3c900000

08017c74 <copysign>:
 8017c74:	ec53 2b10 	vmov	r2, r3, d0
 8017c78:	ee11 0a90 	vmov	r0, s3
 8017c7c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017c80:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8017c84:	ea41 0300 	orr.w	r3, r1, r0
 8017c88:	ec43 2b10 	vmov	d0, r2, r3
 8017c8c:	4770      	bx	lr
	...

08017c90 <__errno>:
 8017c90:	4b01      	ldr	r3, [pc, #4]	; (8017c98 <__errno+0x8>)
 8017c92:	6818      	ldr	r0, [r3, #0]
 8017c94:	4770      	bx	lr
 8017c96:	bf00      	nop
 8017c98:	20000140 	.word	0x20000140

08017c9c <_init>:
 8017c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c9e:	bf00      	nop
 8017ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017ca2:	bc08      	pop	{r3}
 8017ca4:	469e      	mov	lr, r3
 8017ca6:	4770      	bx	lr

08017ca8 <_fini>:
 8017ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017caa:	bf00      	nop
 8017cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8017cae:	bc08      	pop	{r3}
 8017cb0:	469e      	mov	lr, r3
 8017cb2:	4770      	bx	lr
